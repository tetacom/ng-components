{
    "pipes": [
        {
            "name": "NumberPipe",
            "id": "pipe-NumberPipe-45fcb70d893616bd1416630d55cdab0d",
            "file": "projects/components/src/pipe/number-pipe/number.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimalLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        },
                        {
                            "name": "chunkDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "decimalDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'.'"
                        },
                        {
                            "name": "chunkLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimalLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chunkDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimalDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'.'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chunkLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tetaNumber",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\nimport {formatNumber} from '../util/number-helper';\n\n@Pipe({\n  name: 'tetaNumber'\n})\nexport class NumberPipe implements PipeTransform {\n  transform(value: number,\n            decimalLength: number = 2,\n            chunkDelimiter: string = '',\n            decimalDelimiter: string = '.',\n            chunkLength: number = 3): string {\n    if (value === null || value === undefined) {\n      return '';\n    }\n    if (value !== value / 1) {\n      return value.toString();\n    }\n    value /= 1;\n    return formatNumber(value,\n      decimalLength,\n      chunkDelimiter,\n      decimalDelimiter,\n      chunkLength);\n  }\n}\n"
        },
        {
            "name": "PrependZeroPipe",
            "id": "pipe-PrependZeroPipe-3794eddebcfb4da0de8d0663e7a2fc7e",
            "file": "projects/components/src/pipe/prepend-zero/prepend-zero.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tetaPrependZero",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\nimport {prependZero} from '../util/number-helper';\n\n@Pipe({\n  name: 'tetaPrependZero'\n})\nexport class PrependZeroPipe implements PipeTransform {\n  transform(value: number, length: number): string {\n    if (value === null || value === undefined) {\n      return '';\n    }\n    value /= 1;\n    return prependZero(value, length);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
<<<<<<< Updated upstream
=======
            "name": "AxisOptions",
            "id": "interface-AxisOptions-29e82128178d0542cea62c80ee3007a5",
            "file": "projects/chart/src/chart/model/axis-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AxisType } from './axis-type';\n\nexport interface AxisOptions {\n  title?: string;\n  min?: number;\n  max?: number;\n  visible: boolean;\n  tickFormat?: (d: any) => string;\n  type?: AxisType;\n  zoom?: boolean;\n  inverted?: boolean;\n  negative?: boolean;\n  opposite?: boolean;\n}\n",
            "properties": [
                {
                    "name": "inverted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "negative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "opposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tickFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisType",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
>>>>>>> Stashed changes
            "name": "BarPoint",
            "id": "interface-BarPoint-baf569333cfaabd654fc88c5610b0e9e",
            "file": "projects/components/src/component/chart/model/point/bar-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\n\nexport interface BarPoint extends BasePoint {\n  id: number;\n  label: string;\n  visible: boolean;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "Base3dPoint",
            "id": "interface-Base3dPoint-a966a86941b3e0d03917ecbc5b4773de",
            "file": "projects/components/src/component/chart-3d/model/base-3d-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Base3dPoint {\n  x: number;\n  y: number;\n  z: number;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "z",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "BasePoint",
<<<<<<< Updated upstream
            "id": "interface-BasePoint-d437aec9f558de61f154d2a2f105dd7b",
=======
            "id": "interface-BasePoint-380a3f98b9ca3b71a8f49aa218974ec8",
            "file": "projects/chart/src/chart/model/base-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasePoint {\n  x: number;\n  x1?: number;\n  y: number;\n  y1?: number;\n  color?: string | number;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "BasePoint",
            "id": "interface-BasePoint-380a3f98b9ca3b71a8f49aa218974ec8-1",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/chart/model/point/base-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasePoint {\n  x: number;\n  x1?: number;\n  y: number;\n  y1?: number;\n  color?: string | number;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ContourPoint",
            "id": "interface-ContourPoint-68c8bafc65bc70a80bbe69b171227b29",
            "file": "projects/components/src/component/chart/model/point/contour-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\n\nexport interface ContourPoint extends BasePoint {\n  value: number;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "DragSortEvent",
            "id": "interface-DragSortEvent-9158c7e9fcebeae904427f9ed195ab4c",
            "file": "projects/components/src/directive/drag-sort/drag-sort-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DragSortEvent<T> {\n  previousIndex: number;\n  newIndex: number;\n  source: T;\n  target: T;\n  list: T[];\n}\n",
            "properties": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "newIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "previousIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ICellCoordinates",
            "id": "interface-ICellCoordinates-1c9b2aa35690e87d87adfcb204f28cc1",
            "file": "projects/components/src/component/table/contract/i-cell-coordinates.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TableRow} from './table-row';\nimport {TableColumn} from './table-column';\n\nexport interface ICellCoordinates<T> {\n  row: TableRow<T>;\n  column: TableColumn;\n}\n\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ICellEvent",
            "id": "interface-ICellEvent-56ebd2ccbd9e3377ebe92d8f6682b959",
            "file": "projects/components/src/component/table/contract/i-cell-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICellCoordinates } from './i-cell-coordinates';\n\nexport interface ICellEvent<T> extends ICellCoordinates<T> {\n  event: Event;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "ICellCoordinates"
        },
        {
            "name": "ICellValue",
            "id": "interface-ICellValue-8e4d085990932d19abe7d2829ce4dd8d",
            "file": "projects/components/src/component/table/contract/i-cell-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICellCoordinates } from './i-cell-coordinates';\n\nexport interface ICellValue<T> {\n  cell: ICellCoordinates<T>;\n  value: any;\n}\n",
            "properties": [
                {
                    "name": "cell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
<<<<<<< Updated upstream
=======
            "name": "IChartConfig",
            "id": "interface-IChartConfig-2108f6fbba9e577309d835dbad340a95",
            "file": "projects/chart/src/chart/model/i-chart-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\nimport { BasePoint } from './base-point';\nimport { AxisOptions } from './axis-options';\n\nexport interface IChartConfig {\n  name?: string;\n  series?: Series<BasePoint>[];\n  xAxis: AxisOptions[];\n  yAxis: AxisOptions[];\n  gridLines?: boolean;\n  width?: number;\n  height?: number;\n}\n",
            "properties": [
                {
                    "name": "gridLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<BasePoint>[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "xAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "yAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
>>>>>>> Stashed changes
            "name": "IDictionary",
            "id": "interface-IDictionary-a7b02c711840a494580a8526ee0f1415",
            "file": "projects/components/src/common/contract/i-dictionary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDictionary<T> {\n  [key: string]: T;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-a7b02c711840a494580a8526ee0f1415",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "IDragEvent",
            "id": "interface-IDragEvent-13fb182cc7e4b18faf61c1b3901e82e1",
            "file": "projects/components/src/component/chart/model/i-drag-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDragEvent<T> {\n  [key: string]: any;\n  event: DragEvent;\n  target: T;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DragEvent",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-13fb182cc7e4b18faf61c1b3901e82e1",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDrawer",
            "id": "interface-IDrawer-5f6c4efa03f865db6d07e87ff151040d",
            "file": "projects/components/src/component/chart/model/i-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './point/base-point';\nimport { Series } from './series';\nimport * as d3 from 'd3';\nimport { ChartOptions } from './chart-options';\nimport { IDragEvent } from './i-drag-event';\n\nexport interface IDrawer<T extends BasePoint> {\n  dispatch?: d3.Dispatch<IDragEvent<Series<T>>>;\n\n  draw(\n    series: Series<T>,\n    drawContext:\n      | d3.Selection<SVGElement, unknown, null, undefined>\n      | d3.Selection<HTMLCanvasElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any,\n    options: ChartOptions\n  ): void;\n}\n",
            "properties": [
                {
                    "name": "dispatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Dispatch<IDragEvent<Series<T>>>",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "drawContext",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "drawContext",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IFilter",
            "id": "interface-IFilter-e9847509ab1d8d08f93d5fb39ec78fe2",
            "file": "projects/components/src/component/filter/contarct/i-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFilter {\n  name: string;\n  field: string;\n  value: any;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IIdName",
            "id": "interface-IIdName-8a053de0793641b06c855f7616877d92",
            "file": "projects/components/src/common/contract/i-id-name.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IIdName<T> {\n  [key: string]: any;\n  id: T;\n  name: string;\n  parentId?: T;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-8a053de0793641b06c855f7616877d92",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ILegendDrawer",
            "id": "interface-ILegendDrawer-e848f063b307b022d02f285d3f8db596",
            "file": "projects/components/src/component/chart/model/i-drawer-legend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\nimport { BasePoint } from './point/base-point';\n\nexport interface LegendDrawOptions<T extends BasePoint> {\n  context: HTMLElement;\n  series: Series<T>[];\n  columns?: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface ILegendDrawer {\n  draw(options: LegendDrawOptions<BasePoint>): void;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IModalConfig",
            "id": "interface-IModalConfig-0e459ee44669af9cfff7b6156b6af935",
            "file": "projects/components/src/component/modal/model/i-modal-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nexport interface IModalConfig {\n  backdrop?: boolean;\n  closeOnBackdropClick?: boolean;\n  resizable?: boolean;\n  draggable?: boolean;\n  class?: string[];\n  esc?: boolean;\n  beforeClose?: Observable<any>;\n  beforeOpen?: Observable<any>;\n}\n",
            "properties": [
                {
                    "name": "backdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "beforeClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "beforeOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "closeOnBackdropClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "esc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "resizable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IModalResult",
            "id": "interface-IModalResult-55d741fae8d1d92c144561518959ae42",
            "file": "projects/components/src/component/modal/model/i-modal-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ModalCloseReason} from './modal-close-reason.enum';\n\nexport interface IModalResult {\n  /**\n   * Любые другие данные которые пользователь желает вернуть при закрытии окна\n   */\n  [key: string]: any;\n\n  /**\n   * Причина закрытия окна\n   */\n  reason: ModalCloseReason;\n}\n",
            "properties": [
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalCloseReason",
                    "optional": false,
                    "description": "<p>Причина закрытия окна</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nПричина закрытия окна\n"
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-55d741fae8d1d92c144561518959ae42",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЛюбые другие данные которые пользователь желает вернуть при закрытии окна\n",
                    "description": "<p>Любые другие данные которые пользователь желает вернуть при закрытии окна</p>\n"
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IRect",
            "id": "interface-IRect-d081a745cf425e54b192644fa1e30d2d",
            "file": "projects/components/src/common/contract/i-rect.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRect {\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n  maxHeight?: number;\n  minWidth?: number;\n}\n",
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ITabChangeEvent",
            "id": "interface-ITabChangeEvent-867f7538d0b17d37a8d102d6f7ead1d7",
            "file": "projects/components/src/component/tabs/tabs/tabs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterContentChecked,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { TabComponent } from '../tab/tab.component';\n\nexport interface ITabChangeEvent {\n  activeId: string | null;\n  nextId: string;\n  preventDefault: () => void;\n}\n\n@Component({\n  selector: 'teta-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss'],\n})\nexport class TabsComponent implements AfterContentChecked {\n  @HostBinding('class.tabs') classTabs = true;\n  /**\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n   */\n  @Input() activeId: string | null;\n\n  /**\n   * Whether the closed tabs should be hidden without destroying them\n   */\n  @Input() destroyOnHide = true;\n\n  /**\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n   */\n  @Output() tabChange = new EventEmitter<ITabChangeEvent>();\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n\n  constructor() {}\n\n  /**\n   * Selects the tab with the given id and shows its associated pane.\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n   */\n  select(tabId: string): void {\n    const selectedTab = this._getTabById(tabId);\n    if (\n      selectedTab &&\n      !selectedTab.disabled &&\n      this.activeId !== selectedTab.id\n    ) {\n      let defaultPrevented = false;\n\n      this.tabChange.emit({\n        activeId: this.activeId,\n        nextId: selectedTab.id,\n        preventDefault: () => {\n          defaultPrevented = true;\n        },\n      });\n\n      if (!defaultPrevented) {\n        this.activeId = selectedTab.id;\n      }\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    const activeTab = this._getTabById(this.activeId);\n    this.activeId = activeTab\n      ? activeTab.id\n      : this.tabs.length\n      ? this.tabs.first.id\n      : null;\n  }\n\n  private _getTabById(id: string | null): TabComponent | null {\n    const tabsWithId: TabComponent[] = this.tabs.filter((tab) => tab.id === id);\n    return tabsWithId.length ? tabsWithId[0] : null;\n  }\n}\n",
            "properties": [
                {
                    "name": "activeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nextId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "preventDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ITreeData",
            "id": "interface-ITreeData-3beb5b3f05092d45e2a6b04b029acab0",
            "file": "projects/components/src/common/contract/i-tree-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITreeData {\n  children?: ITreeData[] | undefined | null;\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[] | undefined | null",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-3beb5b3f05092d45e2a6b04b029acab0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "IZoomEvent",
            "id": "interface-IZoomEvent-cd0f2b934cca191b3eaace087c5865c9",
            "file": "projects/components/src/component/chart/model/i-zoom-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ZoomType } from './enum/zoom-type';\nimport { D3ZoomEvent, ZoomTransform } from 'd3';\n\nexport interface IZoomEvent {\n  domain: [number, number];\n  zoomType: ZoomType;\n  zoomTransform?: ZoomTransform;\n  event?: D3ZoomEvent<any, any>;\n}\n",
            "properties": [
                {
                    "name": "domain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "D3ZoomEvent<any | any>",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "zoomTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomTransform",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "zoomType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomType",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "LegendDrawOptions",
            "id": "interface-LegendDrawOptions-e848f063b307b022d02f285d3f8db596",
            "file": "projects/components/src/component/chart/model/i-drawer-legend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\nimport { BasePoint } from './point/base-point';\n\nexport interface LegendDrawOptions<T extends BasePoint> {\n  context: HTMLElement;\n  series: Series<T>[];\n  columns?: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface ILegendDrawer {\n  draw(options: LegendDrawOptions<BasePoint>): void;\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ScatterPoint",
            "id": "interface-ScatterPoint-3170bec80dbf6e0da322679a614fcbe8",
            "file": "projects/components/src/component/chart/model/point/scatter-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\n\nexport interface ScatterPoint extends BasePoint {\n  radius: number;\n  value: number;\n}\n",
            "properties": [
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "User",
            "id": "interface-User-ba6d81907bf05c654664cdffd78e3dda",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
<<<<<<< Updated upstream
=======
            "name": "AxesService",
            "id": "injectable-AxesService-ea0b73f12432ec5faf43bb77a2bab404",
            "file": "projects/chart/src/chart/axes.service.ts",
            "properties": [
                {
                    "name": "yAxis",
                    "defaultValue": "new Map<number, Axis>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IChartConfig } from './model/i-chart-config';\nimport { AxisLocate } from './model/enum/axis-locate';\nimport { Axis } from './core/axis';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { number } from '@storybook/addon-knobs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AxesService {\n  public yAxis: Map<number, Axis> = new Map<number, Axis>();\n\n  constructor() {}\n\n  init(config: IChartConfig) {\n    config?.yAxis.forEach((_, index) => {\n      const axis = Axis.createAxis(AxisLocate.ordinatus, config, index);\n      this.yAxis.set(index, axis);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "ChartService",
            "id": "injectable-ChartService-80647b7a9c81679ced0c383760a99f58",
            "file": "projects/chart/src/chart/chart.service.ts",
            "properties": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DOMRect>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size$",
                    "defaultValue": "new Subject<DOMRect>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IChartConfig } from './model/i-chart-config';\nimport { AxesService } from './axes.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ScaleService } from './scale.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChartService {\n  public size: Observable<DOMRect>;\n  private _config: IChartConfig;\n  private size$ = new Subject<DOMRect>();\n\n  constructor(\n    private axesService: AxesService,\n    private scaleService: ScaleService\n  ) {\n    this.size = this.size$.asObservable();\n  }\n\n  public init(config: IChartConfig) {\n    this._config = config;\n    this.axesService.init(this._config);\n    this.scaleService.init();\n  }\n\n  public setSize(size: DOMRect) {\n    this.size$.next(size);\n    console.log(size);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
>>>>>>> Stashed changes
            "name": "ClickService",
            "id": "injectable-ClickService-6465c5168a90b3d1e54e3682988e5a68",
            "file": "projects/components/src/common/service/click.service.ts",
            "properties": [
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MouseEvent>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MouseEvent>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { fromEvent, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClickService {\n  click: Observable<MouseEvent>;\n  contextMenu: Observable<MouseEvent>;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {\n    this.click = fromEvent(this._document, 'click');\n    this.contextMenu = fromEvent(this._document, 'contextmenu');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-e1c16d015df4f9a338afeda222db0b5d",
            "file": "projects/components/src/component/modal/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "alert",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'"
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDialog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'"
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'"
                        },
                        {
                            "name": "showCancelButton",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IModalResult>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showCancelButton",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModalService } from './modal.service';\nimport { Observable } from 'rxjs';\nimport { IModalResult } from './model/i-modal-result';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { map } from 'rxjs/operators';\nimport { ModalCloseReason } from './model/modal-close-reason.enum';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  constructor(private _modal: ModalService) {}\n\n  alert(message: string): void {\n    this.createDialog(message, 'common.ok', null, 'primary', false);\n  }\n\n  confirm(\n    message: string,\n    buttonText: string = 'common.ok',\n    buttonIcon: string = null,\n    buttonPalette: string = 'primary'\n  ): Observable<boolean> {\n    return this.createDialog(\n      message,\n      buttonText,\n      buttonIcon,\n      buttonPalette,\n      true\n    ).pipe(\n      map((result: IModalResult) => result.reason === ModalCloseReason.resolve)\n    );\n  }\n\n  private createDialog(\n    message: string,\n    buttonText: string = 'common.ok',\n    buttonIcon: string = null,\n    buttonPalette: string = 'primary',\n    showCancelButton: boolean = true\n  ): Observable<IModalResult> {\n    const dialog = this._modal.create(\n      DialogComponent,\n      {\n        message,\n        buttonText,\n        buttonIcon,\n        buttonPalette,\n        showCancelButton,\n      },\n      {\n        esc: true,\n        backdrop: true,\n      }\n    );\n    return dialog.onClose;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DynamicComponentService",
            "id": "injectable-DynamicComponentService-ef4af7cca10cd611dfad10d95d17da5c",
            "file": "projects/components/src/common/service/dynamic-component.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentRef",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentRef",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromComponent",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromString",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromTemplate",
                    "args": [
                        {
                            "name": "content",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  Renderer2,\n  RendererFactory2,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport { TetaContentRef } from '../contract/teta-content-ref';\nimport { DynamicData } from '../contract/dynamic-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicComponentService {\n  private _renderer: Renderer2;\n\n  constructor(\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _rendererFactory: RendererFactory2,\n    private _appRef: ApplicationRef\n  ) {\n    this._renderer = this._rendererFactory.createRenderer(null, null);\n  }\n\n  createComponent<T>(\n    component: Type<T>,\n    contentRef: TetaContentRef,\n    injector: Injector,\n    container: any\n  ): ComponentRef<T> {\n    const componentRef = this._componentFactoryResolver\n      .resolveComponentFactory(component)\n      .create(injector, contentRef.nodes);\n    this._appRef.attachView(componentRef.hostView);\n    container.appendChild(componentRef.location.nativeElement);\n    return componentRef;\n  }\n\n  createContent(\n    content: string | TemplateRef<any> | Type<any>,\n    injector: Injector,\n    context?: any\n  ): TetaContentRef {\n    if (content === null || content === undefined) {\n      throw new Error('Content is undefined');\n    }\n    if (typeof content === 'string') {\n      return this.fromString(content);\n    } else if (content instanceof TemplateRef) {\n      return this.fromTemplate(content, context);\n    } else {\n      return this.fromComponent(content, injector, context);\n    }\n  }\n\n  destroy<T>(\n    component: ComponentRef<T>,\n    content: TetaContentRef,\n    container: HTMLElement\n  ): void {\n    if (component) {\n      this._appRef.detachView(component.hostView);\n      component.destroy();\n    }\n    if (content && content.viewRef) {\n      content.viewRef.destroy();\n    }\n    content = null;\n  }\n\n  getContext(\n    content: string | TemplateRef<any> | Type<any>,\n    context: any\n  ): any {\n    if (content instanceof TemplateRef) {\n      return {\n        $implicit: context,\n        data: context,\n      };\n    }\n    return context;\n  }\n\n  getInjector(data: DynamicData, parent: Injector): Injector {\n    return Injector.create({\n      providers: [\n        {\n          provide: DynamicData,\n          useValue: data,\n        },\n      ],\n      parent,\n    });\n  }\n\n  private fromString(content: string): TetaContentRef {\n    return new TetaContentRef([[this._renderer.createText(`${content}`)]]);\n  }\n\n  private fromTemplate(\n    content: TemplateRef<any>,\n    context: any\n  ): TetaContentRef {\n    const viewRef = content.createEmbeddedView(context);\n    this._appRef.attachView(viewRef);\n    return new TetaContentRef([viewRef.rootNodes], viewRef);\n  }\n\n  private fromComponent(\n    content: any,\n    injector: Injector,\n    context: any\n  ): TetaContentRef {\n    const componentFactory =\n      this._componentFactoryResolver.resolveComponentFactory<any>(content);\n    const componentRef = componentFactory.create(injector);\n    for (const key in context) {\n      if (context.hasOwnProperty(key)) {\n        componentRef.instance[key] = context[key];\n      }\n    }\n    const componentNativeEl = componentRef.location.nativeElement;\n    this._appRef.attachView(componentRef.hostView);\n    return new TetaContentRef(\n      [[componentNativeEl]],\n      componentRef.hostView,\n      componentRef\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-510c9175c815b27cb31aa2730b0e7de8",
            "file": "projects/components/src/component/icon/icon.service.ts",
            "properties": [
                {
                    "name": "_loaded",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "_pending",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addSprite",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cloneSVG",
                    "args": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SVGElement",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSVG",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SVGElement>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "svgElementFromString",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SVGElement | never",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, Renderer2, RendererFactory2} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {HttpBackend, HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconService {\n  private static _loaded: string[] = [];\n  private static _pending: string[] = [];\n  private _renderer: Renderer2;\n\n  constructor(@Inject(DOCUMENT) protected _document: any,\n              private _rendererFactory: RendererFactory2,\n              private _httpBackend: HttpBackend,\n              private _http: HttpClient) {\n    this._renderer = this._rendererFactory.createRenderer(null, null);\n  }\n\n  addSprite(url: string, bypassInterceptors: boolean = true) {\n    if (IconService._loaded.indexOf(url) < 0 && IconService._pending.indexOf(url) < 0) {\n      IconService._pending.push(url);\n      this.getSVG(url, bypassInterceptors).subscribe(svg => {\n        IconService._pending = IconService._pending.filter(_ => _ !== url);\n        IconService._loaded.push(url);\n        this._renderer.insertBefore(this._document.body, svg, this._document.body.firstChild);\n      });\n    }\n  }\n\n  private getSVG(url: string, bypassInterceptors: boolean = true): Observable<SVGElement> {\n    const http = bypassInterceptors ? new HttpClient(this._httpBackend) : this._http;\n    return http.get(url, {responseType: 'text'})\n      .pipe(\n        map((svgText: string) => {\n          const svgEl = this.svgElementFromString(svgText);\n          return this.cloneSVG(svgEl);\n        })\n      );\n  }\n\n  private svgElementFromString(str: string): SVGElement | never {\n    const div = this._renderer.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    if (!svg) {\n      throw new Error('No SVG found in loaded contents');\n    }\n    return svg;\n  }\n\n  private cloneSVG(svg: SVGElement): SVGElement {\n    return svg.cloneNode(true) as SVGElement;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-09d8f6dfa81ec1a4ed3e8ac1214058c8",
            "file": "projects/components/src/component/message/message.service.ts",
            "properties": [
                {
                    "name": "_clear",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_message",
                    "defaultValue": "new Subject<Message>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Message>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMultiple",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearMessages",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {Message} from './model/message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  message: Observable<Message>;\n  clear: Observable<string>;\n\n  private _message = new Subject<Message>();\n  private _clear = new Subject<string>();\n\n\n  constructor() {\n    this.message = this._message.asObservable();\n    this.clear = this._clear.asObservable();\n  }\n\n  add(message: Message) {\n    if (message) {\n      this._message.next(message);\n    }\n  }\n\n  addMultiple(messages: Message[]) {\n    if (messages && messages.length) {\n      messages.forEach((n) => {\n        this._message.next(n);\n      });\n    }\n  }\n\n  clearMessages(name: string) {\n    this._clear.next(name);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-9d7c4633406a9911116ad0e4f79206a1",
            "file": "projects/components/src/component/modal/modal.service.ts",
            "properties": [
                {
                    "name": "_container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_modalChanged",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_stack",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalInstance[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unregister",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "IModalConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalInstance",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IModalConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Injector, TemplateRef, Type } from '@angular/core';\nimport { ModalInstance } from './model/modal-instance';\nimport { Subject } from 'rxjs';\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\nimport { ModalCloseReason } from './model/modal-close-reason.enum';\nimport { IModalConfig } from './model/i-modal-config';\nimport { CurrentModal } from './model/current-modal';\nimport { DynamicData } from '../../common/contract/dynamic-data';\nimport { ModalContainerComponent } from './modal-container/modal-container.component';\nimport { IModalResult } from './model/i-modal-result';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private _stack: ModalInstance[] = [];\n  private _modalChanged = new Subject<void>();\n  private readonly _container: any;\n\n  constructor(\n    @Inject(DOCUMENT)\n    private _document: any,\n    private _injector: Injector,\n    private _factory: DynamicComponentService\n  ) {\n    this._container = this._document.body;\n\n    this._modalChanged.subscribe(() => {\n      if (this._stack && this._stack.length > 0) {\n        this.focus(this._stack[this._stack.length - 1]);\n      }\n    });\n  }\n\n  closeAll(): void {\n    if (this._stack && this._stack.length > 0) {\n      this._stack.forEach((instance: ModalInstance) => {\n        instance.close({\n          reason: ModalCloseReason.exit,\n        });\n      });\n    }\n  }\n\n  create(\n    content: string | TemplateRef<any> | Type<any>,\n    data?: any,\n    config?: IModalConfig,\n    injector?: Injector\n  ): ModalInstance {\n    if (content === null || content === undefined) {\n      throw new Error('Specify template or component to render');\n    }\n    if (config === null || config === undefined) {\n      config = Object.assign(\n        {\n          backdrop: true,\n          class: [],\n          esc: true,\n        },\n        config\n      );\n    }\n    if (injector === null || injector === undefined) {\n      injector = this._injector;\n    }\n    const currentModal = new CurrentModal();\n    const modalData = new DynamicData(data);\n\n    injector = this.getInjector(currentModal, modalData, injector);\n    const contentInstance = this._factory.createContent(\n      content,\n      injector,\n      this.getContext(content, modalData, currentModal)\n    );\n    const window = this._factory.createComponent(\n      ModalContainerComponent,\n      contentInstance,\n      injector,\n      this._container\n    );\n    window.instance.config = config;\n\n    const instance = new ModalInstance(window, contentInstance);\n    currentModal.close = instance.close;\n    this.register(instance);\n    return instance;\n  }\n\n  private getContext(\n    content: string | TemplateRef<any> | Type<any>,\n    context: any,\n    currentModal: CurrentModal\n  ): any {\n    if (content instanceof TemplateRef) {\n      return {\n        $implicit: {\n          modal: currentModal,\n          data: context,\n        },\n        modal: currentModal,\n        data: context,\n        close: (result: IModalResult): void => {\n          currentModal.close(result);\n        },\n      };\n    }\n    return context;\n  }\n\n  private getInjector(\n    currentModal: CurrentModal,\n    data: DynamicData,\n    parent: Injector\n  ): Injector {\n    return Injector.create({\n      providers: [\n        {\n          provide: CurrentModal,\n          useValue: currentModal,\n        },\n        {\n          provide: DynamicData,\n          useValue: data,\n        },\n      ],\n      parent,\n    });\n  }\n\n  private register(instance: ModalInstance): void {\n    this._stack.push(instance);\n    this._modalChanged.next();\n    instance.onClose.subscribe(() => this.unregister(instance));\n  }\n\n  private unregister = (instance: ModalInstance) => {\n    const index = this._stack.indexOf(instance);\n    if (index > -1) {\n      this._stack.splice(index, 1);\n      this._modalChanged.next();\n    }\n  };\n\n  private focus(instance: ModalInstance): void {\n    if (instance && instance.window && instance.window.location.nativeElement) {\n      setTimeout(() => {\n        instance.window.location.nativeElement.focus();\n      }, 0);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_factory",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_factory",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OverlayContainerService",
            "id": "injectable-OverlayContainerService-4f7267e0b9a1ec5564840a2b544cc157",
            "file": "projects/components/src/common/service/overlay-container.service.ts",
            "properties": [
                {
                    "name": "_container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_containerClass",
                    "defaultValue": "'overlay-container'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayContainerService implements OnDestroy {\n  private _containerClass = 'overlay-container';\n  private _container: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) private document$: any) {\n  }\n\n  getContainer(): HTMLElement {\n    if (!this._container) {\n      this.createContainer();\n    }\n    return this._container;\n  }\n\n  private createContainer(): void {\n    const container = this.document$.createElement('div');\n    container.classList.add(this._containerClass);\n    this.document$.body.appendChild(container);\n    this._container = container;\n  }\n\n  private removeContainer(): void {\n    if (this._container && this._container.parentNode) {\n      this._container.parentNode.removeChild(this._container);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.removeContainer();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document$",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "document$",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PickerLocaleService",
            "id": "injectable-PickerLocaleService-da354dcd1a5823d68c99376963d69238",
            "file": "projects/components/src/component/date-picker/service/picker-locale.service.ts",
            "properties": [
                {
                    "name": "_defaults",
                    "defaultValue": "new PickerLocaleModel({\n    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n    monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'],\n    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    today: 'Today'\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "locale",
                    "defaultValue": "new BehaviorSubject<PickerLocaleModel>(this._defaults)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PickerLocaleModel>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setLocale",
                    "args": [
                        {
                            "name": "locale",
                            "type": "PickerLocaleModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locale",
                            "type": "PickerLocaleModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {PickerLocaleModel} from '../model/picker-locale-model';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PickerLocaleService {\n  private _defaults = new PickerLocaleModel({\n    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n    monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'],\n    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    today: 'Today'\n  });\n\n  public locale: BehaviorSubject<PickerLocaleModel> = new BehaviorSubject<PickerLocaleModel>(this._defaults);\n\n  public setLocale(locale: PickerLocaleModel) {\n    this.locale.next(locale);\n  }\n\n  constructor() {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        },
        {
            "name": "PickerTouchService",
            "id": "injectable-PickerTouchService-2d74fbf907eeccb0d0e6f2b495df98c8",
            "file": "projects/components/src/component/date-picker/service/picker-touch.service.ts",
            "properties": [
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "step$",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<number>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "touchMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TouchEvent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "touchMove$",
                    "defaultValue": "new Subject<TouchEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<TouchEvent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "onTouchMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { bufferCount, tap, throttleTime } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PickerTouchService {\n  step: Observable<number>;\n\n  private touchMove: Observable<TouchEvent>;\n  private touchMove$: Subject<TouchEvent> = new Subject<TouchEvent>();\n  private step$: Subject<number> = new Subject<number>();\n\n  constructor() {\n    this.touchMove = this.touchMove$.asObservable();\n    this.step = this.step$.asObservable();\n\n    this.touchMove\n      .pipe(\n        throttleTime(25),\n        bufferCount(2),\n        tap((touches: [TouchEvent, TouchEvent]) => {\n          const [start, end] = touches.map((_) => _.changedTouches?.item(0));\n          const deltaY = start?.clientY - end?.clientY;\n          if (deltaY !== 0) {\n            const step = deltaY > 0 ? 1 : -1;\n            this.step$.next(step);\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  onTouchMove(event: TouchEvent) {\n    this.touchMove$.next(event);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "ScaleService",
            "id": "injectable-ScaleService-d11e1e26c0a8c82380f48236ae069da3",
            "file": "projects/chart/src/chart/scale.service.ts",
            "properties": [
                {
                    "name": "yScales",
                    "defaultValue": "new Map<number, Axis>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Axis } from './core/axis';\nimport { AxesService } from './axes.service';\nimport { ChartService } from './chart.service';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScaleService {\n  public yScales: Map<number, Axis> = new Map<number, Axis>();\n\n  constructor(\n    private axesService: AxesService,\n    private chartService: ChartService\n  ) {}\n\n  public init() {\n    this.chartService.size\n      .pipe(\n        map((size) => {\n          console.log(size);\n        })\n      )\n      .subscribe();\n\n    for (const [, value] of this.axesService.yAxis) {\n      console.log(value.extremes);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SwitchService",
            "id": "injectable-SwitchService-4a0218a133e24c7621b792c19dbdcc3f",
            "file": "projects/components/src/component/switch/switch.service.ts",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "value$",
                    "defaultValue": "new ReplaySubject<any>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Observable, ReplaySubject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SwitchService {\n  readonly value: Observable<any>;\n  private readonly value$: ReplaySubject<any> = new ReplaySubject<any>(1);\n\n  constructor() {\n    this.value = this.value$.asObservable();\n  }\n\n  setValue(value: any) {\n    this.value$.next(value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TableService",
            "id": "injectable-TableService-7199b968020ac73bc704b691f6ae64ca",
            "file": "projects/components/src/component/table/service/table.service.ts",
            "properties": [
                {
                    "name": "_activeRow",
                    "defaultValue": "new BehaviorSubject<TableRow<T>>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "new BehaviorSubject<\n    TableColumn[]\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columnsCookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentEditCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentEditRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dict",
                    "defaultValue": "new BehaviorSubject<IDictionary<IIdName<any>[]>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_displayData",
                    "defaultValue": "new BehaviorSubject<\n    TableRow<T>[]\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dragSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editCellStart",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editCellStop",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editRowStart",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editRowStop",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_filterClear",
                    "defaultValue": "new Subject<TableColumn>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_groupToggle",
                    "defaultValue": "new Subject<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenCookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_scrollIndex",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selectedRows",
                    "defaultValue": "new BehaviorSubject<TableRow<T>[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "new BehaviorSubject<FilterState>(new FilterState())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_stateChanged",
                    "defaultValue": "new Subject<FilterState>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valueChanged",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valueSet",
                    "defaultValue": "new Subject<ICellValue<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "cellEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "displayColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displayData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "editCellStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "editCellStop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "editEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditEvent",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "editRowStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "editRowStop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "editType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditType",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "filterClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "groupToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "initialColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "rowEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "scrollIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectType",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "stateChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "valueChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "valueSet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellValue<T>>",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methods": [
                {
                    "name": "allRowsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | null",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autosizeAllColumns",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "autosizeColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "boolOrFuncCallback",
                    "args": [
                        {
                            "name": "variable",
                            "type": "boolean | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(args: M) => boolean",
                    "typeParameters": [
                        "M"
                    ],
                    "line": 515,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variable",
                            "type": "boolean | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 490,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearColumnsState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 482,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deselectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParent",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 526,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnByName",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 502,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRowByIndex",
                    "args": [
                        {
                            "name": "rowIndex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 498,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowIndex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTableElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 546,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 550,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lockPreviousColumns",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeColumn",
                    "args": [
                        {
                            "name": "event",
                            "type": "ColumnResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ColumnResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreColumnsState",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumnStore[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumnStore[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreDefaultColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreHiddenColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveColumnsState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveHiddenColumns",
                    "args": [
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 510,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 451,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRows",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumnAutoWidth",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "table",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 554,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "table",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCookieName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDict",
                    "args": [
                        {
                            "name": "dict",
                            "type": "IDictionary<IIdName[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dict",
                            "type": "IDictionary<IIdName[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisplayColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHiddenColumns",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "cellValue",
                            "type": "ICellValue<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 494,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellValue",
                            "type": "ICellValue<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditCell",
                    "args": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 400,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditRow",
                    "args": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleGroup",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TableRow } from '../contract/table-row';\nimport { ICellCoordinates } from '../contract/i-cell-coordinates';\nimport { TableColumn } from '../contract/table-column';\nimport { FilterState } from '../../filter/contarct/filter-state';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ColumnResizeEvent } from '../contract/column-resize-event';\nimport { ColumnReorderEvent } from '../contract/column-reorder-event';\nimport { SortEvent } from '../contract/sort-event';\nimport { ArrayUtil } from '../../../common/util/array-util';\nimport { StateUtil } from '../util/state-util';\nimport { SelectType } from '../enum/select-type.enum';\nimport { EditType } from '../enum/edit-type.enum';\nimport { EditEvent } from '../enum/edit-event.enum';\nimport { ListFilterType } from '../../filter/enum/list-filter-type.enum';\nimport { ListFilter } from '../../filter/contarct/list-filter';\nimport { FilterType } from '../../filter/enum/filter-type.enum';\nimport { NumericFilterValue } from '../../filter/contarct/numeric-filter-value';\nimport { NumericFilter } from '../../filter/contarct/numeric-filter';\nimport { StringFilter } from '../../filter/contarct/string-filter';\nimport { DateFilterValue } from '../../filter/contarct/date-filter-value';\nimport { DateFilter } from '../../filter/contarct/date-filter';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { DateUtil } from '../../../util/date-util';\nimport * as hash from 'object-hash';\nimport { TableColumnStore } from '../contract/table-column-store';\nimport { ICellValue } from '../contract/i-cell-value';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService<T> {\n  columns: Observable<TableColumn[]>;\n  displayData: Observable<TableRow<T>[]>;\n  dict: Observable<IDictionary<IIdName<any>[]>>;\n  state: Observable<FilterState>;\n  selectType: SelectType;\n  editRowStart: Observable<ICellCoordinates<T>>;\n  editRowStop: Observable<ICellCoordinates<T>>;\n  editCellStart: Observable<ICellCoordinates<T>>;\n  editCellStop: Observable<ICellCoordinates<T>>;\n  valueChanged: Observable<ICellCoordinates<T>>;\n  valueSet: Observable<ICellValue<T>>;\n  stateChanged: Observable<FilterState>;\n  filterClear: Observable<TableColumn>;\n  groupToggle: Observable<TableRow<T>>;\n  selectedRows: Observable<TableRow<T>[]>;\n  activeRow: Observable<TableRow<T>>;\n  hiddenColumns: Observable<string[]>;\n  scrollIndex: Observable<number>;\n\n  editType: EditType;\n  editEvent: EditEvent;\n  rowEditable: boolean | ((row: TableRow<T>) => boolean);\n  cellEditable: boolean | ((row: ICellCoordinates<T>) => boolean);\n\n  get dragSource() {\n    return this._dragSource;\n  }\n\n  private initialColumns: TableColumn[] = [];\n  private displayColumns: TableColumn[] = [];\n  private _columns: BehaviorSubject<TableColumn[]> = new BehaviorSubject<\n    TableColumn[]\n  >([]);\n  private initialData: TableRow<T>[] = [];\n  private _displayData: BehaviorSubject<TableRow<T>[]> = new BehaviorSubject<\n    TableRow<T>[]\n  >([]);\n  private _dict: BehaviorSubject<IDictionary<IIdName<any>[]>> =\n    new BehaviorSubject<IDictionary<IIdName<any>[]>>({});\n  private _state: BehaviorSubject<FilterState> =\n    new BehaviorSubject<FilterState>(new FilterState());\n  private _cookieName: string;\n  private _hiddenCookieName: string;\n  private _columnsCookieName: string;\n  private _editRowStart = new Subject<ICellCoordinates<T> | null>();\n  private _editRowStop = new Subject<ICellCoordinates<T> | null>();\n  private _editCellStart = new Subject<ICellCoordinates<T> | null>();\n  private _editCellStop = new Subject<ICellCoordinates<T> | null>();\n  private _valueChanged = new Subject<ICellCoordinates<T> | null>();\n  private _valueSet = new Subject<ICellValue<T>>();\n  private _stateChanged = new Subject<FilterState>();\n  private _filterClear = new Subject<TableColumn>();\n  private _dragSource: TableColumn;\n  private _groupToggle = new Subject<TableRow<T>>();\n  private _selectedRows = new BehaviorSubject<TableRow<T>[]>([]);\n  private _activeRow = new BehaviorSubject<TableRow<T>>(null);\n  private _hiddenColumns = new BehaviorSubject<string[]>([]);\n  private _scrollIndex = new Subject<number>();\n\n  private _currentEditRow: ICellCoordinates<T>;\n  private _currentEditCell: ICellCoordinates<T>;\n\n  constructor() {\n    this.columns = this._columns.asObservable();\n    this.displayData = this._displayData.asObservable();\n    this.dict = this._dict.asObservable();\n    this.state = this._state.asObservable();\n    this.editRowStart = this._editRowStart.asObservable();\n    this.editRowStop = this._editRowStop.asObservable();\n    this.editCellStart = this._editCellStart.asObservable();\n    this.editCellStop = this._editCellStop.asObservable();\n    this.valueChanged = this._valueChanged.asObservable();\n    this.valueSet = this._valueSet.asObservable();\n    this.stateChanged = this._stateChanged.asObservable();\n    this.filterClear = this._filterClear.asObservable();\n    this.groupToggle = this._groupToggle.asObservable();\n    this.selectedRows = this._selectedRows.asObservable();\n    this.activeRow = this._activeRow.asObservable();\n    this.hiddenColumns = this._hiddenColumns.asObservable();\n    this.scrollIndex = this._scrollIndex.asObservable();\n  }\n\n  setData(data: T[]): void {\n    this.initialData = data?.map((_) => new TableRow<T>(_));\n    this._displayData.next(this.initialData);\n  }\n\n  setDict(dict: IDictionary<IIdName<any>[]>): void {\n    this._dict.next(dict);\n  }\n\n  setColumns(columns: TableColumn[]): void {\n    this.initialColumns = columns ? columns.map((_) => new TableColumn(_)) : [];\n    const restored = this.restoreColumns();\n\n    if (restored) {\n      this.setDisplayColumns(restored);\n    } else {\n      this.setDisplayColumns(this.initialColumns);\n    }\n  }\n\n  restoreDefaultColumns() {\n    this.setDisplayColumns(this.initialColumns);\n    this.clearColumnsState();\n  }\n\n  updateColumns(columns: TableColumn[]): void {\n    this.setDisplayColumns(columns);\n    this.saveColumnsState();\n  }\n\n  saveColumnsState() {\n    if (this._cookieName) {\n      localStorage.setItem(\n        this._columnsCookieName,\n        JSON.stringify({\n          hash: hash.sha1(this.initialColumns),\n          columns: this.displayColumns.map((_) => new TableColumnStore(_)),\n        })\n      );\n    }\n  }\n\n  clearColumnsState() {\n    localStorage.removeItem(this._columnsCookieName);\n  }\n\n  setDisplayColumns(columns: TableColumn[]): void {\n    this.displayColumns = columns ? columns.map((_) => new TableColumn(_)) : [];\n    this._columns.next(this.displayColumns);\n  }\n\n  restoreColumns() {\n    const savedColumns = JSON.parse(\n      localStorage.getItem(this._columnsCookieName)\n    );\n    if (savedColumns && savedColumns.hash === hash.sha1(this.initialColumns)) {\n      return this.restoreColumnsState(savedColumns.columns);\n    }\n    return null;\n  }\n\n  restoreColumnsState(columns: TableColumnStore[]) {\n    return columns.map((column: TableColumnStore) => {\n      const found = ArrayUtil.findRecursive(\n        this.initialColumns,\n        (item) => item.name === column.name,\n        'columns'\n      );\n      const resultColumn = new TableColumn(found);\n      resultColumn.width = column.width;\n      resultColumn.flex = column.flex;\n      resultColumn.locked = column.locked;\n      if (column.columns?.length > 0) {\n        resultColumn.columns = this.restoreColumnsState(column.columns);\n      }\n      return resultColumn;\n    });\n  }\n\n  setState(state: FilterState): void {\n    state.save(this._cookieName);\n    this._state.next(state);\n  }\n\n  setCookieName(name: string): void {\n    this._cookieName = name;\n    this._hiddenCookieName = `${this._cookieName}_hidden_columns`;\n    this._columnsCookieName = `${this._cookieName}_columns`;\n  }\n\n  restoreState(): void {\n    let state: FilterState;\n    if (this._cookieName?.length > 0 && FilterState.restore(this._cookieName)) {\n      let newState = Object.assign(\n        this._state.value,\n        FilterState.restore(this._cookieName)\n      );\n      newState = DateUtil.convertDateStringsToDates(newState);\n      state = new FilterState(newState);\n    } else {\n      state = new FilterState();\n    }\n    this.setState(state);\n  }\n\n  saveHiddenColumns(hiddenColumns: string[]): void {\n    localStorage.setItem(this._hiddenCookieName, JSON.stringify(hiddenColumns));\n  }\n\n  restoreHiddenColumns(): void {\n    const hiddenColumns = localStorage.getItem(this._hiddenCookieName) || '[]';\n    this._hiddenColumns.next(JSON.parse(hiddenColumns));\n  }\n\n  sort(sortEvent: SortEvent): void {\n    if (sortEvent.column.sortable) {\n      this.setState(StateUtil.sortColumn(sortEvent, this._state.value));\n    }\n  }\n\n  clearSort(column: TableColumn): void {\n    this.setState(StateUtil.clearSort(column, this._state.value));\n  }\n\n  clearAllSort(): void {\n    this.setState(StateUtil.clearAllSort(this._state.value));\n  }\n\n  clearFilter(column: TableColumn) {\n    const state = this._state.value;\n    if (column !== null && column !== undefined && column.filterable) {\n      switch (column.filterType) {\n        case FilterType.date:\n          state.addDateFilter(\n            new DateFilter({\n              name: column.name,\n              field: column.filterField,\n              value: new DateFilterValue(),\n            })\n          );\n          break;\n        case FilterType.string:\n          state.addStringFilter(\n            new StringFilter({\n              name: column.name,\n              field: column.filterField,\n              value: '',\n            })\n          );\n          break;\n        case FilterType.number:\n          state.addNumericFilter(\n            new NumericFilter({\n              name: column.name,\n              field: column.filterField,\n              value: new NumericFilterValue(),\n            })\n          );\n          break;\n        case FilterType.list:\n          state.addListFilter(\n            new ListFilter({\n              name: column.name,\n              field: column.filterField,\n              value: [],\n              type: ListFilterType.None,\n            })\n          );\n          break;\n      }\n      this.setState(new FilterState(state));\n    }\n  }\n\n  clearAllFilters() {\n    const state = this._state.value;\n    state.stringFilters = [];\n    state.listFilters = [];\n    state.numericFilters = [];\n    state.dateFilters = [];\n    this.setState(new FilterState(state));\n  }\n\n  pinColumn(column: TableColumn): void {\n    this.displayColumns.forEach((col: TableColumn) => {\n      if (col.name === column.name) {\n        col.locked = !col.locked;\n      }\n    });\n    this.updateColumns(this.displayColumns);\n  }\n\n  dragStart(column: TableColumn): void {\n    this._dragSource = column;\n  }\n\n  lockPreviousColumns(column: TableColumn, element: HTMLElement) {\n    const flat = ArrayUtil.flatten(this.displayColumns, 'columns', true).sort(\n      (a, b) => Number(b.locked) - Number(a.locked)\n    );\n    const index = flat.indexOf(column);\n    const previous = flat.slice(0, index).filter((_) => _.flex > 0);\n    if (previous?.length > 0) {\n      const tableElement = this.getTableElement(element);\n      previous.forEach((item: TableColumn) => {\n        const itemCol = tableElement.querySelector(\n          `teta-head-cell[data-column=${item.name}]`\n        ) as HTMLElement;\n        if (itemCol) {\n          item.flex = 0;\n          item.width = itemCol.clientWidth;\n        }\n      });\n    }\n  }\n\n  resizeColumn(event: ColumnResizeEvent) {\n    if (event.column !== null && event.column !== undefined) {\n      event.column.width = event.newWidth < 50 ? 50 : event.newWidth;\n      event.column.flex = 0;\n    }\n    this._columns.next(this.displayColumns);\n    this.saveColumnsState();\n  }\n\n  autosizeColumn(column: TableColumn, target: HTMLElement) {\n    const tableElement = this.getTableElement(target);\n    this.setColumnAutoWidth(column, tableElement as HTMLElement);\n    this._columns.next(this.displayColumns);\n    this.saveColumnsState();\n  }\n\n  autosizeAllColumns(target: HTMLElement) {\n    const tableElement = this.getTableElement(target);\n    const flat = ArrayUtil.flatten(this.displayColumns, 'columns', true);\n    flat.forEach((col) =>\n      this.setColumnAutoWidth(col, tableElement as HTMLElement)\n    );\n    this._columns.next(this.displayColumns);\n    this.saveColumnsState();\n  }\n\n  reorderColumn(column: TableColumn, insertBefore: boolean): void {\n    const event = new ColumnReorderEvent(this._dragSource, column);\n    if (event.source !== event.target) {\n      const sourceParent = this.findParent(event.source, this.displayColumns);\n      const targetParent = this.findParent(event.target, this.displayColumns);\n\n      if (sourceParent && targetParent) {\n        const sourceIndex = sourceParent.indexOf(event.source);\n        sourceParent.splice(sourceIndex, 1);\n        let targetIndex = targetParent.indexOf(event.target);\n        if (!insertBefore) {\n          targetIndex = targetIndex + 1;\n        }\n        targetParent.splice(targetIndex, 0, event.source);\n        event.source.locked = event.target.locked;\n\n        this.updateColumns(this.displayColumns);\n      }\n    }\n  }\n\n  startEditRow(cellCoordinates: ICellCoordinates<T>): void {\n    if (this._currentEditRow?.row !== cellCoordinates?.row) {\n      if (this._currentEditRow != null) {\n        this._editRowStop.next(this._currentEditRow);\n      }\n      if (cellCoordinates === null) {\n        this._editRowStart.next(cellCoordinates);\n        this._currentEditRow = cellCoordinates;\n      } else {\n        if (\n          this.boolOrFuncCallback<TableRow<T>>(this.rowEditable)(\n            cellCoordinates.row\n          )\n        ) {\n          this._editRowStart.next(cellCoordinates);\n          this._currentEditRow = cellCoordinates;\n        }\n      }\n    }\n  }\n\n  startEditCell(cellCoordinates: ICellCoordinates<T>): void {\n    if (\n      this._currentEditCell?.column.name !== cellCoordinates?.column.name ||\n      this._currentEditCell?.row !== cellCoordinates?.row\n    ) {\n      if (this._currentEditCell != null) {\n        this._editCellStop.next(this._currentEditCell);\n      }\n      if (\n        this.boolOrFuncCallback<ICellCoordinates<T>>(this.cellEditable)(\n          cellCoordinates\n        )\n      ) {\n        this._editCellStart.next(cellCoordinates);\n        this._currentEditCell = cellCoordinates;\n      }\n    }\n  }\n\n  setActiveRow(row: TableRow<T>): void {\n    this._activeRow.next(row);\n  }\n\n  selectRows(rows: TableRow<T>[]): void {\n    this._selectedRows.next(rows);\n  }\n\n  selectRow(row: TableRow<T>): void {\n    if (this.selectType === SelectType.none) {\n      return;\n    }\n    if (this.selectType === SelectType.single) {\n      this._selectedRows.next([row]);\n    } else {\n      this._selectedRows.next([...this._selectedRows.value, row]);\n    }\n  }\n\n  deselectRow(row: TableRow<T>): void {\n    if (this.selectType === SelectType.none) {\n      return;\n    }\n    if (this.selectType === SelectType.single) {\n      this._selectedRows.next([]);\n    } else {\n      this._selectedRows.next(\n        this._selectedRows.value.filter((_) => _ !== row)\n      );\n    }\n  }\n\n  selectAll() {\n    this._selectedRows.next(this._displayData.value);\n  }\n\n  deselectAll() {\n    this._selectedRows.next([]);\n  }\n\n  allRowsSelected(): boolean | null {\n    if (\n      this._displayData.value?.length &&\n      this._selectedRows.value?.length &&\n      this._displayData.value.every(\n        (_) => this._selectedRows.value.indexOf(_) >= 0\n      )\n    ) {\n      return true;\n    } else if (\n      this._selectedRows.value == null ||\n      this._selectedRows.value.length === 0\n    ) {\n      return false;\n    }\n    return null;\n  }\n\n  setHiddenColumns(value: string[]) {\n    this.saveHiddenColumns(value);\n    this._hiddenColumns.next(value);\n  }\n\n  columnIsHidden(column: TableColumn) {\n    return this._hiddenColumns.value.indexOf(column.name) >= 0;\n  }\n\n  toggleGroup(row: TableRow<T>): void {\n    this._groupToggle.next(row);\n  }\n\n  changeValue(coordinates: ICellCoordinates<T>): void {\n    this._valueChanged.next(coordinates);\n  }\n\n  setValue(cellValue: ICellValue<T>): void {\n    this._valueSet.next(cellValue);\n  }\n\n  getRowByIndex(rowIndex: string) {\n    return this._displayData.value[parseInt(rowIndex, 10)];\n  }\n\n  getColumnByName(columnName: string) {\n    return ArrayUtil.findRecursive(\n      this.displayColumns,\n      (iterableNode) => columnName === iterableNode.name,\n      'columns'\n    );\n  }\n\n  scrollToIndex(index: number) {\n    this._scrollIndex.next(null);\n    this._scrollIndex.next(index);\n  }\n\n  boolOrFuncCallback<M>(variable: boolean | ((row: M) => boolean)) {\n    return (args: M) => {\n      if (typeof variable === 'boolean') {\n        return variable;\n      } else if (this.isFunction(variable)) {\n        return (variable as (row: M) => boolean)(args);\n      }\n      return true;\n    };\n  }\n\n  private findParent(\n    column: TableColumn,\n    columns: TableColumn[]\n  ): TableColumn[] | null {\n    const found = columns.find((x) => x.name === column.name);\n    if (found !== null && found !== undefined) {\n      return columns;\n    }\n    for (let i = 0, l = columns.length; i < l; i++) {\n      const col = columns[i];\n      if (col.columns && col.columns.length) {\n        const result = this.findParent(column, col.columns);\n        if (result !== null && result !== undefined) {\n          return result;\n        }\n      }\n    }\n    return null;\n  }\n\n  private getTableElement(element: HTMLElement) {\n    return element.closest('teta-table');\n  }\n\n  private isFunction(obj: any) {\n    return !!(obj && obj?.constructor && obj?.call && obj?.apply);\n  }\n\n  private setColumnAutoWidth(column: TableColumn, table: HTMLElement) {\n    const cells = table.querySelectorAll(\n      `teta-cell[data-column=${column.name}] .cell-text`\n    );\n    let maxWidth = 0;\n    cells.forEach((cell) => {\n      if (cell.scrollWidth > maxWidth) {\n        maxWidth = cell.scrollWidth;\n      }\n    });\n    column.flex = 0;\n    column.width = maxWidth > 50 ? maxWidth + 10 : 50;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 94
            },
            "accessors": {
                "dragSource": {
                    "name": "dragSource",
                    "getSignature": {
                        "name": "dragSource",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ThemeSwitchService",
            "id": "injectable-ThemeSwitchService-0a4dd5afea5229c78b1e5e6f8cabc249",
            "file": "projects/components/src/component/theme-switch/theme-switch.service.ts",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "theme$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "restoreTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTheme",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeSwitchService {\n  theme: Observable<boolean>;\n  private theme$: BehaviorSubject<boolean>;\n\n  constructor() {\n    const value = this.restoreTheme();\n    this.theme$ = new BehaviorSubject<boolean>(value);\n    this.theme = this.theme$.asObservable();\n  }\n\n  switchTheme() {\n    const value = !this.theme$.value;\n    this.saveTheme(value);\n    this.theme$.next(value);\n  }\n\n  saveTheme(value: boolean) {\n    localStorage.setItem('theme', value.toString());\n  }\n\n  restoreTheme(): boolean {\n    const theme = localStorage.getItem('theme');\n    if (theme) {\n      return JSON.parse(theme);\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TreeService",
            "id": "injectable-TreeService-b41f78a06bdb2cbea140e2c0a79575ae",
            "file": "projects/components/src/component/tree/tree.service.ts",
            "properties": [
                {
                    "name": "_openItems",
                    "defaultValue": "new BehaviorSubject<\n    ITreeData[]\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ITreeData[]>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareItems",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITreeData[]>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "addOrRemove",
                    "args": [
                        {
                            "name": "needle",
                            "type": "G",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "G[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "G[]",
                    "typeParameters": [
                        "G"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "needle",
                            "type": "G",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "G[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ITreeData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ITreeData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOpenItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ITreeData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ITreeData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ITreeData } from '../../common/contract/i-tree-data';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TreeService {\n  openItems: Observable<ITreeData[]>;\n  private _openItems: BehaviorSubject<ITreeData[]> = new BehaviorSubject<\n    ITreeData[]\n  >([]);\n\n  constructor() {\n    this.openItems = this._openItems.asObservable();\n  }\n\n  compareItems: (item: ITreeData) => any = (item: ITreeData) => item;\n\n  openItem(item: ITreeData) {\n    const newValue = this.addOrRemove(item, this._openItems.value);\n    this.setOpenItems(newValue);\n  }\n\n  setOpenItems(items: ITreeData[]) {\n    this._openItems.next(items);\n  }\n\n  private addOrRemove<G>(needle: G, list: G[]): G[] {\n    const found = list?.find(\n      (x) => this.compareItems(x) === this.compareItems(needle)\n    );\n    if (found) {\n      return list.filter(\n        (x) => this.compareItems(x) !== this.compareItems(needle)\n      );\n    } else {\n      return [...list, needle];\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Annotation",
            "id": "class-Annotation-12469c34578a2969b6bd96d3609c4df8",
            "file": "projects/components/src/component/chart/model/annotation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  annotationBadge,\n  annotationCallout,\n  annotationCalloutCircle,\n  annotationCalloutCurve,\n  annotationCalloutElbow,\n  annotationCalloutRect,\n  annotationCustomType,\n  annotationLabel,\n  annotationXYThreshold,\n} from 'd3-svg-annotation';\nimport { BasePoint } from './point/base-point';\n\nconst annotationMap = [\n  annotationBadge,\n  annotationLabel,\n  annotationCallout,\n  annotationCalloutCircle,\n  annotationCalloutCurve,\n  annotationCalloutElbow,\n  annotationCalloutRect,\n  annotationCustomType,\n  annotationXYThreshold,\n] as const;\n\ntype AnnotationTypes = typeof annotationMap[number];\n\nexport class Annotation {\n  point: BasePoint;\n  yAxisIndex: number;\n  xAxisIndex: number;\n  type?: AnnotationTypes;\n  enabled?: boolean;\n  fillColor?: string;\n  borderWidth?: number;\n  borderColor?: string;\n  dx?: number;\n  dy?: number;\n  className?: string;\n  connector?: {\n    end: string;\n  };\n  note?: {\n    label?: string;\n    title?: string;\n    bgPadding?: {\n      top?: number;\n      right?: number;\n      bottom?: number;\n      left?: number;\n    };\n    bgRadius?: boolean;\n  };\n\n  constructor(options?: {\n    point: BasePoint;\n    type?: AnnotationTypes;\n    yAxisIndex: number;\n    xAxisIndex: number;\n    enabled?: boolean;\n    fillColor?: string;\n    borderWidth?: number;\n    borderColor?: string;\n    dx?: number;\n    dy?: number;\n    className?: string;\n    connector?: {\n      end: string;\n    };\n    note?: {\n      label?: string;\n      title?: string;\n      bgPadding?: {\n        top?: number;\n        right?: number;\n        bottom?: number;\n        left?: number;\n      };\n      bgRadius?: boolean;\n    };\n  }) {\n    this.point = options?.point;\n    this.yAxisIndex = options?.yAxisIndex;\n    this.xAxisIndex = options?.xAxisIndex;\n    this.type = options?.type || annotationLabel;\n    this.enabled = options?.enabled;\n    this.className = options?.className;\n    this.fillColor = options?.fillColor;\n    this.borderColor = options?.borderColor;\n    this.borderWidth = options?.borderWidth;\n    this.note = options?.note;\n    this.connector = options?.connector;\n    this.dx = options?.dx;\n    this.dy = options?.dy;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "borderWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "dy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fillColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "point",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BasePoint",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnnotationTypes",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "xAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "yAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AreaDrawer",
            "id": "class-AreaDrawer-1502700696f4923942343ce11e3495d9",
            "file": "projects/components/src/component/chart/drawer/area-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { BasePoint } from '../model/point/base-point';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\n\nexport class AreaDrawer implements IDrawer<BasePoint> {\n  draw(\n    series: Series<BasePoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any\n  ): void {\n    const points = series.data;\n\n    const path = d3\n      .area()\n      .x1((d: any) => (d.x1 != null ? scaleX(d.x1) : scaleX(0)))\n      .x0((d: any) => scaleX(d.x))\n      .y((d: any) => scaleY(d.y));\n\n    context\n      .append('path')\n      .attr('transform', `translate(${0}, 0)`)\n      .attr('fill', series.color)\n      .attr('stroke', series.color)\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\n      .datum(points)\n      .attr('d', path as any);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "ArrayUtil",
            "id": "class-ArrayUtil-b625b6d0fcb6f049d467431e4a9fb9eb",
            "file": "projects/components/src/common/util/array-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ArrayUtil {\n  public static asArray<T>(value: T | T[]): T[] {\n    if (value === null || value === undefined) {\n      return [];\n    }\n    if (value instanceof Array) {\n      return value;\n    }\n    return [value];\n  }\n\n  public static flatten(\n    data: any[],\n    children?: string | ((item: any) => any[]),\n    onlyLeafs?: boolean\n  ): any[] {\n    const result: any[] = [];\n    data.forEach((child) => {\n      let childItems: any[];\n      if (children) {\n        if (typeof children === 'string') {\n          childItems = child[children];\n        }\n        if (typeof children === 'function') {\n          childItems = children(child);\n        }\n      } else {\n        childItems = child.children;\n      }\n      if (\n        childItems !== null &&\n        childItems !== undefined &&\n        childItems.length > 0\n      ) {\n        if (!onlyLeafs) {\n          result.push(child);\n        }\n        result.push(...ArrayUtil.flatten(childItems, children, onlyLeafs));\n      } else {\n        result.push(child);\n      }\n    });\n    return result;\n  }\n\n  static findRecursive(\n    tree: any[],\n    comparer: (iterableNode: any) => boolean,\n    children: string = 'children'\n  ): any {\n    const found = tree.find((x) => comparer(x));\n    if (found !== null && found !== undefined) {\n      return found;\n    }\n    for (let i = 0, l = tree.length; i < l; i++) {\n      const item = tree[i];\n      if (item[children] && item[children].length) {\n        const res = ArrayUtil.findRecursive(item[children], comparer);\n        if (res !== null && res !== undefined) {\n          return res;\n        }\n      }\n    }\n    return null;\n  }\n\n  static filterRecursive(\n    array: any[],\n    filter: (item: any) => boolean,\n    children: string = 'children',\n    keepChildren: boolean = true\n  ): any {\n    const result = [];\n    if (array && array.length) {\n      for (const item of array) {\n        const resultItem = Object.assign({}, item);\n        if (filter(resultItem)) {\n          result.push(resultItem);\n          if (!keepChildren) {\n            resultItem[children] = [];\n            break;\n          }\n        } else if (item[children] && item[children].length > 0) {\n          resultItem[children] = [];\n          const found = ArrayUtil.filterRecursive(\n            item[children],\n            filter,\n            children,\n            keepChildren\n          );\n          if (found?.length > 0) {\n            resultItem[children] = found;\n            result.push(resultItem);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  static distinct<T>(array: T[], comparator: (item: T) => any): T[] {\n    const result: T[] = [];\n    if (array && array.length) {\n      for (const item of array) {\n        const found = result.find((_) => comparator(_) === comparator(item));\n        if (!found) {\n          result.push(item);\n        }\n      }\n    }\n    return result;\n  }\n\n  static findParents(tree: any[], item: any) {\n    if (tree.indexOf(item) >= 0) {\n      return tree;\n    }\n    if (Array.isArray(tree)) {\n      for (const treeNode of tree) {\n        const childResult = this.findParents(treeNode.children, item);\n        if (Array.isArray(childResult)) {\n          return [treeNode].concat(childResult);\n        }\n      }\n    }\n  }\n\n  static moveItem(list: any[], sourceIndex, targetIndex) {\n    const res = [...list];\n    const item = list[sourceIndex];\n    if (targetIndex > sourceIndex) {\n      res.splice(targetIndex, 0, item);\n      res.splice(sourceIndex, 1);\n    } else {\n      res.splice(sourceIndex, 1);\n      res.splice(targetIndex, 0, item);\n    }\n    return res;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "asArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "distinct",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparator",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterRecursive",
                    "args": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        },
                        {
                            "name": "keepChildren",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keepChildren",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParents",
                    "args": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRecursive",
                    "args": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparer",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "iterableNode",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparer",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "iterableNode",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flatten",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "children",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "onlyLeafs",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onlyLeafs",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItem",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sourceIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sourceIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Axis",
            "id": "class-Axis-0ee2a896abe70fb532212e63640ded6e",
            "file": "projects/chart/src/chart/core/axis.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IChartConfig } from '../model/i-chart-config';\nimport { AxisLocate } from '../model/enum/axis-locate';\nimport { Series } from '../model/series';\nimport { BasePoint } from '../model/base-point';\nimport * as d3 from 'd3';\n\nexport class Axis {\n  private chartConfig: IChartConfig;\n  private locate: AxisLocate;\n  private index: number | string;\n  private _extremes: [number, number];\n\n  constructor(config: IChartConfig) {\n    this.chartConfig = config;\n  }\n\n  /**\n   * Factory for creating x,y axes\n   * @param {AxisLocate} locate\n   * Axis type\n   * @param {IChartConfig} config\n   * Chart config\n   * @param {number} index\n   * Index axis\n   * @return {Axis}\n   * New generated axis\n   */\n  public static createAxis(\n    locate: AxisLocate,\n    config: IChartConfig,\n    index: number\n  ): Axis {\n    const axis = new Axis(config);\n    axis.setLocate(locate);\n    axis.setIndex(index);\n    return axis;\n  }\n\n  /**\n   *\n   * @param {locate} locate\n   * Set locate axis x or y\n   */\n  private setLocate(locate: AxisLocate): void {\n    this.locate = locate;\n  }\n\n  /**\n   *\n   * @param {number | string} index\n   * Index axis\n   */\n  private setIndex(index: number | string): void {\n    this.index = index;\n  }\n\n  /**\n   * @return {Array<Series<BasePoint>>}\n   * Linked series\n   */\n  public linkedSeries(): Array<Series<BasePoint>> {\n    if (this.locate === AxisLocate.ordinatus) {\n      const linkedFilter = (serie: Series<BasePoint>) =>\n        serie.yAxisIndex === this.index;\n      return this.chartConfig?.series.filter(linkedFilter);\n    }\n\n    if (this.locate === AxisLocate.abscissa) {\n      const linkedFilter = (serie: Series<BasePoint>) =>\n        serie.xAxisIndex === this.index;\n      return this.chartConfig?.series.filter(linkedFilter);\n    }\n  }\n\n  /**\n   * @return\n   * Get axis extremes\n   */\n  get extremes(): [number, number] {\n    const options =\n      this.chartConfig[\n        this.locate === AxisLocate.ordinatus ? 'yAxis' : 'xAxis'\n      ][this.index];\n\n    const hasMin = options?.min != null;\n    const hasMax = options?.max != null;\n\n    if (!hasMin || !hasMax) {\n      const linkedSeries = this.linkedSeries();\n\n      const raw = linkedSeries.map((series: Series<BasePoint>) =>\n        d3.extent(series?.data, (point: BasePoint) =>\n          this.locate === AxisLocate.abscissa ? point.x : point.y\n        )\n      );\n\n      const merged = [].concat(...(raw ?? []));\n\n      const abs = (num) => Math.abs(num);\n\n      this._extremes = options.negative\n        ? [-Math.abs(d3.max(merged.map(abs))), d3.max(merged.map(abs))]\n        : [d3.min(merged), d3.max(merged)];\n    }\n\n    if (hasMin) {\n      this._extremes[0] = options?.min;\n    }\n\n    if (hasMax) {\n      this._extremes[1] = options?.max;\n    }\n\n    return this._extremes;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_extremes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "chartConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "locate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisLocate",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAxis",
                    "args": [
                        {
                            "name": "locate",
                            "type": "AxisLocate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Axis",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFactory for creating x,y axes\nAxis type\nChart config\nIndex axis\nNew generated axis\n",
                    "description": "<p>Factory for creating x,y axes\nAxis type\nChart config\nIndex axis\nNew generated axis</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 531,
                                "end": 537,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "locate"
                            },
                            "type": "AxisLocate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 512,
                                "end": 517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Axis type</p>\n",
                            "typeExpression": {
                                "pos": 518,
                                "end": 530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 519,
                                    "end": 529,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 519,
                                        "end": 529,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "AxisLocate"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 580,
                                "end": 586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 559,
                                "end": 564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Chart config</p>\n",
                            "typeExpression": {
                                "pos": 565,
                                "end": 579,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 566,
                                    "end": 578,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 566,
                                        "end": 578,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "IChartConfig"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 626,
                                "end": 631,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 611,
                                "end": 616,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index axis</p>\n",
                            "typeExpression": {
                                "pos": 617,
                                "end": 625,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 618,
                                    "end": 624,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 145
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 654,
                                "end": 660,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>New generated axis</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "linkedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<Series<BasePoint>>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLinked series\n",
                    "description": "<p>Linked series</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1230,
                                "end": 1236,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>Linked series</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "setIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nIndex axis\n",
                    "description": "<p>Index axis</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1110,
                                "end": 1115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1086,
                                "end": 1091,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index axis</p>\n",
                            "typeExpression": {
                                "pos": 1092,
                                "end": 1109,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1093,
                                    "end": 1108,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 185,
                                    "types": [
                                        {
                                            "pos": 1093,
                                            "end": 1099,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 145
                                        },
                                        {
                                            "pos": 1101,
                                            "end": 1108,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 148
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "setLocate",
                    "args": [
                        {
                            "name": "locate",
                            "type": "AxisLocate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nSet locate axis x or y\n",
                    "description": "<p>Set locate axis x or y</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 949,
                                "end": 955,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "locate"
                            },
                            "type": "AxisLocate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 934,
                                "end": 939,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Set locate axis x or y</p>\n",
                            "typeExpression": {
                                "pos": 940,
                                "end": 948,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 941,
                                    "end": 947,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 941,
                                        "end": 947,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "locate"
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "extremes": {
                    "name": "extremes",
                    "getSignature": {
                        "name": "extremes",
                        "type": "",
                        "returnType": "",
                        "line": 79,
                        "jsdoctags": [
                            {
                                "pos": 1781,
                                "end": 1815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 336,
                                "tagName": {
                                    "pos": 1782,
                                    "end": 1788,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "originalKeywordKind": 105,
                                    "escapedText": "return"
                                },
                                "comment": "<p>Get axis extremes</p>\n"
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Axis",
            "id": "class-Axis-c11b6c6ad5a9f4111ba78b30fe0dde01-1",
            "file": "projects/components/src/component/chart/core/axis-creator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\nimport { AxisType } from '../model/enum/axis-type';\nimport { Series } from '../model/series';\nimport { BasePoint } from '../model/point/base-point';\nimport { ChartOptions } from '../model/chart-options';\n\nexport class Axis {\n  public static offsetFactor = 22;\n  public readonly width: number;\n\n  private _type: AxisType;\n  private _chartOptions: ChartOptions;\n  private _extents: [number, number] = [0, 0];\n  private _index: number;\n  private _height: number;\n  private _offset: number;\n  private _ticks: any;\n\n  constructor(options: {\n    type: AxisType;\n    index: number;\n    chartOptions: ChartOptions;\n    height?: number;\n  }) {\n    this._type = options?.type;\n    this._index = options?.index || 0;\n    this._chartOptions = options?.chartOptions;\n    this._height = options?.height;\n\n    if (this._chartOptions == null) {\n      throw new Error(`No chartOptions for axis ${AxisType[this._type]}`);\n    }\n\n    this.createExtents();\n    this.width = this.calculateAxisWidth();\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get options() {\n    return this._type === AxisType.abscissa\n      ? this._chartOptions.xAxis[this.index]\n      : this._chartOptions.yAxis[this.index];\n  }\n\n  get extent(): [number, number] {\n    return this._extents;\n  }\n\n  get type(): AxisType {\n    return this._type;\n  }\n\n  get offset(): number {\n    return this._offset;\n  }\n\n  get ticks() {\n    return this._ticks;\n  }\n\n  setOffset(offset: number) {\n    this._offset = offset;\n  }\n\n  private calculateAxisWidth(): number {\n    if (this.type === AxisType.abscissa) {\n      return 0;\n    }\n\n    const y = d3\n      .scaleLinear()\n      .domain([this.extent[0], this.extent[1]])\n      .range([0, this._height])\n      .nice();\n\n    const body = d3\n      .select('body')\n      .append('svg')\n      .attr('class', 'calculate-offset')\n      .style('position', 'absolute')\n      .style('left', '-9999px');\n    const axis = d3.axisRight(y).tickValues(this.ticks);\n    const element = body.append('g').attr('class', 'font-caption').call(axis);\n\n    const bBox = element.node().getBBox();\n\n    d3.selectAll('.calculate-offset').remove();\n\n    return bBox.width;\n  }\n\n  private createExtents() {\n    const hasMin = this.options?.min != null;\n    const hasMax = this.options?.max != null;\n\n    if (!hasMin || !hasMax) {\n      const filtered = this._chartOptions?.series?.filter(\n        (serie: Series<BasePoint>) =>\n          this._index ===\n          serie[this._type === AxisType.abscissa ? 'xAxisIndex' : 'yAxisIndex']\n      );\n\n      const raw = filtered.map((series: Series<BasePoint>) =>\n        d3.extent(series?.data, (point: BasePoint) =>\n          this._type === AxisType.abscissa ? point.x : point.y\n        )\n      );\n\n      const merged = [].concat(...(raw ?? []));\n\n      const abs = (num) => Math.abs(num);\n\n      this._extents = this.options.negative\n        ? [-Math.abs(d3.max(merged.map(abs))), d3.max(merged.map(abs))]\n        : [d3.min(merged), d3.max(merged)];\n    }\n\n    if (hasMin) {\n      this._extents[0] = this.options?.min;\n    }\n\n    if (hasMax) {\n      this._extents[1] = this.options?.max;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_extents",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_ticks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetFactor",
                    "defaultValue": "22",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateAxisWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createExtents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setOffset",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "index": {
                    "name": "index",
                    "getSignature": {
                        "name": "index",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "extent": {
                    "name": "extent",
                    "getSignature": {
                        "name": "extent",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "AxisType",
                        "line": 52
                    }
                },
                "offset": {
                    "name": "offset",
                    "getSignature": {
                        "name": "offset",
                        "type": "number",
                        "returnType": "number",
                        "line": 56
                    }
                },
                "ticks": {
                    "name": "ticks",
                    "getSignature": {
                        "name": "ticks",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Axis-1"
        },
        {
            "name": "AxisOptions",
            "id": "class-AxisOptions-b2d4526355f33698061ec8799da0cc96",
            "file": "projects/components/src/component/chart/model/axis-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PlotLine } from './plot-line';\nimport { PlotBand } from './plot-band';\nimport { ScaleType } from './enum/scale-type';\n\nexport class AxisOptions {\n  title: string;\n  min: number;\n  max: number;\n  visible: boolean;\n  tickFormat: (d: any) => string;\n  transform: string;\n  type: 'time' | 'number' | 'category';\n  zoom?: boolean;\n  scaleOptions: {\n    type?: ScaleType;\n    base?: number;\n  };\n  inverted?: boolean;\n  negative?: boolean;\n  opposite?: boolean;\n  niceTicks = true;\n  plotLines: PlotLine[];\n  plotBands: PlotBand[];\n\n  constructor(options?: {\n    title?: string;\n    min?: number;\n    max?: number;\n    visible?: boolean;\n    tickFormat?: (d: any) => string;\n    transform?: string;\n    type?: 'time' | 'number' | 'category';\n    zoom?: boolean;\n    scaleOptions?: {\n      type?: ScaleType;\n      base?: number;\n    };\n    inverted?: boolean;\n    negative?: boolean;\n    opposite?: boolean;\n    niceTicks?: boolean;\n    plotLines?: PlotLine[];\n    plotBands?: PlotBand[];\n  }) {\n    this.title = options?.title;\n    this.min = options?.min;\n    this.max = options?.max;\n    this.visible = options?.visible ?? true;\n    this.tickFormat = options?.tickFormat;\n    this.transform = options?.transform;\n    this.zoom = options?.zoom;\n    this.type = options?.type ?? 'number';\n    this.scaleOptions = {\n      type: ScaleType.linear,\n      base: 10,\n      ...options?.scaleOptions,\n    };\n    this.inverted = options?.inverted;\n    this.negative = options?.negative;\n    this.opposite = options?.opposite;\n    this.niceTicks = options?.niceTicks == null ? true : options.niceTicks;\n    this.plotLines = options?.plotLines || [];\n    this.plotBands = options?.plotBands || [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "inverted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "negative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "niceTicks",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "opposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "plotBands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlotBand[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "plotLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlotLine[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "scaleOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tickFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"time\" | \"number\" | \"category\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BarDrawer",
            "id": "class-BarDrawer-cfffb51e92a6e890014b7520862b9397",
            "file": "projects/components/src/component/chart/drawer/bar-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { BasePoint } from '../model/point/base-point';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\nimport { BarPoint } from '../model/point/bar-point';\n\nexport class BarDrawer implements IDrawer<BasePoint> {\n  draw(\n    series: Series<BarPoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any\n  ): void {\n    const points = series.data.filter((_) => _.visible);\n\n    const barScale = d3\n      .scaleBand<number>()\n      .domain(d3.range(points.length))\n      .range(scaleX.range())\n      .paddingInner(0.2)\n      .paddingOuter(0.2);\n\n    const u = context.selectAll('rect').data(points) as any;\n\n    u.enter()\n      .append('rect')\n      .merge(u as any)\n      .attr('x', (d: BasePoint, i) => barScale(i))\n      .attr('y', (d: BasePoint) => scaleY(d.y))\n      .attr('width', barScale.bandwidth())\n      .attr('height', (d: BasePoint) => Math.abs(scaleY(0) - scaleY(d.y)))\n      .attr('fill', (d: BasePoint) => d.color);\n\n    u.exit().remove();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "BooleanFilter",
            "id": "class-BooleanFilter-8ff3c5b7fe4ca277d7d4db9e5fe403c1",
            "file": "projects/components/src/component/filter/contarct/boolean-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterBase } from '../base/filter-base';\n\nexport class BooleanFilter extends FilterBase {\n  override value: boolean;\n\n  constructor(options?: { value?: boolean; field: string; name: string }) {\n    super(options);\n    if (options) {\n      this.value = options.value;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Chart3dOptions",
            "id": "class-Chart3dOptions-3666c27a6f70d22669abdf902adc2107",
            "file": "projects/components/src/component/chart-3d/model/chart-3d-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base3dPoint } from './base-3d-point';\nimport { Series3d } from './series-3d';\n\nexport class Chart3dOptions {\n  axes?: {\n    max?: number;\n  };\n\n  series: Series3d<Base3dPoint>[];\n\n  constructor(options?: Chart3dOptions) {\n    this.axes = { ...options?.axes };\n    this.series = options?.series || [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "Chart3dOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "Chart3dOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "axes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series3d<Base3dPoint>[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartBounds",
            "id": "class-ChartBounds-e08c9b411ecab1d5b42a50540caf68d4",
            "file": "projects/components/src/component/chart/model/chart-bounds.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartBounds {\n  top = 35;\n  right = 50;\n  bottom = 50;\n  left = 35;\n\n  constructor(options?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left: number;\n  }) {\n    this.top = options?.top || this.top;\n    this.right = options?.right || this.right;\n    this.bottom = options?.bottom || this.bottom;\n    this.left = options?.left || this.left;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bottom",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "left",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "right",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "top",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartOptions",
            "id": "class-ChartOptions-042d081322071e78365df198768ddcc3",
            "file": "projects/components/src/component/chart/model/chart-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AxisOptions } from './axis-options';\nimport { Series } from './series';\nimport { BasePoint } from './point/base-point';\nimport { TooltipOptions } from './tooltip-options';\nimport { ChartBounds } from './chart-bounds';\nimport { LegendType } from './enum/legend-type';\nimport { ZoomType } from './enum/zoom-type';\nimport { ZoomTransform } from 'd3';\nimport { Annotation } from './annotation';\n\nexport class ChartOptions {\n  name: string;\n  series?: Series<BasePoint>[];\n  legend?: {\n    type?: LegendType;\n    visible?: boolean;\n  };\n  zoom?: {\n    enable?: boolean;\n    zoomType?: ZoomType;\n    zoomTransform?: ZoomTransform;\n  };\n  tooltip?: TooltipOptions;\n  xAxis: AxisOptions[];\n  yAxis: AxisOptions[];\n  gridLines?: boolean;\n  width?: number;\n  height?: number;\n  bounds = new ChartBounds();\n  annotations?: Annotation[];\n\n  constructor(options?: {\n    name?: string;\n    series?: Series<BasePoint>[];\n    zoom?: {\n      enable?: boolean;\n      zoomType?: ZoomType;\n      zoomTransform?: ZoomTransform;\n    };\n    tooltip?: TooltipOptions;\n    xAxis: AxisOptions[];\n    yAxis: AxisOptions[];\n    gridLines?: boolean;\n    width?: number;\n    height?: number;\n    legend?: {\n      type?: LegendType;\n      visible?: boolean;\n    };\n    bounds?: ChartBounds;\n    annotations?: Annotation[];\n  }) {\n    this.name = options?.name;\n    this.zoom = {\n      enable: false,\n      zoomType: ZoomType.x,\n      ...options?.zoom,\n    };\n    this.series = options?.series?.map((series, idx) => ({\n      ...series,\n      id: idx,\n    }));\n    this.zoom = { enable: false, zoomType: ZoomType.x, ...options?.zoom };\n    this.series = options?.series?.map((series, idx) => new Series(series));\n    this.tooltip = new TooltipOptions({ ...options?.tooltip });\n    this.xAxis = options?.xAxis?.map((_) => new AxisOptions(_));\n    this.yAxis = options?.yAxis?.map((_) => new AxisOptions(_));\n    this.gridLines = options?.gridLines == null ? true : options.gridLines;\n    this.width = options?.width;\n    this.height = options?.height;\n    this.legend = { ...options?.legend };\n    this.bounds = { ...this.bounds, ...options?.bounds };\n    this.annotations = options?.annotations;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "annotations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Annotation[]",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bounds",
                    "defaultValue": "new ChartBounds()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "gridLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<BasePoint>[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipOptions",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "xAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "yAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnReorderEvent",
            "id": "class-ColumnReorderEvent-4a8d4645db66bbb7acddf8abf0ece657",
            "file": "projects/components/src/component/table/contract/column-reorder-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from './table-column';\n\nexport class ColumnReorderEvent {\n  source: TableColumn;\n  target: TableColumn;\n\n  constructor(source: TableColumn, target: TableColumn) {\n    this.source = source;\n    this.target = target;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "source",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnResizeEvent",
            "id": "class-ColumnResizeEvent-2da5c4d2ea1ad88d1ab872f9da850d96",
            "file": "projects/components/src/component/table/contract/column-resize-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TableColumn } from './table-column';\n\nexport class ColumnResizeEvent {\n  column: TableColumn;\n  newWidth: number;\n\n  constructor(column: TableColumn, newWidth: number) {\n    this.column = column;\n    this.newWidth = newWidth;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "newWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContourDrawer",
            "id": "class-ContourDrawer-ba51ca4a130d6d8fb95577ea5fe0eee4",
            "file": "projects/components/src/component/chart/drawer/contour-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\nimport { tricontour } from 'd3-tricontour';\nimport { ContourPoint } from '../model/point/contour-point';\n\nexport class ContourDrawer implements IDrawer<ContourPoint> {\n  draw(\n    series: Series<ContourPoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any\n  ): void {\n    const points = series.data;\n\n    const tricontourFn = tricontour()\n      .x((d) => scaleX(d.x))\n      .y((d) => scaleY(d.y))\n      .value((d) => d.value)\n      .thresholds(30);\n\n    let contours = tricontourFn(points);\n\n    const geoFn = d3.geoPath();\n\n    const color = series?.colorScale.domain(\n      d3.extent(contours, (d: ContourPoint) => d.value) as any\n    );\n\n    contours = contours.map((_) => ({\n      ..._,\n      color: color(_.value),\n    }));\n\n    const u = context.selectAll('path').data(contours) as any;\n\n    u.enter()\n      .append('path')\n      .merge(u as any)\n      .attr('d', (_: any) => geoFn(_))\n      .attr('stroke', 'rgba(255, 255,255,0.5)')\n      .attr('stroke-width', 0.5)\n      .attr('fill', (_: ContourPoint) => _.color);\n\n    u.exit().remove();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<ContourPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<ContourPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "CurrentModal",
            "id": "class-CurrentModal-7a5cbfb53fbda0a5c6a109eae6ccca10",
            "file": "projects/components/src/component/modal/model/current-modal.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IModalResult} from './i-modal-result';\n\nexport class CurrentModal {\n  close: (result?: IModalResult) => void;\n}\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateFilter",
            "id": "class-DateFilter-6896ad394006a8e8e18e5c8771dfc117",
            "file": "projects/components/src/component/filter/contarct/date-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\nimport {DateFilterValue} from './date-filter-value';\n\nexport class DateFilter extends FilterBase {\n  override value: DateFilterValue;\n\n  constructor(options?: {\n    value?: DateFilterValue;\n    field: string;\n    name: string;\n  }) {\n    super(options);\n    if (options) {\n      this.value = new DateFilterValue(options.value);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilterValue",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateFilterValue",
            "id": "class-DateFilterValue-0b3e1c147efa37a53f188aae52f02611",
            "file": "projects/components/src/component/filter/contarct/date-filter-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateFilterValue {\n  /**\n   * Значение должно быть меньше чем\n   */\n  lessThan: Date | undefined | null;\n  /**\n   * Значение должно быть больше чем\n   */\n  greaterThan: Date | undefined | null;\n\n  constructor(options?: {\n    lessThan?: Date | undefined | null;\n    greaterThan?: Date | undefined | null;\n  }) {\n    if (options) {\n      this.lessThan = (typeof options.lessThan === 'string') ? new Date(options.lessThan) : options.lessThan;\n      this.greaterThan = (typeof options.greaterThan === 'string') ? new Date(options.greaterThan) : options.greaterThan;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "greaterThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined | null",
                    "optional": false,
                    "description": "<p>Значение должно быть больше чем</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nЗначение должно быть больше чем\n"
                },
                {
                    "name": "lessThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined | null",
                    "optional": false,
                    "description": "<p>Значение должно быть меньше чем</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nЗначение должно быть меньше чем\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DatePeriod",
            "id": "class-DatePeriod-382574436eac76ced2fd8d20f558e090",
            "file": "projects/components/src/component/date-picker/model/date-period.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DatePeriod {\n  start: Date;\n  end: Date;\n\n  constructor(start: Date, end: Date) {\n    this.start = start;\n    this.end = end;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DatePickerUtil",
            "id": "class-DatePickerUtil-15c91a79b6f1c43f98d844a9d058fe59",
            "file": "projects/components/src/component/date-picker/util/date-picker-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DatePeriod } from '../model/date-period';\nimport { DayModel } from '../model/day-model';\n\nexport class DatePickerUtil {\n  static getFirstDay(\n    month: number,\n    year: number,\n    firstDayOfWeek: number\n  ): Date {\n    const lastDay = new Date(year, month, 0);\n    const lastDayIndex =\n      lastDay.getDay() >= firstDayOfWeek\n        ? lastDay.getDay() - firstDayOfWeek\n        : lastDay.getDay() + 7 - firstDayOfWeek;\n    return new Date(year, month - 1, lastDay.getDate() - lastDayIndex);\n  }\n\n  static getPickerDays(\n    date: Date,\n    firstDayOfWeek: number,\n    minDate: Date,\n    maxDate: Date,\n    disabledDates: Date[],\n    disabledDays: number[],\n    disabledPeriods: DatePeriod[]\n  ): DayModel[] {\n    const days = [];\n    const firstDay = DatePickerUtil.getFirstDay(\n      date.getMonth(),\n      date.getFullYear(),\n      firstDayOfWeek\n    );\n    for (let i = 0; i < 6 * 7; i++) {\n      const dat = new Date(firstDay);\n      dat.setDate(dat.getDate() + i);\n      days.push(\n        new DayModel({\n          date: dat,\n          disabled: DatePickerUtil.isDateInvalid(\n            dat,\n            minDate,\n            maxDate,\n            disabledDates,\n            disabledDays,\n            disabledPeriods\n          ),\n          today: DatePickerUtil.isToday(dat),\n          isCurrentMonth: dat.getMonth() === date.getMonth(),\n          selected:\n            dat.getFullYear() === date.getFullYear() &&\n            dat.getMonth() === date.getMonth() &&\n            dat.getDate() === date.getDate(),\n          weekend: dat.getDay() === 0 || dat.getDay() === 6,\n        })\n      );\n    }\n    return days;\n  }\n\n  static isDateInvalid(\n    dat: Date,\n    minDate: Date,\n    maxDate: Date,\n    disabledDates: Date[],\n    disabledDays: number[],\n    disabledPeriods: DatePeriod[]\n  ): boolean {\n    return (\n      DatePickerUtil.isDayDisabled(dat, disabledDays) ||\n      DatePickerUtil.isDateDisabled(dat, disabledDates) ||\n      DatePickerUtil.isDateInDisabledPeriod(dat, disabledPeriods) ||\n      DatePickerUtil.isMaxInvalid(dat, maxDate) ||\n      DatePickerUtil.isMinInvalid(dat, minDate)\n    );\n  }\n\n  static isDayDisabled(dat: Date, disabledDays: number[]): boolean {\n    if (\n      dat === null ||\n      dat === undefined ||\n      disabledDays === null ||\n      disabledDays === undefined ||\n      disabledDays.length < 1\n    ) {\n      return false;\n    }\n    return disabledDays.indexOf(dat.getDay()) >= 0;\n  }\n\n  static isMinInvalid(dat: Date, minDate: Date): boolean {\n    if (\n      dat === null ||\n      dat === undefined ||\n      minDate === null ||\n      minDate === undefined\n    ) {\n      return false;\n    }\n    return minDate.getTime() > dat.getTime();\n  }\n\n  static isMaxInvalid(dat: Date, maxDate: Date): boolean {\n    if (\n      dat === null ||\n      dat === undefined ||\n      maxDate === null ||\n      maxDate === undefined\n    ) {\n      return false;\n    }\n    return maxDate.getTime() < dat.getTime();\n  }\n\n  static isDateInDisabledPeriod(\n    dat: Date,\n    disabledPeriods: DatePeriod[]\n  ): boolean {\n    if (\n      dat === null ||\n      dat === undefined ||\n      disabledPeriods === null ||\n      disabledPeriods === undefined ||\n      disabledPeriods.length < 1\n    ) {\n      return false;\n    }\n    return disabledPeriods.some(\n      (d: DatePeriod) =>\n        d !== null &&\n        d !== undefined &&\n        d.start !== null &&\n        d.start !== undefined &&\n        d.end !== null &&\n        d.end !== undefined &&\n        d.start.getTime() <= dat.getTime() &&\n        d.end.getTime() >= dat.getTime()\n    );\n  }\n\n  static isDateDisabled(dat: Date, disabledDates: Date[]): boolean {\n    if (\n      disabledDates === null ||\n      disabledDates === undefined ||\n      disabledDates.length < 1 ||\n      dat === null ||\n      dat === undefined\n    ) {\n      return false;\n    }\n    return disabledDates.some(\n      (d: Date) =>\n        d !== null &&\n        d !== undefined &&\n        d.getFullYear() === dat.getFullYear() &&\n        d.getMonth() === dat.getMonth() &&\n        d.getDate() === dat.getDate()\n    );\n  }\n\n  static isToday(dat: Date): boolean {\n    if (dat === null || dat === undefined) {\n      return false;\n    }\n    const today = new Date();\n    return (\n      dat.getFullYear() === today.getFullYear() &&\n      dat.getMonth() === today.getMonth() &&\n      dat.getDate() === today.getDate()\n    );\n  }\n\n  static scrollMonth(delta: number, date: Date) {\n    const res = new Date(date);\n    let month = date.getMonth();\n    let year = date.getFullYear();\n    if (delta > 0) {\n      if (month === 11) {\n        month = 0;\n        year++;\n      } else {\n        month++;\n      }\n    } else {\n      if (month === 0) {\n        month = 11;\n        year--;\n      } else {\n        month--;\n      }\n    }\n    res.setFullYear(year, month);\n    return res;\n  }\n\n  static scrollYear(delta: number, date: Date) {\n    const res = new Date(date);\n    let year = date.getFullYear();\n    if (delta > 0) {\n      year++;\n    } else {\n      year--;\n    }\n    res.setFullYear(year);\n    return res;\n  }\n\n  // static isSelected(date: Date, selectedDate: Date): boolean {\n  //   if (date === null || date === undefined || selectedDate === null || selectedDate === undefined) {\n  //     return false;\n  //   }\n  //   return date.getFullYear() === selectedDate.getFullYear()\n  //     && date.getMonth() === selectedDate.getMonth()\n  //     && date.getDate() === selectedDate.getDate();\n  // }\n\n  // static nextMonth(date: Date): Date {\n  //   const dt = new Date(date);\n  //   dt.setMonth(dt.getMonth() + 1);\n  //   return dt;\n  // }\n\n  // static prevMonth(date: Date): Date {\n  //   const dt = new Date(date);\n  //   dt.setMonth(dt.getMonth() - 1);\n  //   return dt;\n  // }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getFirstDay",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPickerDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DayModel[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateDisabled",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateInDisabledPeriod",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDayDisabled",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMaxInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isToday",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollMonth",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollYear",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateUtil",
            "id": "class-DateUtil-43eb0b9bc2bad59afb29a7abb62432e6",
            "file": "projects/components/src/util/date-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateUtil {\n  /**\n   * Вычесть n-дней\n   */\n\n  public static subtractDays(date: Date, days = 0): Date | null {\n    if (date && date instanceof Date) {\n      const dt = new Date(date.getTime());\n\n      dt.setDate(dt.getDate() - days);\n      return dt;\n    }\n\n    return null;\n  }\n\n  /**\n   * Добавить n-дней\n   */\n\n  public static addDays(date: Date, days = 0): Date | null {\n    if (date && date instanceof Date) {\n      const dt = new Date(date.getTime());\n\n      dt.setDate(dt.getDate() + days);\n      return dt;\n    }\n\n    return null;\n  }\n\n  /**\n   * Получить дату из строки\n   */\n  public static parseString(dat: string): Date | null {\n    if (!dat || dat.length < 1) {\n      return null;\n    }\n\n    const parts = dat.split(' ');\n    const dtPart = parts[0].split('.');\n    const tPart = parts[1]?.split(':') ?? ['0', '0', '0'];\n    const parsedDate = new Date(\n      parseInt(dtPart[2], 10),\n      parseInt(dtPart[1], 10) - 1,\n      parseInt(dtPart[0], 10),\n      parseInt(tPart[0], 10),\n      parseInt(tPart[1], 10),\n      parseInt(tPart[2], 10)\n    );\n    if (isNaN(parsedDate.getTime())) {\n      return null;\n    }\n    return parsedDate;\n  }\n\n  /**\n   * Привести дату к строке\n   */\n  public static toString(dat: Date): string {\n    if (!dat || !(dat instanceof Date)) {\n      return '';\n    }\n    const month = dat.getMonth() + 1;\n    const monthString = month < 10 ? '0' + month.toString() : month.toString();\n    return `${dat.getDate().toString()}.${monthString}.${dat\n      .getFullYear()\n      .toString()} ${dat.getHours()}:${dat.getMinutes()}:${dat.getSeconds()}`;\n  }\n\n  /**\n   * Подготовка даты к отправке на сервер, чтобы небыло смещения часов\n   */\n  public static convertUTC2DateLocal(date?: Date): Date | null {\n    if (date && date instanceof Date) {\n      const timezoneOffsetMs: number =\n        new Date(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate()\n        ).getTimezoneOffset() * 60000;\n      return new Date(date.getTime() - timezoneOffsetMs);\n    }\n    return null;\n  }\n\n  /**\n   * Подготовка даты к отправке на сервер, чтобы небыло смещения часов\n   */\n  public static convertDateLocal2UTC(date?: Date): Date | null {\n    if (date && date instanceof Date) {\n      const timezoneOffsetMs: number =\n        new Date(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate()\n        ).getTimezoneOffset() * 60000;\n      return date == null ? null : new Date(date.getTime() + timezoneOffsetMs);\n    }\n    return null;\n  }\n\n  public static convertDateStringsToDates(input: any): any {\n    const regexIso8601 =\n      /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/i;\n    if (typeof input === 'string' && regexIso8601.test(input)) {\n      return DateUtil.convertStringToLocalDate(input);\n    }\n    if (typeof input !== 'object' || !input) {\n      return input;\n    }\n    let res: any | any[];\n    if (input instanceof Array) {\n      res = [];\n    } else {\n      res = {};\n    }\n    return DateUtil.fillConvertDateStringsToDates(res, input);\n  }\n\n  public static convertDates(input: any | any[]): any | any[] {\n    if (typeof input !== 'object' || !input) {\n      return input;\n    }\n    if (input instanceof Date) {\n      return DateUtil.convertUTC2DateLocal(input);\n    }\n    let res: any | any[];\n    if (input instanceof Array) {\n      res = [];\n    } else {\n      res = {};\n    }\n    return DateUtil.fillConvertDates(res, input);\n  }\n\n  public static getMonthDaysCount(date: Date): number {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  }\n\n  // Возвращает список месяцев между двумя датами\n  public static getRangeOfMonths(start: Date, end: Date): Date[] {\n    if (start > end || !start || !end) {\n      return null;\n    }\n    const resDates: Date[] = [];\n    let i = 0;\n    let dateTmp = new Date(start.getFullYear(), start.getMonth() + i, 1);\n    while (end >= dateTmp) {\n      resDates.push(dateTmp);\n      i++;\n      dateTmp = new Date(start.getFullYear(), start.getMonth() + i, 1);\n    }\n    return resDates;\n  }\n\n  public static truncateToMonth(date: Date): Date {\n    const res = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0);\n    return res;\n  }\n\n  public static truncateToDay(date: Date): Date {\n    const res = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      0,\n      0,\n      0\n    );\n    return res;\n  }\n\n  public static truncateToHour(date: Date): Date {\n    const res = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      date.getHours(),\n      0,\n      0\n    );\n    return res;\n  }\n\n  public static toISOString(date: number): string {\n    return (\n      new Date(date - new Date().getTimezoneOffset() * 60000)\n        .toISOString()\n        .slice(0, -5) + 'Z'\n    );\n  }\n\n  public static isValidDate(date: any): boolean {\n    return date instanceof Date && !isNaN(date.getTime());\n  }\n\n  private static fillConvertDates(result: any, input: any): any {\n    for (const key in input) {\n      if (!input.hasOwnProperty || !input.hasOwnProperty(key)) {\n        continue;\n      }\n      if (input.hasOwnProperty(key)) {\n        let value = input[key];\n        if (value instanceof Date) {\n          if (value !== null && value !== undefined) {\n            value = DateUtil.convertUTC2DateLocal(value);\n          }\n          result[key] = value;\n        } else if (typeof value === 'object') {\n          result[key] = DateUtil.convertDates(value);\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n    return result;\n  }\n\n  private static fillConvertDateStringsToDates(result: any, input: any): any {\n    const regexIso8601 =\n      /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z?)?$/i;\n    for (const key in input) {\n      if (!input.hasOwnProperty(key)) {\n        continue;\n      }\n      const value = input[key];\n      if (typeof value === 'string' && regexIso8601.test(value)) {\n        result[key] = DateUtil.convertStringToLocalDate(value);\n      } else if (typeof value === 'object') {\n        result[key] = DateUtil.convertDateStringsToDates(value);\n      } else {\n        result[key] = value;\n      }\n    }\n    return result;\n  }\n\n  private static convertStringToLocalDate(dateString: string): Date | null {\n    const milliseconds = Date.parse(dateString);\n    if (!isNaN(milliseconds)) {\n      const dt = new Date(milliseconds);\n      return DateUtil.convertDateLocal2UTC(dt);\n    }\n    return null;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "addDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nДобавить n-дней\n",
                    "description": "<p>Добавить n-дней</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateLocal2UTC",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПодготовка даты к отправке на сервер, чтобы небыло смещения часов\n",
                    "description": "<p>Подготовка даты к отправке на сервер, чтобы небыло смещения часов</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDates",
                    "args": [
                        {
                            "name": "input",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | []",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateStringsToDates",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertStringToLocalDate",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertUTC2DateLocal",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПодготовка даты к отправке на сервер, чтобы небыло смещения часов\n",
                    "description": "<p>Подготовка даты к отправке на сервер, чтобы небыло смещения часов</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillConvertDates",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillConvertDateStringsToDates",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthDaysCount",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRangeOfMonths",
                    "args": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date[]",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseString",
                    "args": [
                        {
                            "name": "dat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучить дату из строки\n",
                    "description": "<p>Получить дату из строки</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtractDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nВычесть n-дней\n",
                    "description": "<p>Вычесть n-дней</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toISOString",
                    "args": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПривести дату к строке\n",
                    "description": "<p>Привести дату к строке</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToHour",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToMonth",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DayModel",
            "id": "class-DayModel-9be5b01ad815fcb775e2e7a5229d8a1a",
            "file": "projects/components/src/component/date-picker/model/day-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DayModel {\n  disabled: boolean;\n  isCurrentMonth: boolean;\n  today: boolean;\n  selected: boolean;\n  date: Date;\n  weekend: boolean;\n\n  public constructor(options?: {\n    disabled?: boolean;\n    isCurrentMonth?: boolean;\n    today?: boolean;\n    selected?: boolean;\n    date: Date;\n    weekend?: boolean;\n  }) {\n    if (options) {\n      this.disabled = options.disabled;\n      this.isCurrentMonth = options.isCurrentMonth;\n      this.today = options.today;\n      this.selected = options.selected;\n      this.date = options.date;\n      this.weekend = options.weekend;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isCurrentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "weekend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DetailComponentBase",
            "id": "class-DetailComponentBase-1e8dd9b1006b10f92c7eb591628ab661",
            "file": "projects/components/src/component/table/base/detail-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableRow} from '../contract/table-row';\nimport {TableColumn} from '../contract/table-column';\n\nexport abstract class DetailComponentBase<T> {\n  /**\n   * The row details are displayed for\n   */\n  abstract row: TableRow<T>;\n  /**\n   * displayed columns\n   */\n  abstract columns: TableColumn[];\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DomUtil",
            "id": "class-DomUtil-9ccdf552ad19cefb9b49b9d05d096654",
            "file": "projects/components/src/common/util/dom-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DomUtil {\n  public static clickedInside(target: HTMLElement, event: MouseEvent): boolean {\n    return event.composedPath().indexOf(target) >= 0;\n  }\n\n  public static findTransformedParent(node: HTMLElement) {\n    while (node !== null && node.tagName !== 'BODY') {\n      const style = getComputedStyle(node);\n      if (style.transform !== 'none') {\n        return node;\n      }\n      node = node.parentNode as HTMLElement;\n    }\n    return null;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "clickedInside",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findTransformedParent",
                    "args": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicData",
            "id": "class-DynamicData-7e2757b111155ae67726ca90b6a419b9",
            "file": "projects/components/src/common/contract/dynamic-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DynamicData {\n  [key: string]: any;\n\n  constructor(value: { [key: string]: any }) {\n    for (const key in value) {\n      if (value.hasOwnProperty(key)) {\n        this[key] = value[key];\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-7e2757b111155ae67726ca90b6a419b9",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilterBase",
            "id": "class-FilterBase-b5fc52777b2cb611b6c934c16a906c68",
            "file": "projects/components/src/component/filter/base/filter-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IFilter} from '../contarct/i-filter';\n\nexport class FilterBase implements IFilter {\n  field: string;\n  name: string;\n  value: any;\n\n  constructor(options?: {\n    field: string;\n    name: string;\n  }) {\n    if (options) {\n      this.field = options.field;\n      this.name = options.name;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFilter"
            ]
        },
        {
            "name": "FilterComponentBase",
            "id": "class-FilterComponentBase-9853dadf4c4efffb83936883142bb2d6",
            "file": "projects/components/src/component/filter/base/filter-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterState} from '../contarct/filter-state';\nimport {EventEmitter} from '@angular/core';\nimport {FilterItem} from '../contarct/filter-item';\nimport {IFilter} from '../contarct/i-filter';\nimport {IIdName} from '../../../common/contract/i-id-name';\n\nexport abstract class FilterComponentBase {\n  abstract column: FilterItem;\n  abstract state: FilterState;\n  abstract filterOptions: IIdName<any>[];\n\n  abstract filterChanged: EventEmitter<IFilter>;\n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilterItem",
            "id": "class-FilterItem-1e31772c1154f144f5070b0cbdb96da0",
            "file": "projects/components/src/component/filter/contarct/filter-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterType} from '../enum/filter-type.enum';\nimport {StringFilterType} from '../enum/string-filter-type.enum';\nimport {ListFilterType} from '../enum/list-filter-type.enum';\n\nexport class FilterItem {\n  /**\n   * Порядковый номер\n   */\n  sortOrder: number = Number.MAX_VALUE;\n  /**\n   * Название столбца для заголовка таблицы\n   */\n  caption: string;\n  /**\n   * Подсказка\n   */\n  hint: string;\n  /**\n   * Название столбца в строке результатов\n   */\n  name: string;\n  /**\n   * Возможность сортировать поле\n   */\n  sortable = true;\n  /**\n   * Возможность фильтровать поле\n   */\n  filterable = true;\n  /**\n   * Поле для сортировки\n   */\n  sortField: string;\n  /**\n   * Поле для фильтрации\n   */\n  filterField: string;\n  /**\n   * Тип фильтра\n   */\n  filterType: FilterType | null;\n  /**\n   * Тип сравнения строкового фильтра\n   */\n  stringFilterType: StringFilterType;\n  /**\n   * Тип сравнения строкового фильтра\n   */\n  listFilterType: ListFilterType;\n  /**\n   * Строгое сравнение\n   */\n  strict: boolean;\n  /**\n   * Компонент для рендера фильтра\n   */\n  filterComponent: any;\n\n  /**\n   * Дочерние элементы\n   */\n  columns: FilterItem[];\n\n  constructor(options?: {\n    sortOrder?: number;\n    name?: string;\n    caption?: string;\n    hint?: string;\n    sortable?: boolean;\n    sortField?: string;\n    filterable?: boolean;\n    filterField?: string;\n    filterType?: FilterType | null;\n    stringFilterType?: StringFilterType;\n    listFilterType?: ListFilterType;\n    strict?: boolean;\n    filterComponent?: any;\n    columns?: FilterItem[];\n  }) {\n    if (options) {\n      this.sortOrder = options.sortOrder || Number.MAX_VALUE;\n      this.name = options.name || '';\n      this.caption = options.caption === null || options.caption === undefined ? this.name : options.caption;\n      this.hint = options.hint === null || options.hint === undefined ? '' : options.hint;\n      this.sortable = options.sortable === null || options.sortable === undefined ? true : options.sortable;\n      this.filterable = options.filterable === null || options.filterable === undefined ? true : options.filterable;\n      this.sortField = options.sortField === null || options.sortField === undefined ? this.name : options.sortField;\n      this.filterField = options.filterField === null || options.filterField === undefined ? this.name : options.filterField;\n      this.filterType = options.filterType === null || options.filterType === undefined ? null : options.filterType;\n      this.stringFilterType = options.stringFilterType === null || options.stringFilterType === undefined\n        ? StringFilterType.Contains\n        : options.stringFilterType;\n      this.listFilterType = options.listFilterType === null || options.listFilterType === undefined\n        ? ListFilterType.None\n        : options.listFilterType;\n      this.strict = options.strict || false;\n      this.filterComponent = options.filterComponent;\n      if (options.columns && options.columns.length) {\n        this.columns = options.columns.map(_ => new FilterItem(_));\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца для заголовка таблицы</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nНазвание столбца для заголовка таблицы\n"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem[]",
                    "optional": false,
                    "description": "<p>Дочерние элементы</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nДочерние элементы\n"
                },
                {
                    "name": "filterable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность фильтровать поле</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nВозможность фильтровать поле\n"
                },
                {
                    "name": "filterComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера фильтра</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nКомпонент для рендера фильтра\n"
                },
                {
                    "name": "filterField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для фильтрации</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nПоле для фильтрации\n"
                },
                {
                    "name": "filterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType | null",
                    "optional": false,
                    "description": "<p>Тип фильтра</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nТип фильтра\n"
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Подсказка</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nПодсказка\n"
                },
                {
                    "name": "listFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца в строке результатов</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nНазвание столбца в строке результатов\n"
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность сортировать поле</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nВозможность сортировать поле\n"
                },
                {
                    "name": "sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для сортировки</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nПоле для сортировки\n"
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "Number.MAX_VALUE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядковый номер</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nПорядковый номер\n"
                },
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Строгое сравнение</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nСтрогое сравнение\n"
                },
                {
                    "name": "stringFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilterState",
            "id": "class-FilterState-d0737e8be303029dd78117ef8f0ad5bd",
            "file": "projects/components/src/component/filter/contarct/filter-state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { StringFilter } from './string-filter';\nimport { NumericFilter } from './numeric-filter';\nimport { DateFilter } from './date-filter';\nimport { ListFilter } from './list-filter';\nimport { SortParam } from './sort-param';\nimport { DateFilterValue } from './date-filter-value';\nimport { NumericFilterValue } from './numeric-filter-value';\nimport { ListFilterType } from '../enum/list-filter-type.enum';\nimport { BooleanFilter } from './boolean-filter';\n\nexport class FilterState {\n  stringFilters: StringFilter[] = [];\n  numericFilters: NumericFilter[] = [];\n  dateFilters: DateFilter[] = [];\n  listFilters: ListFilter[] = [];\n  booleanFilters: BooleanFilter[] = [];\n  sortParams: SortParam[] = [];\n\n  constructor(options?: {\n    stringFilters?: any[];\n    booleanFilters?: any[];\n    numericFilters?: any[];\n    dateFilters?: any[];\n    listFilters?: any[];\n    sortParams?: any[];\n  }) {\n    if (options) {\n      if (options.stringFilters && options.stringFilters.length) {\n        this.stringFilters = options.stringFilters.map(\n          (x: any) => new StringFilter(x)\n        );\n      }\n\n      if (options.booleanFilters && options.booleanFilters.length) {\n        this.booleanFilters = options.booleanFilters.map(\n          (x: any) => new BooleanFilter(x)\n        );\n      }\n\n      if (options.numericFilters && options.numericFilters.length) {\n        this.numericFilters = options.numericFilters.map(\n          (x: any) => new NumericFilter(x)\n        );\n      }\n\n      if (options.dateFilters && options.dateFilters.length) {\n        this.dateFilters = options.dateFilters.map(\n          (x: any) => new DateFilter(x)\n        );\n      }\n\n      if (options.listFilters && options.listFilters.length) {\n        this.listFilters = options.listFilters.map(\n          (x: any) => new ListFilter(x)\n        );\n      }\n\n      if (options.sortParams && options.sortParams.length) {\n        this.sortParams = options.sortParams.map((x: any) => new SortParam(x));\n      }\n    }\n  }\n\n  static restore(cookie: string): any {\n    const state = localStorage.getItem(cookie) || 'null';\n    return JSON.parse(state);\n  }\n\n  save(cookieName: string): void {\n    if (cookieName) {\n      localStorage.setItem(cookieName, JSON.stringify(this));\n    }\n  }\n\n  addListFilter(value: ListFilter): ListFilter {\n    if (this.listFilters === null || this.listFilters === undefined) {\n      this.listFilters = [];\n    }\n    const filter = this.listFilters.find((f) => f.field === value.field);\n    if (filter === null || filter === undefined) {\n      this.listFilters.push(value);\n      return value;\n    } else {\n      filter.value = value.value;\n      return filter;\n    }\n  }\n\n  addDateFilter(value: DateFilter): DateFilter {\n    if (this.dateFilters === null || this.dateFilters === undefined) {\n      this.dateFilters = [];\n    }\n    const filter = this.dateFilters.find((f) => f.field === value.field);\n    if (filter === null || filter === undefined) {\n      this.dateFilters.push(value);\n      return value;\n    } else {\n      filter.value = value.value;\n      return filter;\n    }\n  }\n\n  addStringFilter(value: StringFilter): StringFilter {\n    if (this.stringFilters === null || this.stringFilters === undefined) {\n      this.stringFilters = [];\n    }\n    const filter = this.stringFilters.find((f) => f.field === value.field);\n    if (filter === null || filter === undefined) {\n      this.stringFilters.push(value);\n      return value;\n    } else {\n      filter.value = value.value;\n      return filter;\n    }\n  }\n\n  addBooleanFilter(value: BooleanFilter): BooleanFilter {\n    if (this.booleanFilters === null || this.booleanFilters === undefined) {\n      this.booleanFilters = [];\n    }\n    const filter = this.booleanFilters.find((f) => f.field === value.field);\n    if (filter === null || filter === undefined) {\n      this.booleanFilters.push(value);\n      return value;\n    } else {\n      filter.value = value.value;\n      return filter;\n    }\n  }\n\n  addNumericFilter(value: NumericFilter): NumericFilter {\n    if (this.numericFilters === null || this.numericFilters === undefined) {\n      this.numericFilters = [];\n    }\n    const filter = this.numericFilters.find((f) => f.field === value.field);\n    if (filter === null || filter === undefined) {\n      this.numericFilters.push(value);\n      return value;\n    } else {\n      filter.value = value.value;\n      return filter;\n    }\n  }\n\n  clear(): void {\n    this.sortParams.length = 0;\n\n    this.stringFilters.map((f: StringFilter) => {\n      f.value = '';\n    });\n    this.booleanFilters.map((f: BooleanFilter) => {\n      f.value = null;\n    });\n    this.dateFilters.map((f: DateFilter) => {\n      f.value = new DateFilterValue({\n        lessThan: null,\n        greaterThan: null,\n      });\n    });\n    this.numericFilters.map((f: NumericFilter) => {\n      f.value = new NumericFilterValue({\n        lessThan: null,\n        greaterThan: null,\n        equalsTo: null,\n      });\n    });\n    this.listFilters.map((f: ListFilter) => {\n      f.value = [];\n      f.type = ListFilterType.None;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "booleanFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooleanFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dateFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "listFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "numericFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sortParams",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortParam[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stringFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "addBooleanFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "BooleanFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BooleanFilter",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BooleanFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addDateFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DateFilter",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addListFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ListFilter",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNumericFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NumericFilter",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addStringFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StringFilter",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restore",
                    "args": [
                        {
                            "name": "cookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "cookieName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cookieName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormsUtil",
            "id": "class-FormsUtil-4575c38d4728a8f692d50e8a941445f1",
            "file": "projects/components/src/util/forms-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { TableColumn } from '../component/table/contract/table-column';\nimport { ArrayUtil } from '../common/util/array-util';\n\nexport class FormsUtil {\n  static validateAllFormFields(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach((field) => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsTouched({ onlySelf: true });\n        control.markAsDirty({ onlySelf: true });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n\n  static controlIsInvalid(formGroup: FormGroup, controlName: string) {\n    return (\n      formGroup.controls[controlName]?.invalid &&\n      formGroup.controls[controlName]?.dirty\n    );\n  }\n\n  static matchValuesValidator(\n    matchTo: string\n  ): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl): ValidationErrors | null =>\n      !!control.parent &&\n      !!control.parent.value &&\n      control.value === control.parent.controls[matchTo].value\n        ? null\n        : { isMatching: false };\n  }\n\n  static requiredIf(\n    value: boolean\n  ): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl): ValidationErrors | null =>\n      !!control.parent &&\n      !!control.parent.value &&\n      control.value != null &&\n      value\n        ? null\n        : { isMatching: false };\n  }\n\n  static initFormFromColumns(columns: TableColumn[], dataItem: any) {\n    const form = new FormGroup({});\n    const flat = ArrayUtil.flatten(columns, 'columns');\n    flat.forEach((column: TableColumn) => {\n      const control = new FormControl(\n        {\n          value: dataItem ? dataItem[column.name] : undefined,\n          disabled: !column.editable,\n        },\n        FormsUtil.getValidators(column)\n      );\n      form.registerControl(column.name, control);\n    });\n    return form;\n  }\n\n  static getValidators(column: TableColumn) {\n    const validators = [];\n    if (column.required) {\n      validators.push(Validators.required);\n    }\n    if (column.minValue != null) {\n      validators.push(Validators.min(column.minValue));\n    }\n    if (column.maxValue != null) {\n      validators.push(Validators.max(column.maxValue));\n    }\n    return validators;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "controlIsInvalid",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormFromColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchValuesValidator",
                    "args": [
                        {
                            "name": "matchTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "matchTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requiredIf",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAllFormFields",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GradientDrawer",
            "id": "class-GradientDrawer-19621f6d17fa00282ec5899bc6171f15",
            "file": "projects/components/src/component/chart/legend-drawer/gradient-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\nimport { ILegendDrawer, LegendDrawOptions } from '../model/i-drawer-legend';\nimport { BasePoint } from '../model/point/base-point';\n\nexport class GradientDrawer implements ILegendDrawer {\n  draw(options: LegendDrawOptions<BasePoint>): void {\n    const container = d3\n      .select(options.context.parentElement)\n      .select('.legend-container');\n\n    container.selectAll('.gradient-legend').remove();\n\n    const svg = container\n      .append('svg')\n      .attr('class', 'gradient-legend')\n      .attr('width', options.width)\n      .attr('height', 32);\n\n    svg.selectAll('.legend-defs').remove();\n\n    const extent = d3.extent(\n      options.series[0]?.data as any,\n      (d: any) => d.value\n    ) as any;\n\n    const defs = svg.append('defs').attr('class', 'legend-defs') as any;\n\n    const linearGradient = defs\n      .append('linearGradient')\n      .attr('id', 'legend-gradient');\n\n    linearGradient\n      .selectAll('stop')\n      .data([...options.series[0]?.data].reverse())\n      .enter()\n      .append('stop')\n      .attr(\n        'offset',\n        (d) => ((d.value - extent[0]) / (extent[1] - extent[0])) * 100 + '%'\n      )\n      .attr('stop-color', (d) => d.color);\n\n    const g = svg.append('g').attr('class', 'gradient-legend');\n\n    g.append('rect')\n      .attr('width', options.width - 80)\n      .attr('transform', 'translate(40, 0)')\n      .attr('height', 4)\n      .style('fill', 'url(#legend-gradient)');\n\n    const xScale = d3\n      .scaleLinear()\n      .range([80, options.width - 80])\n      .domain(extent)\n      .nice();\n    const tickCount = options.width / 80;\n\n    const xAxis = d3.axisBottom(xScale).tickSize(8).ticks(tickCount);\n\n    g.call(xAxis).call((node) => {\n      node.select('.domain').remove();\n      node.selectAll('line').remove();\n    });\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILegendDrawer"
            ]
        },
        {
            "name": "GroupRowComponentBase",
            "id": "class-GroupRowComponentBase-3878c1a7f327fef9432d730ec293d682",
            "file": "projects/components/src/component/table/base/group-row-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableRow} from '../contract/table-row';\nimport {TableColumn} from '../contract/table-column';\n\nexport abstract class GroupRowComponentBase<T> {\n  /**\n   * The row details are displayed for\n   */\n  abstract row: TableRow<T>;\n  /**\n   * displayed columns\n   */\n  abstract columns: TableColumn[];\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LineDrawer",
            "id": "class-LineDrawer-6094ab3dca5369dccac40d5f3a6c156e",
            "file": "projects/components/src/component/chart/drawer/line-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { BasePoint } from '../model/point/base-point';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\nimport { ChartOptions } from '../model/chart-options';\nimport { IDragEvent } from '../model/i-drag-event';\nimport { DispatchType } from '../model/enum/dispatch-type';\n\nexport class LineDrawer implements IDrawer<BasePoint> {\n  dispatch: d3.Dispatch<IDragEvent<Series<BasePoint>>>;\n\n  constructor() {\n    this.dispatch = d3.dispatch(DispatchType.moveLine);\n  }\n\n  draw(\n    series: Series<BasePoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any,\n    options: ChartOptions\n  ): void {\n    const points = series.data;\n\n    const path = d3\n      .line<BasePoint>()\n      .curve(series.curveType)\n      .defined((d) => d.x != null && d.y != null)\n      .x((d) => scaleX(d.x))\n      .y((d) => scaleY(d.y));\n    const seriesIndex = options.series.findIndex((_) => _.id === series.id);\n\n    context\n      .append('path')\n      .attr('class', (d: BasePoint) =>\n        series?.drag.enable ? 'draggable' : null\n      )\n      .attr('data-draggable-id', seriesIndex)\n      .attr('fill', 'none')\n      .attr('stroke', series.color)\n      .attr('stroke-dasharray', series?.strokeDasharray)\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\n      .style('cursor', series?.drag?.enable ? 'move' : 'default')\n      .datum(points)\n      .attr('d', path as any);\n\n    const u = context.append('g').attr('class', 'grabbers');\n\n    const emit = (event: DragEvent, target: Series<BasePoint>) => {\n      this.dispatch.apply(DispatchType.moveLine, {\n        target,\n        event,\n      });\n    };\n\n    if (series.drag.enable) {\n      u.selectAll('circle')\n        .data(points)\n        .enter()\n        .append('circle')\n        .attr('data-grabber-id', seriesIndex)\n        .attr('stroke', series?.drag?.grabbers?.stroke ?? series?.color)\n        .attr('stroke-width', series?.drag?.grabbers?.strokeWidth ?? 1)\n        .attr('fill', series?.drag?.grabbers?.fill ?? series?.color)\n        .attr('r', series?.drag?.grabbers?.radius ?? 4)\n        .attr('cx', function (d) {\n          return scaleX(d.x);\n        })\n        .attr('cy', function (d) {\n          return scaleY(d.y);\n        })\n        .style('cursor', 'move')\n        .call(\n          d3.drag().on('start drag end', function (event, d: BasePoint) {\n            d.x = scaleX.invert(event.sourceEvent?.offsetX);\n            d.y = scaleY.invert(event.sourceEvent?.offsetY);\n            d3.select(this).attr('cx', scaleX(d.x)).attr('cy', scaleY(d.y));\n\n            context\n              .select(`[data-draggable-id='${seriesIndex}']`)\n              .attr('d', path);\n\n            emit(event, series);\n\n            if (series?.drag?.extendLine) {\n              drawExtendedLine();\n            }\n          })\n        );\n\n      u.exit().remove();\n    }\n\n    const drawExtendedLine = () => {\n      context.selectAll(`[data-extended-id='${seriesIndex}']`).remove();\n\n      const p1 = points[0];\n      const p2 = points[points.length - 1];\n\n      const distance = Math.sqrt(\n        Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p2.y, 2)\n      );\n\n      if (distance <= 0) {\n        return;\n      }\n\n      const extendLength = 50;\n\n      const extendedEndX = p2.x + ((p2.x - p1.x) / distance) * extendLength;\n      const extendedEndY = p2.y + ((p2.y - p1.y) / distance) * extendLength;\n\n      const extendedStartX = p1.x - ((p2.x - p1.x) / distance) * extendLength;\n      const extendedStartY = p1.y - ((p2.y - p1.y) / distance) * extendLength;\n\n      context\n        .append('line')\n        .attr('class', 'extendedLine')\n        .attr('data-extended-id', seriesIndex)\n        .attr('stroke', series?.color)\n        .attr('stroke-width', series?.strokeWidth)\n        .attr('stroke-dasharray', series?.strokeDasharray)\n        .attr('x1', scaleX(p1.x))\n        .attr('y1', scaleY(p1.y))\n        .attr('x2', scaleX(extendedStartX))\n        .attr('y2', scaleY(extendedStartY));\n\n      context\n        .append('line')\n        .attr('class', 'extendedLine')\n        .attr('data-extended-id', seriesIndex)\n        .attr('stroke', series?.color)\n        .attr('stroke-width', series?.strokeWidth)\n        .attr('stroke-dasharray', series?.strokeDasharray)\n        .attr('x1', scaleX(p2.x))\n        .attr('y1', scaleY(p2.y))\n        .attr('x2', scaleX(extendedEndX))\n        .attr('y2', scaleY(extendedEndY));\n    };\n\n    if (series?.drag?.extendLine && points?.length) {\n      drawExtendedLine();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "dispatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Dispatch<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "ListFilter",
            "id": "class-ListFilter-b2df756c26f44badb134f550f2d6bf7a",
            "file": "projects/components/src/component/filter/contarct/list-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\nimport {ListFilterType} from '../enum/list-filter-type.enum';\n\nexport class ListFilter extends FilterBase {\n  override value: any[];\n  type: ListFilterType;\n\n  constructor(options?: {\n    value?: any[];\n    type?: ListFilterType;\n    field: string;\n    name: string;\n  }) {\n    super(options);\n    if (options) {\n      this.value = options.value || this.value;\n      this.type = options.type || ListFilterType.None;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-9ff8a099d7a7e9a96cb21c6da2c86a35",
            "file": "projects/components/src/component/message/model/message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Message {\n  name: string | null | undefined;\n  title: string | null | undefined;\n  text: string | null | undefined;\n  infinite: boolean;\n  duration = 10000;\n  className: string[] | null | undefined;\n  palette = 'primary';\n  template: TemplateRef<any>;\n\n  constructor(options?: {\n    name?: string;\n    title: string;\n    text?: string;\n    infinite?: boolean;\n    duration?: number;\n    palette?: string;\n    className?: string[];\n    template?: TemplateRef<any>;\n  }) {\n    if (options) {\n      this.name = options.name;\n      this.title = options.title;\n      this.text = options.text;\n      this.infinite = options.infinite || false;\n      this.className = options.className;\n      if (options.palette) {\n        this.palette = options.palette;\n      }\n      this.template = options.template;\n      if (options.duration && options.duration > 0) {\n        this.duration = options.duration;\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "duration",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "infinite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalInstance",
            "id": "class-ModalInstance-57682bc63d704d8bb2b60f74b570010c",
            "file": "projects/components/src/component/modal/model/modal-instance.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\nimport { IModalResult } from './i-modal-result';\nimport { ComponentRef } from '@angular/core';\nimport { TetaContentRef } from '../../../common/contract/teta-content-ref';\nimport { ModalContainerComponent } from '../modal-container/modal-container.component';\n\nexport class ModalInstance {\n  onClose: Observable<IModalResult>;\n  private _onClose: Subject<IModalResult> = new Subject<IModalResult>();\n\n  constructor(\n    private _window: ComponentRef<ModalContainerComponent>,\n    private _content: TetaContentRef\n  ) {\n    this.onClose = this._onClose.asObservable();\n    if (this._window && this._window.instance) {\n      this._window.instance.closeEvent.subscribe((event: IModalResult) => {\n        this.close(event);\n      });\n    }\n  }\n\n  get window(): ComponentRef<ModalContainerComponent> {\n    return this._window;\n  }\n\n  get component(): ComponentRef<any> | null {\n    return this._content.componentRef ? this._content.componentRef : null;\n  }\n\n  close = (event?: IModalResult) => {\n    this._onClose.next(event);\n    this._onClose.complete();\n    this.destroy();\n  };\n\n  private destroy(): void {\n    this._window.destroy();\n\n    if (this._content && this._content.viewRef) {\n      this._content.viewRef.destroy();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_window",
                        "type": "ComponentRef<ModalContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_content",
                        "type": "TetaContentRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_window",
                        "type": "ComponentRef<ModalContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_content",
                        "type": "TetaContentRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_onClose",
                    "defaultValue": "new Subject<IModalResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IModalResult>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "close",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IModalResult>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "window": {
                    "name": "window",
                    "getSignature": {
                        "name": "window",
                        "type": "",
                        "returnType": "ComponentRef<ModalContainerComponent>",
                        "line": 23
                    }
                },
                "component": {
                    "name": "component",
                    "getSignature": {
                        "name": "component",
                        "type": "",
                        "returnType": "ComponentRef | null",
                        "line": 27
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumericFilter",
            "id": "class-NumericFilter-73540efd86c31d0dd480b1e34899fa3d",
            "file": "projects/components/src/component/filter/contarct/numeric-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\nimport {NumericFilterValue} from './numeric-filter-value';\n\nexport class NumericFilter extends FilterBase {\n  override value: NumericFilterValue;\n  strict: boolean;\n\n  constructor(options?: {\n    value?: NumericFilterValue;\n    strict?: boolean;\n    field: string;\n    name: string;\n  }) {\n    super(options);\n    if (options) {\n      this.value = options.value || this.value;\n      this.strict = options.strict || false;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilterValue",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumericFilterValue",
            "id": "class-NumericFilterValue-f9d738f2d8d2895b398e3b47fff9d40b",
            "file": "projects/components/src/component/filter/contarct/numeric-filter-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class NumericFilterValue {\n  /**\n   * Значение должно быть меньше чем\n   */\n  lessThan: number | null | undefined;\n  /**\n   * Значение должно быть больше чем\n   */\n  greaterThan: number | null | undefined;\n  /**\n   * Значение должно быть равно\n   */\n  equalsTo: number | null | undefined;\n\n  constructor(options?: {\n    lessThan?: number | null | undefined;\n    greaterThan?: number | null | undefined;\n    equalsTo?: number | null | undefined;\n  }) {\n    if (options) {\n      this.lessThan = options.lessThan;\n      this.greaterThan = options.greaterThan;\n      this.equalsTo = options.equalsTo;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "equalsTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть равно</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nЗначение должно быть равно\n"
                },
                {
                    "name": "greaterThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть больше чем</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nЗначение должно быть больше чем\n"
                },
                {
                    "name": "lessThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть меньше чем</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nЗначение должно быть меньше чем\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagerState",
            "id": "class-PagerState-1d598ed8826f456cc45489ff45e57d99",
            "file": "projects/components/src/component/pager/model/pager-state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PagerState {\n  /**\n   * Текущая страница\n   */\n  page = 0;\n\n  /**\n   * Количество записей на странице\n   */\n  pageSize = 30;\n  /**\n   * Количество страниц\n   */\n  count: number;\n  /**\n   * Количество записей\n   */\n  totalCount: number;\n  /**\n   * первая видимая страница\n   */\n  start: number;\n  /**\n   * Последняя видимая страница\n   */\n  end: number;\n  /**\n   * Список страниц\n   */\n  pages: number[];\n\n  /**\n   * Инициализация из анонимного объекта\n   */\n  constructor(options?: {\n    page?: number;\n    pageSize?: number;\n    count?: number;\n    totalCount?: number;\n  }) {\n    if (options) {\n      this.pageSize = options.pageSize || 30;\n      this.count = options.count !== null && options.count !== undefined ? options.count : this.count;\n      this.totalCount = options.totalCount !== null && options.totalCount !== undefined ? options.totalCount : this.totalCount;\n      this.page = options.page !== null && options.page !== undefined ? options.page : 0;\n      this.createPages();\n    }\n  }\n\n  createPages() {\n    if (this.page > this.count) {\n      this.page = this.count > 0 ? this.count - 1 : 0;\n    }\n\n    let start = 0;\n    let end = this.count - 1;\n    if (this.count > 5) {\n      start = this.page - 2;\n      end = this.page + 2;\n      if (start < 0) {\n        start = 0;\n        end = 4;\n      }\n      const rightShift = this.count - 1 - end;\n      if (rightShift < 0) {\n        start = this.count - 5;\n        end = this.count - 1;\n      }\n    }\n\n    const arr = [];\n    for (let i = start; i <= end; i++) {\n      arr.push(i);\n    }\n\n    this.start = start;\n    this.end = end;\n    this.pages = arr;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество страниц</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nКоличество страниц\n"
                },
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Последняя видимая страница</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nПоследняя видимая страница\n"
                },
                {
                    "name": "page",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Текущая страница</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nТекущая страница\n"
                },
                {
                    "name": "pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>Список страниц</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nСписок страниц\n"
                },
                {
                    "name": "pageSize",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество записей на странице</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nКоличество записей на странице\n"
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>первая видимая страница</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nпервая видимая страница\n"
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество записей</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nКоличество записей\n"
                }
            ],
            "methods": [
                {
                    "name": "createPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagerUtil",
            "id": "class-PagerUtil-ea3ef096b8b24616500f88ea6b334e54",
            "file": "projects/components/src/component/pager/util/pager-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {PagerState} from '../model/pager-state';\n\nexport class PagerUtil {\n  static getPage<T>(data: T[], paging: PagerState): T[] {\n    return data.slice(paging.page * paging.pageSize, (paging.page + 1) * paging.pageSize);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paging",
                            "type": "PagerState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paging",
                            "type": "PagerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PickerLocaleModel",
            "id": "class-PickerLocaleModel-ec7eb18153e5296fabe9cb90b75be68a",
            "file": "projects/components/src/component/date-picker/model/picker-locale-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PickerLocaleModel {\n  dayNames: string[];\n  dayNamesShort: string[];\n  dayNamesMin: string[];\n  monthNames: string[];\n  monthNamesShort: string[];\n  today: string;\n\n  public constructor(options?: {\n    dayNames: string[];\n    dayNamesShort: string[];\n    dayNamesMin: string[];\n    monthNames: string[];\n    monthNamesShort: string[];\n    today: string;\n  }) {\n    if (options) {\n      this.dayNames = options.dayNames;\n      this.dayNamesShort = options.dayNamesShort;\n      this.dayNamesMin = options.dayNamesMin;\n      this.monthNames = options.monthNames;\n      this.monthNamesShort = options.monthNamesShort;\n      this.today = options.today;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dayNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "dayNamesMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dayNamesShort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "monthNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "monthNamesShort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PieDrawer",
            "id": "class-PieDrawer-e003550254746e90c0ba2aa01eacded0",
            "file": "projects/components/src/component/chart/drawer/pie-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { BasePoint } from '../model/point/base-point';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\n\nexport class PieDrawer implements IDrawer<BasePoint> {\n  draw(\n    series: Series<BasePoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any\n  ): void {}\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "PlotBand",
            "id": "class-PlotBand-df1b980baad87bc7d6f8efe6fad0cac5",
            "file": "projects/components/src/component/chart/model/plot-band.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PlotBand {\n  id: any;\n  from: number;\n  to: number;\n  label?: string;\n  color?: string;\n  showGrabbers?: boolean;\n  draggable?: boolean;\n  resizable?: boolean;\n  min?: number;\n  max?: number;\n  opacity?: number;\n\n  constructor(options?: {\n    id: any;\n    from: number;\n    to: number;\n    label?: string;\n    color?: string;\n    showGrabbers?: boolean;\n    draggable?: boolean;\n    resizable?: boolean;\n    min?: number;\n    max?: number;\n    opacity?: number;\n  }) {\n    this.id = options?.id;\n    this.from = options?.from;\n    this.to = options?.to;\n    this.label = options?.label;\n    this.color = options?.color || '#59AE501A';\n    this.showGrabbers =\n      options?.showGrabbers != null ? options.showGrabbers : true;\n    this.draggable = options?.draggable != null ? options?.draggable : false;\n    this.resizable = options?.resizable != null ? options?.resizable : true;\n    this.min = options?.min;\n    this.max = options?.max;\n    this.opacity = options?.opacity;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "resizable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "showGrabbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PlotLine",
            "id": "class-PlotLine-38d16754b2d67a810d3b465f1687a043",
            "file": "projects/components/src/component/chart/model/plot-line.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PlotLine {\n  id: number;\n  width?: number;\n  value: number;\n  label?: string;\n  color?: string;\n  dashed?: boolean;\n  min?: number;\n  max?: number;\n\n  constructor(options?: {\n    id: number;\n    width?: number;\n    value: number;\n    label?: string;\n    color?: string;\n    dashed?: boolean;\n    min?: number;\n    max?: number;\n  }) {\n    this.id = options?.id;\n    this.width = options?.width || 1;\n    this.value = options?.value;\n    this.label = options?.label;\n    this.dashed = options?.dashed || false;\n    this.color = options?.color || 'var(--color-text-70)';\n    this.min = options?.min;\n    this.max = options?.max;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dashed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PositionUtil",
            "id": "class-PositionUtil-d8e998d507f5eefec74e4a433905daab",
            "file": "projects/components/src/common/util/position-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRect } from '../contract/i-rect';\nimport { Align } from '../enum/align.enum';\nimport { VerticalAlign } from '../enum/vertical-align.enum';\n\nexport class PositionUtil {\n  public static getPosition(\n    containerPosition: IRect,\n    elementPosition: IRect,\n    align: Align,\n    verticalAlign: VerticalAlign,\n    margin: number = 0,\n    verticalMargin: number = 0\n  ): IRect {\n    const rect: IRect = {};\n    const elementWidth = elementPosition.right - elementPosition.left;\n    const elementHeight = elementPosition.bottom - elementPosition.top;\n    const containerWidth = containerPosition.right - containerPosition.left;\n    const containerHeight = containerPosition.bottom - containerPosition.top;\n    if (align === Align.left) {\n      rect.left = containerPosition.left + margin;\n    }\n    if (align === Align.right) {\n      rect.left = containerPosition.right - elementWidth - margin;\n    }\n    if (align === Align.center) {\n      rect.left =\n        (containerPosition.left + containerPosition.right) / 2 -\n        elementWidth / 2;\n    }\n    if (align === Align.fitWidth) {\n      rect.left = containerPosition.left + margin;\n      rect.right = window.innerWidth - containerPosition.right + margin;\n    }\n\n    if (align === Align.minWidth) {\n      rect.left = containerPosition.left + margin;\n      rect.minWidth = containerWidth;\n    }\n\n    if (verticalAlign === VerticalAlign.auto) {\n      if (\n        containerPosition.bottom +\n          (elementPosition.bottom - elementPosition.top) <=\n        window.innerHeight\n      ) {\n        verticalAlign = VerticalAlign.bottom;\n      } else {\n        verticalAlign = VerticalAlign.top;\n      }\n    }\n    if (verticalAlign === VerticalAlign.top) {\n      rect.bottom = window.innerHeight - containerPosition.top + verticalMargin;\n    }\n    if (verticalAlign === VerticalAlign.bottom) {\n      rect.top = containerPosition.bottom + verticalMargin;\n    }\n    if (verticalAlign === VerticalAlign.center) {\n      rect.top =\n        (containerPosition.top + containerPosition.bottom) / 2 -\n        elementHeight / 2;\n    }\n\n    if (rect.left < 0) {\n      rect.left = 0;\n    }\n    if (rect.top + elementHeight > window.innerHeight || rect.bottom < 0) {\n      rect.bottom = 0;\n    }\n    if (rect.top < 0) {\n      rect.top = 0;\n    }\n    if (verticalAlign === VerticalAlign.bottom) {\n      rect.maxHeight = window.innerHeight - rect.top;\n    }\n    if (verticalAlign === VerticalAlign.top) {\n      rect.maxHeight = containerPosition.top;\n    }\n    return rect;\n  }\n\n  public static setElementPosition(element: HTMLElement, rect: IRect): void {\n    element.style.left = rect.left != null ? `${rect.left}px` : '';\n    element.style.right = rect.right != null ? `${rect.right}px` : '';\n    element.style.top = rect.top != null ? `${rect.top}px` : '';\n    element.style.bottom = rect.bottom != null ? `${rect.bottom}px` : '';\n    element.style.maxHeight =\n      rect.maxHeight != null ? `${rect.maxHeight}px` : '';\n    element.style.minWidth = rect.minWidth != null ? `${rect.minWidth}px` : '';\n  }\n\n  public static getMaxHeight(position: IRect): number | null {\n    let maxHeight = null;\n    maxHeight = 1;\n    return maxHeight;\n  }\n\n  public static getMaxWidth(position: IRect): number | null {\n    let maxWidth = null;\n    maxWidth = 1;\n    return maxWidth;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getMaxHeight",
                    "args": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMaxWidth",
                    "args": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPosition",
                    "args": [
                        {
                            "name": "containerPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "align",
                            "type": "Align",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "verticalAlign",
                            "type": "VerticalAlign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "verticalMargin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "IRect",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "containerPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "align",
                            "type": "Align",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verticalAlign",
                            "type": "VerticalAlign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verticalMargin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setElementPosition",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Scale",
            "id": "class-Scale-f9e7e1e5c4bbcc17fb6e3d53dec18deb",
            "file": "projects/chart/src/chart/core/scale.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IChartConfig } from '../model/i-chart-config';\n\nexport class Scale {\n  private chartConfig: IChartConfig;\n\n  constructor(config: IChartConfig) {\n    this.chartConfig = config;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "chartConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScatterDrawer",
            "id": "class-ScatterDrawer-3e1f626030e820045678d3c06a3f50bb",
            "file": "projects/components/src/component/chart/drawer/scatter-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\nimport { ScatterPoint } from '../model/point/scatter-point';\nimport { ChartOptions } from '../model/chart-options';\n\nexport class ScatterDrawer implements IDrawer<ScatterPoint> {\n  private _virtualCanvas: any;\n  private _colorToData = {};\n  private _options: ChartOptions;\n  private _context:\n    | d3.Selection<SVGElement, unknown, null, undefined>\n    | d3.Selection<HTMLCanvasElement, unknown, null, undefined>;\n\n  draw(\n    series: Series<ScatterPoint>,\n    context:\n      | d3.Selection<SVGElement, unknown, null, undefined>\n      | d3.Selection<HTMLCanvasElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any,\n    options: ChartOptions\n  ): void {\n    this._options = options;\n\n    d3.select(context.node().parentNode as any).select('.virtual-canvas').remove();\n\n    if (series.renderTo === 'canvas') {\n      this._context = context;\n\n      const height = context.node().clientHeight;\n      const width = context.node().clientWidth;\n\n      const points = series.data;\n\n      const context2D = (context.node() as HTMLCanvasElement).getContext('2d');\n      this._virtualCanvas = d3\n        .select(context.node().parentNode as any)\n        .append('canvas')\n        .attr('class', 'virtual-canvas')\n        .style('display', 'none');\n\n      this._virtualCanvas.attr('width', width).attr('height', height);\n      const virtualContext = this._virtualCanvas.node().getContext('2d');\n\n      context.on('mouseout', () => {\n        d3.select(this._context.node().parentNode as any)\n          .select('.tooltip-chart')\n          .style('display', 'none');\n\n        context.on('mousemove', null);\n      });\n\n      context.on('mouseenter', () => {\n        d3.select(this._context.node().parentNode as any)\n          .select('.tooltip-chart')\n          .style('display', null);\n        context.on('mousemove', (e) => this.handleMouseMove(e));\n      });\n\n      points.forEach((d: any, idx) => {\n        const color = this.getColor(idx);\n        this._colorToData[color] = d;\n        virtualContext.fillStyle = color;\n        context2D.fillStyle = d.color;\n\n        const cx = scaleX(d.x);\n        const cy = scaleY(d.y);\n\n        context2D.beginPath();\n        context2D.arc(cx, cy, d.radius, 0, 2 * Math.PI);\n        context2D.closePath();\n        context2D.fill();\n\n        virtualContext.beginPath();\n        virtualContext.arc(cx, cy, d.radius, 0, 2 * Math.PI);\n        virtualContext.closePath();\n        virtualContext.fill();\n      });\n    }\n  }\n\n  private getColor(index) {\n    return d3\n      .rgb(\n        Math.floor(index / 256 / 256) % 256,\n        Math.floor(index / 256) % 256,\n        index % 256\n      )\n      .toString();\n  }\n\n  private tooltipPosition(event) {\n    const centerX = this._context.node().clientWidth / 2;\n    const centerY = this._context.node().clientHeight / 2;\n\n    const padding = { x: 10, y: 10 };\n\n    const scene = {\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\n      bottom:\n        event.pageY > centerY\n          ? `${window.innerHeight - event.pageY}px`\n          : 'initial',\n      right:\n        event.pageX > centerX\n          ? `${window.innerWidth - event.pageX + padding.x}px`\n          : 'initial',\n    };\n\n    return scene;\n  }\n\n  private handleMouseMove(event: MouseEvent) {\n    const mouse = d3.pointer(event);\n\n    const virtualContext = this._virtualCanvas.node().getContext('2d');\n\n    const image = virtualContext.getImageData(mouse[0], mouse[1], 1, 1);\n    const color = d3.rgb.apply(null, image.data).toString();\n    const possibleDatum = this._colorToData[color];\n\n    const { top, right, bottom, left } = this.tooltipPosition(event);\n\n    if (possibleDatum) {\n      const formatted = this._options.tooltip?.format([possibleDatum]);\n      d3.select(this._context.node().parentNode as any)\n        .select('.tooltip-chart')\n        .style('z-index', 3)\n        .style('top', top)\n        .style('right', right)\n        .style('bottom', bottom)\n        .style('left', left)\n        .html(formatted);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "_colorToData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_virtualCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<ScatterPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<ScatterPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: string; top: string; bottom: string; right: string; }",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "Series",
            "id": "class-Series-4969c08506e5b6fe2ff05d2a6e047c86",
            "file": "projects/components/src/component/chart/model/series.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BasePoint } from './point/base-point';\nimport { SeriesType } from './enum/series-type';\nimport { IDrawer } from './i-drawer';\nimport * as d3 from 'd3';\n\nexport class Series<T extends BasePoint> {\n  id?: number | string;\n  renderTo?: 'canvas' | 'svg';\n  type: SeriesType;\n  curveType?: d3.CurveFactoryLineOnly | d3.CurveFactory;\n  data: T[];\n  axisFormat?: () => void;\n  name?: string;\n  xAxisIndex?: number;\n  yAxisIndex?: number;\n  drawer?: IDrawer<T>;\n  strokeWidth?: number;\n  strokeDasharray?: string;\n  visible?: boolean;\n  color?: string;\n  colorScale?: d3.ScaleSequential<any, any>;\n  drag?: {\n    enable?: boolean;\n    extendLine?: boolean;\n    grabbers?: {\n      radius?: number;\n      stroke?: string;\n      fill?: string;\n      strokeWidth?: string;\n    };\n  };\n  extend?: boolean;\n  showInLegend?: boolean;\n\n  constructor(options?: {\n    id?: number | string;\n    renderTo?: 'canvas' | 'svg';\n    type?: SeriesType;\n    curveType?: d3.CurveFactoryLineOnly | d3.CurveFactory;\n    data?: T[];\n    axisFormat?: () => void;\n    name?: string;\n    xAxisIndex?: number;\n    yAxisIndex?: number;\n    drawer?: IDrawer<T>;\n    strokeWidth?: number;\n    strokeDasharray?: string;\n    visible?: boolean;\n    color?: string;\n    colorScale?: d3.ScaleSequential<any, any>;\n    drag?: {\n      enable?: boolean;\n      extendLine?: boolean;\n      grabbers?: {\n        radius?: number;\n        stroke?: string;\n        fill?: string;\n        strokeWidth?: string;\n      };\n    };\n    extend?: boolean;\n    showInLegend?: boolean;\n  }) {\n    this.id = options?.id;\n    this.renderTo = options?.renderTo ?? 'svg';\n    this.type = options?.type != null ? options?.type : SeriesType.line;\n    this.curveType =\n      options?.curveType != null ? options?.curveType : d3.curveLinear;\n    this.data = options?.data?.filter((_) => !isNaN(_.x) && !isNaN(_.y));\n    this.axisFormat = options?.axisFormat;\n    this.name = options?.name;\n    this.xAxisIndex = options?.xAxisIndex != null ? options?.xAxisIndex : 0;\n    this.yAxisIndex = options?.yAxisIndex != null ? options?.yAxisIndex : 0;\n    this.drawer = options?.drawer;\n    this.strokeWidth = options?.strokeWidth;\n    this.strokeDasharray = options?.strokeDasharray ?? null;\n    this.visible = options?.visible || true;\n    this.color = options?.color ?? 'cyan';\n    this.colorScale = options?.colorScale;\n    this.drag = { enable: false, extendLine: false, ...options?.drag };\n    this.showInLegend =\n      options?.showInLegend != null ? options?.showInLegend : true;\n    this.extend = options?.extend != null ? options?.extend : false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "axisFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "colorScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.ScaleSequential<any | any>",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "curveType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.CurveFactoryLineOnly | d3.CurveFactory",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "drag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDrawer<T>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "extend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "renderTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"canvas\" | \"svg\"",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "showInLegend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "strokeDasharray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesType",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "xAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "yAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Series3d",
            "id": "class-Series3d-64c05564684b5611649946d8cec85a2f",
            "file": "projects/components/src/component/chart-3d/model/series-3d.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base3dPoint } from './base-3d-point';\n\nexport class Series3d<T extends Base3dPoint> {\n  color?: string;\n  points: T[];\n\n  constructor(options?: { color?: string; points: T[] }) {\n    this.color = options?.color;\n    this.points = options?.points || [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortEvent",
            "id": "class-SortEvent-ec2e983a05768fe1b89fbb8cf804badf",
            "file": "projects/components/src/component/table/contract/sort-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from './table-column';\n\nexport class SortEvent {\n  column: TableColumn;\n  shiftKey: boolean;\n\n  constructor(column: TableColumn, shiftKey: boolean) {\n    this.column = column;\n    this.shiftKey = shiftKey;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shiftKey",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shiftKey",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "shiftKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortParam",
            "id": "class-SortParam-ba580de42befe03d4ae4226227616df0",
            "file": "projects/components/src/component/filter/contarct/sort-param.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SortParam {\n  /**\n   * Поле сортировки\n   */\n  field: string;\n  /**\n   * Направление (true: Asc, false: Desc)\n   */\n  asc: boolean;\n  /**\n   * Порядок сортировки\n   */\n  order: number;\n\n  /**\n   * Инициализация из анонимного объекта\n   */\n  constructor(options?: {\n    field?: string;\n    asc?: boolean;\n    order?: number;\n  }) {\n    if (options) {\n      this.field = options.field || this.field;\n      this.asc = options.asc || false;\n      this.order = options.order || this.order;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "asc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Направление (true: Asc, false: Desc)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nНаправление (true: Asc, false: Desc)\n"
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле сортировки</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nПоле сортировки\n"
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядок сортировки</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nПорядок сортировки\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SplineDrawer",
            "id": "class-SplineDrawer-acd9b88d6a52c5248274a28870c25f22",
            "file": "projects/components/src/component/chart/drawer/spline-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\nimport { BasePoint } from '../model/point/base-point';\nimport { Series } from '../model/series';\nimport * as d3 from 'd3';\n\nexport class SplineDrawer implements IDrawer<BasePoint> {\n  draw(\n    series: Series<BasePoint>,\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\n    scaleX: any,\n    scaleY: any\n  ): void {\n    const points = series.data;\n\n    const path = d3\n      .line()\n      .curve(d3.curveCatmullRom)\n      .x((d: any) => scaleX(d.x))\n      .y((d: any) => scaleY(d.y));\n\n    context\n      .append('path')\n      .attr('transform', `translate(${0}, 0)`)\n      .attr('fill', 'none')\n      .attr('stroke', series.color)\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\n      .datum(points)\n      .attr('d', path as any)\n      .transition()\n      .duration(750);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "StateUtil",
            "id": "class-StateUtil-9c6d5b5d2304fc8a2acc7a87009ee10c",
            "file": "projects/components/src/component/table/util/state-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterState } from '../../filter/contarct/filter-state';\nimport { TableColumn } from '../contract/table-column';\nimport { SortParam } from '../../filter/contarct/sort-param';\nimport { FilterType } from '../../filter/enum/filter-type.enum';\nimport { SortEvent } from '../contract/sort-event';\n\nexport class StateUtil {\n  static hasSortedColumns(state: FilterState): boolean {\n    return state.sortParams && state.sortParams.length > 0;\n  }\n\n  static hasFilteredColumns(state: FilterState): boolean {\n    let hasFilters = false;\n    if (\n      state.stringFilters &&\n      state.stringFilters.some((filter) => filter.value && filter.value.length)\n    ) {\n      hasFilters = true;\n    }\n    if (\n      state.listFilters &&\n      state.listFilters.some((filter) => filter.value && filter.value.length)\n    ) {\n      hasFilters = true;\n    }\n    if (\n      state.numericFilters &&\n      state.numericFilters.some(\n        (filter) =>\n          filter &&\n          filter.value &&\n          ((filter.value.lessThan !== null &&\n            filter.value.lessThan !== undefined) ||\n            (filter.value.greaterThan !== null &&\n              filter.value.greaterThan !== undefined) ||\n            (filter.value.equalsTo !== null &&\n              filter.value.equalsTo !== undefined))\n      )\n    ) {\n      hasFilters = true;\n    }\n    if (\n      state.dateFilters &&\n      state.dateFilters.some(\n        (filter) =>\n          filter &&\n          filter.value &&\n          ((filter.value.lessThan !== null &&\n            filter.value.lessThan !== undefined) ||\n            (filter.value.greaterThan !== null &&\n              filter.value.greaterThan !== undefined))\n      )\n    ) {\n      hasFilters = true;\n    }\n\n    return hasFilters;\n  }\n\n  static getSortState(\n    state: FilterState,\n    column: TableColumn\n  ): SortParam | null {\n    if (state?.sortParams && state.sortParams.length) {\n      const param = state.sortParams.find((x) => x.field === column.sortField);\n      if (param) {\n        return param;\n      }\n    }\n    return null;\n  }\n\n  static isColumnFiltered(state: FilterState, column: TableColumn): boolean {\n    if (!column.filterable) {\n      return;\n    }\n    let filtered = false;\n    switch (column.filterType) {\n      case FilterType.string:\n        if (state?.stringFilters) {\n          const filter = state.stringFilters.find(\n            (x) => x.field === column.filterField\n          );\n          if (filter && filter.value && filter.value.length) {\n            filtered = true;\n          }\n        }\n        break;\n      case FilterType.list:\n        if (state?.listFilters) {\n          const filter = state.listFilters.find(\n            (x) => x.field === column.filterField\n          );\n          if (filter && filter.value && filter.value.length) {\n            filtered = true;\n          }\n        }\n        break;\n      case FilterType.number:\n        if (state?.numericFilters) {\n          const filter = state.numericFilters.find(\n            (x) => x.field === column.filterField\n          );\n          if (\n            filter &&\n            filter.value &&\n            ((filter.value.lessThan !== null &&\n              filter.value.lessThan !== undefined) ||\n              (filter.value.greaterThan !== null &&\n                filter.value.greaterThan !== undefined) ||\n              (filter.value.equalsTo !== null &&\n                filter.value.equalsTo !== undefined))\n          ) {\n            filtered = true;\n          }\n        }\n        break;\n      case FilterType.date:\n        if (state?.dateFilters) {\n          const filter = state.dateFilters.find(\n            (x) => x.field === column.filterField\n          );\n          if (\n            filter &&\n            filter.value &&\n            ((filter.value.lessThan !== null &&\n              filter.value.lessThan !== undefined) ||\n              (filter.value.greaterThan !== null &&\n                filter.value.greaterThan !== undefined))\n          ) {\n            filtered = true;\n          }\n        }\n        break;\n    }\n    return filtered;\n  }\n\n  static sortColumn(sortEvent: SortEvent, state: FilterState): FilterState {\n    const column = sortEvent.column;\n    const shiftKey = sortEvent.shiftKey;\n    const sort = state.sortParams.find(\n      (sortParam: SortParam) => sortParam.field === column.sortField\n    );\n    if (sort === null || sort === undefined) {\n      if (!shiftKey) {\n        state.sortParams.length = 0;\n      }\n      state.sortParams.push(\n        new SortParam({ field: column.sortField, asc: true, order: 0 })\n      );\n    } else {\n      if (!sort.asc) {\n        state.sortParams = StateUtil.clearSortParam(sort, state.sortParams);\n      } else {\n        sort.asc = !sort.asc;\n        if (!shiftKey) {\n          state.sortParams = [sort];\n        }\n      }\n    }\n    return new FilterState(state);\n  }\n\n  static clearSortParam(sort: SortParam, sortParams: SortParam[]) {\n    const index = sortParams.indexOf(sort);\n    sortParams.splice(index, 1);\n    return sortParams;\n  }\n\n  static clearSort(column: TableColumn, state: FilterState): FilterState {\n    state.sortParams = state.sortParams.filter(\n      (_) => _.field !== column.sortField\n    );\n    return new FilterState(state);\n  }\n\n  static clearAllSort(state: FilterState): FilterState {\n    state.sortParams = [];\n    return new FilterState(state);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "clearAllSort",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSortParam",
                    "args": [
                        {
                            "name": "sort",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortParams",
                            "type": "SortParam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortParams",
                            "type": "SortParam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SortParam | null",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFilteredColumns",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasSortedColumns",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isColumnFiltered",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StringFilter",
            "id": "class-StringFilter-846ec651a72b69d38ebc9016c151a51d",
            "file": "projects/components/src/component/filter/contarct/string-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\nimport {StringFilterType} from '../enum/string-filter-type.enum';\n\nexport class StringFilter extends FilterBase {\n  override value: string;\n  type: StringFilterType;\n\n\n  constructor(options?: {\n    value?: string;\n    type?: StringFilterType;\n    field: string;\n    name: string;\n  }) {\n    super(options);\n    if (options) {\n      this.value = options.value || this.value;\n      this.type = options.type || StringFilterType.Contains;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StringUtil",
            "id": "class-StringUtil-68028609fceaa0ccdad7c6ac10f88b5f",
            "file": "projects/components/src/util/string-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class StringUtil {\n  static firstLetterToLower(input: string) {\n    return input.charAt(0).toLocaleLowerCase() + input.slice(1);\n  };\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "firstLetterToLower",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SwatchDrawer",
            "id": "class-SwatchDrawer-83730f62b9927f09adbf13a8457c6f27",
            "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\nimport { SeriesType } from '../model/enum/series-type';\nimport { ILegendDrawer, LegendDrawOptions } from '../model/i-drawer-legend';\nimport { BasePoint } from '../model/point/base-point';\nimport { BarPoint } from '../model/point/bar-point';\n\nconst classTypeLegendMapping = new Map<SeriesType, string>()\n  .set(SeriesType.line, 'line')\n  .set(SeriesType.spline, 'line');\n\nexport class SwatchDrawer implements ILegendDrawer {\n  draw(options: LegendDrawOptions<BasePoint | BarPoint>): void {\n    d3.select(options.context.parentElement)\n      .select('.legend-container')\n      .selectAll('.legend')\n      .remove();\n\n    const defaultData = options.series?.filter(\n      (serie) => serie.type !== SeriesType.bar\n    );\n    const barData = options?.series\n      ?.filter((serie) => serie.type === SeriesType.bar)\n      .reduce((acc, serie) => {\n        const data = serie.data.map((_) => ({\n          ..._,\n          serieType: serie.type,\n          serieIndex: serie.id,\n        }));\n\n        return acc.concat(data);\n      }, []);\n\n    const legendContainer = d3\n      .select(options.context.parentElement)\n      .select('.legend-container')\n      .append('div')\n      .attr('class', 'legend padding-bottom-4');\n\n    const defaultLegend = legendContainer\n      .selectAll('div')\n      .data(defaultData)\n      .enter()\n      .append('div')\n      .attr('class', 'item')\n      .style('user-select', 'none');\n\n    const barLegend = legendContainer\n      .selectAll('.bar')\n      .data(barData)\n      .enter()\n      .append('div')\n      .attr('class', 'item bar')\n      .style('user-select', 'none');\n\n    defaultLegend\n      .append('div')\n      .attr('class', (_) => classTypeLegendMapping.get(_.type) || 'swatch')\n      .style('background', (_) =>\n        _.visible ? _.color ?? 'black' : 'var(--color-text-10)'\n      );\n\n    defaultLegend\n      .append('div')\n      .attr('class', 'label')\n      .text((_) => _.name ?? 'Без названия')\n      .style('text-decoration', (_) => (_.visible ? 'unset' : 'line-through'));\n\n    barLegend\n      .append('div')\n      .attr('class', 'swatch')\n      .style('background', (_) =>\n        _.visible ? _.color ?? 'black' : 'var(--color-text-10)'\n      );\n\n    barLegend\n      .append('div')\n      .attr('class', 'label')\n      .text((_) => _.label ?? 'Без названия')\n      .style('text-decoration', (_) => (_.visible ? 'unset' : 'line-through'));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint | BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint | BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILegendDrawer"
            ]
        },
        {
            "name": "TableColumn",
            "id": "class-TableColumn-a54c1fef0d220b60cfe77e116ded5afe",
            "file": "projects/components/src/component/table/contract/table-column.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterItem } from '../../filter/contarct/filter-item';\nimport { FilterType } from '../../filter/enum/filter-type.enum';\nimport { StringFilterType } from '../../filter/enum/string-filter-type.enum';\nimport { ListFilterType } from '../../filter/enum/list-filter-type.enum';\nimport { TableRow } from './table-row';\nimport { AggregationType } from '../enum/aggregation-type.enum';\n\nexport class TableColumn extends FilterItem {\n  /**\n   * Ширина\n   */\n  width = 150;\n  /**\n   * Коэффициент растяжения ячейки\n   */\n  flex = 0;\n  /**\n   * Стобец закреплен\n   */\n  locked: boolean;\n  /**\n   * Название столбца в строке результатов\n   */\n  override name: string;\n  /**\n   * Название столбца родителя\n   */\n  parentName: string;\n  /**\n   * Название столбца для заголовка таблицы\n   */\n  override caption: string;\n  /**\n   * Единицы измерения\n   */\n  unit: string;\n  /**\n   * список style классов для шапки таблицы\n   */\n  headCellClass: string[];\n  /**\n   * список style классов для ячейки таблицы\n   */\n  cellClass: string[];\n  /**\n   * Дополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например\n   */\n  data: any;\n  /**\n   * Колонка доступна для редактирования\n   */\n  editable: boolean;\n  /**\n   * Компонент для рендера ячейки\n   */\n  cellComponent: any;\n  /**\n   * Компонент для рендера заголовка столбца ячейки\n   */\n  headCellComponent: any;\n  /**\n   * Группировать по этому столбцу\n   */\n  groupBy: boolean;\n  /**\n   * Порядок группировки\n   */\n  groupingOrder = 0;\n  /**\n   *\n   */\n  groupByFn: ((row: TableRow<any>) => string) | undefined;\n  /**\n   * Дочерние колонки\n   */\n  override columns: TableColumn[];\n\n  /**\n   * Aggregate type\n   */\n  aggregate: AggregationType;\n\n  /**\n   * Значение по умолчанию при создании записи\n   */\n  defaultValue: any;\n\n  /**\n   * Значение по умолчанию при создании записи\n   */\n  maxValue: number;\n\n  /**\n   * Значение по умолчанию при создании записи\n   */\n  minValue: number;\n\n  /**\n   * Поле обязательно для заполнения\n   */\n  required: boolean;\n\n  /**\n   * Инициализация из анонимного объекта\n   */\n  constructor(options?: {\n    width?: number;\n    flex?: number;\n    sortOrder?: number;\n    locked?: boolean;\n    name?: string;\n    parentName?: string;\n    caption?: string;\n    hint?: string;\n    unit?: string;\n    sortable?: boolean;\n    sortField?: string;\n    filterable?: boolean;\n    filterField?: string;\n    filterType?: FilterType | null;\n    stringFilterType?: StringFilterType;\n    listFilterType?: ListFilterType;\n    strict?: boolean;\n    headCellClass?: string[];\n    cellClass?: string[];\n    data?: any;\n    editable?: boolean;\n    objectType?: boolean;\n    cellComponent?: any;\n    headCellComponent?: any;\n    filterComponent?: any;\n    groupBy?: boolean;\n    groupingOrder?: number;\n    groupByFn?: (row: TableRow<any>) => string;\n    columns?: any[];\n    aggregate?: AggregationType;\n    defaultValue?: any;\n    maxValue?: number;\n    minValue?: number;\n    required?: boolean;\n  }) {\n    super(options);\n    if (options) {\n      if (options.width && options.width > 0) {\n        this.width = options.width;\n      }\n\n      if (options.flex) {\n        this.flex = options.flex;\n      }\n      this.sortOrder = options.sortOrder || Number.MAX_VALUE;\n      this.headCellClass = !options.headCellClass ? [] : options.headCellClass;\n      this.cellClass = !options.cellClass ? [] : options.cellClass;\n      this.locked = options.locked || false;\n      this.name = options.name || '';\n      this.parentName = options.parentName;\n      this.caption =\n        options.caption === null || options.caption === undefined\n          ? this.name\n          : options.caption;\n      this.unit = options.unit || '';\n      this.data = options.data;\n      this.editable =\n        options.editable === null || options.editable === undefined\n          ? true\n          : options.editable;\n\n      if (options.columns && options.columns.length) {\n        this.columns = [];\n        this.columns = options.columns.map((x) => new TableColumn(x));\n      }\n\n      this.groupBy = options.groupBy ? options.groupBy : false;\n      this.groupingOrder = options.groupingOrder ? options.groupingOrder : 0;\n      this.groupByFn = options.groupByFn;\n\n      this.headCellComponent = options.headCellComponent;\n      this.cellComponent = options.cellComponent;\n      this.aggregate = options.aggregate;\n      this.defaultValue = options.defaultValue;\n      this.maxValue = options.maxValue;\n      this.minValue = options.minValue;\n      this.required = options.required;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 101,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AggregationType",
                    "optional": false,
                    "description": "<p>Aggregate type</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nAggregate type\n"
                },
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца для заголовка таблицы</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nНазвание столбца для заголовка таблицы\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "cellClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>список style классов для ячейки таблицы</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nсписок style классов для ячейки таблицы\n"
                },
                {
                    "name": "cellComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера ячейки</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nКомпонент для рендера ячейки\n"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>Дочерние колонки</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nДочерние колонки\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Дополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nДополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например\n"
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "editable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Колонка доступна для редактирования</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nКолонка доступна для редактирования\n"
                },
                {
                    "name": "flex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Коэффициент растяжения ячейки</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nКоэффициент растяжения ячейки\n"
                },
                {
                    "name": "groupBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Группировать по этому столбцу</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nГруппировать по этому столбцу\n"
                },
                {
                    "name": "groupByFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "groupingOrder",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядок группировки</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nПорядок группировки\n"
                },
                {
                    "name": "headCellClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>список style классов для шапки таблицы</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nсписок style классов для шапки таблицы\n"
                },
                {
                    "name": "headCellComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера заголовка столбца ячейки</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nКомпонент для рендера заголовка столбца ячейки\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Стобец закреплен</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nСтобец закреплен\n"
                },
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "minValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца в строке результатов</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nНазвание столбца в строке результатов\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "parentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца родителя</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nНазвание столбца родителя\n"
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Поле обязательно для заполнения</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nПоле обязательно для заполнения\n"
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Единицы измерения</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nЕдиницы измерения\n"
                },
                {
                    "name": "width",
                    "defaultValue": "150",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Ширина</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nШирина\n"
                },
                {
                    "name": "filterable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность фильтровать поле</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nВозможность фильтровать поле\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера фильтра</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nКомпонент для рендера фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для фильтрации</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nПоле для фильтрации\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType | null",
                    "optional": false,
                    "description": "<p>Тип фильтра</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nТип фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Подсказка</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nПодсказка\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "listFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность сортировать поле</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nВозможность сортировать поле\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для сортировки</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nПоле для сортировки\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "Number.MAX_VALUE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядковый номер</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nПорядковый номер\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Строгое сравнение</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nСтрогое сравнение\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "stringFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableColumnStore",
            "id": "class-TableColumnStore-1b724e586298fd84213c7d194cd83644",
            "file": "projects/components/src/component/table/contract/table-column-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TableColumnStore {\n  width: number;\n  flex: number;\n  locked: boolean;\n  name: string;\n  columns: TableColumnStore[];\n\n  constructor(options?: {\n    width?: number;\n    flex?: number;\n    sortOrder?: number;\n    locked?: boolean;\n    name?: string;\n    columns?: any[];\n  }) {\n    if (options) {\n      this.width = options?.width;\n      this.flex = options?.flex;\n      this.locked = options?.locked;\n      this.name = options?.name;\n      this.columns = options?.columns?.map((x) => new TableColumnStore(x));\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumnStore[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "flex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableContextMenuConfig",
            "id": "class-TableContextMenuConfig-d1bc4e6cefbf0153d82eccc3b18f3dcc",
            "file": "projects/components/src/component/table/contract/table-context-menu-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TableContextMenuConfig {\n  contextMenu = true;\n  copy = true;\n  delete = true;\n  add = true;\n\n  constructor(options?: {\n    contextMenu?: boolean;\n    copy?: boolean;\n    delete?: boolean;\n    add?: boolean;\n  }) {\n    if (options) {\n      this.contextMenu = options?.contextMenu;\n      this.copy = options?.copy;\n      this.delete = options?.delete;\n      this.add = options?.add;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "add",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "contextMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "copy",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "delete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableRow",
            "id": "class-TableRow-ea2b5ee0cf7f9e240400b0022a2cdc06",
            "file": "projects/components/src/component/table/contract/table-row.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as hash from 'object-hash';\n\nexport class TableRow<T> {\n  set edit(value: boolean) {\n    if (value !== this._edit) {\n      this._edit = value;\n      this._hash = null;\n    }\n  }\n\n  get edit(): boolean {\n    return this._edit;\n  }\n\n  expanded = false;\n  showDetails = false;\n  data: T;\n  isGroup: boolean;\n  level: number;\n  path: any[] = [];\n  groupColumn: string;\n  groupValue: any[] = [];\n\n  // children: GridRow<T>[] = [];\n  // parents: GridRow<T>[];\n  // private backup: any = {};\n  private _edit = false;\n  private _hash: string | null;\n\n  constructor(data?: any) {\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  public get hash(): string {\n    if (!this._hash) {\n      const hashObj: any = { ...this.data };\n      if (hashObj.children) {\n        delete hashObj.children;\n      }\n      this._hash = hash.sha1(hashObj);\n    }\n    return this._hash;\n  }\n\n  public editData(items?: any): void {\n    this.data = items;\n    this._hash = null;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_edit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "groupColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "groupValue",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "path",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "editData",
                    "args": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "edit": {
                    "name": "edit",
                    "setSignature": {
                        "name": "edit",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 4,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "edit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 11
                    }
                },
                "hash": {
                    "name": "hash",
                    "getSignature": {
                        "name": "hash",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableUtil",
            "id": "class-TableUtil-a976e8bd0b7cc8d51a1897e790eb09a4",
            "file": "projects/components/src/component/table/util/table-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from '../contract/table-column';\nimport {ArrayUtil} from '../../../common/util/array-util';\nimport {SortParam} from '../../filter/contarct/sort-param';\nimport {ListFilterType} from '../../filter/enum/list-filter-type.enum';\nimport {ListFilter} from '../../filter/contarct/list-filter';\nimport {NumericFilter} from '../../filter/contarct/numeric-filter';\nimport {DateFilter} from '../../filter/contarct/date-filter';\nimport {StringFilterType} from '../../filter/enum/string-filter-type.enum';\nimport {StringFilter} from '../../filter/contarct/string-filter';\nimport {FilterState} from '../../filter/contarct/filter-state';\n\nexport class TableUtil {\n  public static getColumnLeaves(column: TableColumn): TableColumn[] | null {\n    if (column?.columns?.length > 0) {\n      return ArrayUtil.flatten(column.columns, 'columns', true);\n    }\n    return null;\n  }\n\n  public static getGridTemplateColumns(columns: TableColumn[]): string {\n    const res = columns?.map((column: TableColumn) =>\n      column.flex > 0 ? `minmax(${column.width}px, ${column.flex}fr)` : `${column.width}px`).join(' ');\n    return res;\n  }\n\n  static getData<T>(data: T[], state: FilterState): T[] {\n    let result: T[] = data;\n    result = TableUtil.filterData(result, state);\n    result = TableUtil.sortData(result, state);\n    return result;\n  }\n\n  static sortData<T>(data: T[], state: FilterState): T[] {\n    let result: T[] = data;\n    const func = (sortParam: SortParam) => {\n      result = TableUtil.sort(result, sortParam);\n    };\n    if (state?.sortParams?.length > 0) {\n      state.sortParams.forEach(func);\n    }\n    return result;\n  }\n\n  static filterData<T>(data: T[], state: FilterState): T[] {\n    let result: T[] = data;\n    if (state?.stringFilters?.length) {\n      const stringFilter = (filter: StringFilter) => {\n        result = TableUtil.filterString(result, filter);\n      };\n      state.stringFilters.forEach(stringFilter);\n    }\n    if (state?.dateFilters?.length) {\n      const dateFilter = (filter: DateFilter) => {\n        result = TableUtil.filterDate(result, filter);\n      };\n      state.dateFilters.forEach(dateFilter);\n    }\n    if (state?.numericFilters?.length) {\n      const numericFilter = (filter: NumericFilter) => {\n        result = TableUtil.filterNumber(result, filter);\n      };\n      state.numericFilters.forEach(numericFilter);\n    }\n    if (state?.listFilters?.length) {\n      const listFilter = (filter: ListFilter) => {\n        result = TableUtil.filterList(result, filter);\n      };\n      state.listFilters.forEach(listFilter);\n    }\n    return result;\n  }\n\n  static filterString<T>(data: T[], filter: StringFilter): T[] {\n    if (filter.value === null || filter.value === undefined) {\n      return data;\n    }\n    const filterString = (row: T) => {\n      const item = row as any;\n      if (filter.type === StringFilterType.EndsWith) {\n        return item[filter.field].endsWith(filter.value);\n      }\n      if (filter.type === StringFilterType.Equals) {\n        return item[filter.field] === filter.value;\n      }\n      if (filter.type === StringFilterType.StartsWith) {\n        return item[filter.field].startsWith(filter.value);\n      }\n      return item[filter.field].indexOf(filter.value) >= 0;\n    };\n    return data.filter(filterString);\n  }\n\n  static filterDate<T>(data: T[], filter: DateFilter): T[] {\n    const filterDate = (row: T) => {\n      const item = row as any;\n      return (filter.value.lessThan === null || filter.value.lessThan === undefined\n        ? true\n        : filter.value.lessThan.getTime() > item[filter.field].getTime()) &&\n        (filter.value.greaterThan === null || filter.value.greaterThan === undefined\n          ? true\n          : filter.value.greaterThan.getTime() < item[filter.field].getTime());\n    };\n    return data.filter(filterDate);\n  }\n\n  static filterNumber<T>(data: T[], filter: NumericFilter): T[] {\n    const filterNumber = (row: T) => {\n      const item = row as any;\n      return (filter.value.lessThan === null || filter.value.lessThan === undefined\n        ? true\n        : filter.value.lessThan > item[filter.field]) &&\n        (filter.value.greaterThan === null || filter.value.greaterThan === undefined\n          ? true\n          : filter.value.greaterThan < item[filter.field]) &&\n        (filter.value.equalsTo === null || filter.value.equalsTo === undefined\n          ? true\n          : filter.value.equalsTo === item[filter.field]);\n    };\n    return data.filter(filterNumber);\n  }\n\n  static filterList<T>(data: T[], filter: ListFilter): T[] {\n    if (filter.value === null || filter.value === undefined || filter.value.length < 1) {\n      return data;\n    }\n    const filterList = (row: T) => {\n      const item = row as any;\n      if (filter.type === ListFilterType.Excluded) {\n        return filter.value.indexOf(item[filter.field]) < 0;\n      }\n      return filter.value.indexOf(item[filter.field]) >= 0;\n    };\n    return data.filter(filterList);\n  }\n\n  static sort<T>(data: T[], sortParam: SortParam): T[] {\n    const res = data.sort(sortParam.asc ? TableUtil.asc(sortParam.field) : TableUtil.desc(sortParam.field));\n    return res;\n  }\n\n  static desc(field: string) {\n    const res = (a: any, b: any) => a[field] > b[field] ? -1 : 1;\n    return res;\n  }\n\n  static asc(field: string) {\n    const res = (a: any, b: any) => a[field] < b[field] ? -1 : 1;\n    return res;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "asc",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(a: any, b: any) => 1 | -1",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "desc",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(a: any, b: any) => 1 | -1",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterNumber",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterString",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnLeaves",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortParam",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortParam",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TetaChart",
<<<<<<< Updated upstream
            "id": "class-TetaChart-8a6dd96abe0c364acbb03cf1f3af2058",
=======
            "id": "class-TetaChart-f419b93a50d3b6d33c263e75d96cef04",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/chart/core/chart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
<<<<<<< Updated upstream
            "sourceCode": "import {ElementRef} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport * as d3 from 'd3';\r\nimport {D3ZoomEvent, zoomIdentity, ZoomTransform} from 'd3';\r\nimport * as d3annotation from 'd3-svg-annotation';\r\nimport {Scale} from '../model/enum/scale';\r\nimport {ChartOptions} from '../model/chart-options';\r\nimport {AxisOptions} from '../model/axis-options';\r\nimport {Series} from '../model/series';\r\nimport {BasePoint} from '../model/point/base-point';\r\nimport {SeriesType} from '../model/enum/series-type';\r\nimport {defaultDrawerMapping} from '../drawer/default-drawer-mapping';\r\nimport {defaultLegendDrawerMapping} from '../legend-drawer/default-drawer-legend-mapping';\r\nimport {LegendType} from '../model/enum/legend-type';\r\nimport {Axis} from './axis-creator';\r\nimport {AxisType} from '../model/enum/axis-type';\r\nimport {PlotLine} from '../model/plot-line';\r\nimport {PlotBand} from '../model/plot-band';\r\nimport {ScaleType} from '../model/enum/scale-type';\r\nimport {ZoomType} from '../model/enum/zoom-type';\r\nimport {IDragEvent} from '../model/i-drag-event';\r\nimport {DispatchType} from '../model/enum/dispatch-type';\r\nimport {IZoomEvent} from '../model/i-zoom-event';\r\n\r\ntype ChartSize = { width: number; height: number };\r\n\r\nexport class TetaChart {\r\n  plotLinesMove: Observable<IDragEvent<PlotLine>>;\r\n  plotBandsMove: Observable<IDragEvent<PlotBand>>;\r\n\r\n  zoom: Observable<IZoomEvent>;\r\n  seriesMove: Observable<IDragEvent<Series<BasePoint>>>;\r\n\r\n  private plotLinesMove$: Subject<IDragEvent<PlotLine>> = new Subject<IDragEvent<PlotLine>>();\r\n  private plotBandsMove$: Subject<IDragEvent<PlotBand>> = new Subject<IDragEvent<PlotBand>>();\r\n\r\n  private seriesMove$: Subject<IDragEvent<Series<BasePoint>>> = new Subject<IDragEvent<Series<BasePoint>>>();\r\n\r\n  private zoom$: Subject<IZoomEvent> = new Subject<IZoomEvent>();\r\n\r\n  private _container: ElementRef = null;\r\n  private _canvas: any;\r\n  private _width = 0;\r\n  private _height = 0;\r\n\r\n  private _zoomYCache: Map<number, ZoomTransform> = new Map<number,\r\n    ZoomTransform>();\r\n\r\n  private _zoomXCache: Map<number, ZoomTransform> = new Map<number,\r\n    ZoomTransform>();\r\n\r\n  private _zoom = d3.zoom();\r\n  private _commonZoomTransform: ZoomTransform;\r\n\r\n  private visibleChartWindowWidth = 0;\r\n\r\n  private _options: ChartOptions;\r\n  private _xAxisList: Axis[];\r\n  private _yAxisList: Axis[];\r\n  private _xScales: Map<number, any> = new Map<number, any>();\r\n  private _yScales: Map<number, any> = new Map<number, any>();\r\n\r\n  private _clonedX = new Map<number, any>();\r\n  private _clonedY = new Map<number, any>();\r\n\r\n  private _chart: d3.Selection<any, unknown, null, undefined>;\r\n\r\n  private offsetOpposite = 0;\r\n  private offsetNonOpposite = 0;\r\n\r\n  private uniqId: string;\r\n  private _zoomAdded = false;\r\n\r\n  constructor(options: ChartOptions, element: ElementRef) {\r\n    this._options = options;\r\n    this.selectNode(element);\r\n    this.createTooltip();\r\n\r\n    this.plotLinesMove = this.plotLinesMove$.asObservable();\r\n    this.plotBandsMove = this.plotBandsMove$.asObservable();\r\n    this.seriesMove = this.seriesMove$.asObservable();\r\n    this.zoom = this.zoom$.asObservable();\r\n  }\r\n\r\n  public redraw(options?: ChartOptions) {\r\n    if (options) {\r\n      this._options = options;\r\n    }\r\n\r\n    this.createAxis();\r\n    this.createScales();\r\n    this.createMarkers();\r\n    this.createVisibleWindow();\r\n    this._redraw();\r\n    this.drawLegend();\r\n\r\n    if (this._commonZoomTransform) {\r\n      this._chart.call(this._zoom.transform, this._commonZoomTransform);\r\n    }\r\n\r\n    if (!this._zoomAdded) {\r\n      this.addZoom();\r\n      this._zoomAdded = true;\r\n    }\r\n\r\n    this.addAxesZoom();\r\n  }\r\n\r\n  public setZoom(zoom: IZoomEvent) {\r\n    if (!this._zoom) {\r\n      return;\r\n    }\r\n\r\n    this._chart.call(this._zoom.transform, zoom?.zoomTransform ?? zoomIdentity);\r\n  }\r\n\r\n  public setSize(size: ChartSize = {width: 0, height: 0}) {\r\n    this._height = size.height;\r\n    this._width = size.width;\r\n\r\n    this._chart.attr('width', this._width).attr('height', this._height);\r\n    this._canvas.attr('width', this._width).attr('height', this._height);\r\n\r\n    const extent = [\r\n      [\r\n        this.offsetNonOpposite\r\n          ? this.offsetNonOpposite\r\n          : this._options.bounds.left,\r\n        this._options.bounds.top,\r\n      ],\r\n      [\r\n        this._width -\r\n        (this.offsetOpposite\r\n          ? this.offsetOpposite\r\n          : this._options.bounds.right),\r\n        this._height - this._options.bounds.bottom,\r\n      ],\r\n    ] as any;\r\n\r\n    this._zoom\r\n      .scaleExtent([1, Infinity])\r\n      .translateExtent(extent)\r\n      .extent(extent);\r\n  }\r\n\r\n  private createVisibleWindow() {\r\n    this.uniqId = (Date.now() + Math.random()).toString(36);\r\n\r\n    this._chart.selectAll('defs').remove();\r\n\r\n    this._chart\r\n      .append('defs')\r\n      .append('clipPath')\r\n      .attr('id', `draw-window-${this.uniqId}`)\r\n      .append('rect')\r\n      .attr(\r\n        'x',\r\n        this.offsetNonOpposite === 0\r\n          ? this._options.bounds.left\r\n          : this.offsetNonOpposite\r\n      )\r\n      .attr('y', this._options.bounds.top)\r\n      .attr('width', this.visibleChartWindowWidth + 1)\r\n      .attr(\r\n        'height',\r\n        this._height -\r\n        this._options.bounds.bottom -\r\n        this._options.bounds.top +\r\n        1 >\r\n        0\r\n          ? this._height -\r\n          this._options.bounds.bottom -\r\n          this._options.bounds.top +\r\n          1\r\n          : 0\r\n      );\r\n  }\r\n\r\n  private createAxis() {\r\n    this._xAxisList = this._options.xAxis.map(\r\n      (_, index) =>\r\n        new Axis({\r\n          type: AxisType.abscissa,\r\n          index,\r\n          chartOptions: this._options,\r\n        })\r\n    );\r\n\r\n    this._yAxisList = this._options.yAxis.map((_, index) => {\r\n      const axis = new Axis({\r\n        type: AxisType.ordinatus,\r\n        index,\r\n        chartOptions: this._options,\r\n        height: this._height,\r\n      });\r\n      return axis;\r\n    });\r\n\r\n    const nonTitleOffset = 6;\r\n\r\n    this.offsetNonOpposite = d3.reduce(\r\n      this._yAxisList.filter(\r\n        (_) => _.options?.opposite !== true && _.options?.visible\r\n      ),\r\n      (sum, axis) => {\r\n        const offset =\r\n          sum +\r\n          axis.width +\r\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\r\n        axis.setOffset(offset);\r\n        return offset;\r\n      },\r\n      0\r\n    );\r\n\r\n    this.offsetOpposite = d3.reduce(\r\n      this._yAxisList.filter(\r\n        (_) => _.options?.opposite === true && _.options?.visible\r\n      ),\r\n      (sum, axis) => {\r\n        const offset =\r\n          sum +\r\n          axis.width +\r\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\r\n        axis.setOffset(offset);\r\n        return offset;\r\n      },\r\n      0\r\n    );\r\n\r\n    this.visibleChartWindowWidth = this.caluclateChartWidth();\r\n  }\r\n\r\n  private _redraw() {\r\n    this.drawChart();\r\n    this.drawAxis();\r\n    this.drawGridLines();\r\n    this.drawPlotBands();\r\n    this.drawPlotLines();\r\n    this.drawAnnotations();\r\n  }\r\n\r\n  private addZoom() {\r\n    if (this._options?.zoom?.enable) {\r\n      const hasXZoom = [ZoomType.x, ZoomType.xy].includes(\r\n        this._options.zoom.zoomType\r\n      );\r\n      const hasYZoom = [ZoomType.y, ZoomType.xy].includes(\r\n        this._options.zoom.zoomType\r\n      );\r\n\r\n      this._chart.call(\r\n        this._zoom.on('start end zoom', (event) => {\r\n          if (hasXZoom) {\r\n            for (const [key, value] of this._clonedX.entries()) {\r\n              const rescaled = event.transform.rescaleX(value);\r\n              this._xScales.set(key, rescaled);\r\n\r\n              if (event.sourceEvent) {\r\n                this.zoom$.next({\r\n                  domain: rescaled.domain(),\r\n                  zoomTransform: event.transform,\r\n                  zoomType: ZoomType.x,\r\n                  event,\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          if (hasYZoom) {\r\n            for (const [key, value] of this._clonedY.entries()) {\r\n              const rescaled = event.transform.rescaleY(value);\r\n              this._yScales.set(key, rescaled);\r\n\r\n              if (event.type === 'zoom') {\r\n                if (event.sourceEvent) {\r\n                  this.zoom$.next({\r\n                    domain: rescaled.domain(),\r\n                    zoomTransform: event.transform,\r\n                    zoomType: ZoomType.y,\r\n                    event,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (event.type === 'end') {\r\n            this._commonZoomTransform = event.transform;\r\n          }\r\n\r\n          this._redraw();\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private addAxesZoom() {\r\n    this._chart.selectAll('.zoom-behavior').remove();\r\n\r\n    [...this._yAxisList, ...this._xAxisList]\r\n      .filter((axis) => axis.options.visible && axis.options.zoom)\r\n      .forEach((axis) => {\r\n        const foundNode = this._chart\r\n          .select(\r\n            `[data-${axis.type === AxisType.abscissa ? 'x' : 'y'}-scale-id='${\r\n              axis.index\r\n            }']`\r\n          )\r\n          .node() as any;\r\n\r\n        if (!foundNode) {\r\n          return;\r\n        }\r\n\r\n        const bBox = foundNode.getBBox();\r\n\r\n        const translateX =\r\n          axis.type === AxisType.abscissa\r\n            ? this.offsetNonOpposite\r\n              ? this.offsetNonOpposite\r\n              : this._options.bounds.left + this.offsetNonOpposite\r\n            : axis.options.opposite\r\n              ? this._width - axis.offset\r\n              : axis.offset - bBox.width;\r\n\r\n        const zoom = d3\r\n          .zoom()\r\n          .scaleExtent([1, Infinity])\r\n          .on('zoom end', (event: D3ZoomEvent<any, any>) => {\r\n            if (axis.type === AxisType.abscissa) {\r\n              const scale = this._clonedX.get(axis.index);\r\n              this._xScales.set(axis.index, event.transform.rescaleX(scale));\r\n            } else {\r\n              const scale = this._clonedY.get(axis.index);\r\n              this._yScales.set(axis.index, event.transform.rescaleY(scale));\r\n            }\r\n\r\n            if (event.type === 'end') {\r\n              if (axis.type === AxisType.ordinatus) {\r\n                this._zoomYCache.set(axis.index, event.transform);\r\n              }\r\n\r\n              if (axis.type === AxisType.abscissa) {\r\n                this._zoomXCache.set(axis.index, event.transform);\r\n                this._chart.call(this._zoom.transform, event.transform);\r\n              }\r\n            }\r\n\r\n            this._redraw();\r\n          });\r\n\r\n        const restoredTransform: ZoomTransform =\r\n          axis.type === AxisType.ordinatus\r\n            ? this._zoomYCache.get(axis.index)\r\n            : this._zoomXCache.get(axis.index);\r\n\r\n        this._chart\r\n          .append('rect')\r\n          .attr('class', 'zoom-behavior')\r\n          .attr('height', bBox.height)\r\n          .attr('width', bBox.width)\r\n          .attr(\r\n            'transform',\r\n            `translate(${translateX}, ${\r\n              axis.type === AxisType.abscissa\r\n                ? this._height - this._options.bounds.bottom\r\n                : this._options.bounds.top\r\n            })`\r\n          )\r\n          .style('opacity', '0')\r\n          .style('pointer-events', 'all')\r\n          .call(zoom.transform, restoredTransform ?? d3.zoomIdentity)\r\n          .call(zoom);\r\n      });\r\n  }\r\n\r\n  private selectNode(element: ElementRef) {\r\n    this._container = element;\r\n\r\n    d3.select(element.nativeElement).selectAll('.tooltip-chart').remove();\r\n\r\n    d3.select(element.nativeElement).selectAll('svg').remove();\r\n    d3.select(element.nativeElement).selectAll('canvas').remove();\r\n\r\n    this._chart = d3\r\n      .select(element.nativeElement)\r\n      .append('svg')\r\n      .attr('position', 'relative')\r\n      .style('z-index', 0);\r\n\r\n    this._canvas = d3\r\n      .select(element.nativeElement)\r\n      .append('canvas')\r\n      .attr('class', 'main-canvas')\r\n      .style('transform', 'translate(35, 0)')\r\n      .style('position', 'absolute')\r\n      .style('z-index', 1);\r\n  }\r\n\r\n  private drawAnnotations() {\r\n    this._chart.selectAll('.annotations').remove();\r\n\r\n    const annotations = this._options.annotations?.map((annotation) => {\r\n      const x = this._xScales.get(annotation.xAxisIndex);\r\n      const y = this._yScales.get(annotation.yAxisIndex);\r\n\r\n      return {\r\n        note: annotation.note,\r\n        connector: annotation.connector,\r\n        x: x(annotation.point?.x),\r\n        y: y(annotation.point?.y),\r\n        dx: annotation.dx,\r\n        dy: annotation.dy,\r\n        type: annotation.type,\r\n        className: annotation.className,\r\n      };\r\n    });\r\n\r\n    const makeAnnotations = d3annotation.annotation().annotations(annotations ?? []);\r\n\r\n    this._chart\r\n      .append('g')\r\n      .attr('class', 'annotations')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`)\r\n      .call(makeAnnotations as any);\r\n  }\r\n\r\n  private drawPlotLines() {\r\n    this._chart.selectAll('.plotlines').remove();\r\n\r\n    const plotlineGroup = this._chart\r\n      .append('g')\r\n      .attr('class', 'plotlines')\r\n      .style('shape-rendering', 'crispEdges')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    this._xAxisList\r\n      .filter((_) => _.options.plotLines.length > 0)\r\n      .forEach((axis) => {\r\n        const [min, max] = axis.extent;\r\n        const x = this._xScales.get(axis.index);\r\n\r\n        const plotlinesPoints = axis.options.plotLines;\r\n\r\n        const getTextCenterPointPx = (d: PlotLine, idx: number) =>\r\n          x(\r\n            (d?.value +\r\n              (plotlinesPoints[idx - 1]\r\n                ? plotlinesPoints[idx - 1]?.value\r\n                : 0)) /\r\n            2\r\n          );\r\n\r\n        const opacity = (d: PlotLine, idx: number) => {\r\n          const displayWidth = 20;\r\n\r\n          const width =\r\n            x(d?.value) -\r\n            x(plotlinesPoints[idx - 1] ? plotlinesPoints[idx - 1]?.value : 0);\r\n          return width <= displayWidth ? 0 : 1;\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.label')\r\n          .data(plotlinesPoints)\r\n          .join('text')\r\n          .attr('class', 'label font-body-3 fill-text-70')\r\n          .attr('x', getTextCenterPointPx)\r\n          .attr('y', (d) => this._height / 2)\r\n          .attr('text-anchor', 'middle')\r\n          .attr('dominant-baseline', 'central')\r\n          .attr(\r\n            'transform',\r\n            (d, idx) =>\r\n              `rotate(-90, ${getTextCenterPointPx(d, idx)}, ${\r\n                this._height / 2\r\n              })`\r\n          )\r\n          .text((d) => d?.label ?? '')\r\n          .style('opacity', opacity);\r\n\r\n        plotlineGroup\r\n          .selectAll('.plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'plotline')\r\n          .attr('data-plotline-id', (d) => d.id)\r\n          .attr('x1', (d) => x(d.value))\r\n          .attr('x2', (d) => x(d.value))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', (d) => d.width)\r\n          .style('stroke', (d) => d.color)\r\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\r\n\r\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\r\n          this.plotLinesMove$.next({event, target: plotLine});\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.drag-plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'drag-plotline')\r\n          .attr('x1', (d) => x(d.value))\r\n          .attr('x2', (d) => x(d.value))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event, d: PlotLine) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedPlotLine = d3\r\n                  .select(group)\r\n                  .select(`[data-plotline-id='${d.id}']`);\r\n\r\n                d.value = x.invert(event.x);\r\n\r\n                const minValue = d.min ?? min;\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderLeftReached = d.value <= minValue;\r\n                const borderRightReached = d.value >= maxValue;\r\n\r\n                if (borderLeftReached) {\r\n                  d.value = minValue;\r\n                }\r\n\r\n                if (borderRightReached) {\r\n                  d.value = maxValue;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.value)).attr('x2', x(d.value));\r\n\r\n                draggedPlotLine.attr('x1', x(d.value)).attr('x2', x(d.value));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotLine) => {\r\n                emit(event, d);\r\n              }) as any\r\n          );\r\n      });\r\n\r\n    this._yAxisList\r\n      .filter((_) => _.options.plotLines.length > 0)\r\n      .forEach((axis) => {\r\n        const [min, max] = axis.extent;\r\n        const y = this._yScales.get(axis.index);\r\n\r\n        const plotlinesPoints = axis.options.plotLines;\r\n\r\n        plotlineGroup\r\n          .selectAll('.plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'plotline')\r\n          .attr('data-plotline-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.value))\r\n          .attr('y2', (d) => y(d.value))\r\n          .attr('x1', 0)\r\n          .attr(\r\n            'x2',\r\n            this._width - this._options.bounds.left - this._options.bounds.right\r\n          )\r\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\r\n          .style('stroke-width', (d) => d.width)\r\n          .style('stroke', (d) => d.color)\r\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\r\n\r\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\r\n          this.plotLinesMove$.next({event, target: plotLine});\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.drag-plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'drag-plotline')\r\n          .attr('y1', (d) => y(d.value))\r\n          .attr('y2', (d) => y(d.value))\r\n          .attr('x1', 0)\r\n          .attr(\r\n            'x2',\r\n            this._width - this._options.bounds.left - this._options.bounds.right\r\n          )\r\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'row-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event, d: PlotLine) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedPlotLine = d3\r\n                  .select(group)\r\n                  .select(`[data-plotline-id='${d.id}']`);\r\n\r\n                d.value = y.invert(event.y);\r\n\r\n                const minValue = d.min ?? min;\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderTopReached = d.value <= minValue;\r\n                const borderBottomReached = d.value >= maxValue;\r\n\r\n                if (borderTopReached) {\r\n                  d.value = minValue;\r\n                }\r\n\r\n                if (borderBottomReached) {\r\n                  d.value = maxValue;\r\n                }\r\n\r\n                d3.select(this).attr('y1', y(d.value)).attr('y2', y(d.value));\r\n\r\n                draggedPlotLine.attr('y1', y(d.value)).attr('y2', y(d.value));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotLine) => {\r\n                emit(event, d);\r\n              }) as any\r\n          );\r\n      });\r\n  }\r\n\r\n  private drawPlotBands() {\r\n    this._chart.selectAll('.plotbands').remove();\r\n\r\n    const plotBandGroup = this._chart\r\n      .append('g')\r\n      .attr('class', 'plotbands')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    this._xAxisList\r\n      .filter((_) => _.options.plotBands.length > 0)\r\n      .forEach((axis) => {\r\n        const x = this._xScales.get(axis.index);\r\n\r\n        const [min, max] = axis.extent;\r\n\r\n        const plotband = plotBandGroup\r\n          .append('g')\r\n          .style('shape-rendering', 'crispEdges');\r\n\r\n        const plotBandHeight =\r\n          this._height - this._options.bounds.top - this._options.bounds.bottom;\r\n\r\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\r\n          this.plotBandsMove$.next({\r\n            event,\r\n            target: plotBand,\r\n          });\r\n        };\r\n\r\n        plotband\r\n          .selectAll('rect')\r\n          .data(axis.options.plotBands)\r\n          .on('start', (_) => {\r\n            this._chart.selectAll('.marker').style('display', 'none');\r\n            d3.select(this._container.nativeElement)\r\n              .select('.tooltip-chart')\r\n              .style('display', 'none');\r\n          })\r\n          .join('rect')\r\n          .attr('data-plotband-id', (d) => d.id)\r\n          .attr('x', (d) => x(d.from))\r\n          .attr('y', 0)\r\n          .attr('width', (d) => Math.abs(x(d.to) - x(d.from)))\r\n          .attr('fill', (d) => d.color)\r\n          .style('opacity', (d) => d.opacity ?? 1)\r\n          .attr('height', plotBandHeight > 0 ? plotBandHeight : 0)\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`);\r\n\r\n        plotband\r\n          .selectAll('.line-left')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('data-line-left-id', (d) => d.id)\r\n          .attr('class', 'line-left')\r\n          .attr('x1', (d) => x(d.from))\r\n          .attr('x2', (d) => x(d.from))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-left')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('x1', (d) => x(d.from))\r\n          .attr('x2', (d) => x(d.from))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event: DragEvent, d: PlotBand) {\r\n                const group = d3.select(this).node().parentElement;\r\n                const draggedBand = d3\r\n                  .select(group)\r\n                  .select(`[data-plotband-id='${d.id}']`);\r\n\r\n                const draggedLine = d3\r\n                  .select(group)\r\n                  .select(`[data-line-left-id='${d.id}']`);\r\n\r\n                d.from = x.invert(event.x);\r\n\r\n                const minValue = d.min ?? min;\r\n\r\n                const borderReached = d.from <= minValue;\r\n\r\n                if (borderReached) {\r\n                  d.from = minValue;\r\n                }\r\n\r\n                if (d.from >= d.to) {\r\n                  d.from = d.to;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.from)).attr('x2', x(d.from));\r\n\r\n                draggedBand\r\n                  .attr('x', x(d.from))\r\n                  .attr('width', x(d.to) - x(d.from));\r\n\r\n                draggedLine.attr('x1', x(d.from)).attr('x2', x(d.from));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotBand) =>\r\n                emit(event, d)\r\n              ) as any\r\n          );\r\n\r\n        plotband\r\n          .selectAll('.line-right')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('data-line-right-id', (d) => d.id)\r\n          .attr('class', 'line-right')\r\n          .attr('x1', (d) => x(d.to))\r\n          .attr('x2', (d) => x(d.to))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-right')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('class', 'drag-right')\r\n          .attr('x1', (d) => x(d.to))\r\n          .attr('x2', (d) => x(d.to))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n            this._options.bounds.top -\r\n            this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event: DragEvent, d: PlotBand) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedBand = d3\r\n                  .select(group)\r\n                  .select(`[data-plotband-id='${d.id}']`);\r\n\r\n                const draggedLine = d3\r\n                  .select(group)\r\n                  .select(`[data-line-right-id='${d.id}']`);\r\n\r\n                d.to = x.invert(event.x);\r\n\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderReached = d.to >= maxValue;\r\n\r\n                if (borderReached) {\r\n                  d.to = maxValue;\r\n                }\r\n\r\n                if (d.to <= d.from) {\r\n                  d.to = d.from;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.to)).attr('x2', x(d.to));\r\n                draggedBand.attr('width', x(d.to) - x(d.from));\r\n                draggedLine.attr('x1', x(d.to)).attr('x2', x(d.to));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotBand) =>\r\n                emit(event, d)\r\n              ) as any\r\n          );\r\n      });\r\n\r\n    this._yAxisList\r\n      .filter((_) => _.options.plotBands.length > 0)\r\n      .forEach((axis) => {\r\n        const y = this._yScales.get(axis.index);\r\n\r\n        const [min, max] = axis.extent;\r\n\r\n        const plotband = plotBandGroup\r\n          .append('g')\r\n          .style('shape-rendering', 'crispEdges');\r\n\r\n        const plotBandWidth =\r\n          this._width - this._options.bounds.left - this._options.bounds.right; // TODO add multiaxis support width\r\n\r\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\r\n          this.plotBandsMove$.next({\r\n            event,\r\n            target: plotBand,\r\n          });\r\n        };\r\n\r\n        const dragPlotband = d3\r\n          .drag()\r\n          .subject(function () {\r\n            const element = d3.select(this);\r\n            return {y: element.attr('y')};\r\n          })\r\n          .on('start drag end', function (event: any, d: PlotBand) {\r\n            const element = d3.select(this);\r\n\r\n            const height = parseFloat(element.attr('height'));\r\n\r\n            d.to = y.invert(event.y + height);\r\n            d.from = y.invert(event.y);\r\n\r\n            const minValue = d.min ?? min;\r\n            const maxValue = d.max ?? max;\r\n\r\n            const borderReachedMin = d.from <= minValue;\r\n            const borderReachedMax = d.to >= maxValue;\r\n\r\n            if (borderReachedMin) {\r\n              d.to = y.invert(y(minValue) + height);\r\n              d.from = minValue;\r\n            }\r\n\r\n            if (borderReachedMax) {\r\n              d.to = maxValue;\r\n              d.from = y.invert(y(maxValue) - height);\r\n            }\r\n\r\n            element.attr('y', y(d.from));\r\n\r\n            const group = element.node().parentElement;\r\n\r\n            d3.select(group)\r\n              .select(`[data-line-left-id='${d.id}']`)\r\n              .attr('y1', y(d.from))\r\n              .attr('y2', y(d.from));\r\n\r\n            d3.select(group)\r\n              .select(`[data-grab-left-id='${d.id}']`)\r\n              .attr('y1', y(d.from))\r\n              .attr('y2', y(d.from));\r\n\r\n            d3.select(group)\r\n              .select(`[data-line-right-id='${d.id}']`)\r\n              .attr('y1', y(d.to))\r\n              .attr('y2', y(d.to));\r\n\r\n            d3.select(group)\r\n              .select(`[data-grab-right-id='${d.id}']`)\r\n              .attr('y1', y(d.to))\r\n              .attr('y2', y(d.to));\r\n\r\n            emit(event, d);\r\n          }) as any;\r\n\r\n        const leftGrabDrag = d3\r\n          .drag()\r\n          .on('drag', function (event: DragEvent, d: PlotBand) {\r\n            const group = d3.select(this).node().parentElement;\r\n            const draggedBand = d3\r\n              .select(group)\r\n              .select(`[data-plotband-id='${d.id}']`);\r\n\r\n            const draggedLine = d3\r\n              .select(group)\r\n              .select(`[data-line-left-id='${d.id}']`);\r\n\r\n            d.from = y.invert(event.y);\r\n\r\n            const minValue = d.min ?? min;\r\n\r\n            const borderReached = d.from <= minValue;\r\n\r\n            if (borderReached) {\r\n              d.from = minValue;\r\n            }\r\n\r\n            if (d.from >= d.to) {\r\n              d.from = d.to;\r\n            }\r\n\r\n            d3.select(this).attr('y1', y(d.from)).attr('y2', y(d.from));\r\n\r\n            draggedBand\r\n              .attr('y', y(d.from))\r\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\r\n            draggedLine.attr('y1', y(d.from)).attr('y2', y(d.from));\r\n\r\n            emit(event, d);\r\n          })\r\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\r\n\r\n        const rightGrabDrag = d3\r\n          .drag()\r\n          .on('drag', function (event: DragEvent, d: PlotBand) {\r\n            const group = d3.select(this).node().parentElement;\r\n\r\n            const draggedBand = d3\r\n              .select(group)\r\n              .select(`[data-plotband-id='${d.id}']`);\r\n\r\n            const draggedLine = d3\r\n              .select(group)\r\n              .select(`[data-line-right-id='${d.id}']`);\r\n\r\n            d.to = y.invert(event.y);\r\n\r\n            const maxValue = d.max ?? max;\r\n\r\n            const borderReached = d.to >= maxValue;\r\n\r\n            if (borderReached) {\r\n              d.to = maxValue;\r\n            }\r\n\r\n            if (d.to <= d.from) {\r\n              d.to = d.from;\r\n            }\r\n\r\n            d3.select(this).attr('y1', y(d.to)).attr('y2', y(d.to));\r\n\r\n            draggedBand\r\n              .attr('y', y(d.from))\r\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\r\n            draggedLine.attr('y1', y(d.to)).attr('y2', y(d.to));\r\n\r\n            emit(event, d);\r\n          })\r\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\r\n\r\n        plotband\r\n          .selectAll('rect')\r\n          .data(axis.options.plotBands)\r\n          .join('rect')\r\n          .attr('data-plotband-id', (d) => d.id)\r\n          .attr('x', 0)\r\n          .attr('y', (d) => y(d.from))\r\n          .attr('width', (d) => plotBandWidth)\r\n          .attr('fill', (d) => d.color)\r\n          .style('opacity', (d) => d.opacity ?? 1)\r\n          .attr('height', (d) => Math.abs(y(d.to) - y(d.from)))\r\n          .attr('cursor', (d) => (d.draggable ? 'move' : 'default'));\r\n\r\n        plotband\r\n          .selectAll('.line-left')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-line-left-id', (d) => d.id)\r\n          .attr('class', 'line-left')\r\n          .attr('y1', (d) => y(d.from))\r\n          .attr('y2', (d) => y(d.from))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-left')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-grab-left-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.from))\r\n          .attr('y2', (d) => y(d.from))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\r\n\r\n        plotband\r\n          .selectAll('.line-right')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-line-right-id', (d) => d.id)\r\n          .attr('class', 'line-right')\r\n          .attr('y1', (d) => y(d.to))\r\n          .attr('y2', (d) => y(d.to))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-right')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('class', 'drag-right')\r\n          .attr('data-grab-right-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.to))\r\n          .attr('y2', (d) => y(d.to))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\r\n\r\n        axis.options.plotBands.forEach((_) => {\r\n          if (_.draggable) {\r\n            plotband.select(`[data-plotband-id='${_.id}']`).call(dragPlotband);\r\n          }\r\n\r\n          if (_.resizable) {\r\n            plotband.select(`[data-grab-left-id='${_.id}']`).call(leftGrabDrag);\r\n            plotband\r\n              .select(`[data-grab-right-id='${_.id}']`)\r\n              .call(rightGrabDrag);\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  private drawChart() {\r\n    const series = this._options.series?.filter((_) => _.visible);\r\n\r\n    this._chart.selectAll('.series').remove();\r\n\r\n    if (!series || series.length < 1) {\r\n      d3.select(this._container.nativeElement)\r\n        .select('canvas')\r\n        .style('display', 'none');\r\n    }\r\n\r\n    const group = this._chart\r\n      .append('g')\r\n      .attr('class', 'series')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    series?.forEach((seriesItem: Series<BasePoint>, index) => {\r\n      if (seriesItem.renderTo === 'canvas') {\r\n        d3.select(this._container.nativeElement)\r\n          .select('canvas')\r\n          .style('display', null);\r\n\r\n        d3.select(this._container.nativeElement)\r\n          .select('svg')\r\n          .style('position', 'absolute');\r\n      } else {\r\n        d3.select(this._container.nativeElement)\r\n          .select('canvas')\r\n          .style('display', 'none');\r\n      }\r\n      if (\r\n        !this._xScales.has(seriesItem.xAxisIndex) ||\r\n        !this._yScales.has(seriesItem.yAxisIndex)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const foundX = this._xScales.get(seriesItem.xAxisIndex);\r\n      const foundY = this._yScales.get(seriesItem.yAxisIndex);\r\n\r\n      const drawer =\r\n        seriesItem.drawer != null\r\n          ? seriesItem.drawer\r\n          : defaultDrawerMapping.get(seriesItem.type);\r\n\r\n      if (!drawer) {\r\n        throw new Error(\r\n          `No drawer for series ${seriesItem.name}, type ${\r\n            SeriesType[seriesItem.type]\r\n          }`\r\n        );\r\n      }\r\n\r\n      if (seriesItem.renderTo === 'canvas') {\r\n        const context = this._canvas.node().getContext('2d');\r\n        context.clearRect(0, 0, this._width, this._height);\r\n      }\r\n\r\n      let [xMin, xMax] = foundX.domain();\r\n      let [yMin, yMax] = foundY.domain();\r\n\r\n      xMin = xMin instanceof Date ? xMin.getTime() : xMin;\r\n      xMax = xMax instanceof Date ? xMax.getTime() : xMax;\r\n\r\n      yMin = yMin instanceof Date ? yMin.getTime() : yMin;\r\n      yMax = yMax instanceof Date ? yMax.getTime() : yMax;\r\n\r\n      const visiblePoints = (\r\n        point: BasePoint,\r\n        idx: number,\r\n        arr: Array<BasePoint>\r\n      ) =>\r\n        (point.x <= xMax ||\r\n          point.x1 <= xMax ||\r\n          (arr[idx - 1] && arr[idx - 1].x <= xMax) ||\r\n          (arr[idx - 1] && arr[idx - 1].x1 <= xMax)) &&\r\n        (point.x >= xMin ||\r\n          point.x1 >= xMin ||\r\n          (arr[idx + 1] && arr[idx + 1].x >= xMin) ||\r\n          (arr[idx + 1] && arr[idx + 1].x1 >= xMin)) &&\r\n        (point.y <= yMax ||\r\n          point.y1 <= yMax ||\r\n          (arr[idx - 1] && arr[idx - 1].y <= yMax) ||\r\n          (arr[idx - 1] && arr[idx - 1].y1 <= yMax)) &&\r\n        (point.y >= yMin ||\r\n          point.y1 >= yMin ||\r\n          (arr[idx + 1] && arr[idx + 1].y >= yMin) ||\r\n          (arr[idx + 1] && arr[idx + 1].y1 >= yMin));\r\n\r\n      const filteredData = seriesItem.data; //.filter(visiblePoints);\r\n\r\n      const serie = {\r\n        ...seriesItem,\r\n        data: filteredData,\r\n      };\r\n\r\n      drawer.draw(\r\n        serie,\r\n        seriesItem.renderTo === 'canvas' ? this._canvas : group,\r\n        foundX,\r\n        foundY,\r\n        this._options\r\n      );\r\n\r\n      const emit = (event: IDragEvent<Series<BasePoint>>) => {\r\n        this.seriesMove$.next(event);\r\n      };\r\n\r\n      drawer?.dispatch?.on(DispatchType.moveLine, function () {\r\n        emit(this);\r\n      });\r\n    });\r\n  }\r\n\r\n  private createTooltip() {\r\n    d3.select(this._container.nativeElement)\r\n      .append('div')\r\n      .attr('class', 'tooltip-chart color-text-90 bg-background-50 shadow-2')\r\n      .style('position', 'fixed')\r\n      .style('top', 'unset')\r\n      .style('right', 'unset')\r\n      .style('bottom', 'unset')\r\n      .style('left', 'unset')\r\n      .style('pointer-events', 'none')\r\n      .style('display', 'none');\r\n  }\r\n\r\n  private handleMouseMove(options) {\r\n    const mouse = d3.pointer(options.event);\r\n    const {top, right, bottom, left} = this.tooltipPosition(options.event);\r\n\r\n    const tooltipsData = [];\r\n\r\n    this._chart\r\n      .select('.marker-line')\r\n      .attr('transform', `translate(${0}, ${mouse[1] - 2})`);\r\n\r\n    this._chart\r\n      .selectAll('.marker')\r\n      .attr('transform', (d: Series<BasePoint>) => {\r\n        if (!d.data.length) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          !this._xScales.has(d.xAxisIndex) ||\r\n          !this._yScales.has(d.yAxisIndex)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        const foundX = this._xScales.get(d.xAxisIndex);\r\n        const foundY = this._yScales.get(d.yAxisIndex);\r\n\r\n        if (this._options.tooltip.tracking === 'x') {\r\n          const [min, max] = foundX.domain();\r\n          const filteredData = d.data.filter(\r\n            (point) => point.x <= max && point.x >= min\r\n          );\r\n\r\n          const sorted = [...filteredData].sort((a, b) =>\r\n            d3.ascending(a.x, b.x)\r\n          );\r\n\r\n          const bisect = d3.bisector((dd: any) => dd.x).left;\r\n          const x0 = foundX.invert(mouse[0]);\r\n\r\n          const index = bisect(sorted, x0);\r\n\r\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\r\n\r\n          tooltipsData.push({\r\n            point: data,\r\n            color: d.color,\r\n            name: d.name,\r\n          });\r\n\r\n          return `translate(${!isNaN(data?.x) ? foundX(data.x) : -10}, ${\r\n            !isNaN(data?.y) ? foundY(data.y) : -10\r\n          })`;\r\n        }\r\n\r\n        if (this._options.tooltip.tracking === 'y') {\r\n          const sorted = [...d.data].sort((a, b) => d3.ascending(a.y, b.y));\r\n          const bisect = d3.bisector((dd: any) => dd.y).left;\r\n          const y0 = foundY.invert(mouse[1]);\r\n\r\n          const index = bisect(sorted, y0, 0);\r\n\r\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\r\n\r\n          tooltipsData.push({\r\n            point: data,\r\n            color: d.color,\r\n            name: d.name,\r\n          });\r\n\r\n          return `translate(${foundX(data.x)}, ${foundY(data.y)})`;\r\n        }\r\n      });\r\n\r\n    if (this._options.tooltip?.format) {\r\n      const formatted = this._options.tooltip?.format(tooltipsData);\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('top', top)\r\n        .style('right', right)\r\n        .style('bottom', bottom)\r\n        .style('left', left)\r\n        .html(formatted);\r\n    }\r\n  }\r\n\r\n  private tooltipPosition(event) {\r\n    const centerX = this._width / 2;\r\n    const centerY = this._height / 2;\r\n\r\n    const padding = {x: 10, y: 10};\r\n\r\n    const scene = {\r\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\r\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\r\n      bottom:\r\n        event.pageY > centerY\r\n          ? `${window.innerHeight - event.pageY}px`\r\n          : 'initial',\r\n      right:\r\n        event.pageX > centerX\r\n          ? `${window.innerWidth - event.pageX + padding.x}px`\r\n          : 'initial',\r\n    };\r\n\r\n    return scene;\r\n  }\r\n\r\n  private createMarkers() {\r\n    if (this._options.tooltip === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (!this._options.tooltip.enable) {\r\n      return;\r\n    }\r\n\r\n    this._chart.selectAll('.marker').remove();\r\n    this._chart.select('.marker-line').remove();\r\n\r\n    this._chart\r\n      .append('line')\r\n      .attr('class', 'marker-line')\r\n      .attr('x1', 35)\r\n      .attr('x2', this._width)\r\n      .style('stroke-width', 0.5)\r\n      .style('stroke', 'var(--color-text-40)')\r\n      .style('display', 'none');\r\n\r\n    const {series} = this._options;\r\n\r\n    if (!series) {\r\n      return;\r\n    }\r\n\r\n    const markers = this._chart\r\n      .selectAll()\r\n      .data(series.filter((_) => _.visible));\r\n    markers\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'marker')\r\n      .attr('pointer-events', 'none')\r\n      .attr('r', 3)\r\n      .attr('fill', (_, i) => _.color)\r\n      .style('display', 'none');\r\n\r\n    const mouseoutEvent = () => {\r\n      this._chart.selectAll('.marker').style('display', 'none');\r\n      this._chart.select('.marker-line').style('display', 'none');\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('display', 'none');\r\n    };\r\n\r\n    const mouseMoveEvent = (event) => {\r\n      const options = {\r\n        event,\r\n        series,\r\n      };\r\n\r\n      this.handleMouseMove(options);\r\n    };\r\n\r\n    const mouseOverEvent = () => {\r\n      if (this._options.tooltip.showMarkers) {\r\n        this._chart\r\n          .selectAll('.marker')\r\n          .style('display', (d: Series<BasePoint>) => {\r\n            if (d.data.length) {\r\n              return null;\r\n            }\r\n            return 'none';\r\n          });\r\n      }\r\n\r\n      if (this._options.tooltip.showLine) {\r\n        this._chart.select('.marker-line').style('display', null);\r\n      }\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('display', null);\r\n    };\r\n\r\n    this._chart\r\n      .on('mouseover', mouseOverEvent)\r\n      .on('mousemove', mouseMoveEvent)\r\n      .on('mouseleave', mouseoutEvent);\r\n  }\r\n\r\n  private drawLegend() {\r\n    if (this._options.legend?.visible === false) {\r\n      return;\r\n    }\r\n\r\n    this._chart.selectAll('.legend').remove();\r\n\r\n    const drawer = this._options.legend?.type\r\n      ? defaultLegendDrawerMapping.get(this._options.legend.type)\r\n      : defaultLegendDrawerMapping.get(LegendType.swatches);\r\n\r\n    const context = this._container.nativeElement as HTMLElement;\r\n\r\n    if (!drawer) {\r\n      throw new Error(\r\n        `No drawer for legend\r\n        }`\r\n      );\r\n    }\r\n\r\n    drawer.draw({\r\n      context,\r\n      series: this._options.series.filter((_) => _.showInLegend),\r\n      width: this._width,\r\n      height: this._height,\r\n    });\r\n  }\r\n\r\n  private caluclateChartWidth() {\r\n    let width = -this._width;\r\n\r\n    if (this.offsetOpposite > 0) {\r\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\r\n    }\r\n\r\n    if (this.offsetNonOpposite > 0) {\r\n      width =\r\n        -this._width + this._options.bounds.right + this.offsetNonOpposite;\r\n    }\r\n\r\n    if (\r\n      this.offsetOpposite >= Axis.offsetFactor &&\r\n      this.offsetNonOpposite === 0\r\n    ) {\r\n      width = -this._width + this.offsetOpposite + this._options.bounds.left;\r\n    }\r\n\r\n    if (this.offsetOpposite > 0 && this.offsetNonOpposite > 0) {\r\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\r\n    }\r\n\r\n    return Math.abs(width);\r\n  }\r\n\r\n  private drawGridLines() {\r\n    if (this._options.gridLines === false) {\r\n      return;\r\n    }\r\n\r\n    const translateX =\r\n      this.offsetNonOpposite > 0\r\n        ? this.offsetNonOpposite\r\n        : this._options.bounds.left + this.offsetNonOpposite;\r\n\r\n    this._chart.selectAll('.grid').remove();\r\n\r\n    const yList = this._yAxisList.filter(\r\n      (_) => _.options.visible && !_.options.opposite\r\n    );\r\n\r\n    const y: any =\r\n      yList?.length > 0\r\n        ? this._yScales.get(yList[yList.length - 1].index)\r\n        : this._yScales.get(0);\r\n\r\n    const x = this._xScales.get(0);\r\n\r\n    if (!y || !x) {\r\n      return;\r\n    }\r\n\r\n    const TICK_HEIGHT = 40;\r\n    const TICK_WIDTH = 60;\r\n\r\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\r\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\r\n\r\n    const gridY = this._chart\r\n      .append('g')\r\n      .attr('class', 'grid color-text-10')\r\n      .style('shape-rendering', 'crispEdges');\r\n\r\n    const gridlinesY = d3\r\n      .axisLeft(y)\r\n      .tickFormat('' as any)\r\n      .tickSize(-this.visibleChartWindowWidth);\r\n\r\n    const hasBarSeriesType = this._options.series.some(\r\n      (_) => _.type === SeriesType.bar\r\n    );\r\n\r\n    if (!hasBarSeriesType) {\r\n      const gridX = this._chart\r\n        .append('g')\r\n        .attr('class', 'grid color-text-10')\r\n        .style('shape-rendering', 'crispEdges');\r\n\r\n      const gridlinesX = d3\r\n        .axisBottom(x)\r\n        .ticks(tickCountX)\r\n        .tickFormat('' as any)\r\n        .tickSize(\r\n          this._height - this._options.bounds.bottom - this._options.bounds.top\r\n        );\r\n\r\n      gridX\r\n        .call(gridlinesX)\r\n        .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n        .lower();\r\n    }\r\n\r\n    gridY\r\n      .call(gridlinesY)\r\n      .attr('transform', `translate(${translateX}, ${0})`)\r\n      .lower();\r\n\r\n    this._chart.selectAll('.grid path').remove();\r\n  }\r\n\r\n  private createScales() {\r\n    this._xScales.clear();\r\n    this._yScales.clear();\r\n\r\n    const defaultScaleMapping: Map<ScaleType, any> = new Map<ScaleType, any>()\r\n      .set(ScaleType.linear, d3.scaleLinear)\r\n      .set(ScaleType.log, d3.scaleLog)\r\n      .set(ScaleType.sqrt, d3.scaleSqrt)\r\n      .set(ScaleType.pow, d3.scalePow);\r\n\r\n    const xRange = [\r\n      this.offsetNonOpposite\r\n        ? this.offsetNonOpposite\r\n        : this._options.bounds.left,\r\n      this._width -\r\n      (this.offsetOpposite\r\n        ? this.offsetOpposite\r\n        : this._options.bounds.right),\r\n    ];\r\n\r\n    const yRange = [\r\n      this._height - this._options.bounds.bottom,\r\n      this._options.bounds.top,\r\n    ];\r\n\r\n    this._xAxisList.forEach((axis, index) => {\r\n      let scale = null;\r\n\r\n      if (axis.options.type === Scale.time) {\r\n        scale = d3\r\n          .scaleTime()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\r\n      }\r\n\r\n      if (axis.options.type === Scale.number) {\r\n        scale = defaultScaleMapping\r\n          .get(axis.options.scaleOptions.type)()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\r\n      }\r\n\r\n      if (axis.options.niceTicks) {\r\n        scale.nice();\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.log) {\r\n        scale.base(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\r\n        scale.exponent(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      this._xScales.set(index, scale);\r\n    });\r\n\r\n    this._yAxisList.forEach((axis, index) => {\r\n      let scale = null;\r\n\r\n      if (axis.options.type === Scale.number) {\r\n        scale = defaultScaleMapping\r\n          .get(axis.options.scaleOptions.type)()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\r\n      }\r\n\r\n      if (axis.options.type === Scale.time) {\r\n        scale = d3\r\n          .scaleTime()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\r\n      }\r\n\r\n      if (axis.options.niceTicks) {\r\n        scale.nice();\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.log) {\r\n        scale.base(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\r\n        scale.exponent(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      this._yScales.set(index, scale);\r\n    });\r\n\r\n    for (const [key, value] of this._yScales) {\r\n      this._clonedY.set(key, value.copy());\r\n    }\r\n\r\n    for (const [key, value] of this._xScales) {\r\n      this._clonedX.set(key, value.copy());\r\n    }\r\n  }\r\n\r\n  private drawAxis() {\r\n    const hasVisibleAxis = [...this._xAxisList, ...this._yAxisList].filter(\r\n      (axis) => axis.options.visible\r\n    );\r\n\r\n    if (!hasVisibleAxis) {\r\n      return;\r\n    }\r\n\r\n    const negative = false;\r\n\r\n    this._chart.selectAll('.axes').remove();\r\n\r\n    const axes = this._chart\r\n      .append('g')\r\n      .attr('class', 'axes')\r\n      .style('shape-rendering', 'crispEdges');\r\n\r\n    const TICK_HEIGHT = 40;\r\n    const TICK_WIDTH = 60;\r\n\r\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\r\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\r\n\r\n    this._xAxisList.forEach((axis) => {\r\n      const options: AxisOptions = axis.options;\r\n\r\n      const translate = `translate(${0}, ${\r\n        this._height - this._options.bounds.bottom\r\n      })`;\r\n\r\n      const x = this._xScales.get(axis.index);\r\n\r\n      const xAxis = d3.axisBottom(x).ticks(tickCountX);\r\n\r\n      if (axis.options?.tickFormat) {\r\n        xAxis.tickFormat(axis.options.tickFormat);\r\n      }\r\n\r\n      if (options.visible !== false) {\r\n        const translateX = this.offsetNonOpposite\r\n          ? this.offsetNonOpposite\r\n          : this._options.bounds.left + this.offsetNonOpposite;\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'x-axis-label')\r\n          .append('text')\r\n          .style('fill', 'var(--color-text-50)')\r\n          .attr(\r\n            'transform',\r\n            'translate(' +\r\n            this._width / 2 +\r\n            ' ,' +\r\n            (this._height - this._options.bounds.bottom) +\r\n            ')'\r\n          )\r\n          .style('text-anchor', 'middle')\r\n          .attr('dy', '3em')\r\n          .text(options.title ?? '');\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'x-axis font-caption')\r\n          .attr('data-x-scale-id', axis.index)\r\n          .attr('transform', translate)\r\n          .style('pointer-events', 'none')\r\n          .call(xAxis)\r\n          .call((_) => {\r\n            _.select('.domain').remove();\r\n            _.selectAll('.tick').attr('class', 'color-text-50');\r\n\r\n            if (negative) {\r\n              _.append('line')\r\n                .attr('y1', 0)\r\n                .attr('y2', this._height)\r\n                .attr('transform', `translate(${x(0)}, -${this._height})`)\r\n                .style('stroke-width', 0.5)\r\n                .style('stroke', 'var(--color-text-50)');\r\n            }\r\n\r\n            _.append('line')\r\n              .attr('x1', 0)\r\n              .attr('x2', this.visibleChartWindowWidth)\r\n              .attr('transform', `translate(${translateX}, ${0})`)\r\n              .style('stroke-width', 0.5)\r\n              .style('stroke', 'var(--color-text-50)');\r\n          });\r\n      }\r\n    });\r\n\r\n    this._yAxisList.forEach((axis) => {\r\n      const translate = axis.options.opposite\r\n        ? `translate(${this._width - axis.offset}, ${0})`\r\n        : `translate(${axis.offset}, ${0})`;\r\n\r\n      const y = this._yScales.get(axis.index);\r\n\r\n      const yAxis = axis.options.opposite ? d3.axisRight(y) : d3.axisLeft(y);\r\n\r\n      if (axis.options.visible !== false) {\r\n        const labelOffset = axis.options.opposite\r\n          ? this._width - axis.offset + axis.width\r\n          : axis.offset - axis.width;\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'y-axis-label')\r\n          .append('text')\r\n          .style('fill', 'var(--color-text-50)')\r\n          .attr('transform', 'rotate(-90)')\r\n          .attr('y', labelOffset)\r\n          .attr('x', 0 - this._height / 2)\r\n          .attr('dy', axis.options.opposite ? '12px' : '-3px')\r\n          .style('text-anchor', 'middle')\r\n          .text(axis.options.title ?? '');\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'y-axis font-caption')\r\n          .attr('data-y-scale-id', axis.index)\r\n          .attr('transform', translate)\r\n          .call(yAxis)\r\n          .style('pointer-events', 'none')\r\n          .call((_) => {\r\n            _.select('.domain').remove();\r\n            _.selectAll('.tick').attr('class', 'color-text-50');\r\n\r\n            if (!negative) {\r\n              _.append('line')\r\n                .attr('y1', 0)\r\n                .attr(\r\n                  'y2',\r\n                  this._height -\r\n                  this._options.bounds.top -\r\n                  this._options.bounds.bottom\r\n                )\r\n                .attr(\r\n                  'transform',\r\n                  `translate(${0}, ${this._options.bounds.top})`\r\n                )\r\n                .style('stroke-width', 0.5)\r\n                .style('stroke', 'var(--color-text-50)');\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
=======
            "sourceCode": "import {ElementRef} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport * as d3 from 'd3';\nimport {D3ZoomEvent, zoomIdentity, ZoomTransform} from 'd3';\nimport * as d3annotation from 'd3-svg-annotation';\nimport {Scale} from '../model/enum/scale';\nimport {ChartOptions} from '../model/chart-options';\nimport {AxisOptions} from '../model/axis-options';\nimport {Series} from '../model/series';\nimport {BasePoint} from '../model/point/base-point';\nimport {SeriesType} from '../model/enum/series-type';\nimport {defaultDrawerMapping} from '../drawer/default-drawer-mapping';\nimport {defaultLegendDrawerMapping} from '../legend-drawer/default-drawer-legend-mapping';\nimport {LegendType} from '../model/enum/legend-type';\nimport {Axis} from './axis-creator';\nimport {AxisType} from '../model/enum/axis-type';\nimport {PlotLine} from '../model/plot-line';\nimport {PlotBand} from '../model/plot-band';\nimport {ScaleType} from '../model/enum/scale-type';\nimport {ZoomType} from '../model/enum/zoom-type';\nimport {IDragEvent} from '../model/i-drag-event';\nimport {DispatchType} from '../model/enum/dispatch-type';\nimport {IZoomEvent} from '../model/i-zoom-event';\n\ntype ChartSize = { width: number; height: number };\n\nexport class TetaChart {\n  plotLinesMove: Observable<IDragEvent<PlotLine>>;\n  plotBandsMove: Observable<IDragEvent<PlotBand>>;\n\n  zoom: Observable<IZoomEvent>;\n  seriesMove: Observable<IDragEvent<Series<BasePoint>>>;\n\n  private plotLinesMove$: Subject<IDragEvent<PlotLine>> = new Subject<IDragEvent<PlotLine>>();\n  private plotBandsMove$: Subject<IDragEvent<PlotBand>> = new Subject<IDragEvent<PlotBand>>();\n\n  private seriesMove$: Subject<IDragEvent<Series<BasePoint>>> = new Subject<IDragEvent<Series<BasePoint>>>();\n\n  private zoom$: Subject<IZoomEvent> = new Subject<IZoomEvent>();\n\n  private _container: ElementRef = null;\n  private _canvas: any;\n  private _width = 0;\n  private _height = 0;\n\n  private _zoomYCache: Map<number, ZoomTransform> = new Map<number,\n    ZoomTransform>();\n\n  private _zoomXCache: Map<number, ZoomTransform> = new Map<number,\n    ZoomTransform>();\n\n  private _zoom = d3.zoom();\n  private _commonZoomTransform: ZoomTransform;\n\n  private visibleChartWindowWidth = 0;\n\n  private _options: ChartOptions;\n  private _xAxisList: Axis[];\n  private _yAxisList: Axis[];\n  private _xScales: Map<number, any> = new Map<number, any>();\n  private _yScales: Map<number, any> = new Map<number, any>();\n\n  private _clonedX = new Map<number, any>();\n  private _clonedY = new Map<number, any>();\n\n  private _chart: d3.Selection<any, unknown, null, undefined>;\n\n  private offsetOpposite = 0;\n  private offsetNonOpposite = 0;\n\n  private uniqId: string;\n  private _zoomAdded = false;\n\n  constructor(options: ChartOptions, element: ElementRef) {\n    this._options = options;\n    this.selectNode(element);\n    this.createTooltip();\n\n    this.plotLinesMove = this.plotLinesMove$.asObservable();\n    this.plotBandsMove = this.plotBandsMove$.asObservable();\n    this.seriesMove = this.seriesMove$.asObservable();\n    this.zoom = this.zoom$.asObservable();\n  }\n\n  public redraw(options?: ChartOptions) {\n    if (options) {\n      this._options = options;\n    }\n\n    this.createAxis();\n    this.createScales();\n    this.createMarkers();\n    this.createVisibleWindow();\n    this._redraw();\n    this.drawLegend();\n\n    if (this._commonZoomTransform) {\n      this._chart.call(this._zoom.transform, this._commonZoomTransform);\n    }\n\n    if (!this._zoomAdded) {\n      this.addZoom();\n      this._zoomAdded = true;\n    }\n\n    this.addAxesZoom();\n  }\n\n  public setZoom(zoom: IZoomEvent) {\n    if (!this._zoom) {\n      return;\n    }\n\n    this._chart.call(this._zoom.transform, zoom?.zoomTransform ?? zoomIdentity);\n  }\n\n  public setSize(size: ChartSize = {width: 0, height: 0}) {\n    this._height = size.height;\n    this._width = size.width;\n\n    this._chart.attr('width', this._width).attr('height', this._height);\n    this._canvas.attr('width', this._width).attr('height', this._height);\n\n    const extent = [\n      [\n        this.offsetNonOpposite\n          ? this.offsetNonOpposite\n          : this._options.bounds.left,\n        this._options.bounds.top,\n      ],\n      [\n        this._width -\n        (this.offsetOpposite\n          ? this.offsetOpposite\n          : this._options.bounds.right),\n        this._height - this._options.bounds.bottom,\n      ],\n    ] as any;\n\n    this._zoom\n      .scaleExtent([1, Infinity])\n      .translateExtent(extent)\n      .extent(extent);\n  }\n\n  private createVisibleWindow() {\n    this.uniqId = (Date.now() + Math.random()).toString(36);\n\n    this._chart.selectAll('defs').remove();\n\n    this._chart\n      .append('defs')\n      .append('clipPath')\n      .attr('id', `draw-window-${this.uniqId}`)\n      .append('rect')\n      .attr(\n        'x',\n        this.offsetNonOpposite === 0\n          ? this._options.bounds.left\n          : this.offsetNonOpposite\n      )\n      .attr('y', this._options.bounds.top)\n      .attr('width', this.visibleChartWindowWidth + 1)\n      .attr(\n        'height',\n        this._height -\n        this._options.bounds.bottom -\n        this._options.bounds.top +\n        1 >\n        0\n          ? this._height -\n          this._options.bounds.bottom -\n          this._options.bounds.top +\n          1\n          : 0\n      );\n  }\n\n  private createAxis() {\n    this._xAxisList = this._options.xAxis.map(\n      (_, index) =>\n        new Axis({\n          type: AxisType.abscissa,\n          index,\n          chartOptions: this._options,\n        })\n    );\n\n    this._yAxisList = this._options.yAxis.map((_, index) => {\n      const axis = new Axis({\n        type: AxisType.ordinatus,\n        index,\n        chartOptions: this._options,\n        height: this._height,\n      });\n      return axis;\n    });\n\n    const nonTitleOffset = 6;\n\n    this.offsetNonOpposite = d3.reduce(\n      this._yAxisList.filter(\n        (_) => _.options?.opposite !== true && _.options?.visible\n      ),\n      (sum, axis) => {\n        const offset =\n          sum +\n          axis.width +\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\n        axis.setOffset(offset);\n        return offset;\n      },\n      0\n    );\n\n    this.offsetOpposite = d3.reduce(\n      this._yAxisList.filter(\n        (_) => _.options?.opposite === true && _.options?.visible\n      ),\n      (sum, axis) => {\n        const offset =\n          sum +\n          axis.width +\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\n        axis.setOffset(offset);\n        return offset;\n      },\n      0\n    );\n\n    this.visibleChartWindowWidth = this.caluclateChartWidth();\n  }\n\n  private _redraw() {\n    this.drawChart();\n    this.drawAxis();\n    this.drawGridLines();\n    this.drawPlotBands();\n    this.drawPlotLines();\n    this.drawAnnotations();\n  }\n\n  private addZoom() {\n    if (this._options?.zoom?.enable) {\n      const hasXZoom = [ZoomType.x, ZoomType.xy].includes(\n        this._options.zoom.zoomType\n      );\n      const hasYZoom = [ZoomType.y, ZoomType.xy].includes(\n        this._options.zoom.zoomType\n      );\n\n      this._chart.call(\n        this._zoom.on('start end zoom', (event) => {\n          if (hasXZoom) {\n            for (const [key, value] of this._clonedX.entries()) {\n              const rescaled = event.transform.rescaleX(value);\n              this._xScales.set(key, rescaled);\n\n              if (event.sourceEvent) {\n                this.zoom$.next({\n                  domain: rescaled.domain(),\n                  zoomTransform: event.transform,\n                  zoomType: ZoomType.x,\n                  event,\n                });\n              }\n            }\n          }\n\n          if (hasYZoom) {\n            for (const [key, value] of this._clonedY.entries()) {\n              const rescaled = event.transform.rescaleY(value);\n              this._yScales.set(key, rescaled);\n\n              if (event.type === 'zoom') {\n                if (event.sourceEvent) {\n                  this.zoom$.next({\n                    domain: rescaled.domain(),\n                    zoomTransform: event.transform,\n                    zoomType: ZoomType.y,\n                    event,\n                  });\n                }\n              }\n            }\n          }\n\n          if (event.type === 'end') {\n            this._commonZoomTransform = event.transform;\n          }\n\n          this._redraw();\n        })\n      );\n    }\n  }\n\n  private addAxesZoom() {\n    this._chart.selectAll('.zoom-behavior').remove();\n\n    [...this._yAxisList, ...this._xAxisList]\n      .filter((axis) => axis.options.visible && axis.options.zoom)\n      .forEach((axis) => {\n        const foundNode = this._chart\n          .select(\n            `[data-${axis.type === AxisType.abscissa ? 'x' : 'y'}-scale-id='${\n              axis.index\n            }']`\n          )\n          .node() as any;\n\n        if (!foundNode) {\n          return;\n        }\n\n        const bBox = foundNode.getBBox();\n\n        const translateX =\n          axis.type === AxisType.abscissa\n            ? this.offsetNonOpposite\n              ? this.offsetNonOpposite\n              : this._options.bounds.left + this.offsetNonOpposite\n            : axis.options.opposite\n              ? this._width - axis.offset\n              : axis.offset - bBox.width;\n\n        const zoom = d3\n          .zoom()\n          .scaleExtent([1, Infinity])\n          .on('zoom end', (event: D3ZoomEvent<any, any>) => {\n            if (axis.type === AxisType.abscissa) {\n              const scale = this._clonedX.get(axis.index);\n              this._xScales.set(axis.index, event.transform.rescaleX(scale));\n            } else {\n              const scale = this._clonedY.get(axis.index);\n              this._yScales.set(axis.index, event.transform.rescaleY(scale));\n            }\n\n            if (event.type === 'end') {\n              if (axis.type === AxisType.ordinatus) {\n                this._zoomYCache.set(axis.index, event.transform);\n              }\n\n              if (axis.type === AxisType.abscissa) {\n                this._zoomXCache.set(axis.index, event.transform);\n                this._chart.call(this._zoom.transform, event.transform);\n              }\n            }\n\n            this._redraw();\n          });\n\n        const restoredTransform: ZoomTransform =\n          axis.type === AxisType.ordinatus\n            ? this._zoomYCache.get(axis.index)\n            : this._zoomXCache.get(axis.index);\n\n        this._chart\n          .append('rect')\n          .attr('class', 'zoom-behavior')\n          .attr('height', bBox.height)\n          .attr('width', bBox.width)\n          .attr(\n            'transform',\n            `translate(${translateX}, ${\n              axis.type === AxisType.abscissa\n                ? this._height - this._options.bounds.bottom\n                : this._options.bounds.top\n            })`\n          )\n          .style('opacity', '0')\n          .style('pointer-events', 'all')\n          .call(zoom.transform, restoredTransform ?? d3.zoomIdentity)\n          .call(zoom);\n      });\n  }\n\n  private selectNode(element: ElementRef) {\n    this._container = element;\n\n    d3.select(element.nativeElement).selectAll('.tooltip-chart').remove();\n\n    d3.select(element.nativeElement).selectAll('svg').remove();\n    d3.select(element.nativeElement).selectAll('canvas').remove();\n\n    this._chart = d3\n      .select(element.nativeElement)\n      .append('svg')\n      .attr('position', 'relative')\n      .style('z-index', 0);\n\n    this._canvas = d3\n      .select(element.nativeElement)\n      .append('canvas')\n      .attr('class', 'main-canvas')\n      .style('transform', 'translate(35, 0)')\n      .style('position', 'absolute')\n      .style('z-index', 1);\n  }\n\n  private drawAnnotations() {\n    this._chart.selectAll('.annotations').remove();\n\n    const annotations = this._options.annotations?.map((annotation) => {\n      const x = this._xScales.get(annotation.xAxisIndex);\n      const y = this._yScales.get(annotation.yAxisIndex);\n\n      return {\n        note: annotation.note,\n        connector: annotation.connector,\n        x: x(annotation.point?.x),\n        y: y(annotation.point?.y),\n        dx: annotation.dx,\n        dy: annotation.dy,\n        type: annotation.type,\n        className: annotation.className,\n      };\n    });\n\n    const makeAnnotations = d3annotation.annotation().annotations(annotations ?? []);\n\n    this._chart\n      .append('g')\n      .attr('class', 'annotations')\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`)\n      .call(makeAnnotations as any);\n  }\n\n  private drawPlotLines() {\n    this._chart.selectAll('.plotlines').remove();\n\n    const plotlineGroup = this._chart\n      .append('g')\n      .attr('class', 'plotlines')\n      .style('shape-rendering', 'crispEdges')\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\n\n    this._xAxisList\n      .filter((_) => _.options.plotLines.length > 0)\n      .forEach((axis) => {\n        const [min, max] = axis.extent;\n        const x = this._xScales.get(axis.index);\n\n        const plotlinesPoints = axis.options.plotLines;\n\n        const getTextCenterPointPx = (d: PlotLine, idx: number) =>\n          x(\n            (d?.value +\n              (plotlinesPoints[idx - 1]\n                ? plotlinesPoints[idx - 1]?.value\n                : 0)) /\n            2\n          );\n\n        const opacity = (d: PlotLine, idx: number) => {\n          const displayWidth = 20;\n\n          const width =\n            x(d?.value) -\n            x(plotlinesPoints[idx - 1] ? plotlinesPoints[idx - 1]?.value : 0);\n          return width <= displayWidth ? 0 : 1;\n        };\n\n        plotlineGroup\n          .selectAll('.label')\n          .data(plotlinesPoints)\n          .join('text')\n          .attr('class', 'label font-body-3 fill-text-70')\n          .attr('x', getTextCenterPointPx)\n          .attr('y', (d) => this._height / 2)\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'central')\n          .attr(\n            'transform',\n            (d, idx) =>\n              `rotate(-90, ${getTextCenterPointPx(d, idx)}, ${\n                this._height / 2\n              })`\n          )\n          .text((d) => d?.label ?? '')\n          .style('opacity', opacity);\n\n        plotlineGroup\n          .selectAll('.plotline')\n          .data(plotlinesPoints)\n          .join('line')\n          .attr('class', 'plotline')\n          .attr('data-plotline-id', (d) => d.id)\n          .attr('x1', (d) => x(d.value))\n          .attr('x2', (d) => x(d.value))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', (d) => d.width)\n          .style('stroke', (d) => d.color)\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\n\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\n          this.plotLinesMove$.next({event, target: plotLine});\n        };\n\n        plotlineGroup\n          .selectAll('.drag-plotline')\n          .data(plotlinesPoints)\n          .join('line')\n          .attr('class', 'drag-plotline')\n          .attr('x1', (d) => x(d.value))\n          .attr('x2', (d) => x(d.value))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', 'col-resize')\n          .call(\n            d3\n              .drag()\n              .on('drag', function (event, d: PlotLine) {\n                const group = d3.select(this).node().parentElement;\n\n                const draggedPlotLine = d3\n                  .select(group)\n                  .select(`[data-plotline-id='${d.id}']`);\n\n                d.value = x.invert(event.x);\n\n                const minValue = d.min ?? min;\n                const maxValue = d.max ?? max;\n\n                const borderLeftReached = d.value <= minValue;\n                const borderRightReached = d.value >= maxValue;\n\n                if (borderLeftReached) {\n                  d.value = minValue;\n                }\n\n                if (borderRightReached) {\n                  d.value = maxValue;\n                }\n\n                d3.select(this).attr('x1', x(d.value)).attr('x2', x(d.value));\n\n                draggedPlotLine.attr('x1', x(d.value)).attr('x2', x(d.value));\n\n                emit(event, d);\n              })\n              .on('end', (event: DragEvent, d: PlotLine) => {\n                emit(event, d);\n              }) as any\n          );\n      });\n\n    this._yAxisList\n      .filter((_) => _.options.plotLines.length > 0)\n      .forEach((axis) => {\n        const [min, max] = axis.extent;\n        const y = this._yScales.get(axis.index);\n\n        const plotlinesPoints = axis.options.plotLines;\n\n        plotlineGroup\n          .selectAll('.plotline')\n          .data(plotlinesPoints)\n          .join('line')\n          .attr('class', 'plotline')\n          .attr('data-plotline-id', (d) => d.id)\n          .attr('y1', (d) => y(d.value))\n          .attr('y2', (d) => y(d.value))\n          .attr('x1', 0)\n          .attr(\n            'x2',\n            this._width - this._options.bounds.left - this._options.bounds.right\n          )\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\n          .style('stroke-width', (d) => d.width)\n          .style('stroke', (d) => d.color)\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\n\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\n          this.plotLinesMove$.next({event, target: plotLine});\n        };\n\n        plotlineGroup\n          .selectAll('.drag-plotline')\n          .data(plotlinesPoints)\n          .join('line')\n          .attr('class', 'drag-plotline')\n          .attr('y1', (d) => y(d.value))\n          .attr('y2', (d) => y(d.value))\n          .attr('x1', 0)\n          .attr(\n            'x2',\n            this._width - this._options.bounds.left - this._options.bounds.right\n          )\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', 'row-resize')\n          .call(\n            d3\n              .drag()\n              .on('drag', function (event, d: PlotLine) {\n                const group = d3.select(this).node().parentElement;\n\n                const draggedPlotLine = d3\n                  .select(group)\n                  .select(`[data-plotline-id='${d.id}']`);\n\n                d.value = y.invert(event.y);\n\n                const minValue = d.min ?? min;\n                const maxValue = d.max ?? max;\n\n                const borderTopReached = d.value <= minValue;\n                const borderBottomReached = d.value >= maxValue;\n\n                if (borderTopReached) {\n                  d.value = minValue;\n                }\n\n                if (borderBottomReached) {\n                  d.value = maxValue;\n                }\n\n                d3.select(this).attr('y1', y(d.value)).attr('y2', y(d.value));\n\n                draggedPlotLine.attr('y1', y(d.value)).attr('y2', y(d.value));\n\n                emit(event, d);\n              })\n              .on('end', (event: DragEvent, d: PlotLine) => {\n                emit(event, d);\n              }) as any\n          );\n      });\n  }\n\n  private drawPlotBands() {\n    this._chart.selectAll('.plotbands').remove();\n\n    const plotBandGroup = this._chart\n      .append('g')\n      .attr('class', 'plotbands')\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\n\n    this._xAxisList\n      .filter((_) => _.options.plotBands.length > 0)\n      .forEach((axis) => {\n        const x = this._xScales.get(axis.index);\n\n        const [min, max] = axis.extent;\n\n        const plotband = plotBandGroup\n          .append('g')\n          .style('shape-rendering', 'crispEdges');\n\n        const plotBandHeight =\n          this._height - this._options.bounds.top - this._options.bounds.bottom;\n\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\n          this.plotBandsMove$.next({\n            event,\n            target: plotBand,\n          });\n        };\n\n        plotband\n          .selectAll('rect')\n          .data(axis.options.plotBands)\n          .on('start', (_) => {\n            this._chart.selectAll('.marker').style('display', 'none');\n            d3.select(this._container.nativeElement)\n              .select('.tooltip-chart')\n              .style('display', 'none');\n          })\n          .join('rect')\n          .attr('data-plotband-id', (d) => d.id)\n          .attr('x', (d) => x(d.from))\n          .attr('y', 0)\n          .attr('width', (d) => Math.abs(x(d.to) - x(d.from)))\n          .attr('fill', (d) => d.color)\n          .style('opacity', (d) => d.opacity ?? 1)\n          .attr('height', plotBandHeight > 0 ? plotBandHeight : 0)\n          .attr('transform', `translate(0, ${this._options.bounds.top})`);\n\n        plotband\n          .selectAll('.line-left')\n          .data(axis.options.plotBands)\n          .join('line')\n          .attr('data-line-left-id', (d) => d.id)\n          .attr('class', 'line-left')\n          .attr('x1', (d) => x(d.from))\n          .attr('x2', (d) => x(d.from))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '8, 8')\n          .style('stroke', 'var(--color-text-90)')\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\n\n        plotband\n          .selectAll('.drag-left')\n          .data(axis.options.plotBands)\n          .join('line')\n          .attr('x1', (d) => x(d.from))\n          .attr('x2', (d) => x(d.from))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', 'col-resize')\n          .call(\n            d3\n              .drag()\n              .on('drag', function (event: DragEvent, d: PlotBand) {\n                const group = d3.select(this).node().parentElement;\n                const draggedBand = d3\n                  .select(group)\n                  .select(`[data-plotband-id='${d.id}']`);\n\n                const draggedLine = d3\n                  .select(group)\n                  .select(`[data-line-left-id='${d.id}']`);\n\n                d.from = x.invert(event.x);\n\n                const minValue = d.min ?? min;\n\n                const borderReached = d.from <= minValue;\n\n                if (borderReached) {\n                  d.from = minValue;\n                }\n\n                if (d.from >= d.to) {\n                  d.from = d.to;\n                }\n\n                d3.select(this).attr('x1', x(d.from)).attr('x2', x(d.from));\n\n                draggedBand\n                  .attr('x', x(d.from))\n                  .attr('width', x(d.to) - x(d.from));\n\n                draggedLine.attr('x1', x(d.from)).attr('x2', x(d.from));\n\n                emit(event, d);\n              })\n              .on('end', (event: DragEvent, d: PlotBand) =>\n                emit(event, d)\n              ) as any\n          );\n\n        plotband\n          .selectAll('.line-right')\n          .data(axis.options.plotBands)\n          .join('line')\n          .attr('data-line-right-id', (d) => d.id)\n          .attr('class', 'line-right')\n          .attr('x1', (d) => x(d.to))\n          .attr('x2', (d) => x(d.to))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '8, 8')\n          .style('stroke', 'var(--color-text-90)')\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\n\n        plotband\n          .selectAll('.drag-right')\n          .data(axis.options.plotBands)\n          .join('line')\n          .attr('class', 'drag-right')\n          .attr('x1', (d) => x(d.to))\n          .attr('x2', (d) => x(d.to))\n          .attr('y1', 0)\n          .attr(\n            'y2',\n            this._height -\n            this._options.bounds.top -\n            this._options.bounds.bottom\n          )\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', 'col-resize')\n          .call(\n            d3\n              .drag()\n              .on('drag', function (event: DragEvent, d: PlotBand) {\n                const group = d3.select(this).node().parentElement;\n\n                const draggedBand = d3\n                  .select(group)\n                  .select(`[data-plotband-id='${d.id}']`);\n\n                const draggedLine = d3\n                  .select(group)\n                  .select(`[data-line-right-id='${d.id}']`);\n\n                d.to = x.invert(event.x);\n\n                const maxValue = d.max ?? max;\n\n                const borderReached = d.to >= maxValue;\n\n                if (borderReached) {\n                  d.to = maxValue;\n                }\n\n                if (d.to <= d.from) {\n                  d.to = d.from;\n                }\n\n                d3.select(this).attr('x1', x(d.to)).attr('x2', x(d.to));\n                draggedBand.attr('width', x(d.to) - x(d.from));\n                draggedLine.attr('x1', x(d.to)).attr('x2', x(d.to));\n\n                emit(event, d);\n              })\n              .on('end', (event: DragEvent, d: PlotBand) =>\n                emit(event, d)\n              ) as any\n          );\n      });\n\n    this._yAxisList\n      .filter((_) => _.options.plotBands.length > 0)\n      .forEach((axis) => {\n        const y = this._yScales.get(axis.index);\n\n        const [min, max] = axis.extent;\n\n        const plotband = plotBandGroup\n          .append('g')\n          .style('shape-rendering', 'crispEdges');\n\n        const plotBandWidth =\n          this._width - this._options.bounds.left - this._options.bounds.right; // TODO add multiaxis support width\n\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\n          this.plotBandsMove$.next({\n            event,\n            target: plotBand,\n          });\n        };\n\n        const dragPlotband = d3\n          .drag()\n          .subject(function () {\n            const element = d3.select(this);\n            return {y: element.attr('y')};\n          })\n          .on('start drag end', function (event: any, d: PlotBand) {\n            const element = d3.select(this);\n\n            const height = parseFloat(element.attr('height'));\n\n            d.to = y.invert(event.y + height);\n            d.from = y.invert(event.y);\n\n            const minValue = d.min ?? min;\n            const maxValue = d.max ?? max;\n\n            const borderReachedMin = d.from <= minValue;\n            const borderReachedMax = d.to >= maxValue;\n\n            if (borderReachedMin) {\n              d.to = y.invert(y(minValue) + height);\n              d.from = minValue;\n            }\n\n            if (borderReachedMax) {\n              d.to = maxValue;\n              d.from = y.invert(y(maxValue) - height);\n            }\n\n            element.attr('y', y(d.from));\n\n            const group = element.node().parentElement;\n\n            d3.select(group)\n              .select(`[data-line-left-id='${d.id}']`)\n              .attr('y1', y(d.from))\n              .attr('y2', y(d.from));\n\n            d3.select(group)\n              .select(`[data-grab-left-id='${d.id}']`)\n              .attr('y1', y(d.from))\n              .attr('y2', y(d.from));\n\n            d3.select(group)\n              .select(`[data-line-right-id='${d.id}']`)\n              .attr('y1', y(d.to))\n              .attr('y2', y(d.to));\n\n            d3.select(group)\n              .select(`[data-grab-right-id='${d.id}']`)\n              .attr('y1', y(d.to))\n              .attr('y2', y(d.to));\n\n            emit(event, d);\n          }) as any;\n\n        const leftGrabDrag = d3\n          .drag()\n          .on('drag', function (event: DragEvent, d: PlotBand) {\n            const group = d3.select(this).node().parentElement;\n            const draggedBand = d3\n              .select(group)\n              .select(`[data-plotband-id='${d.id}']`);\n\n            const draggedLine = d3\n              .select(group)\n              .select(`[data-line-left-id='${d.id}']`);\n\n            d.from = y.invert(event.y);\n\n            const minValue = d.min ?? min;\n\n            const borderReached = d.from <= minValue;\n\n            if (borderReached) {\n              d.from = minValue;\n            }\n\n            if (d.from >= d.to) {\n              d.from = d.to;\n            }\n\n            d3.select(this).attr('y1', y(d.from)).attr('y2', y(d.from));\n\n            draggedBand\n              .attr('y', y(d.from))\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\n            draggedLine.attr('y1', y(d.from)).attr('y2', y(d.from));\n\n            emit(event, d);\n          })\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\n\n        const rightGrabDrag = d3\n          .drag()\n          .on('drag', function (event: DragEvent, d: PlotBand) {\n            const group = d3.select(this).node().parentElement;\n\n            const draggedBand = d3\n              .select(group)\n              .select(`[data-plotband-id='${d.id}']`);\n\n            const draggedLine = d3\n              .select(group)\n              .select(`[data-line-right-id='${d.id}']`);\n\n            d.to = y.invert(event.y);\n\n            const maxValue = d.max ?? max;\n\n            const borderReached = d.to >= maxValue;\n\n            if (borderReached) {\n              d.to = maxValue;\n            }\n\n            if (d.to <= d.from) {\n              d.to = d.from;\n            }\n\n            d3.select(this).attr('y1', y(d.to)).attr('y2', y(d.to));\n\n            draggedBand\n              .attr('y', y(d.from))\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\n            draggedLine.attr('y1', y(d.to)).attr('y2', y(d.to));\n\n            emit(event, d);\n          })\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\n\n        plotband\n          .selectAll('rect')\n          .data(axis.options.plotBands)\n          .join('rect')\n          .attr('data-plotband-id', (d) => d.id)\n          .attr('x', 0)\n          .attr('y', (d) => y(d.from))\n          .attr('width', (d) => plotBandWidth)\n          .attr('fill', (d) => d.color)\n          .style('opacity', (d) => d.opacity ?? 1)\n          .attr('height', (d) => Math.abs(y(d.to) - y(d.from)))\n          .attr('cursor', (d) => (d.draggable ? 'move' : 'default'));\n\n        plotband\n          .selectAll('.line-left')\n          .data(axis.options.plotBands.filter((d) => d.resizable))\n          .join('line')\n          .attr('data-line-left-id', (d) => d.id)\n          .attr('class', 'line-left')\n          .attr('y1', (d) => y(d.from))\n          .attr('y2', (d) => y(d.from))\n          .attr('x1', 0)\n          .attr('x2', plotBandWidth)\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '8, 8')\n          .style('stroke', 'var(--color-text-90)')\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\n\n        plotband\n          .selectAll('.drag-left')\n          .data(axis.options.plotBands.filter((d) => d.resizable))\n          .join('line')\n          .attr('data-grab-left-id', (d) => d.id)\n          .attr('y1', (d) => y(d.from))\n          .attr('y2', (d) => y(d.from))\n          .attr('x1', 0)\n          .attr('x2', plotBandWidth)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\n\n        plotband\n          .selectAll('.line-right')\n          .data(axis.options.plotBands.filter((d) => d.resizable))\n          .join('line')\n          .attr('data-line-right-id', (d) => d.id)\n          .attr('class', 'line-right')\n          .attr('y1', (d) => y(d.to))\n          .attr('y2', (d) => y(d.to))\n          .attr('x1', 0)\n          .attr('x2', plotBandWidth)\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '8, 8')\n          .style('stroke', 'var(--color-text-90)')\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\n\n        plotband\n          .selectAll('.drag-right')\n          .data(axis.options.plotBands.filter((d) => d.resizable))\n          .join('line')\n          .attr('class', 'drag-right')\n          .attr('data-grab-right-id', (d) => d.id)\n          .attr('y1', (d) => y(d.to))\n          .attr('y2', (d) => y(d.to))\n          .attr('x1', 0)\n          .attr('x2', plotBandWidth)\n          .style('stroke-width', 8)\n          .style('stroke', 'rgba(0, 0, 0, 0)')\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\n\n        axis.options.plotBands.forEach((_) => {\n          if (_.draggable) {\n            plotband.select(`[data-plotband-id='${_.id}']`).call(dragPlotband);\n          }\n\n          if (_.resizable) {\n            plotband.select(`[data-grab-left-id='${_.id}']`).call(leftGrabDrag);\n            plotband\n              .select(`[data-grab-right-id='${_.id}']`)\n              .call(rightGrabDrag);\n          }\n        });\n      });\n  }\n\n  private drawChart() {\n    const series = this._options.series?.filter((_) => _.visible);\n\n    this._chart.selectAll('.chart-container').remove();\n\n    if (!series || series.length < 1) {\n      d3.select(this._container.nativeElement)\n        .select('canvas')\n        .style('display', 'none');\n    }\n\n    const group = this._chart\n      .append('g')\n      .attr('class', 'series')\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\n\n    series?.forEach((seriesItem: Series<BasePoint>, index) => {\n      if (seriesItem.renderTo === 'canvas') {\n        d3.select(this._container.nativeElement)\n          .select('canvas')\n          .style('display', null);\n\n        d3.select(this._container.nativeElement)\n          .select('svg')\n          .style('position', 'absolute');\n      } else {\n        d3.select(this._container.nativeElement)\n          .select('canvas')\n          .style('display', 'none');\n      }\n      if (\n        !this._xScales.has(seriesItem.xAxisIndex) ||\n        !this._yScales.has(seriesItem.yAxisIndex)\n      ) {\n        return;\n      }\n\n      const foundX = this._xScales.get(seriesItem.xAxisIndex);\n      const foundY = this._yScales.get(seriesItem.yAxisIndex);\n\n      const drawer =\n        seriesItem.drawer != null\n          ? seriesItem.drawer\n          : defaultDrawerMapping.get(seriesItem.type);\n\n      if (!drawer) {\n        throw new Error(\n          `No drawer for series ${seriesItem.name}, type ${\n            SeriesType[seriesItem.type]\n          }`\n        );\n      }\n\n      if (seriesItem.renderTo === 'canvas') {\n        const context = this._canvas.node().getContext('2d');\n        context.clearRect(0, 0, this._width, this._height);\n      }\n\n      let [xMin, xMax] = foundX.domain();\n      let [yMin, yMax] = foundY.domain();\n\n      xMin = xMin instanceof Date ? xMin.getTime() : xMin;\n      xMax = xMax instanceof Date ? xMax.getTime() : xMax;\n\n      yMin = yMin instanceof Date ? yMin.getTime() : yMin;\n      yMax = yMax instanceof Date ? yMax.getTime() : yMax;\n\n      const visiblePoints = (\n        point: BasePoint,\n        idx: number,\n        arr: Array<BasePoint>\n      ) =>\n        (point.x <= xMax ||\n          point.x1 <= xMax ||\n          (arr[idx - 1] && arr[idx - 1].x <= xMax) ||\n          (arr[idx - 1] && arr[idx - 1].x1 <= xMax)) &&\n        (point.x >= xMin ||\n          point.x1 >= xMin ||\n          (arr[idx + 1] && arr[idx + 1].x >= xMin) ||\n          (arr[idx + 1] && arr[idx + 1].x1 >= xMin)) &&\n        (point.y <= yMax ||\n          point.y1 <= yMax ||\n          (arr[idx - 1] && arr[idx - 1].y <= yMax) ||\n          (arr[idx - 1] && arr[idx - 1].y1 <= yMax)) &&\n        (point.y >= yMin ||\n          point.y1 >= yMin ||\n          (arr[idx + 1] && arr[idx + 1].y >= yMin) ||\n          (arr[idx + 1] && arr[idx + 1].y1 >= yMin));\n\n      const filteredData = seriesItem.data; //.filter(visiblePoints);\n\n      const serie = {\n        ...seriesItem,\n        data: filteredData,\n      };\n\n      drawer.draw(\n        serie,\n        seriesItem.renderTo === 'canvas' ? this._canvas : group,\n        foundX,\n        foundY,\n        this._options\n      );\n\n      const emit = (event: IDragEvent<Series<BasePoint>>) => {\n        this.seriesMove$.next(event);\n      };\n\n      drawer?.dispatch?.on(DispatchType.moveLine, function () {\n        emit(this);\n      });\n    });\n  }\n\n  private createTooltip() {\n    d3.select(this._container.nativeElement)\n      .append('div')\n      .attr('class', 'tooltip-chart color-text-90 bg-background-50 shadow-2')\n      .style('position', 'fixed')\n      .style('top', 'unset')\n      .style('right', 'unset')\n      .style('bottom', 'unset')\n      .style('left', 'unset')\n      .style('pointer-events', 'none')\n      .style('display', 'none');\n  }\n\n  private handleMouseMove(options) {\n    const mouse = d3.pointer(options.event);\n    const {top, right, bottom, left} = this.tooltipPosition(options.event);\n\n    const tooltipsData = [];\n\n    this._chart\n      .select('.marker-line')\n      .attr('transform', `translate(${0}, ${mouse[1] - 2})`);\n\n    this._chart\n      .selectAll('.marker')\n      .attr('transform', (d: Series<BasePoint>) => {\n        if (!d.data.length) {\n          return;\n        }\n\n        if (\n          !this._xScales.has(d.xAxisIndex) ||\n          !this._yScales.has(d.yAxisIndex)\n        ) {\n          return;\n        }\n\n        const foundX = this._xScales.get(d.xAxisIndex);\n        const foundY = this._yScales.get(d.yAxisIndex);\n\n        if (this._options.tooltip.tracking === 'x') {\n          const [min, max] = foundX.domain();\n          const filteredData = d.data.filter(\n            (point) => point.x <= max && point.x >= min\n          );\n\n          const sorted = [...filteredData].sort((a, b) =>\n            d3.ascending(a.x, b.x)\n          );\n\n          const bisect = d3.bisector((dd: any) => dd.x).left;\n          const x0 = foundX.invert(mouse[0]);\n\n          const index = bisect(sorted, x0);\n\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\n\n          tooltipsData.push({\n            point: data,\n            color: d.color,\n            name: d.name,\n          });\n\n          return `translate(${!isNaN(data?.x) ? foundX(data.x) : -10}, ${\n            !isNaN(data?.y) ? foundY(data.y) : -10\n          })`;\n        }\n\n        if (this._options.tooltip.tracking === 'y') {\n          const sorted = [...d.data].sort((a, b) => d3.ascending(a.y, b.y));\n          const bisect = d3.bisector((dd: any) => dd.y).left;\n          const y0 = foundY.invert(mouse[1]);\n\n          const index = bisect(sorted, y0, 0);\n\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\n\n          tooltipsData.push({\n            point: data,\n            color: d.color,\n            name: d.name,\n          });\n\n          return `translate(${foundX(data.x)}, ${foundY(data.y)})`;\n        }\n      });\n\n    if (this._options.tooltip?.format) {\n      const formatted = this._options.tooltip?.format(tooltipsData);\n\n      d3.select(this._container.nativeElement)\n        .select('.tooltip-chart')\n        .style('top', top)\n        .style('right', right)\n        .style('bottom', bottom)\n        .style('left', left)\n        .html(formatted);\n    }\n  }\n\n  private tooltipPosition(event) {\n    const centerX = this._width / 2;\n    const centerY = this._height / 2;\n\n    const padding = {x: 10, y: 10};\n\n    const scene = {\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\n      bottom:\n        event.pageY > centerY\n          ? `${window.innerHeight - event.pageY}px`\n          : 'initial',\n      right:\n        event.pageX > centerX\n          ? `${window.innerWidth - event.pageX + padding.x}px`\n          : 'initial',\n    };\n\n    return scene;\n  }\n\n  private createMarkers() {\n    if (this._options.tooltip === undefined) {\n      return;\n    }\n\n    if (!this._options.tooltip.enable) {\n      return;\n    }\n\n    this._chart.selectAll('.marker').remove();\n    this._chart.select('.marker-line').remove();\n\n    this._chart\n      .append('line')\n      .attr('class', 'marker-line')\n      .attr('x1', 35)\n      .attr('x2', this._width)\n      .style('stroke-width', 0.5)\n      .style('stroke', 'var(--color-text-40)')\n      .style('display', 'none');\n\n    const {series} = this._options;\n\n    if (!series) {\n      return;\n    }\n\n    const markers = this._chart\n      .selectAll()\n      .data(series.filter((_) => _.visible));\n    markers\n      .enter()\n      .append('circle')\n      .attr('class', 'marker')\n      .attr('pointer-events', 'none')\n      .attr('r', 3)\n      .attr('fill', (_, i) => _.color)\n      .style('display', 'none');\n\n    const mouseoutEvent = () => {\n      this._chart.selectAll('.marker').style('display', 'none');\n      this._chart.select('.marker-line').style('display', 'none');\n\n      d3.select(this._container.nativeElement)\n        .select('.tooltip-chart')\n        .style('display', 'none');\n    };\n\n    const mouseMoveEvent = (event) => {\n      const options = {\n        event,\n        series,\n      };\n\n      this.handleMouseMove(options);\n    };\n\n    const mouseOverEvent = () => {\n      if (this._options.tooltip.showMarkers) {\n        this._chart\n          .selectAll('.marker')\n          .style('display', (d: Series<BasePoint>) => {\n            if (d.data.length) {\n              return null;\n            }\n            return 'none';\n          });\n      }\n\n      if (this._options.tooltip.showLine) {\n        this._chart.select('.marker-line').style('display', null);\n      }\n\n      d3.select(this._container.nativeElement)\n        .select('.tooltip-chart')\n        .style('display', null);\n    };\n\n    this._chart\n      .on('mouseover', mouseOverEvent)\n      .on('mousemove', mouseMoveEvent)\n      .on('mouseleave', mouseoutEvent);\n  }\n\n  private drawLegend() {\n    if (this._options.legend?.visible === false) {\n      return;\n    }\n\n    this._chart.selectAll('.legend').remove();\n\n    const drawer = this._options.legend?.type\n      ? defaultLegendDrawerMapping.get(this._options.legend.type)\n      : defaultLegendDrawerMapping.get(LegendType.swatches);\n\n    const context = this._container.nativeElement as HTMLElement;\n\n    if (!drawer) {\n      throw new Error(\n        `No drawer for legend\n        }`\n      );\n    }\n\n    drawer.draw({\n      context,\n      series: this._options.series.filter((_) => _.showInLegend),\n      width: this._width,\n      height: this._height,\n    });\n  }\n\n  private caluclateChartWidth() {\n    let width = -this._width;\n\n    if (this.offsetOpposite > 0) {\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\n    }\n\n    if (this.offsetNonOpposite > 0) {\n      width =\n        -this._width + this._options.bounds.right + this.offsetNonOpposite;\n    }\n\n    if (\n      this.offsetOpposite >= Axis.offsetFactor &&\n      this.offsetNonOpposite === 0\n    ) {\n      width = -this._width + this.offsetOpposite + this._options.bounds.left;\n    }\n\n    if (this.offsetOpposite > 0 && this.offsetNonOpposite > 0) {\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\n    }\n\n    return Math.abs(width);\n  }\n\n  private drawGridLines() {\n    if (this._options.gridLines === false) {\n      return;\n    }\n\n    const translateX =\n      this.offsetNonOpposite > 0\n        ? this.offsetNonOpposite\n        : this._options.bounds.left + this.offsetNonOpposite;\n\n    this._chart.selectAll('.grid').remove();\n\n    const yList = this._yAxisList.filter(\n      (_) => _.options.visible && !_.options.opposite\n    );\n\n    const y: any =\n      yList?.length > 0\n        ? this._yScales.get(yList[yList.length - 1].index)\n        : this._yScales.get(0);\n\n    const x = this._xScales.get(0);\n\n    if (!y || !x) {\n      return;\n    }\n\n    const TICK_HEIGHT = 40;\n    const TICK_WIDTH = 60;\n\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\n\n    const gridY = this._chart\n      .append('g')\n      .attr('class', 'grid color-text-10')\n      .style('shape-rendering', 'crispEdges');\n\n    const gridlinesY = d3\n      .axisLeft(y)\n      .tickFormat('' as any)\n      .tickSize(-this.visibleChartWindowWidth);\n\n    const hasBarSeriesType = this._options.series.some(\n      (_) => _.type === SeriesType.bar\n    );\n\n    if (!hasBarSeriesType) {\n      const gridX = this._chart\n        .append('g')\n        .attr('class', 'grid color-text-10')\n        .style('shape-rendering', 'crispEdges');\n\n      const gridlinesX = d3\n        .axisBottom(x)\n        .ticks(tickCountX)\n        .tickFormat('' as any)\n        .tickSize(\n          this._height - this._options.bounds.bottom - this._options.bounds.top\n        );\n\n      gridX\n        .call(gridlinesX)\n        .attr('transform', `translate(0, ${this._options.bounds.top})`)\n        .lower();\n    }\n\n    gridY\n      .call(gridlinesY)\n      .attr('transform', `translate(${translateX}, ${0})`)\n      .lower();\n\n    this._chart.selectAll('.grid path').remove();\n  }\n\n  private createScales() {\n    this._xScales.clear();\n    this._yScales.clear();\n\n    const defaultScaleMapping: Map<ScaleType, any> = new Map<ScaleType, any>()\n      .set(ScaleType.linear, d3.scaleLinear)\n      .set(ScaleType.log, d3.scaleLog)\n      .set(ScaleType.sqrt, d3.scaleSqrt)\n      .set(ScaleType.pow, d3.scalePow);\n\n    const xRange = [\n      this.offsetNonOpposite\n        ? this.offsetNonOpposite\n        : this._options.bounds.left,\n      this._width -\n      (this.offsetOpposite\n        ? this.offsetOpposite\n        : this._options.bounds.right),\n    ];\n\n    const yRange = [\n      this._height - this._options.bounds.bottom,\n      this._options.bounds.top,\n    ];\n\n    this._xAxisList.forEach((axis, index) => {\n      let scale = null;\n\n      if (axis.options.type === Scale.time) {\n        scale = d3\n          .scaleTime()\n          .domain(axis.extent)\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\n      }\n\n      if (axis.options.type === Scale.number) {\n        scale = defaultScaleMapping\n          .get(axis.options.scaleOptions.type)()\n          .domain(axis.extent)\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\n      }\n\n      if (axis.options.niceTicks) {\n        scale.nice();\n      }\n\n      if (axis.options.scaleOptions.type === ScaleType.log) {\n        scale.base(axis.options.scaleOptions.base);\n      }\n\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\n        scale.exponent(axis.options.scaleOptions.base);\n      }\n\n      this._xScales.set(index, scale);\n    });\n\n    this._yAxisList.forEach((axis, index) => {\n      let scale = null;\n\n      if (axis.options.type === Scale.number) {\n        scale = defaultScaleMapping\n          .get(axis.options.scaleOptions.type)()\n          .domain(axis.extent)\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\n      }\n\n      if (axis.options.type === Scale.time) {\n        scale = d3\n          .scaleTime()\n          .domain(axis.extent)\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\n      }\n\n      if (axis.options.niceTicks) {\n        scale.nice();\n      }\n\n      if (axis.options.scaleOptions.type === ScaleType.log) {\n        scale.base(axis.options.scaleOptions.base);\n      }\n\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\n        scale.exponent(axis.options.scaleOptions.base);\n      }\n\n      this._yScales.set(index, scale);\n    });\n\n    for (const [key, value] of this._yScales) {\n      this._clonedY.set(key, value.copy());\n    }\n\n    for (const [key, value] of this._xScales) {\n      this._clonedX.set(key, value.copy());\n    }\n  }\n\n  private drawAxis() {\n    const hasVisibleAxis = [...this._xAxisList, ...this._yAxisList].filter(\n      (axis) => axis.options.visible\n    );\n\n    if (!hasVisibleAxis) {\n      return;\n    }\n\n    const negative = false;\n\n    this._chart.selectAll('.axes').remove();\n\n    const axes = this._chart\n      .append('g')\n      .attr('class', 'axes')\n      .style('shape-rendering', 'crispEdges');\n\n    const TICK_HEIGHT = 40;\n    const TICK_WIDTH = 60;\n\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\n\n    this._xAxisList.forEach((axis) => {\n      const options: AxisOptions = axis.options;\n\n      const translate = `translate(${0}, ${\n        this._height - this._options.bounds.bottom\n      })`;\n\n      const x = this._xScales.get(axis.index);\n\n      const xAxis = d3.axisBottom(x).ticks(tickCountX);\n\n      if (axis.options?.tickFormat) {\n        xAxis.tickFormat(axis.options.tickFormat);\n      }\n\n      if (options.visible !== false) {\n        const translateX = this.offsetNonOpposite\n          ? this.offsetNonOpposite\n          : this._options.bounds.left + this.offsetNonOpposite;\n\n        axes\n          .append('g')\n          .attr('class', 'x-axis-label')\n          .append('text')\n          .style('fill', 'var(--color-text-50)')\n          .attr(\n            'transform',\n            'translate(' +\n            this._width / 2 +\n            ' ,' +\n            (this._height - this._options.bounds.bottom) +\n            ')'\n          )\n          .style('text-anchor', 'middle')\n          .attr('dy', '3em')\n          .text(options.title ?? '');\n\n        axes\n          .append('g')\n          .attr('class', 'x-axis font-caption')\n          .attr('data-x-scale-id', axis.index)\n          .attr('transform', translate)\n          .style('pointer-events', 'none')\n          .call(xAxis)\n          .call((_) => {\n            _.select('.domain').remove();\n            _.selectAll('.tick').attr('class', 'color-text-50');\n\n            if (negative) {\n              _.append('line')\n                .attr('y1', 0)\n                .attr('y2', this._height)\n                .attr('transform', `translate(${x(0)}, -${this._height})`)\n                .style('stroke-width', 0.5)\n                .style('stroke', 'var(--color-text-50)');\n            }\n\n            _.append('line')\n              .attr('x1', 0)\n              .attr('x2', this.visibleChartWindowWidth)\n              .attr('transform', `translate(${translateX}, ${0})`)\n              .style('stroke-width', 0.5)\n              .style('stroke', 'var(--color-text-50)');\n          });\n      }\n    });\n\n    this._yAxisList.forEach((axis) => {\n      const translate = axis.options.opposite\n        ? `translate(${this._width - axis.offset}, ${0})`\n        : `translate(${axis.offset}, ${0})`;\n\n      const y = this._yScales.get(axis.index);\n\n      const yAxis = axis.options.opposite ? d3.axisRight(y) : d3.axisLeft(y);\n\n      if (axis.options.visible !== false) {\n        const labelOffset = axis.options.opposite\n          ? this._width - axis.offset + axis.width\n          : axis.offset - axis.width;\n\n        axes\n          .append('g')\n          .attr('class', 'y-axis-label')\n          .append('text')\n          .style('fill', 'var(--color-text-50)')\n          .attr('transform', 'rotate(-90)')\n          .attr('y', labelOffset)\n          .attr('x', 0 - this._height / 2)\n          .attr('dy', axis.options.opposite ? '12px' : '-3px')\n          .style('text-anchor', 'middle')\n          .text(axis.options.title ?? '');\n\n        axes\n          .append('g')\n          .attr('class', 'y-axis font-caption')\n          .attr('data-y-scale-id', axis.index)\n          .attr('transform', translate)\n          .call(yAxis)\n          .style('pointer-events', 'none')\n          .call((_) => {\n            _.select('.domain').remove();\n            _.selectAll('.tick').attr('class', 'color-text-50');\n\n            if (!negative) {\n              _.append('line')\n                .attr('y1', 0)\n                .attr(\n                  'y2',\n                  this._height -\n                  this._options.bounds.top -\n                  this._options.bounds.bottom\n                )\n                .attr(\n                  'transform',\n                  `translate(${0}, ${this._options.bounds.top})`\n                )\n                .style('stroke-width', 0.5)\n                .style('stroke', 'var(--color-text-50)');\n            }\n          });\n      }\n    });\n  }\n}\n",
>>>>>>> Stashed changes
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ChartOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ChartOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_canvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Selection<any |  |  | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_clonedX",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_clonedY",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_commonZoomTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomTransform",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_container",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_height",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_width",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_xAxisList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Axis[]",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_xScales",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_yAxisList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Axis[]",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_yScales",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoom",
                    "defaultValue": "d3.zoom()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomAdded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomXCache",
                    "defaultValue": "new Map<number,\n    ZoomTransform>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ZoomTransform>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomYCache",
                    "defaultValue": "new Map<number,\n    ZoomTransform>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ZoomTransform>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetNonOpposite",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetOpposite",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "plotBandsMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<PlotBand>>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "plotBandsMove$",
                    "defaultValue": "new Subject<IDragEvent<PlotBand>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<PlotBand>>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "plotLinesMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<PlotLine>>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "plotLinesMove$",
                    "defaultValue": "new Subject<IDragEvent<PlotLine>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<PlotLine>>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "seriesMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "seriesMove$",
                    "defaultValue": "new Subject<IDragEvent<Series<BasePoint>>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "uniqId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "visibleChartWindowWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IZoomEvent>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "zoom$",
                    "defaultValue": "new Subject<IZoomEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IZoomEvent>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_redraw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addAxesZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "caluclateChartWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 1441,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createScales",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1542,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createVisibleWindow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawAnnotations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1640,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1093,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawGridLines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1467,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawPlotBands",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 648,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawPlotLines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 429,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redraw",
                    "args": [
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "element",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "ChartSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{width: 0, height: 0}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "ChartSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{width: 0, height: 0}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setZoom",
                    "args": [
                        {
                            "name": "zoom",
                            "type": "IZoomEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "zoom",
                            "type": "IZoomEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: string; top: string; bottom: string; right: string; }",
                    "typeParameters": [],
                    "line": 1307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TetaContentRef",
            "id": "class-TetaContentRef-be41d25448343f178fee52410beb2063",
            "file": "projects/components/src/common/contract/teta-content-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ComponentRef, ViewRef} from '@angular/core';\n\nexport class TetaContentRef {\n  constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodes",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewRef",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TooltipOptions",
            "id": "class-TooltipOptions-13689f084628cd187a8cd365f8964fdd",
            "file": "projects/components/src/component/chart/model/tooltip-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TooltipOptions {\n  enable?: boolean;\n  showMarkers?: boolean;\n  showLine?: boolean;\n  tracking?: 'x' | 'y' | 'both';\n  format?: (data: any) => any;\n\n  constructor(options?: {\n    enable?: boolean;\n    showMarkers?: boolean;\n    showLine?: boolean;\n    tracking?: 'x' | 'y' | 'both';\n    format?: (data: any) => any;\n  }) {\n    const defaultFormatter = (tooltips) => {\n      let html = '';\n\n      tooltips\n        .filter((_) => _.point)\n        .forEach((_) => {\n          html += `<div>${_.name ?? 'Без названия'} x: ${_.point?.x?.toFixed(\n            2\n          )} y: ${_.point?.y?.toFixed(2)}</div>`;\n        });\n\n      return html;\n    };\n\n    this.enable = options?.enable ?? true;\n    this.showMarkers = options?.showMarkers ?? true;\n    this.showLine = options?.showLine ?? false;\n    this.tracking = options?.tracking ?? 'x';\n    this.format = options?.format ?? defaultFormatter;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "showLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "showMarkers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tracking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"x\" | \"y\" | \"both\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AccordionContentDirective",
            "id": "directive-AccordionContentDirective-4635607620a28283f5d394604c105a19",
            "file": "projects/components/src/component/accordion/accordion-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaAccordionContent]'\n})\nexport class AccordionContentDirective {\n  constructor(public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaAccordionContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-c769b4aeb89741f82c43c1312b2822da",
            "file": "projects/components/src/directive/click-outside/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport { DomUtil } from '../../common/util/dom-util';\n\n@Directive({\n  selector: '[tetaClickOutside]',\n})\nexport class ClickOutsideDirective implements OnDestroy {\n  @Output() clickOutside = new EventEmitter<MouseEvent>();\n  @Input() rightClick = false;\n\n  private _handleEvents = false;\n\n  @Input()\n  set tetaClickOutside(val: boolean) {\n    this._handleEvents = val;\n    if (this._handleEvents) {\n      this.addListener(this.rightClick);\n    } else {\n      this.removeListener();\n    }\n  }\n\n  get tetaClickOutside(): boolean {\n    return this._handleEvents;\n  }\n\n  constructor(private _elementRef: ElementRef) {}\n\n  ngOnDestroy(): void {\n    this.removeListener();\n  }\n\n  private addListener(handleRightClick: boolean): void {\n    window.addEventListener('click', this.listener);\n    if (handleRightClick) {\n      window.addEventListener('contextmenu', this.listener);\n    }\n  }\n\n  private removeListener(): void {\n    window.removeEventListener('click', this.listener);\n    window.removeEventListener('contextmenu', this.listener);\n  }\n\n  private listener = (click: MouseEvent) => {\n    if (!this._handleEvents) {\n      return;\n    }\n    const clickedInside = DomUtil.clickedInside(\n      this._elementRef.nativeElement,\n      click\n    );\n    if (!clickedInside) {\n      this.clickOutside.emit(click);\n    }\n  };\n}\n",
            "selector": "[tetaClickOutside]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "rightClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "tetaClickOutside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_handleEvents",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "listener",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [
                        {
                            "name": "handleRightClick",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "handleRightClick",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaClickOutside": {
                    "name": "tetaClickOutside",
                    "setSignature": {
                        "name": "tetaClickOutside",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tetaClickOutside",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "ContextMenuDirective",
            "id": "directive-ContextMenuDirective-3811b0fb3f5847d5b45d0718db31432c",
            "file": "projects/components/src/directive/context-menu/context-menu.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\nimport { DOCUMENT } from '@angular/common';\nimport { ArrayUtil } from '../../common/util/array-util';\nimport { DomUtil } from '../../common/util/dom-util';\nimport { PositionUtil } from '../../common/util/position-util';\nimport { DynamicContentBaseDirective } from '../dynamic-content-base.directive';\nimport { ClickService } from '../../common/service/click.service';\nimport { merge } from 'rxjs';\nimport { filter, takeWhile, tap } from 'rxjs/operators';\n\n@Directive({\n  selector: '[tetaContextMenu]',\n})\nexport class ContextMenuDirective\n  extends DynamicContentBaseDirective\n  implements OnDestroy, OnInit\n{\n  /**\n   * Строка, шаблон или компонент для создания контекстного меню\n   */\n  @Input() tetaContextMenu: string | TemplateRef<any> | Type<any>;\n\n  get _dynamicContent() {\n    return this.tetaContextMenu;\n  }\n\n  private _eventPoint: {\n    x: number;\n    y: number;\n  };\n\n  constructor(\n    @Inject(DOCUMENT)\n    protected override _document: any,\n    protected override _elementRef: ElementRef,\n    protected override _service: DynamicComponentService,\n    protected override _injector: Injector,\n    protected override _zone: NgZone,\n    protected override _cdr: ChangeDetectorRef,\n    private _click: ClickService\n  ) {\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\n  }\n\n  @HostListener('contextmenu', ['$event'])\n  showContent(event: MouseEvent): void {\n    event.preventDefault();\n    setTimeout(() => {\n      this.createMenu(event);\n    });\n  }\n\n  @HostListener('click', ['$event'])\n  click(event: MouseEvent): void {\n    if (\n      this._componentRef &&\n      DomUtil.clickedInside(this._componentRef.location.nativeElement, event)\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n    merge(this._click.click, this._click.contextMenu)\n      .pipe(\n        takeWhile(() => this._alive),\n        filter(() => this._open),\n        filter(() => this._componentRef != null),\n        filter(\n          (event: MouseEvent) =>\n            !DomUtil.clickedInside(\n              this._componentRef.location.nativeElement,\n              event\n            )\n        ),\n        tap((_) => {\n          this.destroyContentRef();\n          this.openChange.emit(false);\n        })\n      )\n      .subscribe();\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  protected setPosition() {\n    if (this._componentRef && this._open) {\n      const position = PositionUtil.getPosition(\n        {\n          top: this._eventPoint.y,\n          bottom: this._eventPoint.y,\n          left: this._eventPoint.x,\n          right: this._eventPoint.x,\n        },\n        this._componentRef.location.nativeElement.getBoundingClientRect(),\n        this.align,\n        this.verticalAlign\n      );\n      PositionUtil.setElementPosition(\n        this._componentRef.location.nativeElement,\n        position\n      );\n    }\n  }\n\n  private createMenu(event: MouseEvent): void {\n    if (this.tetaContextMenu == null) {\n      return;\n    }\n    this._eventPoint = event;\n    this._componentRef = this.createContentRef();\n    this._componentRef.instance.className = [\n      ...ArrayUtil.asArray(this.className),\n      'context-menu',\n    ];\n    this.openChange.emit(true);\n  }\n}\n",
            "selector": "[tetaContextMenu]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 35,
                    "type": "string | TemplateRef<any> | Type<any>"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68
                },
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60
                }
            ],
            "propertiesClass": [
                {
                    "name": "_eventPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showContent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'contextmenu', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            }
        },
        {
            "name": "DisableControlDirective",
            "id": "directive-DisableControlDirective-ef9613968d982803e0a031c4707c0fa8",
            "file": "projects/components/src/directive/disable-control/disable-control.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input} from '@angular/core';\nimport {NgControl} from '@angular/forms';\n\n@Directive({\n  selector: '[tetaDisableControl]'\n})\nexport class DisableControlDirective {\n  @Input() set tetaDisableControl(val: boolean) {\n    if (this.ngControl.control) {\n      if (val) {\n        this.ngControl.control.disable();\n      } else {\n        this.ngControl.control.enable();\n      }\n    }\n  }\n\n  constructor(private ngControl: NgControl) {\n  }\n}\n",
            "selector": "[tetaDisableControl]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaDisableControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaDisableControl": {
                    "name": "tetaDisableControl",
                    "setSignature": {
                        "name": "tetaDisableControl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 8,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "DragSortContainerDirective",
            "id": "directive-DragSortContainerDirective-19e58ef2d13ee1e5da94739656aa547d",
            "file": "projects/components/src/directive/drag-sort/drag-sort-container.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  // ContentChildren,\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  // QueryList,\n} from '@angular/core';\nimport {DragSortEvent} from './drag-sort-event';\n// import {DragSortItemDirective} from './drag-sort-item.directive';\n\n@Directive({\n  selector: '[tetaDragSortContainer]',\n})\nexport class DragSortContainerDirective<T> {\n  @Input() dragSortList: T[];\n  @Output() dragSorted: EventEmitter<DragSortEvent<T>> = new EventEmitter<DragSortEvent<T>>();\n\n  // @ContentChildren(DragSortItemDirective, {descendants: true})\n  // private items: QueryList<DragSortItemDirective<T>>;\n  private _dragItem: T;\n\n  constructor() {\n  }\n\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  setDragItem(item: T) {\n    this._dragItem = item;\n  }\n\n  getDragItem(): T {\n    return this._dragItem;\n  }\n\n  getList(): T[] {\n    return this.dragSortList;\n  }\n\n  setList(list: T[]) {\n    this.dragSortList = list;\n  }\n\n  updateSortOrder(source: T, target: T, insertBefore: boolean) {\n    if (source === target) {\n      return;\n    }\n    const list = this.getList();\n    const sourceIndex = list.indexOf(source);\n    const targetIndex = list.indexOf(target);\n    if (\n      (insertBefore && sourceIndex + 1 === targetIndex) ||\n      (!insertBefore && sourceIndex === targetIndex + 1)\n    ) {\n      return;\n    }\n    const newIndex = list.indexOf(target) + (insertBefore ? 0 : 1);\n\n    this.dragSorted.emit({\n      list,\n      source,\n      target,\n      newIndex,\n      previousIndex: sourceIndex,\n    });\n  }\n}\n",
            "selector": "[tetaDragSortContainer]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dragSortList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "T[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "dragSorted",
                    "defaultValue": "new EventEmitter<DragSortEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<DragSortEvent<T>>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dragItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDragItem",
                    "args": [],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getList",
                    "args": [],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDragItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setList",
                    "args": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortOrder",
                    "args": [
                        {
                            "name": "source",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            }
        },
        {
            "name": "DragSortItemDirective",
            "id": "directive-DragSortItemDirective-032ceb90e00d3440db136c8190d8183d",
            "file": "projects/components/src/directive/drag-sort/drag-sort-item.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Host,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {DragSortContainerDirective} from './drag-sort-container.directive';\n\n@Directive({\n  selector: '[tetaDragSortItem]',\n})\nexport class DragSortItemDirective<T> implements OnInit, OnDestroy {\n  @Input() tetaDragSortItem: T;\n  @Input() dragSortDirection: 'horizontal' | 'vertical' = 'horizontal';\n\n  @HostBinding('attr.draggable') private readonly draggable = true;\n  @HostBinding('class.position-relative') private readonly relative = true;\n\n  private _dragElement: HTMLElement;\n\n  private rect: any;\n\n  constructor(\n    @Host() private _container: DragSortContainerDirective<T>,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n  }\n\n  @HostListener('dragstart', ['$event']) dragstart(event: DragEvent): void {\n    this._container.setDragItem(this.tetaDragSortItem);\n  }\n\n  @HostListener('dragenter', ['$event']) dragenter(event: DragEvent): void {\n    this.rect = this._elementRef.nativeElement.getBoundingClientRect();\n  }\n\n  @HostListener('dragover', ['$event']) dragover(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.rect && this._container.getDragItem()) {\n      this.showDrag(this.getDropPosition(event));\n    }\n  }\n\n  @HostListener('dragleave', ['$event']) dragleave(event: DragEvent): void {\n    event.preventDefault();\n    this.hideDrag();\n  }\n\n  @HostListener('dragend', ['$event']) dragend(event: DragEvent): void {\n    this._container.setDragItem(null);\n    this.hideDrag();\n  }\n\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\n    event.stopPropagation();\n    this._container.updateSortOrder(\n      this._container.getDragItem(),\n      this.tetaDragSortItem,\n      this.getDropPosition(event) === 'start'\n    );\n    this.hideDrag();\n  }\n\n  ngOnInit() {\n    this.createDrag();\n  }\n\n  ngOnDestroy() {\n    this.destroyDrag();\n  }\n\n  private showDrag(position: 'start' | 'end') {\n    this.hideDrag();\n    this._renderer.addClass(this._dragElement, `drop-direction-${position}`);\n  }\n\n  private hideDrag() {\n    this._renderer.removeClass(this._dragElement, 'drop-direction-start');\n    this._renderer.removeClass(this._dragElement, 'drop-direction-end');\n  }\n\n  private createDrag() {\n    this._dragElement = this._renderer.createElement('div');\n    this._renderer.appendChild(\n      this._elementRef.nativeElement,\n      this._dragElement\n    );\n    this._renderer.addClass(this._dragElement, 'drop-direction');\n    this._renderer.addClass(\n      this._dragElement,\n      this.dragSortDirection === 'horizontal'\n        ? 'drop-direction-horizontal'\n        : 'drop-direction-vertical'\n    );\n  }\n\n  private destroyDrag() {\n    this._renderer.removeChild(this._renderer, this._dragElement);\n  }\n\n  private getDropPosition(event: DragEvent) {\n    if (this.dragSortDirection === 'horizontal') {\n      return event.clientX >= this.rect.x + this.rect.width / 2\n        ? 'end'\n        : 'start';\n    } else {\n      return event.clientY >= this.rect.y + this.rect.height / 2\n        ? 'end'\n        : 'start';\n    }\n  }\n}\n",
            "selector": "[tetaDragSortItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dragSortDirection",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"horizontal\" | \"vertical\""
                },
                {
                    "name": "tetaDragSortItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "T"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "true"
                },
                {
                    "name": "class.position-relative",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dragElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.draggable'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "rect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "relative",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.position-relative'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroyDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDropPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"end\" | \"start\"",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDrag",
                    "args": [
                        {
                            "name": "position",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_container",
                        "type": "DragSortContainerDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_container",
                        "type": "DragSortContainerDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownBase",
            "id": "directive-DropdownBase-aea19b2a7c5b6db1946655d3e2d251cd",
            "file": "projects/components/src/component/dropdown/dropdown-base.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { DomUtil } from '../../common/util/dom-util';\nimport { PositionUtil } from '../../common/util/position-util';\nimport { Align } from '../../common/enum/align.enum';\nimport { VerticalAlign } from '../../common/enum/vertical-align.enum';\nimport { DropdownHeadDirective } from './dropdown-head.directive';\nimport { DropdownContentDirective } from './dropdown-content.directive';\nimport { AutoCloseIgnoreCase } from '../../common/contract/auto-close-ignore-case';\nimport { IRect } from '../../common/contract/i-rect';\nimport { takeWhile, throttleTime } from 'rxjs/operators';\n\n@Directive()\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nexport class DropdownBase {\n  @Input() align: Align = Align.left;\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\n  @Input() appendToBody: boolean;\n  @Input() disabled: boolean;\n  @Input() shadow = true;\n  @Input() className: string | string[];\n\n  @Input()\n  set open(val: boolean) {\n    if (val != null && val !== this._open && !this.disabled) {\n      if (val) {\n        this.openDropdown();\n      } else {\n        this.closeDropdown();\n      }\n    }\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  get container() {\n    return this.appendToBody\n      ? this._document.body\n      : this._elementRef.nativeElement;\n  }\n\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Input() autoClose = true;\n  @Input() autoCloseIgnore: Array<AutoCloseIgnoreCase> = ['inside'];\n\n  @ContentChild(DropdownHeadDirective, {\n    static: false,\n    read: ElementRef,\n  })\n  protected _head: ElementRef;\n\n  @ContentChild(DropdownContentDirective, { static: false })\n  protected _content: DropdownContentDirective;\n\n  protected _body: HTMLElement | null = null;\n  protected _open = false;\n  protected _alive = true;\n\n  constructor(\n    protected _cdr: ChangeDetectorRef,\n    protected _document: any,\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _zone: NgZone,\n    protected _renderer: Renderer2\n  ) {\n    this._zone.onStable\n      .pipe(\n        takeWhile((_) => this._alive),\n        throttleTime(10, undefined, { trailing: true })\n      )\n      .subscribe((_) => {\n        if (this._head?.nativeElement && this._body) {\n          setTimeout(() => {\n            if (this._head?.nativeElement && this._body) {\n              this.setPosition(this._head.nativeElement, this._body);\n            }\n          });\n        }\n      });\n  }\n\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\n    if (this.open) {\n      if (!DomUtil.clickedInside(this._body, event)) {\n        this.closeDropdown();\n      }\n    } else {\n      if (DomUtil.clickedInside(this._head.nativeElement, event)) {\n        this.openDropdown();\n      }\n    }\n  }\n\n  @HostListener('document:click', ['$event']) documentClick(\n    event: MouseEvent\n  ): void {\n    if (\n      !this.open ||\n      !this.autoClose ||\n      event.detail === 0 ||\n      DomUtil.clickedInside(this._head.nativeElement, event) ||\n      DomUtil.clickedInside(this._body, event)\n    ) {\n      return;\n    }\n    if (DomUtil.clickedInside(this._body, event)) {\n      if (this.autoCloseIgnore.indexOf('inside') < 0) {\n        this.closeDropdown();\n      }\n    } else {\n      if (this.autoCloseIgnore.indexOf('outside') < 0) {\n        this.closeDropdown();\n      }\n    }\n  }\n\n  @HostListener('window:keyup', ['$event']) keyUp(event: KeyboardEvent): void {\n    if (\n      !this.open ||\n      !this.autoClose ||\n      ['esc', 'enter'].every(\n        (_: 'esc' | 'enter') => this.autoCloseIgnore.indexOf(_) >= 0\n      )\n    ) {\n      return;\n    }\n    if (\n      (event.code === 'Escape' && this.autoCloseIgnore.indexOf('esc') < 0) ||\n      (event.code === 'Enter' && this.autoCloseIgnore.indexOf('enter') < 0)\n    ) {\n      this.closeDropdown();\n    }\n  }\n\n  protected closeDropdown(): void {\n    if (this._body && this.container.contains(this._body)) {\n      this._renderer.removeChild(this.container, this._body);\n    }\n    this._open = false;\n    this._body = null;\n    this.openChange.emit(this.open);\n  }\n\n  private openDropdown(): void {\n    if (this._open || !this._content || this.disabled) {\n      return;\n    }\n    this._open = true;\n    this.openChange.emit(this.open);\n    const renderer = this._renderer;\n    const content = this._content.nativeElement;\n    const container = (this._body =\n      this._body || renderer.createElement('div'));\n    renderer.addClass(container, 'dropdown');\n\n    if (this.className != null) {\n      if (this.className instanceof Array && this.className.length > 0) {\n        this.className.forEach((_) => {\n          renderer.addClass(container, _);\n        });\n      }\n      if (typeof this.className === 'string') {\n        renderer.addClass(container, this.className);\n      }\n    }\n\n    renderer.appendChild(container, content);\n    renderer.appendChild(this.container, container);\n\n    this.setPosition(this._head.nativeElement, this._body);\n  }\n\n  private setPosition(container: HTMLElement, target: HTMLElement): void {\n    const containerRect = container.getBoundingClientRect();\n    const rect: IRect = {\n      bottom: containerRect.bottom,\n      top: containerRect.top,\n      left: containerRect.left,\n      right: containerRect.right,\n    };\n    // const transformedParent = DomUtil.findTransformedParent(container);\n    // console.log(transformedParent);\n    // if (transformedParent) {\n    //   const parentPosition = transformedParent.getBoundingClientRect();\n    //   rect.left = rect.left - parentPosition.left;\n    //   rect.top = rect.top - parentPosition.top;\n    //   rect.bottom = parentPosition.bottom - rect.top;\n    //   rect.right = parentPosition.right - rect.right;\n    // }\n\n    const position = PositionUtil.getPosition(\n      rect,\n      target.getBoundingClientRect(),\n      this.align,\n      this.verticalAlign\n    );\n\n    PositionUtil.setElementPosition(target, position);\n  }\n}\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Array<AutoCloseIgnoreCase>"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | string[]"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownContentDirective, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownHeadDirective, {static: false, read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "documentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "open",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "container": {
                    "name": "container",
                    "getSignature": {
                        "name": "container",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "DropdownContentDirective",
            "id": "directive-DropdownContentDirective-8c42a57c2fd6b1fdd33cb2d91760b211",
            "file": "projects/components/src/component/dropdown/dropdown-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaDropdownContent]'\n})\nexport class DropdownContentDirective {\n  nativeElement: HTMLElement;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    this.nativeElement = _elementRef.nativeElement;\n  }\n}\n",
            "selector": "[tetaDropdownContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "nativeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-bf33e7b881e8e6041852bea0affd87bc",
            "file": "projects/components/src/component/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Inject,\n  NgZone, OnDestroy,\n  OnInit,\n  Renderer2\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {DropdownBase} from './dropdown-base';\n\n@Directive({\n  selector: '[tetaDropdown]'\n})\nexport class DropdownDirective extends DropdownBase implements OnInit, OnDestroy, AfterViewInit {\n  constructor(protected override _cdr: ChangeDetectorRef,\n              @Inject(DOCUMENT) protected override _document: any,\n              protected override _elementRef: ElementRef<HTMLElement>,\n              protected override _zone: NgZone,\n              protected override _renderer: Renderer2) {\n    super(_cdr, _document, _elementRef, _zone, _renderer);\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.closeDropdown();\n    this._alive = false;\n  }\n\n  ngAfterViewInit(): void {\n    if (this._content) {\n      this._renderer.removeChild(this._content.nativeElement.parentNode, this._content.nativeElement);\n    }\n  }\n}\n",
            "selector": "[tetaDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownHeadDirective",
            "id": "directive-DropdownHeadDirective-fdd92d787fec5472a9ca9af231cb0a00",
            "file": "projects/components/src/component/dropdown/dropdown-head.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Optional, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaDropdownHead]'\n})\nexport class DropdownHeadDirective {\n  constructor(@Optional() public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaDropdownHead]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DynamicContentBaseDirective",
            "id": "directive-DynamicContentBaseDirective-c31befa41fabb7e3455247fbae32e169",
            "file": "projects/components/src/directive/dynamic-content-base.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport { DynamicComponentService } from '../common/service/dynamic-component.service';\nimport { Align } from '../common/enum/align.enum';\nimport { VerticalAlign } from '../common/enum/vertical-align.enum';\nimport { filter, takeWhile } from 'rxjs/operators';\nimport { TetaContentRef } from '../common/contract/teta-content-ref';\nimport { PopupContentComponent } from '../component/dynamic-component/popup-content/popup-content.component';\n\n@Directive()\nexport abstract class DynamicContentBaseDirective implements OnInit, OnDestroy {\n  @Input() data: any;\n  @Input() className: string | string[];\n  @Input() align: Align = Align.left;\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\n  @Input() appendToBody: boolean;\n  @Input() set open(open: boolean) {\n    this._open = open;\n    if (this._open) {\n      this.createContentRef();\n    } else {\n      this.destroyContentRef();\n    }\n  }\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  protected _alive = true;\n  protected _componentRef: ComponentRef<any>;\n  protected _content: TetaContentRef;\n  protected _open = false;\n\n  protected abstract get _dynamicContent():\n    | string\n    | TemplateRef<any>\n    | Type<any>;\n\n  protected constructor(\n    protected _document: any,\n    protected _elementRef: ElementRef,\n    protected _service: DynamicComponentService,\n    protected _injector: Injector,\n    protected _zone: NgZone,\n    protected _cdr: ChangeDetectorRef\n  ) {\n    this._zone.onStable\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((_) => this._open)\n      )\n      .subscribe((_) => {\n        this.setPosition();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n    this.destroyContentRef();\n  }\n\n  ngOnInit(): void {}\n\n  protected createContentRef<T>(\n    className?: string | string[]\n  ): ComponentRef<T> {\n    if (!this._componentRef) {\n      this._open = true;\n      const injector = this._service.getInjector(this.data, this._injector);\n      const context = this._service.getContext(this._dynamicContent, this.data);\n      this._content = this._service.createContent(\n        this._dynamicContent,\n        this._injector,\n        context\n      );\n      this._componentRef = this._service.createComponent(\n        PopupContentComponent,\n        this._content,\n        injector,\n        this.appendToBody ? this._document.body : this._elementRef.nativeElement\n      );\n      if (className) {\n        this._componentRef.instance.addClass(className);\n      }\n    }\n    return this._componentRef;\n  }\n\n  protected destroyContentRef(): void {\n    if (this._open) {\n      this._open = false;\n      this._service.destroy(\n        this._componentRef,\n        this._content,\n        this.appendToBody ? this._document.body : this._elementRef.nativeElement\n      );\n      this._componentRef = null;\n    }\n  }\n\n  protected abstract setPosition(): void;\n}\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Align"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | string[]"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaContentRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createContentRef",
                    "args": [
                        {
                            "name": "className",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroyContentRef",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        126
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "string | TemplateRef | Type",
                        "line": 45
                    }
                }
            }
        },
        {
            "name": "ExpandPanelContentDirective",
            "id": "directive-ExpandPanelContentDirective-397c479b62bd54c02b4660b3e0e5723e",
            "file": "projects/components/src/component/expand-panel/expand-panel-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[tetaExpandPanelContent]',\n})\nexport class ExpandPanelContentDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n",
            "selector": "[tetaExpandPanelContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ExpandPanelHeadDirective",
            "id": "directive-ExpandPanelHeadDirective-42f76adf67abf56ce16929191333f6bb",
            "file": "projects/components/src/component/expand-panel/expand-panel-head.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[tetaExpandPanelHead]',\n})\nexport class ExpandPanelHeadDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n",
            "selector": "[tetaExpandPanelHead]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-308db666353646b4739e5e855feb8a6f",
            "file": "projects/components/src/directive/highlight/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, Input} from '@angular/core';\n\n@Directive({\n  selector: '[tetaHighlight]',\n})\nexport class HighlightDirective {\n  @Input() set tetaHighlight(text: string) {\n    setTimeout(() => {\n      if (this._initialElement) {\n        this.elementRef.nativeElement.innerHTML = this._initialElement;\n      }\n      if (!text) {\n        return;\n      }\n      const pattern = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n      const searchWithOutRegExp = text\n        .toLowerCase()\n        .replace(pattern, '\\\\$&')\n        .split(' ')\n        .filter(t => t.length > 0)\n        .join('|');\n      this._initialElement = this.elementRef.nativeElement.innerHTML;\n      this.recursiveReplaceNode(this.elementRef.nativeElement.childNodes, searchWithOutRegExp);\n    }, 10);\n  }\n\n  private _initialElement = null;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  private recursiveReplaceNode(nodes: NodeListOf<ChildNode>, searchWithOutRegExp: string): boolean {\n    let match = false;\n    const cacheNodes: ChildNode[] = [];\n    nodes.forEach((node: ChildNode) => {\n      cacheNodes.push(node);\n    });\n    cacheNodes.forEach(node => {\n      if (node.nodeType === 3) {\n        if (node.nodeValue && node.nodeValue.search(new RegExp(searchWithOutRegExp, 'i')) > -1) {\n          match = true;\n          this.wrapNode(node, searchWithOutRegExp);\n        }\n      } else {\n        match = this.recursiveReplaceNode(node.childNodes, searchWithOutRegExp) || match;\n      }\n    });\n\n    return match;\n  }\n\n  private wrapNode(textNode: ChildNode, searchWithOutRegExp: string) {\n    if (!textNode || !textNode.nodeValue) {\n      return;\n    }\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = textNode.nodeValue\n      .replace(new RegExp(searchWithOutRegExp, 'gi'), match => `<mark>${match}</mark>`);\n\n    const parentNode = textNode.parentNode;\n    if (parentNode) {\n      while (tempDiv.firstChild) {\n        parentNode.insertBefore(tempDiv.firstChild, textNode);\n      }\n      parentNode.removeChild(textNode);\n    }\n  }\n}\n",
            "selector": "[tetaHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaHighlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_initialElement",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "recursiveReplaceNode",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "NodeListOf<ChildNode>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "NodeListOf<ChildNode>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wrapNode",
                    "args": [
                        {
                            "name": "textNode",
                            "type": "ChildNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "textNode",
                            "type": "ChildNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaHighlight": {
                    "name": "tetaHighlight",
                    "setSignature": {
                        "name": "tetaHighlight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "text",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 7,
                        "jsdoctags": [
                            {
                                "name": "text",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "HintDirective",
            "id": "directive-HintDirective-ad131ad7b25e37a14ddc7808b2f297d0",
            "file": "projects/components/src/directive/hint/hint.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport {DynamicContentBaseDirective} from '../dynamic-content-base.directive';\nimport {DOCUMENT} from '@angular/common';\nimport {DynamicComponentService} from '../../common/service/dynamic-component.service';\nimport {PositionUtil} from '../../common/util/position-util';\nimport {ArrayUtil} from '../../common/util/array-util';\nimport {Align} from '../../common/enum/align.enum';\nimport {VerticalAlign} from '../../common/enum/vertical-align.enum';\nimport {DomUtil} from '../../common/util/dom-util';\nimport Timeout = NodeJS.Timeout;\n\n@Directive({\n  selector: '[tetaHint]',\n})\nexport class HintDirective\n  extends DynamicContentBaseDirective\n  implements OnDestroy {\n  /**\n   * Строка, шаблон или компонент для создания контекстного меню\n   */\n  @Input() tetaHint: string | TemplateRef<any> | Type<any>;\n  @Input() override align: Align = Align.center;\n  @Input() override verticalAlign: VerticalAlign = VerticalAlign.top;\n  @Input() delay = 300;\n\n  get _dynamicContent() {\n    return this.tetaHint;\n  }\n\n  private _timeout: Timeout;\n  private _componentRect: any;\n\n  constructor(\n    @Inject(DOCUMENT)\n    protected override _document: any,\n    protected override _elementRef: ElementRef,\n    protected override _service: DynamicComponentService,\n    protected override _injector: Injector,\n    protected override _zone: NgZone,\n    protected override _cdr: ChangeDetectorRef\n  ) {\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  mouseenter(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => {\n      this.createHint();\n    }, this.delay);\n  }\n\n  @HostListener('mouseleave', ['$event'])\n  mouseleave(): void {\n    clearTimeout(this._timeout);\n    if (this._open && this._componentRef) {\n      this._timeout = setTimeout(() => {\n        this.destroyContentRef();\n      }, this.delay);\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  click(event: MouseEvent): void {\n    if (\n      this._open &&\n      this._componentRef &&\n      DomUtil.clickedInside(this._componentRef.location.nativeElement, event)\n    ) {\n      event.stopPropagation();\n    }\n  }\n\n  protected setPosition() {\n    if (this._componentRef && this._open) {\n      if (!this._componentRect) {\n        this._componentRect =\n          this._componentRef.location.nativeElement.getBoundingClientRect();\n      }\n      const position = PositionUtil.getPosition(\n        this._elementRef.nativeElement.getBoundingClientRect(),\n        this._componentRect,\n        this.align,\n        this.verticalAlign,\n        0,\n        4\n      );\n      PositionUtil.setElementPosition(\n        this._componentRef.location.nativeElement,\n        position\n      );\n    }\n  }\n\n  private createHint(): void {\n    if (!this._dynamicContent) {\n      return;\n    }\n    this._componentRef = this.createContentRef();\n    this._componentRef.instance.className = [\n      ...ArrayUtil.asArray(this.className),\n      'hint',\n    ];\n  }\n}\n",
            "selector": "[tetaHint]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Align"
                },
                {
                    "name": "delay",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "tetaHint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 33,
                    "type": "string | TemplateRef<any> | Type<any>"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66
                }
            ],
            "propertiesClass": [
                {
                    "name": "_componentRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timeout",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter', ['$event']"
                        }
                    ]
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave', ['$event']"
                        }
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            }
        },
        {
            "name": "IconSpriteDirective",
            "id": "directive-IconSpriteDirective-9bc1a450efd9e3aa7343abae740b3015",
            "file": "projects/components/src/component/icon/icon-sprite.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, OnInit} from '@angular/core';\nimport {IconService} from './icon.service';\n\n@Directive({\n  selector: '[tetaIconSprite]'\n})\nexport class IconSpriteDirective implements OnInit {\n  @Input() tetaIconSprite: string;\n  @Input() bypassInterceptors = true;\n\n  constructor(private _iconService: IconService) {\n  }\n\n  ngOnInit(): void {\n    this._iconService.addSprite(this.tetaIconSprite, this.bypassInterceptors);\n  }\n}\n",
            "selector": "[tetaIconSprite]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bypassInterceptors",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "tetaIconSprite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LoaderDirective",
            "id": "directive-LoaderDirective-ed5be9beb9347b8db53693d9ff5d9d2a",
            "file": "projects/components/src/directive/loader/loader.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[tetaLoader]',\n})\nexport class LoaderDirective implements OnDestroy {\n  @Input() appendToBody = false;\n\n  @Input()\n  set tetaLoader(value: boolean) {\n    this._loading = value;\n    if (this._loading) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  get tetaLoader() {\n    return this._loading;\n  }\n\n  private _element: HTMLElement;\n  private _loader: any;\n  private _alive = true;\n  private _loading: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    @Inject(DOCUMENT) private _document: any\n  ) {\n    this._element = this._elementRef.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n    this.hide();\n  }\n\n  private show() {\n    if (this._loader === null || this._loader === undefined) {\n      this._loader = this._renderer.createElement('div');\n      this._loader.setAttribute('class', 'loader');\n    }\n    this._renderer.appendChild(\n      this.appendToBody ? this._document.body : this._element,\n      this._loader\n    );\n    this.setPosition();\n  }\n\n  private hide() {\n    if (this._loader && this._loader.parentElement) {\n      this._renderer.removeChild(this._loader.parentElement, this._loader);\n    }\n  }\n\n  private setPosition() {\n    const position = this._element.getBoundingClientRect();\n    this._renderer.setStyle(\n      this._loader,\n      'top',\n      `${position.y + position.height / 2}px`\n    );\n    this._renderer.setStyle(\n      this._loader,\n      'left',\n      `${position.x + +position.width / 2}px`\n    );\n  }\n}\n",
            "selector": "[tetaLoader]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appendToBody",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "tetaLoader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaLoader": {
                    "name": "tetaLoader",
                    "setSignature": {
                        "name": "tetaLoader",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tetaLoader",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            }
        },
        {
            "name": "NoAutofillDirective",
            "id": "directive-NoAutofillDirective-3cd1ff1e8f7fb4dba20181b91d366182",
            "file": "projects/components/src/directive/no-autofill/no-autofill.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[tetaNoAutofill]',\n})\n\n/**\n * Disable autofill inputs in Chrome. Append hidden inputs with text/password type, to element.\n */\nexport class NoAutofillDirective implements OnInit {\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  ngOnInit() {\n    const inputsTypes = ['text', 'password'];\n\n    inputsTypes.forEach((_) => {\n      const inputElement = this._renderer.createElement('input');\n      this._renderer.setAttribute(inputElement, 'type', _);\n      this._renderer.setAttribute(inputElement, 'class', 'position-absolute');\n      this._renderer.setStyle(inputElement, 'left', '-9999px');\n      this._renderer.insertBefore(\n        this._elementRef.nativeElement,\n        inputElement,\n        this._elementRef.nativeElement.firstChild\n      );\n    });\n  }\n}\n",
            "selector": "[tetaNoAutofill]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "OnlyNumberDirective",
            "id": "directive-OnlyNumberDirective-c2e363d2bcb2fb938dbe2222a7360469",
            "file": "projects/components/src/directive/only-number/only-number.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: '[tetaOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  @Input() tetaOnlyNumber = true;\n  @Input() allowDecimals = true;\n  @Input() allowSign = true;\n  @Input() decimalSeparator = '.';\n  @Input() commaSeparator = ',';\n\n  private _previousValue = '';\n\n  private _integerUnsigned = '^[0-9]*$';\n  private _integerSigned = '^-?[0-9]+$';\n  private _decimalUnsigned = '^[0-9]+(.[0-9]+)?$';\n  private _decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\n\n  private readonly _minusSign: string = '-';\n\n  constructor(private _elementRef: ElementRef, private _control: NgControl) {}\n\n  @HostListener('change', ['$event']) onChange(e: any) {\n    if (this.tetaOnlyNumber === false) {\n      return;\n    }\n    this.validateValue(this._elementRef.nativeElement.value);\n  }\n\n  @HostListener('paste', ['$event']) onPaste(e: any) {\n    if (this.tetaOnlyNumber === false) {\n      return;\n    }\n    this.validateValue(e.clipboardData.getData('text/plain'));\n    e.preventDefault();\n  }\n\n  @HostListener('keydown', ['$event']) onKeyDown(e: KeyboardEvent) {\n    if (this.tetaOnlyNumber === false) {\n      return;\n    }\n    const cursorPosition: number =\n      (e.target as HTMLInputElement).selectionStart ?? 0;\n    const originalValue: string = (e.target as HTMLInputElement).value;\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n    const signExists = originalValue.includes('-');\n    const separatorExists =\n      originalValue.includes(this.decimalSeparator) ||\n      originalValue.includes(this.commaSeparator);\n\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Delete',\n      'Escape',\n      'Tab',\n      'Home',\n      'End',\n    ];\n\n    const separatorIsCloseToSign = signExists && cursorPosition <= 1;\n    if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\n      // if (this.decimalSeparator === '.') {\n      allowedKeys.push('.');\n      // } else {\n      // allowedKeys.push(',');\n      // }\n    }\n\n    const firstCharacterIsSeparator =\n      originalValue.charAt(0) !== this.decimalSeparator;\n    if (\n      this.allowSign &&\n      !signExists &&\n      firstCharacterIsSeparator &&\n      cursorPosition === 0\n    ) {\n      allowedKeys.push('-');\n    }\n\n    if (\n      allowedKeys.indexOf(e.key) !== -1 ||\n      (e.code === 'KeyA' && controlOrCommand) ||\n      (e.code === 'KeyC' && controlOrCommand) ||\n      (e.code === 'KeyV' && controlOrCommand) ||\n      (e.code === 'KeyZ' && controlOrCommand) ||\n      (e.code === 'KeyX' && controlOrCommand)\n    ) {\n      return;\n    }\n    this._previousValue = originalValue;\n\n    const isNumber = new RegExp(this._integerUnsigned).test(e.key);\n    if (isNumber) {\n      return;\n    } else {\n      if (e.key === ',' && originalValue.indexOf('.') < 0) {\n        this._elementRef.nativeElement.value = originalValue + '.';\n      }\n      e.preventDefault();\n    }\n  }\n\n  validateValue(value: string): void {\n    if (this.tetaOnlyNumber === false) {\n      return;\n    }\n    value = value.replace(',', '.');\n    let regex: string = this._integerUnsigned;\n    if (!this.allowDecimals && !this.allowSign) {\n      regex = this._integerUnsigned;\n    }\n    if (!this.allowDecimals && this.allowSign) {\n      regex = this._integerSigned;\n    }\n    if (this.allowDecimals && !this.allowSign) {\n      regex = this._decimalUnsigned;\n    }\n    if (this.allowDecimals && this.allowSign) {\n      regex = this._decimalSigned;\n    }\n\n    let firstCharacter = value.charAt(0);\n    if (firstCharacter === this.decimalSeparator) {\n      value = 0 + value;\n    }\n\n    const lastCharacter = value.charAt(value.length - 1);\n    if (lastCharacter === this.decimalSeparator) {\n      value = value + 0;\n    }\n\n    let signedValue = false;\n    if (firstCharacter === this._minusSign) {\n      signedValue = true;\n      value = value.substring(1);\n      firstCharacter = value.charAt(0);\n    }\n    let secondChar = value.charAt(1);\n    while (\n      firstCharacter === '0' &&\n      secondChar !== '' &&\n      secondChar !== this.decimalSeparator\n    ) {\n      value = value.substring(1);\n      firstCharacter = value.charAt(0);\n      secondChar = value.charAt(1);\n    }\n    if (signedValue === true) {\n      value = this._minusSign + value;\n    }\n\n    const valueParts = value.split(this.decimalSeparator);\n    const naturalPart = valueParts?.[0];\n    let decimalPart = valueParts?.[1];\n\n    if (decimalPart != null && /^0+$/.test(decimalPart)) {\n      decimalPart = '0';\n      value = naturalPart + '.' + decimalPart;\n    }\n    if (value === '-0') {\n      value = '0';\n    }\n    if (value === '-0.0') {\n      value = '0.0';\n    }\n    const valid: boolean = new RegExp(regex).test(value);\n    this._control.control.setValue(valid ? value : this._previousValue ?? 0);\n  }\n}\n",
            "selector": "[tetaOnlyNumber]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "allowDecimals",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "allowSign",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "commaSeparator",
                    "defaultValue": "','",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "decimalSeparator",
                    "defaultValue": "'.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "tetaOnlyNumber",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40
                },
                {
                    "name": "paste",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32
                }
            ],
            "propertiesClass": [
                {
                    "name": "_decimalSigned",
                    "defaultValue": "'^-?[0-9]+(.[0-9]+)?$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_decimalUnsigned",
                    "defaultValue": "'^[0-9]+(.[0-9]+)?$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_integerSigned",
                    "defaultValue": "'^-?[0-9]+$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_integerUnsigned",
                    "defaultValue": "'^[0-9]*$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_minusSign",
                    "defaultValue": "'-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_previousValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'change', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ResizeDragDirective",
            "id": "directive-ResizeDragDirective-041fd352df7da8fd732b51ebb7a046d9",
            "file": "projects/components/src/directive/resize-drag/resize-drag.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  Output,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[tetaResizeDrag]',\n})\nexport class ResizeDragDirective {\n  @Input() tetaResizeDrag: 'horizontal' | 'vertical' = 'vertical';\n\n  @Output() resizeStart = new EventEmitter<MouseEvent>();\n  @Output() resizeProcess = new EventEmitter<MouseEvent>();\n  @Output() resizeEnd = new EventEmitter<MouseEvent>();\n\n  @HostBinding('class.resize-drag_active')\n  private _active: boolean;\n\n  @HostBinding('class.resize-drag_horizontal')\n  private get horizontal() {\n    return this.tetaResizeDrag === 'horizontal';\n  }\n\n  @HostBinding('class.resize-drag_vertical')\n  private get vertical() {\n    return this.tetaResizeDrag === 'vertical';\n  }\n\n  constructor(@Inject(DOCUMENT) private _document: any) {}\n\n  @HostListener('mousedown', ['$event']) mouseDown(event: MouseEvent) {\n    this.resizeStart.emit(event);\n    this.addListeners();\n  }\n\n  private addListeners() {\n    this._active = true;\n    this._document.addEventListener('mouseup', this.handleMouseUp);\n    this._document.addEventListener('mousemove', this.handleMouseMove);\n  }\n\n  private removeListeners() {\n    this._active = false;\n    this._document.removeEventListener('mouseup', this.handleMouseUp);\n    this._document.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  private handleMouseUp = (event: MouseEvent) => {\n    this.resizeEnd.emit(event);\n    this.removeListeners();\n  };\n\n  private handleMouseMove = (event: MouseEvent) => {\n    this.resizeProcess.emit(event);\n  };\n}\n",
            "selector": "[tetaResizeDrag]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaResizeDrag",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"horizontal\" | \"vertical\""
                }
            ],
            "outputsClass": [
                {
                    "name": "resizeEnd",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "resizeProcess",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "resizeStart",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.resize-drag_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "class.resize-drag_horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "class.resize-drag_vertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                }
            ],
            "propertiesClass": [
                {
                    "name": "_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.resize-drag_active'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseUp",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "horizontal": {
                    "name": "horizontal",
                    "getSignature": {
                        "name": "horizontal",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "vertical": {
                    "name": "vertical",
                    "getSignature": {
                        "name": "vertical",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "SelectOptionDirective",
            "id": "directive-SelectOptionDirective-73907762ed9cf90e57481a11c94f5dcb",
            "file": "projects/components/src/component/select/select-option.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaSelectOption]'\n})\nexport class SelectOptionDirective {\n  constructor(public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaSelectOption]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SelectValueDirective",
            "id": "directive-SelectValueDirective-4b8d576d5c50ca3dc63d251ea765d8dc",
            "file": "projects/components/src/component/select/select-value.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaSelectValue]'\n})\nexport class SelectValueDirective {\n  constructor(public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaSelectValue]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabContentDirective",
            "id": "directive-TabContentDirective-3cd5201ed3fcd1e8e361211cb99ee4c4",
            "file": "projects/components/src/component/tabs/tab-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaTabContent]'\n})\nexport class TabContentDirective {\n  constructor(public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaTabContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabTitleDirective",
            "id": "directive-TabTitleDirective-bcba921f0070b77bef0867d2d6a37cde",
            "file": "projects/components/src/component/tabs/tab-title.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaTabTitle]'\n})\nexport class TabTitleDirective {\n  constructor(public template: TemplateRef<any>) {\n  }\n}\n",
            "selector": "[tetaTabTitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TetaTemplateDirective",
            "id": "directive-TetaTemplateDirective-6c783baa11f41cf4c3fdd34feab8f21e",
            "file": "projects/components/src/directive/teta-template/teta-template.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[tetaTemplate]'\n})\nexport class TetaTemplateDirective {\n  @Input('tetaTemplate') id: string;\n\n  constructor(public template: TemplateRef<any>) {\n  }\n\n  getId(): string {\n    return this.id;\n  }\n}\n",
            "selector": "[tetaTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-1d16368c93e59b4323341b5c8823c980",
            "file": "projects/components/src/directive/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport { DynamicContentBaseDirective } from '../dynamic-content-base.directive';\nimport { DOCUMENT } from '@angular/common';\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\nimport { DomUtil } from '../../common/util/dom-util';\nimport { PositionUtil } from '../../common/util/position-util';\nimport { Align } from '../../common/enum/align.enum';\nimport { VerticalAlign } from '../../common/enum/vertical-align.enum';\nimport { merge } from 'rxjs';\nimport { filter, takeWhile, tap } from 'rxjs/operators';\nimport { ClickService } from '../../common/service/click.service';\n\n@Directive({\n  selector: '[tetaTooltip]',\n})\nexport class TooltipDirective\n  extends DynamicContentBaseDirective\n  implements OnDestroy, OnInit\n{\n  /**\n   * Строка, шаблон или компонент для создания контекстного меню\n   */\n  @Input() tetaTooltip: string | TemplateRef<any> | Type<any>;\n  @Input() override align: Align = Align.center;\n  @Input() override verticalAlign: VerticalAlign = VerticalAlign.top;\n  private _componentRect: any;\n\n  get _dynamicContent() {\n    return this.tetaTooltip;\n  }\n\n  constructor(\n    @Inject(DOCUMENT)\n    protected override _document: any,\n    protected override _elementRef: ElementRef,\n    protected override _service: DynamicComponentService,\n    protected override _injector: Injector,\n    protected override _zone: NgZone,\n    protected override _cdr: ChangeDetectorRef,\n    private _click: ClickService\n  ) {\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\n  }\n\n  @HostListener('click', ['$event'])\n  showContent(event: MouseEvent): void {\n    event.preventDefault();\n    this.createTooltip();\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n    merge(this._click.click, this._click.contextMenu)\n      .pipe(\n        takeWhile(() => this._alive),\n        filter(() => this._open),\n        filter(() => this._componentRef != null),\n        filter(\n          (event: MouseEvent) =>\n            !DomUtil.clickedInside(this._elementRef.nativeElement, event)\n        ),\n        filter(\n          (event: MouseEvent) =>\n            !DomUtil.clickedInside(\n              this._componentRef.location.nativeElement,\n              event\n            )\n        ),\n        tap((_) => this.destroyContentRef())\n      )\n      .subscribe();\n  }\n\n  protected setPosition() {\n    if (this._componentRef && this._open) {\n      if (!this._componentRect) {\n        this._componentRect =\n          this._componentRef.location.nativeElement.getBoundingClientRect();\n      }\n      const containerPosition =\n        this._elementRef.nativeElement.getBoundingClientRect();\n      const position = PositionUtil.getPosition(\n        containerPosition,\n        this._componentRect,\n        this.align,\n        this.verticalAlign,\n        0,\n        12\n      );\n      PositionUtil.setElementPosition(\n        this._componentRef.location.nativeElement,\n        position\n      );\n      const verticalClass =\n        containerPosition.top < position.top ? 'tooltip_bottom' : 'tooltip_top';\n      this._componentRef.instance.addClass(verticalClass);\n    }\n  }\n\n  private createTooltip(): void {\n    this._componentRef = this.createContentRef('tooltip');\n  }\n}\n",
            "selector": "[tetaTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Align"
                },
                {
                    "name": "tetaTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 36,
                    "type": "string | TemplateRef<any> | Type<any>"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59
                }
            ],
            "propertiesClass": [
                {
                    "name": "_componentRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showContent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-72690258cb19d5efd1c49b035d2f67fd",
            "file": "projects/components/src/component/accordion/accordion/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionClassName",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccordionComponent implements OnInit {\n  @HostBinding('class.accordion') private readonly accordionClassName = true;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "AccordionHeadComponent",
            "id": "component-AccordionHeadComponent-724e5f2d30ad6bd78dae36ecb3fc1aed",
            "file": "projects/components/src/component/accordion/accordion-head/accordion-head.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion-head",
            "styleUrls": [
                "./accordion-head.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-head.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showToggle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionHeadClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion-head'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "accordionItem$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionItemComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion-head",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "true"
                },
                {
                    "name": "class.accordion-head_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "class.accordion-head_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Host,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { AccordionItemComponent } from '../accordion-item/accordion-item.component';\n\n@Component({\n  selector: 'teta-accordion-head',\n  templateUrl: './accordion-head.component.html',\n  styleUrls: ['./accordion-head.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccordionHeadComponent implements OnInit {\n  @HostBinding('class.accordion-head') private readonly accordionHeadClass =\n    true;\n\n  @Input() showToggle = true;\n\n  private readonly accordionItem$: AccordionItemComponent;\n\n  constructor(\n    @Host()\n    @Inject(AccordionItemComponent)\n    accordionItem: AccordionItemComponent\n  ) {\n    this.accordionItem$ = accordionItem;\n  }\n\n  @HostListener('click')\n  toggle(): void {\n    if (this.disabled) {\n      return;\n    }\n    this.accordionItem$.toggle();\n  }\n\n  @HostBinding('class.accordion-head_open')\n  get open(): boolean {\n    return this.accordionItem$.open;\n  }\n\n  @HostBinding('class.accordion-head_disabled')\n  get disabled(): boolean {\n    return this.accordionItem$.disabled;\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-head.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordionItem",
                        "type": "AccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "accordionItem",
                        "type": "AccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "open": {
                    "name": "open",
                    "getSignature": {
                        "name": "open",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n<div *ngIf=\"showToggle\" class=\"accordion-toggle\">\n  <teta-icon [name]=\"open ? 'arrowUpKey' : 'arrowDownKey'\"\n             [palette]=\"'text'\"></teta-icon>\n</div>\n\n"
        },
        {
            "name": "AccordionItemComponent",
            "id": "component-AccordionItemComponent-b4cd0206373e074b6666f93243bb3a2b",
            "file": "projects/components/src/component/accordion/accordion-item/accordion-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion-item",
            "styleUrls": [
                "./accordion-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "accordionItemClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion-item'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "AccordionContentDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion-item",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport { AccordionContentDirective } from '../accordion-content.directive';\nimport { AccordionComponent } from '../accordion/accordion.component';\n\n@Component({\n  selector: 'teta-accordion-item',\n  templateUrl: './accordion-item.component.html',\n  styleUrls: ['./accordion-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccordionItemComponent implements OnInit {\n  @ContentChild(AccordionContentDirective, { static: false })\n  content: AccordionContentDirective;\n\n  @HostBinding('class.accordion-item_active')\n  @Input()\n  open: boolean;\n  @Input() disabled: boolean;\n\n  @HostBinding('class.accordion-item') private readonly accordionItemClass =\n    true;\n\n  private readonly accordion$: AccordionComponent;\n\n  constructor(\n    @Optional() @Inject(AccordionComponent) accordion: AccordionComponent,\n    private cdr$: ChangeDetectorRef\n  ) {\n    this.accordion$ = accordion;\n  }\n\n  toggle() {\n    this.open = !this.open;\n    this.cdr$.detectChanges();\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordion",
                        "type": "AccordionComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr$",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "accordion",
                        "type": "AccordionComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr$",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"teta-accordion-head\"></ng-content>\n<div class=\"accordion-content\" *ngIf=\"open\">\n  <ng-container *ngTemplateOutlet=\"content.template\"></ng-container>\n</div>\n"
        },
        {
            "name": "AlertSampleComponent",
            "id": "component-AlertSampleComponent-f2fb734e00ec6a276b5155e245cc287f",
            "file": "projects/components/src/component/modal/modal-samples/alert-sample/alert-sample.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-alert-sample",
            "styleUrls": [
                "./alert-sample.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-sample.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "alert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dialog2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DialogService } from '../../dialog.service';\n\n@Component({\n  selector: 'teta-alert-sample',\n  templateUrl: './alert-sample.component.html',\n  styleUrls: ['./alert-sample.component.scss'],\n})\nexport class AlertSampleComponent implements OnInit {\n  constructor(private _dialog: DialogService) {}\n\n  alert() {\n    this._dialog.alert('Some alert text');\n  }\n\n  dialog() {\n    this._dialog.confirm('Some alert text').subscribe((_) => {\n      alert(_.toString());\n    });\n  }\n\n  dialog2() {\n    this._dialog\n      .confirm('Some alert text', 'Edit', 'edit', 'red')\n      .subscribe((_) => {\n        alert(_.toString());\n      });\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert-sample.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar toolbar_panel\" [tetaIconSprite]=\"'assets/icons.svg'\">\n  <button teta-button [palette]=\"'primary'\" (click)=\"alert()\">\n    Alert\n  </button>\n\n  <button teta-button [palette]=\"'primary'\" (click)=\"dialog()\">\n    Dialog\n  </button>\n\n  <button teta-button [palette]=\"'red'\" (click)=\"dialog2()\">\n    Dangerous dialog\n  </button>\n</div>\n"
        },
        {
            "name": "BooleanCellComponent",
            "id": "component-BooleanCellComponent-74830218cfc80cbac61a34ebffd1cd7e",
            "file": "projects/components/src/component/table/default/boolean-cell/boolean-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-boolean-cell",
            "styleUrls": [
                "./boolean-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./boolean-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "svc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { CellComponentBase } from '../../base/cell-component-base';\nimport { TableColumn } from '../../contract/table-column';\nimport { TableRow } from '../../contract/table-row';\nimport { TableService } from '../../service/table.service';\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\n\n@Component({\n  selector: 'teta-boolean-cell',\n  templateUrl: './boolean-cell.component.html',\n  styleUrls: ['./boolean-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BooleanCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit\n{\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n  @ViewChild('input', { static: false }) input: ElementRef;\n\n  constructor(public override svc: TableService<T>, public override cdr: ChangeDetectorRef) {\n    super(svc, cdr);\n  }\n\n  setValue(): void {\n    this.valueChanged();\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      this.cdr.markForCheck();\n      setTimeout(() => {\n        this.input?.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  stopEdit(): void {\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./boolean-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\n  {{ row.data[column.name] }}\n</span>\n<teta-checkbox\n  #input\n  *ngIf=\"edit\"\n  [binary]=\"true\"\n  [(ngModel)]=\"row.data[column.name]\"\n  (blur)=\"setValue()\"\n></teta-checkbox>\n"
        },
        {
            "name": "BooleanFilterComponent",
            "id": "component-BooleanFilterComponent-a75465561285a4420fc52d7f547f39a7",
            "file": "projects/components/src/component/filter/boolean-filter/boolean-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-boolean-filter",
            "styleUrls": [
                "./boolean-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./boolean-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooleanFilter",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "BooleanFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FilterComponentBase } from '../base/filter-component-base';\nimport { FilterItem } from '../contarct/filter-item';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { FilterBase } from '../base/filter-base';\nimport { FilterState } from '../contarct/filter-state';\nimport { BooleanFilter } from '../contarct/boolean-filter';\n\n@Component({\n  selector: 'teta-boolean-filter',\n  templateUrl: './boolean-filter.component.html',\n  styleUrls: ['./boolean-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BooleanFilterComponent\n  extends FilterComponentBase\n  implements OnInit\n{\n  @Input() column: FilterItem;\n  @Input() filterOptions: IIdName<any>[] = [];\n  @Output() filterChanged: EventEmitter<FilterBase> =\n    new EventEmitter<FilterBase>();\n\n  filter: BooleanFilter;\n  state$: FilterState;\n\n  @Input()\n  set state(val: FilterState) {\n    this.state$ = val;\n    this.filter = this.getFilter();\n    this.changeDetector.detectChanges();\n  }\n\n  get state() {\n    return this.state$;\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {}\n\n  setFilter() {\n    this.filterChanged.emit(this.filter);\n  }\n\n  private getFilter(): BooleanFilter {\n    let filter = this.state.booleanFilters.find(\n      (f) => f.field === this.column.filterField\n    );\n    if (!filter) {\n      filter = this.state.addBooleanFilter(\n        new BooleanFilter({\n          value: null,\n          field: this.column.filterField,\n          name: this.column.name,\n        })\n      );\n    }\n    return filter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./boolean-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"padding-3\">\n  <teta-radio [ngModel]=\"filter.value\" (ngModelChange)=\"setFilter()\">\n    <teta-radio-button [value]=\"null\">null</teta-radio-button>\n    <teta-radio-button [value]=\"true\">true</teta-radio-button>\n    <teta-radio-button [value]=\"false\">false</teta-radio-button>\n  </teta-radio>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-544fae66820a535540cff6dba4d1ba76-1",
            "file": "projects/components/src/component/button/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[teta-button], teta-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "square",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "view",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ButtonViewType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\n\nexport type ButtonViewType = 'primary' | 'outline' | 'ghost';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[teta-button], teta-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent implements OnInit {\n  @Input() palette: string;\n  @Input() class;\n  @Input() view: ButtonViewType = 'primary';\n  @Input() square = false;\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [this.class, 'button'];\n    if (this.palette) {\n      result.push(`button-${this.palette}`);\n    }\n    if (this.view) {\n      result.push(`button_${this.view}`);\n    }\n    if (this.square) {\n      result.push(`button-square`);\n    }\n    return result.join(' ');\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "CellComponent",
            "id": "component-CellComponent-11f6cb1b2daf19bccdb100ec8c8f5f37",
            "file": "projects/components/src/component/table/cell/cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-cell",
            "styleUrls": [
                "./cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableColumn } from '../contract/table-column';\nimport { TableRow } from '../contract/table-row';\nimport { TableService } from '../service/table.service';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\n\n@Component({\n  selector: 'teta-cell',\n  templateUrl: './cell.component.html',\n  styleUrls: ['./cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CellComponent<T> implements OnInit, OnDestroy {\n  @Input() column: TableColumn;\n  @Input() filterOptions: IIdName<any>[];\n  @Input() dict: IDictionary<IIdName<any>[]>;\n  @Input() row: TableRow<T>;\n  @HostBinding('class.cell') private readonly tableCellClass = true;\n\n  private alive = true;\n\n  constructor(protected _svc: TableService<T>) {}\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-cell-host [row]=\"row\"\n                [column]=\"column\"\n                [filterOptions]=\"filterOptions\"\n                [dict]=\"dict\"></teta-cell-host>\n"
        },
        {
            "name": "CellComponentBase",
            "id": "component-CellComponentBase-23db63d329fd278d1cbb0413d14c521e",
            "file": "projects/components/src/component/table/base/cell-component-base.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableService } from '../service/table.service';\nimport { TableRow } from '../contract/table-row';\nimport { filter, takeWhile } from 'rxjs/operators';\nimport { ICellCoordinates } from '../contract/i-cell-coordinates';\nimport { TableColumn } from '../contract/table-column';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { ICellValue } from '../contract/i-cell-value';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\n\n@Component({\n  template: '',\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport abstract class CellComponentBase<T> implements OnInit, OnDestroy {\n  @HostBinding('class.cell-component')\n  private readonly tableCellComponent = true;\n\n  get edit() {\n    return (\n      this._edit &&\n      this.svc.boolOrFuncCallback(this.svc.cellEditable)({\n        column: this.column,\n        row: this.row,\n      })\n    );\n  }\n\n  _edit: boolean;\n  column: TableColumn;\n  filterOptions: IIdName<any>[] = [];\n  dict: IDictionary<IIdName<any>[]> = {};\n  row: TableRow<T>;\n\n  protected _alive = true;\n\n  protected constructor(\n    protected svc: TableService<T>,\n    protected cdr: ChangeDetectorRef\n  ) {}\n\n  valueChanged(): void {\n    this.svc.changeValue({\n      column: this.column,\n      row: this.row,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n\n  ngOnInit(): void {\n    this.init();\n  }\n\n  private init(): void {\n    this.svc.editRowStart\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((_) => this.column.editable)\n      )\n      .subscribe((cell: ICellCoordinates<T>) => {\n        if (\n          this.row === cell?.row &&\n          !this._edit &&\n          this.svc.boolOrFuncCallback(this.svc.cellEditable)({\n            column: this.column,\n            row: this.row,\n          })\n        ) {\n          this.start(cell, 'row');\n        }\n        if (this.row !== cell?.row && this._edit) {\n          this.stop();\n        }\n      });\n\n    this.svc.editCellStart\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((_) => this.column.editable)\n      )\n      .subscribe((cell: ICellCoordinates<T>) => {\n        if (\n          this.row === cell.row &&\n          this.column.name === cell.column.name &&\n          !this._edit\n        ) {\n          this.start(cell, 'cell');\n        }\n        if (\n          (this.row !== cell.row || this.column.name !== cell.column.name) &&\n          this._edit\n        ) {\n          this.stop();\n        }\n      });\n\n    this.svc.valueSet\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((cellValue: ICellValue<T>) => {\n        if (\n          this.row === cellValue.cell.row &&\n          this.column.name === cellValue.cell.column.name\n        ) {\n          this.row.data[this.column.name] = cellValue.value;\n          this.cdr.detectChanges();\n        }\n      });\n  }\n\n  private start(initiator: ICellCoordinates<T>, type: 'cell' | 'row') {\n    this._edit = true;\n    this.startEdit(initiator, type);\n    this.cdr.markForCheck();\n  }\n\n  private stop() {\n    this._edit = false;\n    this.stopEdit();\n    this.cdr.markForCheck();\n  }\n\n  abstract startEdit(\n    initiator: ICellCoordinates<T>,\n    type: 'cell' | 'row'\n  ): void;\n\n  abstract stopEdit(): void;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "edit": {
                    "name": "edit",
                    "getSignature": {
                        "name": "edit",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            }
        },
        {
            "name": "CellHostComponent",
<<<<<<< Updated upstream
            "id": "component-CellHostComponent-5a9461ca4a694731ebb2c63fc22f7174",
=======
            "id": "component-CellHostComponent-fc8c8eebf094f3be024bfa8a9ab9cc23",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/table/cell-host/cell-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-cell-host",
            "styleUrls": [
                "./cell-host.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
<<<<<<< Updated upstream
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { CellComponentBase } from '../base/cell-component-base';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { TableRow } from '../contract/table-row';\r\nimport { getCellComponent } from '../contract/cell-components-map';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\n\r\n@Component({\r\n  selector: 'teta-cell-host',\r\n  template: '',\r\n  styleUrls: ['./cell-host.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CellHostComponent<T> implements OnInit, OnDestroy, OnChanges {\r\n  @Input() column: TableColumn;\r\n  @Input() row: TableRow<T>;\r\n  @Input() filterOptions: IIdName<any>[];\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n  private _init = false;\r\n  private _componentRef: ComponentRef<any>;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (!CellComponentBase.isPrototypeOf(this.column.cellComponent)) {\r\n      this.column.cellComponent = getCellComponent(this.column);\r\n    }\r\n    const compFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      this.column.cellComponent\r\n    );\r\n    this._componentRef = this.viewContainerRef.createComponent(compFactory);\r\n    this._componentRef.instance.column = this.column;\r\n    this._componentRef.instance.row = this.row;\r\n    this._componentRef.instance.filterOptions = this.filterOptions;\r\n    this._componentRef.instance.dict = this.dict;\r\n    this._init = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (\r\n      this._init &&\r\n      (changes.hasOwnProperty('row') ||\r\n        changes.hasOwnProperty('column') ||\r\n        changes.hasOwnProperty('filterOptions') ||\r\n        changes.hasOwnProperty('dict'))\r\n    ) {\r\n      this._componentRef.instance.row = this.row;\r\n      this._componentRef.instance.column = this.column;\r\n      this._componentRef.instance.filterOptions = this.filterOptions;\r\n      this._componentRef.instance.dict = this.dict;\r\n      this._componentRef.injector.get(ChangeDetectorRef).markForCheck();\r\n    }\r\n  }\r\n}\r\n",
=======
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CellComponentBase } from '../base/cell-component-base';\nimport { TableColumn } from '../contract/table-column';\nimport { TableRow } from '../contract/table-row';\nimport { getCellComponent } from '../contract/cell-components-map';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\n\n@Component({\n  selector: 'teta-cell-host',\n  template: '',\n  styleUrls: ['./cell-host.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CellHostComponent<T> implements OnInit, OnDestroy, OnChanges {\n  @Input() column: TableColumn;\n  @Input() row: TableRow<T>;\n  @Input() filterOptions: IIdName<any>[];\n  @Input() dict: IDictionary<IIdName<any>[]>;\n  private _init = false;\n  private _componentRef: ComponentRef<any>;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit(): void {\n    if (!CellComponentBase.isPrototypeOf(this.column.cellComponent)) {\n      this.column.cellComponent = getCellComponent(this.column);\n    }\n    this._componentRef = this.viewContainerRef.createComponent(this.column.cellComponent);\n    this._componentRef.instance.column = this.column;\n    this._componentRef.instance.row = this.row;\n    this._componentRef.instance.filterOptions = this.filterOptions;\n    this._componentRef.instance.dict = this.dict;\n    this._init = true;\n  }\n\n  ngOnDestroy(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      this._init &&\n      (changes.hasOwnProperty('row') ||\n        changes.hasOwnProperty('column') ||\n        changes.hasOwnProperty('filterOptions') ||\n        changes.hasOwnProperty('dict'))\n    ) {\n      this._componentRef.instance.row = this.row;\n      this._componentRef.instance.column = this.column;\n      this._componentRef.instance.filterOptions = this.filterOptions;\n      this._componentRef.instance.dict = this.dict;\n      this._componentRef.injector.get(ChangeDetectorRef).markForCheck();\n    }\n  }\n}\n",
>>>>>>> Stashed changes
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cell-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ]
        },
        {
            "name": "Chart3dComponent",
            "id": "component-Chart3dComponent-fe3da8bf68f9c75206f2b38b4bdbcd72",
            "file": "projects/components/src/component/chart-3d/chart3d/chart3d.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart3d",
            "styleUrls": [
                "./chart3d.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart3d.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_camera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.PerspectiveCamera",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart3dOptions",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrbitControls",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_obs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Renderer",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Scene",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canvasRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas'"
                        }
                    ]
                },
                {
                    "name": "gridColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "SIDE_SIZE",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addResizeObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createScene",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawTicks",
                    "args": [
                        {
                            "name": "x",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "z",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "z",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScales",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series3d<Base3dPoint>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: any; y: any; z: any; }",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series3d<Base3dPoint>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "makeSprite",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opts",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "THREE.Sprite",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opts",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRenderingLoop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as d3 from 'd3';\nimport { Chart3dOptions } from '../model/chart-3d-options';\nimport { Base3dPoint } from '../model/base-3d-point';\nimport { Series3d } from '../model/series-3d';\nimport { ThemeSwitchService } from '../../theme-switch/theme-switch.service';\nimport { takeWhile, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-chart3d',\n  templateUrl: './chart3d.component.html',\n  styleUrls: ['./chart3d.component.scss'],\n})\nexport class Chart3dComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('canvas') canvasRef: ElementRef;\n\n  private _scene: THREE.Scene;\n  private _camera: THREE.PerspectiveCamera;\n  private _renderer: THREE.Renderer;\n  private _controls: OrbitControls;\n  private _obs: ResizeObserver;\n  private _config: Chart3dOptions;\n\n  private SIDE_SIZE = 100;\n  private gridColor: any;\n\n  private _alive = true;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _themeService: ThemeSwitchService\n  ) {}\n\n  @Input() set config(config: Chart3dOptions) {\n    if (config) {\n      this._config = config;\n      this.init();\n    }\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  private get canvas(): HTMLCanvasElement {\n    return this.canvasRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this._themeService.theme\n      .pipe(\n        takeWhile((_) => this._alive),\n        tap((_) => {\n          this.gridColor = _ ? '#474751' : '#d7dee3';\n          this.init();\n        })\n      )\n      .subscribe();\n  }\n\n  ngAfterViewInit() {\n    this.addResizeObserver();\n    this.createScene();\n    this.startRenderingLoop();\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  private init() {\n    if (!this._scene) {\n      return;\n    }\n\n    while (this._scene.children.length > 0) {\n      this._scene.remove(this._scene.children[0]);\n    }\n\n    const { x, y, z } = this.getScales(this._config.series);\n\n    this.config.series.forEach((data, idx) => {\n      const geometry = new THREE.BufferGeometry().setFromPoints(\n        data.points.map((_) => new THREE.Vector3(x(_.x), z(_.z), y(_.y)))\n      );\n\n      const color = d3.scaleOrdinal(d3.schemeTableau10);\n\n      const material = new THREE.LineBasicMaterial({\n        color: data?.color ?? color(idx.toString()),\n      });\n\n      const line = new THREE.Line(geometry, material);\n\n      line.computeLineDistances();\n      line.scale.set(1, 1, 1);\n      this._scene.add(line);\n    });\n\n    const plane = new THREE.GridHelper(\n      this.SIDE_SIZE,\n      this.SIDE_SIZE / 10,\n      this.gridColor,\n      this.gridColor\n    );\n\n    plane.position.set(this.SIDE_SIZE / 2, 0, this.SIDE_SIZE / 2);\n    this._scene.add(plane);\n\n    const gridX = new THREE.GridHelper(\n      this.SIDE_SIZE,\n      this.SIDE_SIZE / 10,\n      this.gridColor,\n      this.gridColor\n    );\n    gridX.geometry.rotateX(-Math.PI / 2);\n    gridX.position.set(this.SIDE_SIZE / 2, this.SIDE_SIZE / 2, 0);\n    this._scene.add(gridX);\n\n    const gridY = new THREE.GridHelper(\n      this.SIDE_SIZE,\n      this.SIDE_SIZE / 10,\n      this.gridColor,\n      this.gridColor\n    );\n    gridY.geometry.rotateZ(Math.PI / 2);\n    gridY.position.set(0, this.SIDE_SIZE / 2, this.SIDE_SIZE / 2);\n    this._scene.add(gridY);\n\n    this.drawTicks(x, y, z);\n\n    this._controls = new OrbitControls(this._camera, this._renderer.domElement);\n\n    this._controls.enableDamping = true;\n    this._controls.enablePan = true;\n    this._controls.dampingFactor = 0.25;\n    this._controls.screenSpacePanning = true;\n    this._controls.minDistance = 0;\n    this._controls.maxDistance = 10000;\n    this._controls.maxPolarAngle = Math.PI / 2;\n\n    this._controls.enableZoom = true;\n  }\n\n  private createScene() {\n    this._scene = new THREE.Scene();\n\n    const aspectRatio =\n      this._elementRef.nativeElement.clientWidth /\n      this._elementRef.nativeElement.clientHeight;\n\n    const fieldOfView = 10;\n    const nearClippingPane = 1;\n    const farClippingPane = 10000;\n\n    this._camera = new THREE.PerspectiveCamera(\n      fieldOfView,\n      aspectRatio,\n      nearClippingPane,\n      farClippingPane\n    );\n\n    this._camera.position.set(1300, 1300, 1300).setLength(1300);\n    this._scene.add(this._camera);\n  }\n\n  private setSize(width: number, height: number) {\n    this._camera.aspect = width / height;\n    this._renderer.setSize(width, height);\n\n    this._camera.updateProjectionMatrix();\n  }\n\n  private render() {\n    this._renderer.render(this._scene, this._camera);\n  }\n\n  private startRenderingLoop() {\n    this._renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      canvas: this.canvas,\n      alpha: true,\n      preserveDrawingBuffer: true,\n    });\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      this._controls?.update();\n      this.render();\n    };\n\n    animate();\n  }\n\n  private addResizeObserver() {\n    this._obs = new ResizeObserver((_) => {\n      this.setSize(_[0]?.contentRect.width, _[0]?.contentRect.height);\n    });\n\n    this._obs.observe(this._elementRef.nativeElement);\n  }\n\n  private makeSprite(text: string, opts?: { fontSize?: number }): THREE.Sprite {\n    const fontSize = 20;\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const textWidth = text.length * 50;\n    canvas.height = 50;\n    canvas.width = 50;\n\n    if(ctx) {\n      ctx.font = `${fontSize}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#A0A0A0';\n      ctx.fillText(text, 25, 25);\n    }\n\n    const texture = new THREE.Texture(canvas);\n    texture.minFilter = THREE.LinearFilter;\n    texture.needsUpdate = true;\n    const spriteMaterial = new THREE.SpriteMaterial({\n      map: texture,\n    });\n\n    const sprite = new THREE.Sprite(spriteMaterial);\n    sprite.scale.set(5, 5, 5);\n\n    return sprite;\n  }\n\n  private drawTicks(x: any, y: any, z: any) {\n    const ticks = new THREE.Object3D();\n    const scalesExtrems: any[] = [];\n\n    [x, y, z].forEach((scale, idx) => {\n      const generatedTicks = scale.ticks(this.SIDE_SIZE / 10);\n\n      scalesExtrems.push(d3.max(generatedTicks));\n\n      generatedTicks.forEach((_: any) => {\n        const sprite = this.makeSprite(_);\n\n        if (idx === 0) {\n          sprite.position.set(x(_), z(0), -5);\n        }\n\n        if (idx === 1) {\n          sprite.position.set(-5, z(0), y(_));\n        }\n\n        if (idx === 2) {\n          sprite.position.set(0, z(_), -5);\n        }\n\n        ticks.add(sprite);\n      });\n    });\n\n    const northLabel = this.makeSprite('North', { fontSize: 28 });\n    const westLabel = this.makeSprite('West', { fontSize: 28 });\n    const tvdLabel = this.makeSprite('TVD', { fontSize: 28 });\n\n    northLabel.position.set(x(scalesExtrems[0]) + 10, 0, 0);\n    westLabel.position.set(0, 0, y(scalesExtrems[1]) + 10);\n    tvdLabel.position.set(0, z(scalesExtrems[2]), 0);\n\n    ticks.add(northLabel, westLabel, tvdLabel);\n\n    this._scene.add(ticks);\n  }\n\n  private getScales(series: Series3d<Base3dPoint>[]) {\n    const extrems = series.map((_) => ({\n      x: d3.extent(_.points, (p: any) => p.x),\n      y: d3.extent(_.points, (p: any) => p.y),\n      z: d3.extent(_.points, (p: any) => p.z),\n    }));\n\n    const flattenExtrems = extrems.reduce(\n      (acc: any, _): { x: [number]; y: [number]; z: [number] } => {\n        acc.x = acc.x.concat(_.x);\n        acc.y = acc.y.concat(_.y);\n        acc.z = acc.z.concat(_.z);\n        return acc as any;\n      },\n      { x: [], y: [], z: [] }\n    );\n\n    const x = d3\n      .scaleLinear()\n      .domain([\n        d3.min(flattenExtrems.x) as any,\n        this._config?.axes?.max == null\n          ? d3.max(flattenExtrems.x)\n          : this._config.axes.max,\n      ])\n      .range([0, this.SIDE_SIZE])\n      .nice();\n\n    const y = d3\n      .scaleLinear()\n      .domain([\n        d3.min(flattenExtrems.y) as any,\n        this._config?.axes?.max == null\n          ? d3.max(flattenExtrems.y)\n          : this._config.axes.max,\n      ])\n      .range([0, this.SIDE_SIZE])\n      .nice();\n\n    const z = d3\n      .scaleLinear()\n      .domain([\n        d3.min(flattenExtrems.z) as any,\n        this._config?.axes?.max == null\n          ? d3.max(flattenExtrems.z)\n          : this._config.axes.max,\n      ])\n      .range([this.SIDE_SIZE, 0])\n      .nice();\n\n    return { x, y, z };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n",
                    "styleUrl": "./chart3d.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_themeService",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_themeService",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "Chart3dOptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "Chart3dOptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "canvas": {
                    "name": "canvas",
                    "getSignature": {
                        "name": "canvas",
                        "type": "",
                        "returnType": "HTMLCanvasElement",
                        "line": 55
                    }
                }
            },
            "templateData": "<canvas #canvas></canvas>\n"
        },
        {
            "name": "ChartComponent",
<<<<<<< Updated upstream
            "id": "component-ChartComponent-828a99093d3bea2709112058e263b598",
=======
            "id": "component-ChartComponent-99ea90c1ba065970f30e27a0055789e9",
            "file": "projects/chart/src/chart/chart/chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ChartService"
                }
            ],
            "selector": "teta-chart",
            "styleUrls": [
                "./chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {ChartService} from '../chart.service';\nimport {IChartConfig} from '../model/i-chart-config';\nimport {defaultChartConfig} from '../default/default-chart-config';\n\n@Component({\n  selector: 'teta-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss'],\n  providers: [ChartService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartComponent implements OnInit {\n  @Input() set config(config: IChartConfig) {\n    this._config = Object.assign(defaultChartConfig, config);\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  private _config;\n\n  constructor(private _service: ChartService) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n}\n",
                    "styleUrl": "./chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "IChartConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "IChartConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                }
            },
            "templateData": "<div class=\"column column_auto\">\n  <teta-chart-container [config]=\"config\"></teta-chart-container>\n</div>\n<teta-legend></teta-legend>\n"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-1a131dc80fca504f98f50a5b6bd3b9f9-1",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/chart/chart/chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart",
            "styleUrls": [
                "./chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ChartOptions"
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "IZoomEvent"
                }
            ],
            "outputsClass": [
                {
                    "name": "plotBandsMove",
                    "defaultValue": "new EventEmitter<IDragEvent<PlotBand>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<IDragEvent<PlotBand>>"
                },
                {
                    "name": "plotLinesMove",
                    "defaultValue": "new EventEmitter<IDragEvent<PlotLine>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<IDragEvent<PlotLine>>"
                },
                {
                    "name": "seriesMove",
                    "defaultValue": "new EventEmitter<IDragEvent<Series<BasePoint>>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<IDragEvent<Series<BasePoint>>>"
                },
                {
                    "name": "zoomChange",
                    "defaultValue": "new EventEmitter<IZoomEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<IZoomEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaChart",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IZoomEvent",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chart', {static: true}"
                        }
                    ]
                },
                {
                    "name": "hasSeriesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "size$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redraw",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resize",
                    "args": [
                        {
                            "name": "contentRect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "contentRect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\n\nimport {Subject} from 'rxjs';\nimport {map, takeWhile, throttleTime} from 'rxjs/operators';\nimport {TetaChart} from '../core/chart';\nimport {ChartOptions} from '../model/chart-options';\nimport {BasePoint} from '../model/point/base-point';\nimport {Series} from '../model/series';\nimport {PlotLine} from '../model/plot-line';\nimport {PlotBand} from '../model/plot-band';\nimport {IDragEvent} from '../model/i-drag-event';\nimport {IZoomEvent} from '../model/i-zoom-event';\nimport {SeriesType} from '../model/enum/series-type';\nimport {BarPoint} from '../model/point/bar-point';\n\n@Component({\n  selector: 'teta-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChartComponent\n  implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  @Input() zoom: IZoomEvent;\n\n  @Input() config: ChartOptions;\n\n  @Output()\n  plotLinesMove: EventEmitter<IDragEvent<PlotLine>> = new EventEmitter<IDragEvent<PlotLine>>();\n  @Output()\n  plotBandsMove: EventEmitter<IDragEvent<PlotBand>> = new EventEmitter<IDragEvent<PlotBand>>();\n\n  @Output()\n  seriesMove: EventEmitter<IDragEvent<Series<BasePoint>>> = new EventEmitter<IDragEvent<Series<BasePoint>>>();\n\n  @Output()\n  zoomChange: EventEmitter<IZoomEvent> = new EventEmitter<IZoomEvent>();\n\n  @ViewChild('chart', {\n    static: true,\n  })\n  chart: ElementRef;\n  hasSeriesData: boolean;\n\n  private _config: ChartOptions;\n  private _alive = true;\n  private size$ = new Subject<any>();\n  private _observer: ResizeObserver;\n  private _chart: TetaChart;\n  private _zoom: IZoomEvent;\n\n  constructor(private _zone: NgZone) {\n  }\n\n  @HostListener('click', ['$event']) click(event: any): void {\n    const composedPath = event.composedPath();\n    const triggerToken = 'legend';\n\n    const isLegend = composedPath.some((_) =>\n      _.classList?.contains(triggerToken)\n    );\n\n    if (isLegend) {\n      const clickedElement: any = event.target?.__data__;\n\n      if (!clickedElement) {\n        return;\n      }\n\n      const serieIndex = this._config?.series?.indexOf(clickedElement);\n\n      if (clickedElement.serieType === SeriesType.bar) {\n        const foundSerie = this._config.series[clickedElement.serieIndex];\n\n        this._config.series[foundSerie.id].data = this._config.series[\n          foundSerie.id\n          ].data.map((_: BasePoint & BarPoint) => {\n          if (clickedElement.id === _.id) {\n            return {\n              ..._,\n              visible: !_.visible,\n            };\n          }\n\n          return _;\n        });\n\n        this.redraw(this._config);\n      }\n\n      if (serieIndex !== -1) {\n        const foundSerie = this._config.series[serieIndex];\n\n        const yAxisIndex = foundSerie?.yAxisIndex;\n\n        this._config.series[serieIndex].visible = !foundSerie.visible;\n\n        const attachedYAxes = this._config.series\n          ?.filter((_) => _.visible)\n          .map((_) => _.yAxisIndex);\n\n        const shouldVisibleYAxis = attachedYAxes?.includes(yAxisIndex);\n\n        this._config.yAxis[yAxisIndex].visible = shouldVisibleYAxis;\n        this.redraw(this._config);\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.config && changes.hasOwnProperty('config')) {\n      this.setConfig(this.config);\n\n      if (this.zoom) {\n        this._chart?.setZoom(this.zoom);\n      }\n    }\n\n    if (this.zoom && changes.hasOwnProperty('zoom')) {\n      this._chart?.setZoom(this.zoom);\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this._observer = new ResizeObserver((entries) => {\n      const {contentRect} = entries[0];\n      this.size$.next(contentRect);\n    });\n\n    this._observer.observe(this.chart.nativeElement);\n\n    this.size$\n      .pipe(throttleTime(100, undefined, {trailing: true}))\n      .pipe(\n        takeWhile((_) => this._alive),\n        map((_) => {\n          this.resize(_);\n          this.redraw(this._config);\n        })\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n    this._observer?.unobserve(this.chart.nativeElement);\n  }\n\n  private redraw(config: any) {\n    if (config) {\n      this._chart.redraw(config);\n    }\n  }\n\n  private resize(contentRect: any) {\n    const {width, height} = contentRect;\n    this._chart.setSize({\n      width,\n      height,\n    });\n  }\n\n  private setConfig(config: ChartOptions) {\n    if (config) {\n      this._config = config;\n      this.hasSeriesData = !!this._config?.series?.some((_) => _.data.length);\n\n      if (!this._chart) {\n        this._chart = new TetaChart(this._config, this.chart);\n\n        this._chart.plotLinesMove\n          .pipe(takeWhile((_) => this._alive))\n          .subscribe((_) => this.plotLinesMove.emit(_));\n\n        this._chart.plotBandsMove\n          .pipe(takeWhile((_) => this._alive))\n          .subscribe((_) => this.plotBandsMove.emit(_));\n\n        this._chart.seriesMove\n          .pipe(takeWhile((_) => this._alive))\n          .subscribe((_) => this.seriesMove.emit(_));\n\n        this._chart.zoom\n          .pipe(\n            takeWhile((_) => this._alive),\n            map((_) => {\n              this.zoomChange.emit(_);\n            })\n          )\n          .subscribe();\n      }\n\n      if (this.chart) {\n        if (this.hasSeriesData) {\n          if (!this._zoom || this._zoom?.event?.type === 'end') {\n            this.redraw(this._config);\n          }\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n}\n\n.chart-container {\n  position: relative;\n  min-height: 0;\n  flex-grow: 1;\n  flex-basis: 1px;\n}\n\n.chart-placeholder {\n  margin: auto;\n  width: 100%;\n}\n\n.chart-placeholder span {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: block;\n}\n\n.legend-container {\n  flex-shrink: 0;\n  flex-basis: 1px;\n}\n\n::ng-deep .grid line {\n  stroke-dasharray: 1, 4;\n}\n\n::ng-deep .tooltip-chart {\n  padding: 8px 12px;\n  border-radius: 2px;\n}\n\n::ng-deep .legend {\n  grid-gap: 8px;\n  padding-bottom: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n::ng-deep .legend .item {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n::ng-deep .legend .item .swatch {\n  width: 10px;\n  height: 10px;\n}\n\n::ng-deep .legend .item .line {\n  width: 12px;\n  height: 2px;\n}\n\n::ng-deep .legend .item .label {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-left: 5px;\n}\n",
                    "styleUrl": "./chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "OnChanges"
            ],
<<<<<<< Updated upstream
            "templateData": "<div [style.display]=\"hasSeriesData ? 'contents' : 'none'\">\r\n  <div #chart class=\"chart-container\"></div>\r\n  <div class=\"legend-container\"></div>\r\n</div>\r\n<div [style.display]=\"!hasSeriesData ? 'block' : 'none'\" class=\"chart-placeholder text-align-center\">\r\n  <span class=\"font-body-3 color-text-40\">Данные отсутствуют</span>\r\n</div>\r\n\r\n\r\n"
        },
        {
=======
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ChartComponent-1",
            "templateData": "<div [style.display]=\"hasSeriesData ? 'contents' : 'none'\">\n  <div #chart class=\"chart-container\"></div>\n  <div class=\"legend-container\"></div>\n</div>\n<div [style.display]=\"!hasSeriesData ? 'block' : 'none'\" class=\"chart-placeholder text-align-center\">\n  <span class=\"font-body-3 color-text-40\">Данные отсутствуют</span>\n</div>\n\n\n"
        },
        {
            "name": "ChartContainerComponent",
            "id": "component-ChartContainerComponent-60c069c83a83505e9c6177a75098a708",
            "file": "projects/chart/src/chart/chart-container/chart-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart-container",
            "styleUrls": [
                "./chart-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IChartConfig"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DOMRect>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "yAxes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport { IChartConfig } from '../model/i-chart-config';\nimport { ChartService } from '../chart.service';\nimport { Observable, tap } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { AxesService } from '../axes.service';\nimport { Axis } from '../core/axis';\n\n@Component({\n  selector: 'teta-chart-container',\n  templateUrl: './chart-container.component.html',\n  styleUrls: ['./chart-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChartContainerComponent\n  implements OnInit, OnChanges, AfterViewChecked, AfterContentChecked\n{\n  @Input() config: IChartConfig;\n\n  yAxes: Map<number, Axis>;\n  size: Observable<DOMRect>;\n\n  private _observer: ResizeObserver;\n\n  constructor(\n    private _svc: ChartService,\n    private _cdr: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    private _axesService: AxesService\n  ) {\n    this.size = this._svc.size.pipe(\n      throttleTime(100, undefined, { trailing: true }),\n      tap(() => {\n        setTimeout(() => {\n          this._cdr.detectChanges();\n        });\n      })\n    );\n\n    this.yAxes = this._axesService.yAxis;\n  }\n\n  ngOnInit(): void {\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this._svc.setSize(entries[0].contentRect);\n    });\n    this._observer.observe(this._elementRef.nativeElement);\n\n    this._svc.init(this.config);\n  }\n\n  ngAfterContentChecked(): void {}\n\n  ngAfterViewChecked(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  min-width: 0;\n  min-height: 0;\n}\n",
                    "styleUrl": "./chart-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterViewChecked",
                "AfterContentChecked"
            ],
            "templateData": "<ng-container *ngIf=\"size | async as s\">\n\n  <svg [attr.width]=\"s.width\" [attr.height]=\"s.height\">\n    <ng-container *ngFor=\"let item of yAxes | keyvalue\">\n      <g [teta-y-axis] [axis]=\"item.value\"></g>\n    </ng-container>\n\n    <g teta-plot-line></g>\n    <g teta-plot-band></g>\n    <g teta-gridlines></g>\n    <ng-container *ngFor=\"let series of config.series\">\n      <g [teta-series-host]\n         [series]=\"series\"\n         [size]=\"s\"></g>\n    </ng-container>\n\n\n    <!--    <g teta-line-series-->\n    <!--       [series]=\"series\"-->\n    <!--       [size]=\"s\"-->\n    <!--       *ngFor=\"let series of config.series\"></g>-->\n  </svg>\n</ng-container>\n"
        },
        {
>>>>>>> Stashed changes
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-eeff92fdd659cb43e90b10cefc828923",
            "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowNull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "binary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "true/false или list",
                    "description": "<p>true/false или list</p>\n",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "компонент неактивен",
                    "description": "<p>компонент неактивен</p>\n",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "true/false или list",
                    "description": "<p>true/false или list</p>\n",
                    "line": 52,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "model$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Значение</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nЗначение\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboxComponent implements ControlValueAccessor, OnInit {\n  @HostBinding('attr.tabindex') tabindex = 0;\n\n  @Input() class;\n\n  @HostBinding('class')\n  private get getClass() {\n    const result = [this.class, 'checkbox'];\n    if (this.palette) {\n      result.push(`checkbox-${this.palette}`);\n    }\n    return result.join(' ');\n  }\n\n  @Input() palette = 'primary';\n  @Input() noLabel: boolean;\n\n  /**\n   * компонент неактивен\n   */\n  @HostBinding('class.checkbox_disabled')\n  @Input()\n  disabled: boolean;\n  /**\n   * true/false или list\n   */\n  @Input() value: any;\n  /**\n   * true/false или list\n   */\n  @Input() binary: boolean;\n\n  @Input() allowNull: boolean;\n\n  checked: boolean;\n\n  /**\n   * Значение\n   */\n  private model$: any = null;\n\n  get model(): any {\n    return this.model$;\n  }\n\n  set model(v: any) {\n    if (v !== this.model$) {\n      this.model$ = v;\n      this.onChange(v);\n    }\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  @HostListener('click')\n  changeValue() {\n    if (this.disabled) {\n      return;\n    }\n    if (this.binary) {\n      this.model = !this.model;\n    } else {\n      if (!this.isChecked()) {\n        this.addValue();\n      } else {\n        this.removeValue();\n      }\n    }\n    this.checked = this.isChecked();\n  }\n\n  writeValue(model: any) {\n    if (this.binary) {\n      this.model$ = model;\n    } else {\n      if (model && model instanceof Array) {\n        this.model$ = model;\n      } else {\n        this.model$ = [];\n      }\n    }\n    this.checked = this.isChecked();\n    this.cdr.detectChanges();\n  }\n\n  isChecked(): boolean {\n    if (this.binary) {\n      return this.allowNull ? this.model : !!this.model;\n    } else {\n      return this.model && this.model.indexOf(this.value) >= 0;\n    }\n  }\n\n  removeValue() {\n    this.model = this.model.filter((val: any) => val !== this.value);\n  }\n\n  addValue() {\n    if (this.model) {\n      this.model = [...this.model, this.value];\n    } else {\n      this.model = [this.value];\n    }\n  }\n\n  ngOnInit() {}\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "any",
                        "returnType": "any",
                        "line": 67
                    }
                }
            },
            "templateData": "<div class=\"checkbox__tick\">\n  <teta-icon [name]=\"checked ? 'tick' : checked === false ? '' : 'minus'\"></teta-icon>\n</div>\n<span class=\"font-body-3 margin-left-1\" *ngIf=\"!noLabel\">\n  <ng-content></ng-content>\n</span>\n"
        },
        {
            "name": "DateCellComponent",
            "id": "component-DateCellComponent-2715ca25091dae3008ab37400f0e700c",
            "file": "projects/components/src/component/table/default/date-cell/date-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-cell",
            "styleUrls": [
                "./date-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { CellComponentBase } from '../../base/cell-component-base';\nimport { TableColumn } from '../../contract/table-column';\nimport { TableRow } from '../../contract/table-row';\nimport { TableService } from '../../service/table.service';\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\nimport { DatePickerComponent } from '../../../date-picker/date-picker/date-picker.component';\n\n@Component({\n  selector: 'teta-date-cell',\n  templateUrl: './date-cell.component.html',\n  styleUrls: ['./date-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DateCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit\n{\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n\n  @ViewChild('input', { static: false }) input: DatePickerComponent;\n\n  constructor(\n    protected override svc: TableService<T>,\n    protected override cdr: ChangeDetectorRef\n  ) {\n    super(svc, cdr);\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  setValue(value: Date): void {\n    this.row.data[this.column.name] = value;\n    this.valueChanged();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      setTimeout(() => {\n        this.input?.focus();\n        this.cdr.markForCheck();\n      }, 0);\n    }\n  }\n\n  stopEdit(): void {\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\n  {{row.data[column.name] | date : 'dd.MM.yyyy'}}\n</span>\n<teta-date-picker class=\"datepicker-table\" #input\n                  *ngIf=\"edit\"\n                  [appendToBody]=\"false\"\n                  [showTime]=\"false\"\n                  [ngModel]=\"row.data[column.name]\"\n                  (ngModelChange)=\"setValue($event)\"\n></teta-date-picker>\n"
        },
        {
            "name": "DateFilterComponent",
            "id": "component-DateFilterComponent-cc49827a7b158aeffada008db2a8eeaa",
            "file": "projects/components/src/component/filter/date-filter/date-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-filter",
            "styleUrls": [
                "./date-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilter",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "DateFilter",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { DateFilterValue } from '../contarct/date-filter-value';\nimport { DateFilter } from '../contarct/date-filter';\nimport { FilterState } from '../contarct/filter-state';\nimport { FilterBase } from '../base/filter-base';\nimport { FilterComponentBase } from '../base/filter-component-base';\nimport { FilterItem } from '../contarct/filter-item';\nimport { IIdName } from '../../../common/contract/i-id-name';\n\n@Component({\n  selector: 'teta-date-filter',\n  templateUrl: './date-filter.component.html',\n  styleUrls: ['./date-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DateFilterComponent extends FilterComponentBase implements OnInit {\n  @Input() column: FilterItem;\n  @Input() filterOptions: IIdName<any>[] = [];\n  @Output() filterChanged: EventEmitter<FilterBase> =\n    new EventEmitter<FilterBase>();\n\n  filter: DateFilter;\n  state$: FilterState;\n\n  @Input()\n  set state(val: FilterState) {\n    this.state$ = val;\n    this.filter = this.getFilter();\n    this.changeDetector.detectChanges();\n    this.changeDetector.markForCheck();\n  }\n\n  get state() {\n    return this.state$;\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.filter = this.getFilter();\n  }\n\n  private getFilter(): DateFilter {\n    let filter = this.state.dateFilters.find(\n      (f) => f.field === this.column.filterField\n    );\n    if (filter === null || filter === undefined) {\n      filter = this.state.addDateFilter(\n        new DateFilter({\n          value: new DateFilterValue(),\n          field: this.column.filterField,\n          name: this.column.name,\n        })\n      );\n    }\n    return filter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"form-row padding-3\">\n  <teta-input [label]=\"'От'\">\n    <teta-date-picker style=\"width: 110px\"\n                      [ngModel]=\"filter.value?.greaterThan\"\n                      [appendToBody]=\"true\"\n                      (ngModelChange)=\"filter.value.greaterThan=$event\"></teta-date-picker>\n  </teta-input>\n  <teta-input [label]=\"'До'\">\n    <teta-date-picker style=\"width: 110px\"\n                      [ngModel]=\"filter.value?.lessThan\"\n                      [appendToBody]=\"true\"\n                      (ngModelChange)=\"filter.value.lessThan=$event\"></teta-date-picker>\n  </teta-input>\n</div>\n"
        },
        {
            "name": "DateItemDefaultComponent",
            "id": "component-DateItemDefaultComponent-edb421bf555b3235828d53d7edb7d3df",
            "file": "projects/components/src/component/property-grid/default/date-item-default/date-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-item-default",
            "styleUrls": [
                "./date-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-date-item-default',\n  templateUrl: './date-item-default.component.html',\n  styleUrls: ['./date-item-default.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DateItemDefaultComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>date-item-default works!</p>\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-4b66ce8859186f9afa71779a45d7b65c",
            "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-date-picker",
            "styleUrls": [
                "./date-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Date[]"
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number[]"
                },
                {
                    "name": "disabledPeriods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "DatePeriod[]"
                },
                {
                    "name": "firstDayOfWeek",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number"
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Date"
                },
                {
                    "name": "maxYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Date"
                },
                {
                    "name": "minYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "Date"
                },
                {
                    "name": "showTime",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "_format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "classDatepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "clearPicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 211
                },
                {
                    "name": "closePicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 272
                },
                {
                    "name": "datePickerModeEnum",
                    "defaultValue": "DatePickerMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "displayMode",
                    "defaultValue": "DatePickerMode.date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerMode",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "isDateInDisabledPeriod",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "isScrollIgnored",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 231
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker_open'"
                        }
                    ]
                },
                {
                    "name": "openPicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 259
                },
                {
                    "name": "preventEvent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "scrollMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 235
                },
                {
                    "name": "scrollYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 248
                },
                {
                    "name": "setDate",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "setHour",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "setMinute",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 192
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "setSecond",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 199
                },
                {
                    "name": "setToday",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 206
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "applyValue",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.datepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "true"
                },
                {
                    "name": "class.datepicker_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "0"
                }
            ],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PickerLocaleService } from '../service/picker-locale.service';\nimport { takeWhile } from 'rxjs/operators';\nimport { DatePeriod } from '../model/date-period';\nimport { PickerLocaleModel } from '../model/picker-locale-model';\nimport { DatePickerMode } from '../model/date-picker-mode.enum';\nimport { DateUtil } from '../../../util/date-util';\nimport { DatePickerUtil } from '../util/date-picker-util';\n\nexport const DATE_PICKER_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DatePickerComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-date-picker',\n  templateUrl: './date-picker.component.html',\n  styleUrls: ['./date-picker.component.scss'],\n  providers: [DATE_PICKER_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DatePickerComponent\n  implements ControlValueAccessor, OnInit, OnDestroy\n{\n  @Input() disabled: boolean;\n  @Input() invalid: boolean;\n  @Input() firstDayOfWeek = 1;\n  @Input() disabledDates: Date[];\n  @Input() disabledPeriods: DatePeriod[];\n  @Input() disabledDays: number[];\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() minYearDate: Date;\n  @Input() maxYearDate: Date;\n  @Input() appendToBody: boolean;\n\n  @HostBinding('class.datepicker-wide')\n  @Input()\n  showTime = false;\n\n  @Input()\n  set format(val: string) {\n    this._format = val;\n  }\n\n  get format(): string {\n    if (this._format) {\n      return this._format;\n    }\n    return this.showTime ? 'dd.MM.yyyy HH:mm:ss' : 'dd.MM.yyyy';\n  }\n\n  @HostBinding('class.datepicker_open') open: boolean;\n  @HostBinding('class.datepicker') private readonly classDatepicker = true;\n  @HostBinding('tabindex') private readonly tabindex = 0;\n\n  locale: PickerLocaleModel;\n  today: Date = new Date();\n\n  datePickerModeEnum = DatePickerMode;\n  displayMode: DatePickerMode = DatePickerMode.date;\n  _format: string;\n\n  _value: Date | null = null;\n  _currentValue: Date;\n\n  private _alive = true;\n\n  get value(): Date | null {\n    return this._value;\n  }\n\n  set value(v: Date | null) {\n    if (v?.getTime() !== this._value?.getTime()) {\n      this._value = v;\n      this.currentValue = this._value;\n    }\n  }\n\n  get currentValue(): Date {\n    return this._currentValue;\n  }\n\n  set currentValue(date: Date) {\n    this._currentValue = date;\n    this._cdr.markForCheck();\n  }\n\n  get internalValue() {\n    return this.currentValue ?? this.emptyDate();\n  }\n\n  constructor(\n    public localeService: PickerLocaleService,\n    private _cdr: ChangeDetectorRef,\n    private _elementRef: ElementRef\n  ) {\n    localeService.locale\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((locale: PickerLocaleModel) => {\n        this.locale = locale;\n      });\n  }\n\n  @HostListener('window:keyup', ['$event']) keyUp(event: KeyboardEvent): void {\n    if (!this.open) {\n      return;\n    }\n    if (event.code === 'Escape') {\n      this.currentValue = this.value;\n      this.open = false;\n    }\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n    this._cdr.markForCheck();\n  }\n\n  onChange = (_: any) => {};\n\n  onTouched = () => {};\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  applyValue(date: Date) {\n    this.setDate(date);\n    this.value = this.currentValue;\n    this.onChange(this.value);\n    this.open = false;\n  }\n\n  setDate = (day: Date) => {\n    if (day === null || day === undefined) {\n      this.currentValue = null;\n      return;\n    }\n    const dt = this.internalValue;\n    dt.setFullYear(day.getFullYear(), day.getMonth(), day.getDate());\n    this.currentValue = new Date(dt);\n    this._cdr.markForCheck();\n  };\n\n  setYear = (year: number) => {\n    const dt = this.internalValue;\n    dt.setFullYear(year);\n    this.currentValue = new Date(dt);\n    this.setMode(DatePickerMode.date);\n    this._cdr.markForCheck();\n  };\n\n  setMonth = (month: number) => {\n    const dt = this.internalValue;\n    dt.setMonth(month);\n    this.currentValue = new Date(dt);\n    this.setMode(DatePickerMode.date);\n    this._cdr.markForCheck();\n  };\n\n  setHour = (hours: number) => {\n    const dt = this.internalValue;\n    dt.setHours(hours);\n    this.currentValue = new Date(dt);\n    this._cdr.markForCheck();\n  };\n\n  setMinute = (minute: number) => {\n    const dt = this.internalValue;\n    dt.setMinutes(minute);\n    this.currentValue = new Date(dt);\n    this._cdr.markForCheck();\n  };\n\n  setSecond = (seconds: number) => {\n    const dt = this.internalValue;\n    dt.setSeconds(seconds);\n    this.currentValue = new Date(dt);\n    this._cdr.markForCheck();\n  };\n\n  setToday = () => {\n    this.currentValue = this.emptyDate();\n    this._cdr.markForCheck();\n  };\n\n  clearPicker = (event: MouseEvent): void => {\n    this.preventEvent(event);\n    this.value = null;\n    this.onChange(null);\n  };\n\n  isDateInDisabledPeriod = (dat: Date): boolean => {\n    if (!this.disabledPeriods || this.disabledPeriods.length < 1 || !dat) {\n      return false;\n    }\n    return this.disabledPeriods.some(\n      (d: DatePeriod) =>\n        d &&\n        d.start &&\n        d.end &&\n        d.start.getTime() <= dat.getTime() &&\n        d.end.getTime() >= dat.getTime()\n    );\n  };\n\n  isScrollIgnored = (): boolean =>\n    this.displayMode === DatePickerMode.month ||\n    this.displayMode === DatePickerMode.year;\n\n  scrollMonth = (e: any) => {\n    const delta = e?.deltaY ?? e;\n\n    if (e instanceof WheelEvent) {\n      this.preventEvent(e);\n    }\n\n    if (this.isScrollIgnored()) {\n      return false;\n    }\n    this.currentValue = DatePickerUtil.scrollMonth(delta, this.internalValue);\n  };\n\n  scrollYear = (e: any) => {\n    this.preventEvent(e);\n    if (this.isScrollIgnored()) {\n      return false;\n    }\n    this.currentValue = DatePickerUtil.scrollMonth(\n      e.deltaY,\n      this.internalValue\n    );\n  };\n\n  openPicker = (show: boolean) => {\n    if (this.disabled) {\n      return;\n    }\n    if (!show) {\n      this.setMode(DatePickerMode.date);\n      this.applyValue(this.currentValue);\n    }\n    this.open = show;\n    this.onTouched();\n    this._cdr.markForCheck();\n  };\n\n  closePicker = () => {\n    this.openPicker(false);\n  };\n\n  preventEvent = (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n    return false;\n  };\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  setMode(mode: DatePickerMode) {\n    let result: DatePickerMode;\n    if (mode === this.displayMode || mode === DatePickerMode.date) {\n      result = DatePickerMode.date;\n    } else {\n      result = mode;\n    }\n    this.displayMode = result;\n  }\n\n  private emptyDate() {\n    return DateUtil.truncateToDay(new Date());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 104,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "format": {
                    "name": "format",
                    "setSignature": {
                        "name": "format",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "format",
                        "type": "string",
                        "returnType": "string",
                        "line": 59
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "Date | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "Date | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 82
                    }
                },
                "currentValue": {
                    "name": "currentValue",
                    "setSignature": {
                        "name": "currentValue",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "date",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentValue",
                        "type": "",
                        "returnType": "Date",
                        "line": 93
                    }
                },
                "internalValue": {
                    "name": "internalValue",
                    "getSignature": {
                        "name": "internalValue",
                        "type": "",
                        "returnType": "",
                        "line": 102
                    }
                }
            },
            "templateData": "<teta-dropdown\n  class=\"row row_auto\"\n  [disabled]=\"disabled\"\n  [open]=\"open\"\n  [autoCloseIgnore]=\"['esc']\"\n  (openChange)=\"openPicker($event)\"\n  [appendToBody]=\"appendToBody\">\n  <div tetaDropdownHead\n       class=\"datepicker-head font-body-3\"\n       [class.datepicker-head_disabled]=\"disabled\"\n       [class.datepicker-head_invalid]=\"invalid\">\n    <teta-icon [name]=\"'calendar'\" class=\"margin-right-1\"></teta-icon>\n    <div class=\"row_auto\">\n      {{currentValue !== null && currentValue !== undefined ? (currentValue | date : format) : ''}}\n    </div>\n    <teta-icon [name]=\"'closeBig'\" (click)=\"clearPicker($event);\" class=\"margin-left-1\"></teta-icon>\n  </div>\n  <div tetaDropdownContent class=\"datepicker-body\">\n    <div class=\"padding-3\">\n      <div class=\"row align-center justify-content-between\">\n        <div>\n          <button teta-button\n                  [palette]=\"'text'\"\n                  [view]=\"displayMode===datePickerModeEnum.month ? 'primary' : 'ghost'\"\n                  (click)=\"setMode(datePickerModeEnum.month)\"\n                  (wheel)=\"scrollMonth($event);\">\n            {{locale.monthNames[internalValue?.getMonth()]}}\n          </button>\n          <button teta-button\n                  class=\"margin-left-2\"\n                  [palette]=\"'text'\"\n                  [view]=\"displayMode===datePickerModeEnum.year ? 'primary' : 'ghost'\"\n                  (click)=\"setMode(datePickerModeEnum.year)\"\n                  (wheel)=\"scrollYear($event);\">\n            {{internalValue?.getFullYear()}}\n          </button>\n        </div>\n        <button teta-button\n                [palette]=\"'text'\"\n                [view]=\"'ghost'\"\n                (click)=\"setToday()\">\n          <teta-icon [name]=\"'calendar'\"></teta-icon>\n        </button>\n      </div>\n      <div class=\"datepicker-content\">\n        <teta-year-select\n          *ngIf=\"displayMode === datePickerModeEnum.year\"\n          [currentYear]=\"internalValue?.getFullYear()\"\n          [today]=\"today\"\n          [minDate]=\"minDate\"\n          [maxDate]=\"maxDate\"\n          (yearSelected)=\"setYear($event)\">\n        </teta-year-select>\n        <teta-month-select\n          *ngIf=\"displayMode === datePickerModeEnum.month\"\n          [currentMonth]=\"internalValue?.getMonth()\"\n          [currentYear]=\"internalValue?.getFullYear()\"\n          [locale]=\"locale\"\n          [minDate]=\"minDate\"\n          [maxDate]=\"maxDate\"\n          (monthSelected)=\"setMonth($event)\">\n        </teta-month-select>\n        <teta-day-select\n          *ngIf=\"displayMode === datePickerModeEnum.date\"\n          [ngModel]=\"currentValue\"\n          (ngModelChange)=\"applyValue($event)\"\n          (dateSelected)=\"setDate($event)\"\n          (yearSelected)=\"setYear($event)\"\n          (monthSelected)=\"setMonth($event)\"\n          [minDate]=\"minDate\"\n          [maxDate]=\"maxDate\"\n          [firstDayOfWeek]=\"firstDayOfWeek\"\n          [disabledDays]=\"disabledDays\"\n          [disabledDates]=\"disabledDates\"\n          [disabledPeriods]=\"disabledPeriods\"></teta-day-select>\n      </div>\n    </div>\n    <div *ngIf=\"showTime\" class=\"datepicker-time padding-v-1 border-top border-text-10 font-body-3 color-text-90\">\n      <teta-time-part-control [max]=\"23\" [ngModel]=\"internalValue?.getHours()\"\n                              (ngModelChange)=\"setHour($event)\"></teta-time-part-control>\n      :\n      <teta-time-part-control [ngModel]=\"internalValue?.getMinutes()\"\n                              (ngModelChange)=\"setMinute($event)\"></teta-time-part-control>\n      :\n      <teta-time-part-control [ngModel]=\"internalValue?.getSeconds()\"\n                              (ngModelChange)=\"setSecond($event)\"></teta-time-part-control>\n    </div>\n  </div>\n</teta-dropdown>\n"
        },
        {
            "name": "DateTimeCellComponent",
            "id": "component-DateTimeCellComponent-e768206dc0267b1a726045ad79270876",
            "file": "projects/components/src/component/table/default/date-time-cell/date-time-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-time-cell",
            "styleUrls": [
                "./date-time-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-time-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerComponent",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {CellComponentBase} from '../../base/cell-component-base';\nimport {TableColumn} from '../../contract/table-column';\nimport {TableRow} from '../../contract/table-row';\nimport {TableService} from '../../service/table.service';\nimport {ICellCoordinates} from '../../contract/i-cell-coordinates';\nimport {DatePickerComponent} from '../../../date-picker/date-picker/date-picker.component';\n\n@Component({\n  selector: 'teta-date-time-cell',\n  templateUrl: './date-time-cell.component.html',\n  styleUrls: ['./date-time-cell.component.scss'],\n})\nexport class DateTimeCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit {\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n\n  @ViewChild('input', {static: false}) input: DatePickerComponent;\n\n  constructor(\n    protected override svc: TableService<T>,\n    protected override cdr: ChangeDetectorRef\n  ) {\n    super(svc, cdr);\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  setValue(value: Date): void {\n    this.row.data[this.column.name] = value;\n    this.valueChanged();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      setTimeout(() => {\n        this.input.openPicker(true);\n        this.cdr.markForCheck();\n      }, 0);\n    }\n  }\n\n  stopEdit(): void {\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-time-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\n  {{row.data[column.name] | date : 'dd.MM.yyyy HH:mm:ss'}}\n</span>\n<teta-date-picker class=\"datepicker-table\" #input\n                  *ngIf=\"edit\"\n                  [appendToBody]=\"true\"\n                  [showTime]=\"true\"\n                  [ngModel]=\"row.data[column.name]\"\n                  (ngModelChange)=\"setValue($event)\"\n></teta-date-picker>\n"
        },
        {
            "name": "DaySelectComponent",
            "id": "component-DaySelectComponent-33f751155f249e24d4c1f24bade20ddd",
            "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-day-select",
            "styleUrls": [
                "./day-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./day-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean"
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Date[]"
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number[]"
                },
                {
                    "name": "disabledPeriods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "DatePeriod[]"
                },
                {
                    "name": "firstDayOfWeek",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateSelected",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "monthSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "yearSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DayModel>",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "weekDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "applyValue",
                    "args": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createWeekDays",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "preventEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollMonth",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { DayModel } from '../model/day-model';\nimport { DatePeriod } from '../model/date-period';\nimport { PickerLocaleService } from '../service/picker-locale.service';\nimport { takeWhile, tap, withLatestFrom } from 'rxjs/operators';\nimport { PickerLocaleModel } from '../model/picker-locale-model';\nimport { DatePickerUtil } from '../util/date-picker-util';\nimport { fromEvent } from 'rxjs';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DateUtil } from '../../../util/date-util';\n\nexport const DAY_SELECT_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DaySelectComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-day-select',\n  templateUrl: './day-select.component.html',\n  styleUrls: ['./day-select.component.scss'],\n  providers: [DAY_SELECT_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DaySelectComponent\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  @Input() firstDayOfWeek = 1;\n  @Input() disabledDates: Date[];\n  @Input() disabledPeriods: DatePeriod[];\n  @Input() disabledDays: number[];\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() disabled: boolean;\n\n  @Output() dateSelected = new EventEmitter<Date>();\n  @Output() monthSelected = new EventEmitter<number>();\n  @Output() yearSelected = new EventEmitter<number>();\n\n  locale: PickerLocaleModel;\n\n  value: Date;\n\n  _currentValue: Date;\n\n  set currentValue(val: Date) {\n    if (\n      !this._currentValue ||\n      DateUtil.truncateToDay(val)?.getTime() !==\n        DateUtil.truncateToDay(this._currentValue)?.getTime()\n    ) {\n      this._currentValue = val;\n      this.createDays();\n      this.checkDays();\n    } else {\n      this._currentValue = val;\n    }\n    this._cdr.markForCheck();\n  }\n\n  get currentValue(): Date {\n    return this._currentValue;\n  }\n\n  days: Array<DayModel>;\n  weekDays: number[] = [];\n\n  private _alive = true;\n\n  constructor(\n    public localeService: PickerLocaleService,\n    private _cdr: ChangeDetectorRef,\n    private _elementRef: ElementRef\n  ) {\n    localeService.locale\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((locale: PickerLocaleModel) => {\n        this.locale = locale;\n      });\n  }\n\n  ngOnInit() {\n    this.weekDays = this.createWeekDays();\n\n    const touchStart$ = fromEvent(this._elementRef.nativeElement, 'touchstart');\n    const touchEnd$ = fromEvent(this._elementRef.nativeElement, 'touchend');\n\n    touchEnd$\n      .pipe(\n        takeWhile((_) => this._alive),\n        withLatestFrom(touchStart$),\n        tap((touches: [TouchEvent, TouchEvent]) => {\n          const [start, end] = touches.map((_) => _.changedTouches?.item(0));\n          const deltaY = end?.clientY - start?.clientY;\n          if (deltaY !== 0) {\n            this.scrollMonth(deltaY);\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  writeValue(model: Date) {\n    this.value = model;\n    this.currentValue = model ? model : new Date();\n    this._cdr.markForCheck();\n  }\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._cdr.markForCheck();\n  }\n\n  applyValue(day: DayModel, event: MouseEvent) {\n    this.preventEvent(event);\n    if (day === null || day === undefined || day.disabled) {\n      return;\n    }\n    this.value = day.date;\n    this.currentValue = day.date;\n    this.onChange(day.date);\n  }\n\n  setDate(day: DayModel, event: MouseEvent) {\n    if (day === null || day === undefined || day.disabled) {\n      return;\n    }\n    if (\n      day.date !== null &&\n      day.date !== undefined &&\n      day.date instanceof Date\n    ) {\n      this.currentValue = day.date;\n      this.dateSelected.emit(day.date);\n    }\n  }\n\n  scrollMonth(event: WheelEvent | number) {\n    const deltaY = event instanceof WheelEvent ? event.deltaY : event;\n\n    if (event instanceof WheelEvent) {\n      this.preventEvent(event);\n    }\n\n    this.currentValue = DatePickerUtil.scrollMonth(deltaY, this.currentValue);\n    this._cdr.detectChanges();\n  }\n\n  private createWeekDays(): number[] {\n    const result = [];\n    let dayIndex = this.firstDayOfWeek;\n    for (let i = 0; i < 7; i++) {\n      result.push(dayIndex);\n      dayIndex = dayIndex === 6 ? 0 : ++dayIndex;\n    }\n    return result;\n  }\n\n  private createDays() {\n    this.days = DatePickerUtil.getPickerDays(\n      this.currentValue,\n      this.firstDayOfWeek,\n      this.minDate,\n      this.maxDate,\n      this.disabledDates,\n      this.disabledDays,\n      this.disabledPeriods\n    );\n  }\n\n  private checkDays() {\n    if (this.days) {\n      this.days = this.days.map((dat: DayModel) => ({\n        ...dat,\n        selected:\n          dat.date.getFullYear() === this.currentValue.getFullYear() &&\n          dat.date.getMonth() === this.currentValue.getMonth() &&\n          dat.date.getDate() === this.currentValue.getDate(),\n      }));\n    }\n  }\n\n  private preventEvent(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./day-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "currentValue": {
                    "name": "currentValue",
                    "setSignature": {
                        "name": "currentValue",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentValue",
                        "type": "",
                        "returnType": "Date",
                        "line": 72
                    }
                }
            },
            "templateData": "<div class=\"datepicker-week font-caption color-text-80\">\n  <div class=\"datepicker-day\"\n       [class.font-caption-bold]=\"day === 0 || day === 6\"\n       *ngFor=\"let day of weekDays\">\n    {{locale.dayNamesMin[day]}}\n  </div>\n</div>\n<div class=\"datepicker-picker color-text-90 font-body-3\"\n     (wheel)=\"scrollMonth($event)\"\n>\n  <div *ngFor=\"let day of days\"\n       class=\"datepicker-date\"\n       (click)=\"setDate(day, $event);\"\n       (dblclick)=\"applyValue(day, $event);\"\n       [class.datepicker-date_active]=\"day.selected\"\n       [class.datepicker-date_disabled]=\"day.disabled || !day.isCurrentMonth\"\n       [class.datepicker-date_weekend]=\"day.weekend\"\n       [class.datepicker-date_today]=\"day.today\">\n    <ng-container *ngIf=\"day !== null && day !== undefined\">\n      {{day.date.getDate()}}\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "DefaultHeadCellComponent",
            "id": "component-DefaultHeadCellComponent-77d1479d7eeb8483682613dbd26cfd05",
            "file": "projects/components/src/component/table/default/default-head-cell/default-head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-default-head-cell",
            "styleUrls": [
                "./default-head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__cell__component'"
                        }
                    ],
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "HeadCellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__cell__component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TableColumn",
                    "inheritance": {
                        "file": "HeadCellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { HeadCellComponentBase } from '../../base/head-cell-component-base';\nimport { TableColumn } from '../../contract/table-column';\n\n@Component({\n  selector: 'teta-default-head-cell',\n  templateUrl: './default-head-cell.component.html',\n  styleUrls: ['./default-head-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultHeadCellComponent\n  extends HeadCellComponentBase\n  implements OnInit\n{\n  private _column: TableColumn;\n\n  @Input()\n  set column(val: TableColumn) {\n    this._column = val;\n    this._cdr.detectChanges();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  constructor(private _cdr: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  min-width: 0;\n}\n",
                    "styleUrl": "./default-head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HeadCellComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"column column_auto align-center\" [tetaHint]=\"column.hint || column.caption\">\n  <div class=\"table-head__cell__text align-center\">\n    {{column.caption}}\n  </div>\n  <div *ngIf=\"column.unit\" class=\"table-head__cell__text align-center color-text-70\" style=\"overflow: visible;\">\n    [{{column.unit}}]\n  </div>\n</div>\n"
        },
        {
            "name": "DelimiterComponent",
            "id": "component-DelimiterComponent-cee3e16ff4fd7df6780506f3fc0921d3",
            "file": "projects/components/src/component/delimiter/delimiter/delimiter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-delimiter",
            "styleUrls": [
                "./delimiter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delimiter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any"
                },
                {
                    "name": "direction",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"vertical\" | \"horizontal\""
                },
                {
                    "name": "height",
                    "defaultValue": "32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "horizontalMargin",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "palette",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "verticalMargin",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBgColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "style.height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "style.width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-delimiter',\n  templateUrl: './delimiter.component.html',\n  styleUrls: ['./delimiter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DelimiterComponent implements OnInit {\n  @Input() direction: 'vertical' | 'horizontal' = 'vertical';\n  @Input() palette = 'text';\n  @Input() height = 32;\n  @Input() verticalMargin = 4;\n  @Input() horizontalMargin = 8;\n\n  @Input() class;\n\n  @HostBinding('class')\n  private get getClass(): string {\n    return [\n      this.class,\n      'delimiter',\n      this.getBgColor(),\n      this.direction === 'horizontal' ? 'display-flex' : 'display-inline-flex',\n    ].join(' ');\n  }\n\n  @HostBinding('style.height')\n  private get getHeight(): string {\n    return this.direction === 'vertical' ? '' : '1px';\n  }\n\n  @HostBinding('style.width')\n  private get getWidth(): string {\n    return this.direction === 'horizontal' ? '' : '1px';\n  }\n\n  @HostBinding('style.margin')\n  private get getMargin(): string {\n    return this.direction === 'horizontal' ? '8px' : '0';\n  }\n\n  constructor() {}\n\n  getBgColor() {\n    return this.palette ? `bg-${this.palette}-10` : '';\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host.delimiter {\n  flex-shrink: 0;\n}\n",
                    "styleUrl": "./delimiter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 47
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                },
                "getHeight": {
                    "name": "getHeight",
                    "getSignature": {
                        "name": "getHeight",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                },
                "getWidth": {
                    "name": "getWidth",
                    "getSignature": {
                        "name": "getWidth",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "getMargin": {
                    "name": "getMargin",
                    "getSignature": {
                        "name": "getMargin",
                        "type": "string",
                        "returnType": "string",
                        "line": 45
                    }
                }
            },
            "templateData": ""
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-2010082e469ce37a84f5d7e118585c52",
            "file": "projects/components/src/component/modal/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "buttonPalette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "showCancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentModal",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ok",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { CurrentModal } from '../model/current-modal';\nimport { DynamicData } from '../../../common/contract/dynamic-data';\nimport { ModalCloseReason } from '../model/modal-close-reason.enum';\n\n@Component({\n  selector: 'teta-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent implements OnInit {\n  @Input() message: string;\n  @Input() buttonText: string;\n  @Input() buttonIcon: string;\n  @Input() buttonPalette: string;\n  @Input() showCancelButton: boolean;\n\n  constructor(public modal: CurrentModal, private data: DynamicData) {}\n\n  cancel() {\n    this.modal.close({\n      reason: ModalCloseReason.exit,\n    });\n  }\n\n  ok() {\n    this.modal.close({\n      reason: ModalCloseReason.resolve,\n    });\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  width: 240px;\n}\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-2 font-body-2\">\n  {{message | transloco}}\n</div>\n<teta-toolbar class=\"justify-content-end\">\n  <button teta-button\n          *ngIf=\"showCancelButton\"\n          (click)=\"cancel()\"\n          [palette]=\"'text'\"\n          [view]=\"'ghost'\">\n    {{'common.cancel' | transloco}}\n  </button>\n\n  <button teta-button\n          (click)=\"ok()\"\n          [square]=\"!buttonText?.length\"\n          [palette]=\"buttonPalette\">\n    <teta-icon *ngIf=\"buttonIcon\" [name]=\"buttonIcon\"></teta-icon>\n    <ng-container *ngIf=\"buttonText?.length > 0\">{{buttonText | transloco}}</ng-container>\n  </button>\n</teta-toolbar>\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-4086e7e8edfce2601ac1af18b6ddfafa",
            "file": "projects/components/src/component/dropdown/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Array<AutoCloseIgnoreCase>",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | string[]",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<boolean>",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownContentDirective, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownHeadDirective, {static: false, read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "documentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { DropdownBase } from '../dropdown-base';\n\n@Component({\n  selector: 'teta-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DropdownComponent\n  extends DropdownBase\n  implements OnInit, OnDestroy\n{\n  constructor(\n    protected override _cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) protected override _document: any,\n    protected override _elementRef: ElementRef<HTMLElement>,\n    protected override _zone: NgZone,\n    protected override _renderer: Renderer2\n  ) {\n    super(_cdr, _document, _elementRef, _zone, _renderer);\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.closeDropdown();\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DropdownBase",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-content select=\"[tetaDropdownHead]\"></ng-content>\n"
        },
        {
            "name": "ExpandPanelComponent",
            "id": "component-ExpandPanelComponent-6a868fa6173de7b6f6bc38c387c6c0ad",
            "file": "projects/components/src/component/expand-panel/expand-panel/expand-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-expand-panel",
            "styleUrls": [
                "./expand-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expand-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "direction",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "\"left\" | \"right\""
                },
                {
                    "name": "open",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExpandPanelContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ExpandPanelContentDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExpandPanelHeadDirective",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ExpandPanelHeadDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "saveCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ExpandPanelContentDirective } from '../expand-panel-content.directive';\nimport { ExpandPanelHeadDirective } from '../expand-panel-head.directive';\n\n@Component({\n  selector: 'teta-expand-panel',\n  templateUrl: './expand-panel.component.html',\n  styleUrls: ['./expand-panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpandPanelComponent implements OnInit {\n  @ContentChild(ExpandPanelContentDirective, { static: false })\n  content: ExpandPanelContentDirective;\n\n  @ContentChild(ExpandPanelHeadDirective, { static: false })\n  head: ExpandPanelHeadDirective;\n\n  @Input() placeholder: string;\n  @Input() open = true;\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Input() cookieName: string;\n  @Input() direction: 'left' | 'right' = 'left';\n\n  constructor() {}\n\n  openPanel() {\n    this.open = true;\n    this.openChange.emit(true);\n    this.saveCookie();\n  }\n\n  closePanel() {\n    this.open = false;\n    this.openChange.emit(false);\n    this.saveCookie();\n  }\n\n  ngOnInit(): void {\n    this.restoreCookie();\n  }\n\n  private saveCookie() {\n    if (!this.cookieName?.length) {\n      return;\n    }\n    localStorage.setItem(this.cookieName, JSON.stringify(this.open));\n  }\n\n  private restoreCookie() {\n    if (!this.cookieName?.length) {\n      return;\n    }\n    const cookie = localStorage.getItem(this.cookieName);\n    this.open = cookie != null ? JSON.parse(cookie) : true;\n    this.openChange.emit(this.open);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 0;\n  flex-shrink: 0;\n  min-width: 0;\n  min-height: 0;\n  height: 100%;\n}\n",
                    "styleUrl": "./expand-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"open\">\n  <teta-toolbar\n    style=\"display: flex\"\n    [style.justifyContent]=\"direction === 'right' ? 'space-between' : 'unset'\"\n    [style.flexDirection]=\"direction === 'right' ? 'row-reverse' : 'row'\">\n    <button\n      teta-button\n      [square]=\"true\"\n      [palette]=\"'text'\"\n      [view]=\"'ghost'\"\n      (click)=\"closePanel()\"\n    >\n      <teta-icon [name]=\"direction === 'right' ? 'arrowRight' : 'arrowLeft'\"></teta-icon>\n    </button>\n    <span class=\"font-title-2\" style=\"display: contents\"><ng-container *ngTemplateOutlet=\"head?.template\"></ng-container></span>\n  </teta-toolbar>\n  <ng-container *ngTemplateOutlet=\"content?.template\"></ng-container>\n</ng-container>\n<ng-container *ngIf=\"!open\">\n  <div class=\"width-10 overflow-hidden\" style=\"height: 100%;\">\n    <button\n      teta-button\n      style=\"\n        transform-origin: 0 0;\n        transform: rotate(-90deg) translateX(-100%);\n        margin: 8px;\n      \"\n      [palette]=\"'text'\"\n      [view]=\"'ghost'\"\n      (click)=\"openPanel()\"\n    >\n      <div class=\"font-button-2 nowrap\">{{ placeholder }}</div>\n      <teta-icon [name]=\"direction === 'right' ? 'arrowUp' : 'arrowDown'\"></teta-icon>\n    </button>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "FileItemComponent",
            "id": "component-FileItemComponent-b5a79e7ce997aa0e13557419b9b5500f",
            "file": "projects/components/src/component/file-upload/file-item/file-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-file-item",
            "styleUrls": [
                "./file-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-file-item',\n  templateUrl: './file-item.component.html',\n  styleUrls: ['./file-item.component.scss'],\n})\nexport class FileItemComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>file-item works!</p>\n"
        },
        {
            "name": "FileUploadAreaComponent",
            "id": "component-FileUploadAreaComponent-0559b30f3183153942fe109fb9549c97",
            "file": "projects/components/src/component/file-upload/file-upload-area/file-upload-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-file-upload-area",
            "styleUrls": [
                "./file-upload-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string[]"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "upload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<FileList>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_asActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "fileUpload",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.file-upload'"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileUpload', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dragEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "preventDefaults",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.file-upload",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "class.file-upload_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-file-upload-area',\n  templateUrl: './file-upload-area.component.html',\n  styleUrls: ['./file-upload-area.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FileUploadAreaComponent implements OnInit {\n  @HostBinding('class.file-upload') fileUpload = true;\n\n  @HostBinding('class.file-upload_active')\n  get fileUploadActive() {\n    return this._asActive;\n  }\n\n  @Input() multiple = true;\n  @Input() disabled: boolean;\n  @Input() accept: string[];\n\n  @Output() upload: EventEmitter<FileList> = new EventEmitter();\n\n  @ViewChild('fileUpload', { static: false }) input: ElementRef;\n\n  files: any;\n\n  private _asActive: boolean;\n\n  constructor() {}\n\n  @HostListener('dragenter', ['$event']) dragEnter(event) {\n    this.preventDefaults(event);\n    this._asActive = true;\n  }\n\n  @HostListener('dragover', ['$event']) dragOver(event) {\n    this.preventDefaults(event);\n    this._asActive = true;\n  }\n\n  @HostListener('dragleave', ['$event']) dragLeave(event) {\n    this.preventDefaults(event);\n    this._asActive = false;\n  }\n\n  @HostListener('drop', ['$event']) drop(event) {\n    this.upload.emit(event.dataTransfer.files);\n    this.preventDefaults(event);\n  }\n\n  ngOnInit() {}\n\n  fileChanged(event: any) {\n    if (event.target && event.target.files) {\n      this.upload.emit(event.target.files);\n      this.input.nativeElement.value = null;\n    }\n  }\n\n  private preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n}\n",
                    "styleUrl": "./file-upload-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fileUploadActive": {
                    "name": "fileUploadActive",
                    "getSignature": {
                        "name": "fileUploadActive",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n<label class=\"file-upload-label\">\n  <input #fileUpload\n         id=\"upload-input\"\n         class=\"file-upload-input\"\n         type=\"file\"\n         name=\"fileUpload\"\n         [attr.accept]=\"accept\"\n         [attr.multiple]=\"multiple ? 'multiple' : null\"\n         [disabled]=\"disabled\"\n         (change)=\"fileChanged($event)\"/>\n  <teta-button [palette]=\"'primary'\" type=\"button\">\n    <teta-icon [name]=\"'upload'\"></teta-icon>\n    Загрузить\n  </teta-button>\n</label>\n"
        },
        {
            "name": "FilterHostComponent",
<<<<<<< Updated upstream
            "id": "component-FilterHostComponent-25e5458a58edcb6c404e641726dbfb74",
=======
            "id": "component-FilterHostComponent-e5897be53319655715259adbede415f7",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/filter/filter-host/filter-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-filter-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": ""
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
<<<<<<< Updated upstream
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { getFilterComponent } from '../contarct/filter-component-map';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-filter-host',\r\n  template: '',\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FilterHostComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  set column(val: FilterItem) {\r\n    this._column = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.filterField = this._column;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this._state = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.state = this._state;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set filterOptions(val: IIdName<any>[]) {\r\n    this._filterOptions = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.filterOptions = this._filterOptions;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Output() filterChanged: EventEmitter<FilterBase> = new EventEmitter();\r\n\r\n  private _alive = true;\r\n  private _column: FilterItem;\r\n  private _state: FilterState;\r\n  private _filterOptions: IIdName<any>[];\r\n  private _componentRef: ComponentRef<any>;\r\n  private _init: boolean;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (!FilterComponentBase.isPrototypeOf(this._column.filterComponent)) {\r\n      this._column.filterComponent = getFilterComponent(this._column);\r\n    }\r\n    const compFactory =\r\n      this.componentFactoryResolver.resolveComponentFactory<FilterComponentBase>(\r\n        this._column.filterComponent\r\n      );\r\n    this._componentRef =\r\n      this.viewContainerRef.createComponent<FilterComponentBase>(compFactory);\r\n    this._componentRef.instance.column = this._column;\r\n    this._componentRef.instance.state = this._state;\r\n    this._componentRef.instance.filterOptions = this._filterOptions;\r\n    this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    this._init = true;\r\n    this._componentRef.instance.filterChanged\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((filter: FilterBase) => {\r\n        this.filterChanged.emit(filter);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
=======
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewContainerRef,\n} from '@angular/core';\nimport {FilterState} from '../contarct/filter-state';\nimport {FilterItem} from '../contarct/filter-item';\nimport {FilterBase} from '../base/filter-base';\nimport {FilterComponentBase} from '../base/filter-component-base';\nimport {takeWhile} from 'rxjs/operators';\nimport {getFilterComponent} from '../contarct/filter-component-map';\nimport {IIdName} from '../../../common/contract/i-id-name';\n\n@Component({\n  selector: 'teta-filter-host',\n  template: '',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FilterHostComponent implements OnInit, OnDestroy {\n  @Input()\n  set column(val: FilterItem) {\n    this._column = val;\n    if (this._init) {\n      this._componentRef.instance.filterField = this._column;\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\n    }\n  }\n\n  @Input()\n  set state(val: FilterState) {\n    this._state = val;\n    if (this._init) {\n      this._componentRef.instance.state = this._state;\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\n    }\n  }\n\n  @Input()\n  set filterOptions(val: IIdName<any>[]) {\n    this._filterOptions = val;\n    if (this._init) {\n      this._componentRef.instance.filterOptions = this._filterOptions;\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\n    }\n  }\n\n  @Output() filterChanged: EventEmitter<FilterBase> = new EventEmitter();\n\n  private _alive = true;\n  private _column: FilterItem;\n  private _state: FilterState;\n  private _filterOptions: IIdName<any>[];\n  private _componentRef: ComponentRef<any>;\n  private _init: boolean;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {\n  }\n\n  ngOnInit() {\n    if (!FilterComponentBase.isPrototypeOf(this._column.filterComponent)) {\n      this._column.filterComponent = getFilterComponent(this._column);\n    }\n    this._componentRef =\n      this.viewContainerRef.createComponent<FilterComponentBase>(this._column.filterComponent);\n    this._componentRef.instance.column = this._column;\n    this._componentRef.instance.state = this._state;\n    this._componentRef.instance.filterOptions = this._filterOptions;\n    this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\n    this._init = true;\n    this._componentRef.instance.filterChanged\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((filter: FilterBase) => {\n        this.filterChanged.emit(filter);\n      });\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n}\n",
>>>>>>> Stashed changes
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterItem",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterItem",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filterOptions": {
                    "name": "filterOptions",
                    "setSignature": {
                        "name": "filterOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IIdName<any>[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IIdName<any>[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "FilterPanelComponent",
            "id": "component-FilterPanelComponent-76fff9b68855e0f1b0a29ee9711c4d53",
            "file": "projects/components/src/component/filter/filter-panel/filter-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-filter-panel",
            "styleUrls": [
                "./filter-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-filter-panel',\n  templateUrl: './filter-panel.component.html',\n  styleUrls: ['./filter-panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FilterPanelComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filter-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>filter-panel works!</p>\n"
        },
        {
            "name": "FormGroupTitleComponent",
            "id": "component-FormGroupTitleComponent-14d24a5c9c4156ce93a41014fcfdccc7",
            "file": "projects/components/src/component/input/form-group-title/form-group-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-form-group-title",
            "styleUrls": [
                "./form-group-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-group-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-group-title'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-group-title",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-form-group-title',\n  templateUrl: './form-group-title.component.html',\n  styleUrls: ['./form-group-title.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormGroupTitleComponent implements OnInit {\n  @HostBinding('class.form-group-title') private readonly className = true;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-group-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"font-overline form-group-title-text\">\n  <ng-content></ng-content>\n</div>\n<div class=\"form-group-title-line\"></div>\n"
        },
        {
            "name": "GroupRowComponent",
            "id": "component-GroupRowComponent-5ea7940f8b70ce2a8b98f358e4eaf0c8",
            "file": "projects/components/src/component/table/default/group-row/group-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-group-row",
            "styleUrls": [
                "./group-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TableColumn[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "GroupRowComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "GroupRowComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { GroupRowComponentBase } from '../../base/group-row-component-base';\nimport { TableRow } from '../../contract/table-row';\nimport { TableColumn } from '../../contract/table-column';\n\n@Component({\n  selector: 'teta-group-row',\n  templateUrl: './group-row.component.html',\n  styleUrls: ['./group-row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GroupRowComponent<T>\n  extends GroupRowComponentBase<T>\n  implements OnInit\n{\n  @Input() row: TableRow<T>;\n  @Input() columns: TableColumn[];\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./group-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": "GroupRowComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span>{{row.groupValue[row.level]}} ()</span>\n<!--<span>{{row.groupValue[row.level]}} ({{row.children.length}})</span>-->\n"
        },
        {
            "name": "HeadCellComponent",
            "id": "component-HeadCellComponent-56f566d7ba3d2293a197d219dec77b92",
            "file": "projects/components/src/component/table/head-cell/head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell",
            "styleUrls": [
                "./head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "TableColumn"
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "align",
                    "defaultValue": "Align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dropDownOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "filtered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "rect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showDrag",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\" | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sortParam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SortParam>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "allowDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "autosizeAllColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autosizeColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeProcess",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ApplicationRef,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableColumn } from '../contract/table-column';\nimport { ColumnResizeEvent } from '../contract/column-resize-event';\nimport { FilterState } from '../../filter/contarct/filter-state';\nimport { TableService } from '../service/table.service';\nimport { SortEvent } from '../contract/sort-event';\nimport { map } from 'rxjs/operators';\nimport { SortParam } from '../../filter/contarct/sort-param';\nimport { StateUtil } from '../util/state-util';\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\nimport { Align } from '../../../common/enum/align.enum';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Component({\n  selector: 'teta-head-cell',\n  templateUrl: './head-cell.component.html',\n  styleUrls: ['./head-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeadCellComponent<T> implements OnInit, OnDestroy {\n  @Input() column: TableColumn;\n  @Input() showHeadCellMenu: boolean;\n  verticalAlign = VerticalAlign;\n  align = Align;\n  state: Observable<FilterState>;\n  columns: Observable<TableColumn[]>;\n  filtered: Observable<boolean>;\n  sortParam: Observable<SortParam>;\n  iconName: Observable<string>;\n  dropDownOpen: boolean;\n  showDrag: 'left' | 'right' | null = null;\n  private rect: any;\n\n  private _alive = true;\n  private _startPosition: number;\n\n  constructor(\n    private _svc: TableService<T>,\n    private _app: ApplicationRef,\n    private _elementRef: ElementRef\n  ) {}\n\n  @HostListener('dragstart', ['$event']) dragstart(event: DragEvent): void {\n    if (event && event.dataTransfer) {\n      event.dataTransfer.setData('text', 'move');\n    }\n    this._svc.dragStart(this.column);\n  }\n\n  @HostListener('dragenter', ['$event']) dragenter(event: DragEvent): void {\n    this.rect = this._elementRef.nativeElement.getBoundingClientRect();\n  }\n\n  @HostListener('dragover', ['$event']) allowDrop(event: DragEvent): void {\n    event.preventDefault();\n    if (this.rect && this._svc.dragSource) {\n      this.showDrag =\n        event.clientX >= this.rect.x + this.rect.width / 2 ? 'right' : 'left';\n    }\n  }\n\n  @HostListener('dragleave', ['$event']) dragleave(event: DragEvent): void {\n    event.preventDefault();\n    this.showDrag = null;\n  }\n\n  @HostListener('dragend', ['$event']) dragend(event: DragEvent): void {\n    this.showDrag = null;\n  }\n\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\n    const move = event.dataTransfer && event.dataTransfer.getData('text');\n    if (move === 'move') {\n      this._svc.reorderColumn(this.column, this.showDrag === 'left');\n    }\n    this.showDrag = null;\n  }\n\n  ngOnInit(): void {\n    this.columns = this._svc.columns;\n    this.state = this._svc.state;\n    this.sortParam = this.state.pipe(\n      map((_) => StateUtil.getSortState(_, this.column))\n    );\n    this.filtered = this.state.pipe(\n      map((_) => StateUtil.isColumnFiltered(_, this.column))\n    );\n    this.iconName = combineLatest([this.sortParam, this.filtered]).pipe(\n      map((data: [SortParam, boolean]) => {\n        const [sortParam, filtered] = data;\n        if (sortParam && filtered) {\n          return sortParam.asc ? 'filterSortUpColor' : 'filterSortDownColor';\n        }\n        if (sortParam) {\n          return sortParam.asc ? 'sortUpColor' : 'sortDownColor';\n        }\n        if (filtered) {\n          return 'filterColor';\n        }\n        return '';\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n\n  autosizeColumn() {\n    this._svc.autosizeColumn(this.column, this._elementRef.nativeElement);\n  }\n\n  autosizeAllColumns() {\n    this._svc.autosizeAllColumns(this._elementRef.nativeElement);\n  }\n\n  sortColumn(column: TableColumn, event: MouseEvent): void {\n    if (!event.defaultPrevented) {\n      this._svc.sort(new SortEvent(this.column, event.shiftKey));\n    }\n  }\n\n  resizeStart(event: MouseEvent): void {\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\n    this._startPosition = rect.x;\n    this._svc.lockPreviousColumns(this.column, this._elementRef.nativeElement);\n  }\n\n  resizeProcess(event: MouseEvent): void {\n    if (this._startPosition && event.pageX > 0) {\n      this._svc.resizeColumn(\n        new ColumnResizeEvent(this.column, event.pageX - this._startPosition)\n      );\n      this._app.tick();\n    }\n  }\n\n  resizeEnd() {\n    this._startPosition = null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".drop-area {\n  position: absolute;\n  width: 1px;\n  background: var(--color-text-50);\n  top: 0;\n  bottom: 0;\n  z-index: 10;\n\n  &_left {\n    left: -1px;\n  }\n\n  &_right {\n    right: -1px;\n  }\n}\n",
                    "styleUrl": "./head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_app",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_app",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div draggable=\"true\" class=\"row row_auto\">\n  <div class=\"table-head__cell__wrapper\"\n       [ngClass]=\"column.headCellClass\"\n       (click)=\"sortColumn(column, $event)\">\n    <teta-icon *ngIf=\"iconName | async as icon\"\n               [palette]=\"'text'\"\n               [name]=\"icon\"></teta-icon>\n    <teta-head-cell-host [column]=\"column\"></teta-head-cell-host>\n    <teta-dropdown *ngIf=\"showHeadCellMenu\"\n                   [verticalAlign]=\"verticalAlign.bottom\"\n                   [appendToBody]=\"true\"\n                   [(open)]=\"dropDownOpen\"\n                   [align]=\"align.right\"\n                   (click)=\"$event.preventDefault()\"\n                   [class.table-head__cell__menu_open]=\"dropDownOpen\"\n                   class=\"table-head__cell__menu\">\n      <button tetaDropdownHead teta-button\n              [square]=\"true\"\n              [palette]=\"'text'\"\n              [view]=\"'ghost'\">\n        <teta-icon [palette]=\"'text'\" [name]=\"'menu'\"></teta-icon>\n      </button>\n      <teta-head-cell-dropdown tetaDropdownContent\n                               (autosize)=\"autosizeColumn()\"\n                               (autosizeAll)=\"autosizeAllColumns()\"\n                               [column]=\"column\"\n                               [columns]=\"columns | async\"\n                               [state]=\"state | async\"\n                               [(dropDownOpen)]=\"dropDownOpen\"></teta-head-cell-dropdown>\n    </teta-dropdown>\n  </div>\n  <div class=\"drop-area\"\n       draggable=\"false\"\n       [class.drop-area_left]=\"showDrag === 'left'\"\n       [class.drop-area_right]=\"showDrag === 'right'\"\n       *ngIf=\"showDrag\"></div>\n</div>\n<div class=\"table-head__cell__resize\"\n     draggable=\"false\"\n     (dragstart)=\"$event.preventDefault();$event.stopPropagation()\"\n     (drag)=\"$event.preventDefault();$event.stopPropagation()\"\n     [tetaResizeDrag]=\"'vertical'\"\n     (resizeStart)=\"resizeStart($event)\"\n     (resizeProcess)=\"resizeProcess($event)\"\n     (resizeEnd)=\"resizeEnd()\"></div>\n"
        },
        {
            "name": "HeadCellComponentBase",
            "id": "component-HeadCellComponentBase-c238ee39fbda7bcc770a149963e8c1a1",
            "file": "projects/components/src/component/table/base/head-cell-component-base.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__cell__component'"
                        }
                    ],
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__cell__component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TableColumn"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding} from '@angular/core';\nimport {TableColumn} from '../contract/table-column';\n\n@Component({\n  template: ''\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport abstract class HeadCellComponentBase {\n  @HostBinding('class.table-head__cell__component')\n\n  abstract column: TableColumn;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "HeadCellDropdownComponent",
            "id": "component-HeadCellDropdownComponent-165de91079c65d89f51558b83109f773",
            "file": "projects/components/src/component/table/head-cell-dropdown/head-cell-dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell-dropdown",
            "styleUrls": [
                "./head-cell-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-cell-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "TableColumn"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ITreeData[]"
                },
                {
                    "name": "dropDownOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "FilterState"
                }
            ],
            "outputsClass": [
                {
                    "name": "autosize",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "autosizeAll",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "dropDownOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[]",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "bg",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.bg-background-50'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "compareItems",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "setChildrenVisibility",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "setParentsVisibility",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.shadow-2'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allColumnsVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParentColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableColumn | null",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFilteredColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasSortedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideParents",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pinColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreDefaultColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAllColumns",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumnsVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setColumnVisibility",
                    "args": [
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showParents",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.bg-background-50",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "true"
                },
                {
                    "name": "class.shadow-2",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { TableService } from '../service/table.service';\nimport { TableColumn } from '../contract/table-column';\nimport { FilterState } from '../../filter/contarct/filter-state';\nimport { StateUtil } from '../util/state-util';\nimport { ITreeData } from '../../../common/contract/i-tree-data';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { Observable } from 'rxjs';\nimport { map, takeWhile } from 'rxjs/operators';\nimport { ArrayUtil } from '../../../common/util/array-util';\n\n@Component({\n  selector: 'teta-head-cell-dropdown',\n  templateUrl: './head-cell-dropdown.component.html',\n  styleUrls: ['./head-cell-dropdown.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeadCellDropdownComponent<T> implements OnInit, OnDestroy {\n  @Input() columns: ITreeData[];\n  @Input() column: TableColumn;\n  @Input() state: FilterState;\n  @Input() dropDownOpen: boolean;\n  @Output() dropDownOpenChange: EventEmitter<boolean> =\n    new EventEmitter<boolean>();\n\n  @Output() autosize: EventEmitter<void> = new EventEmitter<void>();\n  @Output() autosizeAll: EventEmitter<void> = new EventEmitter<void>();\n\n  @HostBinding('class.shadow-2') private readonly shadow = true;\n  @HostBinding('class.bg-background-50') private readonly bg = true;\n\n  dict: Observable<IDictionary<IIdName<any>[]>>;\n  hiddenColumns: string[];\n\n  get sortParam() {\n    return StateUtil.getSortState(this.state, this.column);\n  }\n\n  get filtered() {\n    return StateUtil.isColumnFiltered(this.state, this.column);\n  }\n\n  get openItems() {\n    if (this._openItems == null) {\n      this._openItems = this.columns.map((_) => _);\n    }\n    return this._openItems;\n  }\n\n  set openItems(openItems: ITreeData[]) {\n    this._openItems = openItems;\n  }\n\n  get childMode() {\n    return this.columns.find((_: any) => _.columns?.length > 0);\n  }\n\n  private _openItems: ITreeData[];\n  private _alive = true;\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\n    this.dict = this._svc.dict;\n    this._svc.hiddenColumns\n      .pipe(\n        takeWhile((_) => this._alive),\n        map((_) => [..._])\n      )\n      .subscribe((_) => {\n        this.hiddenColumns = _;\n      });\n  }\n\n  clearFilter() {\n    this._svc.clearFilter(this.column);\n    this.dropDownOpenChange.emit(false);\n    this._cdr.markForCheck();\n  }\n\n  applyFilter() {\n    this._svc.setState(new FilterState(this.state));\n    this.dropDownOpenChange.emit(false);\n    this._cdr.markForCheck();\n  }\n\n  pinColumn() {\n    this._svc.pinColumn(this.column);\n  }\n\n  clearSort(): void {\n    this._svc.clearSort(this.column);\n  }\n\n  clearAllSort(): void {\n    this._svc.clearAllSort();\n  }\n\n  hasFilteredColumns() {\n    return StateUtil.hasFilteredColumns(this.state);\n  }\n\n  hasSortedColumns() {\n    return StateUtil.hasSortedColumns(this.state);\n  }\n\n  restoreDefaultColumns() {\n    this._svc.restoreDefaultColumns();\n  }\n\n  clearAllFilters() {\n    this._svc.clearAllFilters();\n    this.dropDownOpen = false;\n    this._cdr.markForCheck();\n  }\n\n  columnIsHidden(column: TableColumn) {\n    return this.hiddenColumns.indexOf(column.name) >= 0;\n  }\n\n  allColumnsVisible() {\n    if (this.hiddenColumns?.length <= 0) {\n      return true;\n    }\n    const columns = ArrayUtil.flatten(this.columns, 'columns');\n    const notHidden = columns.find(\n      (_) => this.hiddenColumns.indexOf(_.name) < 0\n    );\n    if (!notHidden) {\n      return false;\n    }\n    return null;\n  }\n\n  setAllColumns(value: boolean) {\n    if (value) {\n      this.hiddenColumns = [];\n    } else {\n      this.hiddenColumns = ArrayUtil.flatten(this.columns, 'columns').map(\n        (_) => _.name\n      );\n    }\n  }\n\n  setColumnsVisibility() {\n    this._svc.setHiddenColumns(this.hiddenColumns);\n  }\n\n  compareItems = (item: TableColumn) => item.name;\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n\n  setColumnVisibility(item: TableColumn, visible: boolean) {\n    this.setChildrenVisibility(item, visible, this.hiddenColumns);\n    this.setParentsVisibility(item, visible, this.hiddenColumns);\n  }\n\n  setChildrenVisibility = (\n    column: TableColumn,\n    visible: boolean,\n    hiddenColumns: string[]\n  ) => {\n    if (visible) {\n      this.showColumn(column, hiddenColumns);\n    } else {\n      this.hideColumn(column, hiddenColumns);\n    }\n    if (column.columns) {\n      column.columns.forEach((x) => {\n        this.setChildrenVisibility(x, visible, hiddenColumns);\n      });\n    }\n  };\n\n  setParentsVisibility = (\n    column: TableColumn,\n    visible: boolean,\n    hiddenColumns: string[]\n  ) => {\n    if (!visible) {\n      this.hideParents(column, hiddenColumns);\n    } else {\n      this.showParents(column, hiddenColumns);\n    }\n  };\n\n  showParents(column: TableColumn, hiddenColumns: string[]) {\n    const parent = this.findParentColumn(column, this.columns as TableColumn[]);\n    if (parent && this.columnIsHidden(parent)) {\n      this.showColumn(parent, hiddenColumns);\n      this.showParents(parent, hiddenColumns);\n    }\n  }\n\n  hideParents(column: TableColumn, hiddenColumns: string[]) {\n    const parent = this.findParentColumn(column, this.columns as TableColumn[]);\n    if (\n      parent &&\n      !this.columnIsHidden(parent) &&\n      parent.columns &&\n      parent.columns.every((_) => this.columnIsHidden(_))\n    ) {\n      this.hideColumn(parent, hiddenColumns);\n      this.hideParents(parent, hiddenColumns);\n    }\n  }\n\n  hideColumn(column: TableColumn, hiddenColumns: string[]) {\n    hiddenColumns.push(column.name);\n  }\n\n  showColumn(column: TableColumn, hiddenColumns: string[]) {\n    hiddenColumns.splice(hiddenColumns.indexOf(column.name), 1);\n  }\n\n  private findParentColumn(\n    column: TableColumn,\n    columns: TableColumn[]\n  ): TableColumn | null {\n    return ArrayUtil.findRecursive(\n      columns,\n      (iterableNode) => iterableNode.columns?.indexOf(column) >= 0,\n      'columns'\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-grow: 1;\n  min-height: 0;\n  width: 250px;\n}\n",
                    "styleUrl": "./head-cell-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "sortParam": {
                    "name": "sortParam",
                    "getSignature": {
                        "name": "sortParam",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                },
                "filtered": {
                    "name": "filtered",
                    "getSignature": {
                        "name": "filtered",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "openItems": {
                    "name": "openItems",
                    "setSignature": {
                        "name": "openItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "openItems",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "openItems",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "openItems",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "childMode": {
                    "name": "childMode",
                    "getSignature": {
                        "name": "childMode",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            },
            "templateData": "<teta-tabs class=\"column_auto\">\n  <teta-tab *ngIf=\"column.filterable\">\n    <ng-template tetaTabTitle>\n      <teta-icon [name]=\"'filter'\"></teta-icon>\n    </ng-template>\n    <ng-template tetaTabContent>\n      <teta-filter-host [column]=\"column\" [state]=\"state\"\n                        *ngIf=\"dict | async as d\"\n                        [filterOptions]=\"d[column.name]\"></teta-filter-host>\n      <teta-toolbar class=\"justify-content-between\">\n        <button teta-button [palette]=\"'text'\" [view]=\"'ghost'\" (click)=\"clearFilter()\">\n          Очистить\n        </button>\n        <button teta-button [palette]=\"'primary'\" (click)=\"applyFilter()\">\n          <teta-icon [name]=\"'tick'\"></teta-icon>\n          Применить\n        </button>\n      </teta-toolbar>\n    </ng-template>\n  </teta-tab>\n  <teta-tab>\n    <ng-template tetaTabTitle>\n      <teta-icon [name]=\"'menu'\"></teta-icon>\n    </ng-template>\n    <ng-template tetaTabContent>\n      <div class=\"list column_auto\">\n        <div class=\"list-item list-item_interactive\" (click)=\"pinColumn()\">\n          <teta-icon [palette]=\"'text'\"\n                     [name]=\"column.locked ? 'unpin' : 'pin'\"\n                     class=\"margin-right-2\"></teta-icon>\n          {{column.locked ? 'Открепить' : 'Закрепить'}}\n        </div>\n        <div class=\"list-divider\"></div>\n        <ng-container *ngIf=\"hasSortedColumns()\">\n          <div class=\"list-item list-item_interactive\"\n               *ngIf=\"sortParam\"\n               (click)=\"clearSort()\">\n            <teta-icon [palette]=\"'text'\"\n                       [name]=\"'pin'\" class=\"margin-right-2\"></teta-icon>\n            Сбросить сортировку\n          </div>\n          <div class=\"list-item list-item_interactive\"\n               (click)=\"clearAllSort()\">\n            <teta-icon [palette]=\"'text'\"\n                       [name]=\"'pin'\"\n                       class=\"margin-right-2\"></teta-icon>\n            Сбросить все сортировки\n          </div>\n          <div class=\"list-divider\"></div>\n        </ng-container>\n        <ng-container *ngIf=\"hasFilteredColumns()\">\n          <div class=\"list-item list-item_interactive\"\n               *ngIf=\"filtered\"\n               (click)=\"clearFilter()\">\n            <teta-icon [palette]=\"'text'\"\n                       [name]=\"'pin'\"\n                       class=\"margin-right-2\"></teta-icon>\n            Очистить фильтр\n          </div>\n          <div class=\"list-item list-item_interactive\"\n               (click)=\"clearAllFilters()\">\n            <teta-icon [palette]=\"'text'\"\n                       [name]=\"'pin'\"\n                       class=\"margin-right-2\"></teta-icon>\n            Очистить все фильтры\n          </div>\n          <div class=\"list-divider\"></div>\n        </ng-container>\n        <div class=\"list-item list-item_interactive\" (click)=\"autosize.emit()\">\n          <teta-icon [palette]=\"'text'\"\n                     [name]=\"'autoSize'\"\n                     class=\"margin-right-2\"></teta-icon>\n          Авторазмер колонки\n        </div>\n        <div class=\"list-item list-item_interactive\" (click)=\"autosizeAll.emit()\">\n          <teta-icon [palette]=\"'text'\"\n                     [name]=\"'autoSizeAll'\"\n                     class=\"margin-right-2\"></teta-icon>\n          Авторазмер всех колонок\n        </div>\n        <div class=\"list-divider\"></div>\n        <div class=\"list-item list-item_interactive\" (click)=\"restoreDefaultColumns()\">\n          <teta-icon [palette]=\"'text'\"\n                     [name]=\"'undo'\"\n                     class=\"margin-right-2\"></teta-icon>\n          Отменить все изменения\n        </div>\n      </div>\n    </ng-template>\n  </teta-tab>\n  <teta-tab>\n    <ng-template tetaTabTitle>\n      <teta-icon [name]=\"'eye'\"></teta-icon>\n    </ng-template>\n    <ng-template tetaTabContent>\n      <div class=\"list-item padding-left-6 padding-top-2\" [class.padding-left-9]=\"childMode\">\n        <teta-checkbox [binary]=\"true\"\n                       [allowNull]=\"true\"\n                       [ngModel]=\"allColumnsVisible()\"\n                       (ngModelChange)=\"setAllColumns($event)\">\n          Все\n        </teta-checkbox>\n      </div>\n      <div class=\"list-divider\"></div>\n      <div class=\"padding-v-2 column column_auto scrollable\">\n        <teta-tree [data]=\"columns\"\n                   [openItems]=\"openItems\"\n                   (openItemsChange)=\"openItems = $event\"\n                   [childNodeName]=\"'columns'\"\n                   [compareItems]=\"compareItems\">\n          <ng-template tetaTemplate let-item>\n            <div class=\"tree__item\">\n              <teta-tree-item-toggle [item]=\"item\" *ngIf=\"item.columns?.length > 0\"></teta-tree-item-toggle>\n              <teta-checkbox\n                [ngModel]=\"!columnIsHidden(item)\"\n                (ngModelChange)=\"setColumnVisibility(item, $event)\"\n                (click)=\"$event.stopPropagation()\"\n                [binary]=\"true\"\n              >\n                {{item.caption}}\n              </teta-checkbox>\n            </div>\n          </ng-template>\n        </teta-tree>\n      </div>\n      <teta-toolbar class=\"justify-content-end\">\n        <button teta-button\n                [disabled]=\"allColumnsVisible() === false\"\n                [palette]=\"'primary'\"\n                (click)=\"setColumnsVisibility()\">\n          Применить\n        </button>\n      </teta-toolbar>\n    </ng-template>\n  </teta-tab>\n</teta-tabs>\n"
        },
        {
            "name": "HeadCellHostComponent",
<<<<<<< Updated upstream
            "id": "component-HeadCellHostComponent-264fbe6eebc403aaea5bdfe35b20a250",
=======
            "id": "component-HeadCellHostComponent-7a1b73a7618a4c41432acdcaae5c50e4",
>>>>>>> Stashed changes
            "file": "projects/components/src/component/table/head-cell-host/head-cell-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell-host",
            "styleUrls": [
                "./head-cell-host.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<HeadCellComponentBase>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
<<<<<<< Updated upstream
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Input,\r\n  OnInit,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { HeadCellComponentBase } from '../base/head-cell-component-base';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { DefaultHeadCellComponent } from '../default/default-head-cell/default-head-cell.component';\r\n\r\n@Component({\r\n  selector: 'teta-head-cell-host',\r\n  template: '',\r\n  styleUrls: ['./head-cell-host.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeadCellHostComponent implements OnInit {\r\n  private _column: TableColumn;\r\n  private componentRef: ComponentRef<HeadCellComponentBase>;\r\n  private init: boolean;\r\n\r\n  @Input()\r\n  set column(column: TableColumn) {\r\n    this._column = column;\r\n    if (this.init) {\r\n      this.componentRef.instance.column = this._column;\r\n    }\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (!HeadCellComponentBase.isPrototypeOf(this.column.headCellComponent)) {\r\n      this.column.headCellComponent = DefaultHeadCellComponent;\r\n    }\r\n    const compFactory =\r\n      this.componentFactoryResolver.resolveComponentFactory<HeadCellComponentBase>(\r\n        this.column.headCellComponent\r\n      );\r\n    this.componentRef =\r\n      this.viewContainerRef.createComponent<HeadCellComponentBase>(compFactory);\r\n    this.componentRef.instance.column = this.column;\r\n    this.init = true;\r\n  }\r\n}\r\n",
=======
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  Input,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport {HeadCellComponentBase} from '../base/head-cell-component-base';\nimport {TableColumn} from '../contract/table-column';\nimport {DefaultHeadCellComponent} from '../default/default-head-cell/default-head-cell.component';\n\n@Component({\n  selector: 'teta-head-cell-host',\n  template: '',\n  styleUrls: ['./head-cell-host.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeadCellHostComponent implements OnInit {\n  private _column: TableColumn;\n  private componentRef: ComponentRef<HeadCellComponentBase>;\n  private init: boolean;\n\n  @Input()\n  set column(column: TableColumn) {\n    this._column = column;\n    if (this.init) {\n      this.componentRef.instance.column = this._column;\n    }\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {\n  }\n\n  ngOnInit(): void {\n    if (!HeadCellComponentBase.isPrototypeOf(this.column.headCellComponent)) {\n      this.column.headCellComponent = DefaultHeadCellComponent;\n    }\n    this.componentRef =\n      this.viewContainerRef.createComponent<HeadCellComponentBase>(this.column.headCellComponent);\n    this.componentRef.instance.column = this.column;\n    this.init = true;\n  }\n}\n",
>>>>>>> Stashed changes
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: contents;\n}\n",
                    "styleUrl": "./head-cell-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-55a67fde81119a04a24f810fb389cf7f",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-ea22cbc48cc37d7650f639d85fba286c",
            "file": "projects/components/src/component/icon/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "TetaSize.M",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TetaSize"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { TetaSize } from '../../../common/enum/teta-size.enum';\n\n@Component({\n  selector: 'teta-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconComponent implements OnInit {\n  @Input() name: string;\n  @Input() size: TetaSize = TetaSize.M;\n  @Input() palette: string;\n\n  @Input() class;\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [this.class, 'icon'];\n    if (this.palette) {\n      result.push(`icon-${this.palette}`);\n    }\n    return result.join(' ');\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  getName(): string {\n    return `#${this.name}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                }
            },
            "templateData": "<svg class=\"icon__image\">\n  <use [attr.xlink:href]=\"getName()\"></use>\n</svg>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-ead80f5b4e78d424ea9a777a9015fbc5",
            "file": "projects/components/src/component/input/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputComponent implements OnInit {\n  @Input() label: string;\n\n  @Input()\n  @HostBinding('class.row')\n  horizontal: boolean;\n\n  @Input()\n  required = false;\n\n  @HostBinding('class.column')\n  get column() {\n    return !this.horizontal;\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  grid-gap: 8px;\n  flex-grow: 1;\n  flex-basis: 10px;\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"font-caption color-text-90 align-center row nowrap overflow-hidden text-overflow-ellipsis\"\n     [class.row_6]=\"horizontal\"\n     [class.text-field_required]=\"required\"\n     *ngIf=\"label?.length > 0\">\n  {{label}}\n</div>\n<div class=\"input-container\" [class.row_6]=\"horizontal\">\n  <ng-content></ng-content>\n  <div class=\"input-message font-error-message\">\n    <ng-content select=\"message\"></ng-content>\n  </div>\n</div>\n"
        },
        {
<<<<<<< Updated upstream
=======
            "name": "LegendComponent",
            "id": "component-LegendComponent-6485f2138762877e8efa440cfbe52705",
            "file": "projects/chart/src/chart/legend/legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-legend",
            "styleUrls": [
                "./legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-legend',\n  templateUrl: './legend.component.html',\n  styleUrls: ['./legend.component.scss']\n})\nexport class LegendComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./legend.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>legend works!</p>\n"
        },
        {
            "name": "LineSeriesComponent",
            "id": "component-LineSeriesComponent-aa75b918001c98dd774261a81abdf6a0",
            "file": "projects/chart/src/chart/chart-container/line-series/line-series.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:svg[teta-line-series]",
            "styleUrls": [
                "./line-series.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./line-series.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Series<T>",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "DOMRect",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {SeriesBaseComponent} from '../../base/series-base.component';\nimport {ChartService} from '../../chart.service';\nimport {BasePoint} from '../../model/base-point';\n\n@Component({\n  selector: 'svg:svg[teta-line-series]',\n  templateUrl: './line-series.component.html',\n  styleUrls: ['./line-series.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent<T extends BasePoint> extends SeriesBaseComponent<T> implements OnInit {\n  constructor(protected override svc: ChartService,\n              protected override cdr: ChangeDetectorRef\n  ) {\n    super(svc, cdr);\n  }\n\n  override ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./line-series.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "SeriesBaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
>>>>>>> Stashed changes
            "name": "ListCellComponent",
            "id": "component-ListCellComponent-117e63ff55ea29e2678843e5f65a97fd",
            "file": "projects/components/src/component/table/default/list-cell/list-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-cell",
            "styleUrls": [
                "./list-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TableColumn"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { TableColumn } from '../../contract/table-column';\nimport { TableRow } from '../../contract/table-row';\nimport { TableService } from '../../service/table.service';\nimport { CellComponentBase } from '../../base/cell-component-base';\nimport { SelectComponent } from '../../../select/select/select.component';\nimport { IIdName } from '../../../../common/contract/i-id-name';\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\nimport { VerticalAlign } from '../../../../common/enum/vertical-align.enum';\n\n@Component({\n  selector: 'teta-list-cell',\n  templateUrl: './list-cell.component.html',\n  styleUrls: ['./list-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit\n{\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n  @Input() override filterOptions: IIdName<any>[] = [];\n\n  get value() {\n    return this.getValue();\n  }\n\n  @ViewChild('input', { static: false }) input: SelectComponent;\n\n  verticalAlign = VerticalAlign;\n\n  constructor(\n    protected override svc: TableService<T>,\n    protected override cdr: ChangeDetectorRef\n  ) {\n    super(svc, cdr);\n  }\n\n  setValue(value: any): void {\n    this.row.data[this.column.name] = value;\n    this.valueChanged();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      setTimeout(() => {\n        this.input?.focus();\n        this.cdr.markForCheck();\n      }, 0);\n    }\n  }\n\n  stopEdit() {\n    this.cdr.markForCheck();\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n  }\n\n  private getValue() {\n    if (\n      this.filterOptions === null ||\n      this.filterOptions === undefined ||\n      !(this.filterOptions instanceof Array)\n    ) {\n      return '';\n    }\n    const item = this.filterOptions.find(\n      (option) => option.id === this.row.data[this.column.name]\n    );\n    if (item === null || item === undefined) {\n      return '';\n    }\n    return item.name;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\n  {{value}}\n</span>\n<teta-select #input\n             class=\"row_auto select-table\"\n             *ngIf=\"edit\"\n             [allowNull]=\"!column.required\"\n             [verticalAlign]=\"verticalAlign.auto\"\n             [appendToBody]=\"false\"\n             [options]=\"filterOptions\"\n             [valueRef]=\"'id'\"\n             [textRef]=\"'name'\"\n             [ngModel]=\"row.data[column.name]\"\n             (ngModelChange)=\"setValue($event)\">\n</teta-select>\n"
        },
        {
            "name": "ListFilterComponent",
            "id": "component-ListFilterComponent-1abf3d2bb9ae20d95001a6880babf359",
            "file": "projects/components/src/component/filter/list-filter/list-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-filter",
            "styleUrls": [
                "./list-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "excluded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilter",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "search",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "all",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "ListFilter",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAll",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ListFilter } from '../contarct/list-filter';\nimport { ListFilterType } from '../enum/list-filter-type.enum';\nimport { FilterComponentBase } from '../base/filter-component-base';\nimport { FilterBase } from '../base/filter-base';\nimport { FilterState } from '../contarct/filter-state';\nimport { FilterItem } from '../contarct/filter-item';\nimport { IIdName } from '../../../common/contract/i-id-name';\n\n@Component({\n  selector: 'teta-list-filter',\n  templateUrl: './list-filter.component.html',\n  styleUrls: ['./list-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListFilterComponent extends FilterComponentBase implements OnInit {\n  @Input() column: FilterItem;\n  @Input() filterOptions: IIdName<any>[] = [];\n  @Output() filterChanged: EventEmitter<FilterBase> =\n    new EventEmitter<FilterBase>();\n\n  filter: ListFilter;\n  state$: FilterState;\n  search = '';\n\n  get visibleOptions() {\n    return this.filterOptions?.filter(\n      (_) => _.name?.toString().indexOf(this.search) >= 0\n    );\n  }\n\n  @Input()\n  set state(val: FilterState) {\n    this.state$ = val;\n    this.filter = this.getFilter();\n    this.changeDetector.detectChanges();\n  }\n\n  get state() {\n    return this.state$;\n  }\n\n  excluded: boolean;\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {}\n\n  all() {\n    if (!this.filter?.value || this.filter?.value?.length === 0) {\n      return false;\n    }\n    const notSet = this.visibleOptions?.find(\n      (_) => this.filter?.value?.indexOf(_.id) < 0\n    );\n    if (!notSet) {\n      return true;\n    }\n    return null;\n  }\n\n  setAll(value: boolean) {\n    if (value) {\n      this.setFilter(this.visibleOptions?.map((_) => _.id));\n    } else {\n      this.setFilter([]);\n    }\n  }\n\n  setType() {\n    this.excluded = !this.excluded;\n    this.filter.type = this.excluded\n      ? ListFilterType.Excluded\n      : ListFilterType.None;\n  }\n\n  setFilter(value: any[]) {\n    this.filter.value = value;\n    this.filterChanged.emit(this.filter);\n  }\n\n  private getFilter(): ListFilter {\n    let filter = this.state.listFilters?.find(\n      (f) => f.field === this.column.filterField\n    );\n    if (!filter) {\n      filter = this.state.addListFilter(\n        new ListFilter({\n          field: this.column.filterField,\n          value: [],\n          type: this.column.listFilterType,\n          name: this.column.name,\n        })\n      );\n    }\n    this.excluded = filter.type === ListFilterType.Excluded;\n    return filter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  min-height: 0;\n  min-width: 0;\n}\n",
                    "styleUrl": "./list-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "visibleOptions": {
                    "name": "visibleOptions",
                    "getSignature": {
                        "name": "visibleOptions",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"padding-2\">\n  <teta-text-field [(ngModel)]=\"search\"></teta-text-field>\n</div>\n<div class=\"list padding-v-2 scrollable\">\n  <div class=\"list-item\">\n    <teta-checkbox [binary]=\"true\"\n                   [allowNull]=\"true\"\n                   [ngModel]=\"all()\"\n                   (ngModelChange)=\"setAll($event)\">Все\n    </teta-checkbox>\n  </div>\n  <div class=\"list-divider\"></div>\n  <div class=\"list-item\" *ngFor=\"let option of visibleOptions\">\n    <teta-checkbox [ngModel]=\"filter.value\"\n                   (ngModelChange)=\"setFilter($event)\"\n                   [value]=\"option.id\"\n                   [binary]=\"false\">\n      {{option.name}}\n    </teta-checkbox>\n  </div>\n</div>\n"
        },
        {
            "name": "ListItemDefaultComponent",
            "id": "component-ListItemDefaultComponent-06a37fd287ff695b384ebf3e0fad67d6",
            "file": "projects/components/src/component/property-grid/default/list-item-default/list-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-item-default",
            "styleUrls": [
                "./list-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-list-item-default',\n  templateUrl: './list-item-default.component.html',\n  styleUrls: ['./list-item-default.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListItemDefaultComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>list-item-default works!</p>\n"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-bd0f7d0b96f27baf4dc96fada0137852",
            "file": "projects/components/src/component/message/message/message.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message",
            "styleUrls": [
                "./message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Message"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMe",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any"
                }
            ],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport { Message } from '../model/message';\n\n@Component({\n  selector: 'teta-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MessageComponent implements AfterViewInit, OnDestroy {\n  @Input() message: Message;\n  @Input() index: number;\n  @Output() closed: EventEmitter<any> = new EventEmitter();\n  @Input() class;\n\n  @HostBinding('class')\n  private get getClass() {\n    const result = ['message'];\n    if (this.message.className?.length > 0) {\n      result.push(...this.message.className);\n    }\n    if (this.message.palette) {\n      result.push(`message-${this.message.palette}`);\n    }\n    return result.join(' ');\n  }\n\n  timeout: any;\n\n  constructor() {}\n\n  @HostListener('mouseleave')\n  init() {\n    if (!this.message.infinite) {\n      this.timeout = setTimeout(() => {\n        this.closed.emit({\n          index: this.index,\n          message: this.message,\n        });\n      }, this.message.duration);\n    }\n  }\n\n  @HostListener('mouseenter')\n  reset() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n  }\n\n  closeMe(event: MouseEvent) {\n    this.reset();\n\n    this.closed.emit({\n      index: this.index,\n      message: this.message,\n    });\n\n    event.preventDefault();\n  }\n\n  ngAfterViewInit() {\n    this.init();\n  }\n\n  ngOnDestroy() {\n    this.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"row align-center justify-content-between\">\n  <div class=\"font-title-3 padding-left-1\">\n    {{message.title}}\n  </div>\n  <button teta-button\n          [square]=\"true\"\n          [palette]=\"message.palette\"\n          [view]=\"'primary'\"\n          (click)=\"closeMe($event)\">\n    <teta-icon [name]=\"'closeBig'\"></teta-icon>\n  </button>\n</div>\n<div class=\"font-body-3 padding-v-1\" *ngIf=\"!message.template && message.text\">\n  {{message.text}}\n</div>\n<ng-container *ngIf=\"message.template\">\n  <ng-container *ngTemplateOutlet=\"message.template; context: {$implicit: message}\"></ng-container>\n</ng-container>\n"
        },
        {
            "name": "MessageHostComponent",
            "id": "component-MessageHostComponent-f032cc4a0866084181ad077ac15523d6",
            "file": "projects/components/src/component/message/message-host/message-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message-host",
            "styleUrls": [
                "./message-host.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-host.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alignMap",
                    "defaultValue": "new Map<Align, string>()\n    .set(Align.right, 'message-host_right')\n    .set(Align.left, 'message-host_left')\n    .set(Align.center, 'message-host_center')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<Align | string>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valignMap",
                    "defaultValue": "new Map<\n    VerticalAlign,\n    string\n  >()\n    .set(VerticalAlign.top, 'message-host_top')\n    .set(VerticalAlign.center, 'message-host_vertical-center')\n    .set(VerticalAlign.bottom, 'message-host_bottom')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<VerticalAlign | string>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "closedItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Message } from '../model/message';\nimport { Align } from '../../../common/enum/align.enum';\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-message-host',\n  templateUrl: './message-host.component.html',\n  styleUrls: ['./message-host.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MessageHostComponent implements OnInit, OnDestroy {\n  @Input() class;\n  @Input() align: Align = Align.right;\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\n  @Output() itemClose: EventEmitter<any> = new EventEmitter();\n\n  messages: Message[] = [];\n  private readonly _alignMap: Map<Align, string> = new Map<Align, string>()\n    .set(Align.right, 'message-host_right')\n    .set(Align.left, 'message-host_left')\n    .set(Align.center, 'message-host_center');\n  private readonly _valignMap: Map<VerticalAlign, string> = new Map<\n    VerticalAlign,\n    string\n  >()\n    .set(VerticalAlign.top, 'message-host_top')\n    .set(VerticalAlign.center, 'message-host_vertical-center')\n    .set(VerticalAlign.bottom, 'message-host_bottom');\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [this.class, 'message-host'];\n    if (this._alignMap.has(this.align)) {\n      result.push(this._alignMap.get(this.align));\n    }\n    if (this._valignMap.has(this.verticalAlign)) {\n      result.push(this._valignMap.get(this.verticalAlign));\n    }\n    return result.join(' ');\n  }\n\n  private _alive = true;\n\n  constructor(private _svc: MessageService, private _cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._svc.message\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((messages) => {\n        if (messages) {\n          if (!this.messages) {\n            this.messages = [];\n          }\n          this.messages.push(messages);\n        }\n        this._cdr.markForCheck();\n      });\n\n    this._svc.clear\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((x: string) => {\n        if (!x) {\n          this.messages = [];\n        } else {\n          this.messages = this.messages?.filter((_) => _.name !== x);\n        }\n        this._cdr.markForCheck();\n      });\n  }\n\n  closedItem(event: any) {\n    this.messages.splice(event.index, 1);\n    this.itemClose.emit({\n      message: event.message,\n    });\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            },
            "templateData": "<teta-message\n  *ngFor=\"let message of messages; let i=index\"\n  (closed)=\"closedItem($event)\"\n  [message]=\"message\"\n  [index]=\"i\">\n</teta-message>\n"
        },
        {
            "name": "MessageSampleComponent",
            "id": "component-MessageSampleComponent-f7dbb0a91c5055d1398ea38147f8e1ec",
            "file": "projects/components/src/component/message/message-samples/message-sample/message-sample.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message-sample",
            "styleUrls": [
                "./message-sample.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-sample.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "infinite",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "palette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "infinite",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "palette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { MessageService } from '../../message.service';\nimport { Message } from '../../model/message';\n\n@Component({\n  selector: 'teta-message-sample',\n  templateUrl: './message-sample.component.html',\n  styleUrls: ['./message-sample.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MessageSampleComponent implements OnInit {\n  constructor(private _svc: MessageService) {}\n\n  create(\n    title: string,\n    text: string,\n    infinite: boolean,\n    palette: string,\n    className?: string,\n    template?: TemplateRef<any>\n  ) {\n    this._svc.add(\n      new Message({\n        className: [className],\n        title,\n        palette,\n        text,\n        template,\n        infinite,\n      })\n    );\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-sample.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-3 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n  <button teta-button [palette]=\"'primary'\"\n          (click)=\"create('Simple' , 'I will close after 5 seconds', false, 'primary')\">\n    Simple\n  </button>\n  <button teta-button [palette]=\"'primary'\"\n          (click)=\"create('Infinite' , 'I will close after 5 seconds', true, 'primary')\">\n    Infinite\n  </button>\n  <button teta-button [palette]=\"'green'\"\n          (click)=\"create('Infinite' , 'I will close after 5 seconds', true, 'green')\">\n    Infinite\n  </button>\n  <button teta-button [palette]=\"'red'\"\n          (click)=\"create('Custom class' , 'I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background ', false, 'red','bg-red-20')\">\n    With a custom class name\n  </button>\n  <button teta-button [palette]=\"'text'\"\n          (click)=\"create('Template' , 'I have a custom template', false, 'text', '', messageTemplate)\">\n    Template\n  </button>\n\n  <teta-message-host></teta-message-host>\n\n  <ng-template #messageTemplate let-message>\n    <div class=\"bg-green-10\">\n      {{message.text}}\n    </div>\n\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ModalContainerComponent",
            "id": "component-ModalContainerComponent-b6f4ff9ecc7cc52f9c906697fa8a99eb",
            "file": "projects/components/src/component/modal/modal-container/modal-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-container",
            "styleUrls": [
                "./modal-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "IModalConfig"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter<IModalResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@dialog'"
                        }
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "attr.tabindex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\nimport { IModalConfig } from '../model/i-modal-config';\nimport { IModalResult } from '../model/i-modal-result';\nimport { ModalCloseReason } from '../model/modal-close-reason.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'teta-modal-container',\n  templateUrl: './modal-container.component.html',\n  styleUrls: ['./modal-container.component.scss'],\n  animations: [\n    trigger('dialog', [\n      transition('void => *', [\n        style({ opacity: '0' }),\n        animate(150, style({ opacity: '1' })),\n      ]),\n      transition('* => void', [animate(150, style({ opacity: '0' }))]),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalContainerComponent {\n  @Input() config: IModalConfig;\n  @Output() closeEvent = new EventEmitter<IModalResult>();\n\n  @HostBinding('attr.tabindex') tabindex = -1;\n  @HostBinding('@dialog') dialog = true;\n\n  @HostBinding('class')\n  get classList(): string {\n    const classList = ['modal__window'];\n    if (this.config) {\n      if (this.config && this.config.class) {\n        classList.push(...this.config.class);\n      }\n      if (this.config.backdrop) {\n        classList.push('modal__backdrop');\n      }\n    }\n    return classList.join(' ');\n  }\n\n  constructor(private elRef$: ElementRef) {}\n\n  @HostListener('keyup', ['$event']) keyup(event: KeyboardEvent): void {\n    if (this.config && this.config.esc && !event.defaultPrevented) {\n      const key = event.key || event.keyCode;\n\n      if (key === 'Escape' || key === 'Esc' || key === 27) {\n        this.closeEvent.emit({\n          reason: ModalCloseReason.esc,\n        });\n      }\n    }\n  }\n\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\n    if (\n      this.config.closeOnBackdropClick === true &&\n      this.elRef$.nativeElement === event.target\n    ) {\n      this.closeEvent.emit({\n        reason: ModalCloseReason.backdrop,\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef$",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "elRef$",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "string",
                        "returnType": "string",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"modal__container\" [class.modal__container_resize]=\"config?.resizable\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ModalExampleComponent",
            "id": "component-ModalExampleComponent-4b5a4e99a5b894bebef48017d1cebe0f",
            "file": "projects/components/src/component/modal/modal-samples/modal-example/modal-example.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-example",
            "styleUrls": [
                "./modal-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeReason",
                    "defaultValue": "ModalCloseReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentModal",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ModalCloseReason } from '../../model/modal-close-reason.enum';\nimport { DynamicData } from '../../../../common/contract/dynamic-data';\nimport { CurrentModal } from '../../model/current-modal';\n\n@Component({\n  selector: 'teta-modal-example',\n  templateUrl: './modal-example.component.html',\n  styleUrls: ['./modal-example.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalExampleComponent implements OnInit {\n  closeReason = ModalCloseReason;\n\n  constructor(public modal: CurrentModal, private data: DynamicData) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"column\">\n  <teta-toolbar [palette]=\"'background'\" class=\"justify-content-between\">\n    <span>Создать проект</span>\n    <teta-icon [name]=\"'closeBig'\" (click)=\"modal.close({reason: closeReason.exit})\"></teta-icon>\n  </teta-toolbar>\n  <div class=\"padding-3 column\">\n    <div class=\"margin-v-2\">\n      <input class=\"input\" type=\"text\" [(ngModel)]=\"data.name\" placeholder=\"Название\">\n    </div>\n    <div class=\"margin-v-2\">\n      <input class=\"input\" type=\"text\" [(ngModel)]=\"data.description\" placeholder=\"Описание\">\n    </div>\n  </div>\n  <teta-toolbar [palette]=\"'panel'\">\n    <button teta-button [palette]=\"'primary'\"\n            (click)=\"modal.close({reason: closeReason.exit })\">\n      Отменить\n    </button>\n    <button teta-button [palette]=\"'primary'\"\n            (click)=\"modal.close({reason: closeReason.resolve })\">\n      Создать\n    </button>\n  </teta-toolbar>\n</div>\n"
        },
        {
            "name": "ModalFromComponentComponent",
            "id": "component-ModalFromComponentComponent-f844cfd7d2ec491ac86dfe342cac1c17",
            "file": "projects/components/src/component/modal/modal-samples/modal-from-component/modal-from-component.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-from-component",
            "styleUrls": [
                "./modal-from-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-from-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ModalExampleComponent } from '../modal-example/modal-example.component';\nimport { ModalService } from '../../modal.service';\n\n@Component({\n  selector: 'teta-modal-from-component',\n  templateUrl: './modal-from-component.component.html',\n  styleUrls: ['./modal-from-component.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalFromComponentComponent implements OnInit {\n  @Input() name: string;\n  @Input() description: string;\n\n  constructor(private modal: ModalService) {}\n\n  ngOnInit(): void {}\n\n  create(): void {\n    const modal = this.modal.create(ModalExampleComponent, {\n      name: this.name,\n      description: this.description,\n    });\n    modal.onClose.subscribe((_) => {});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-from-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button teta-button [palette]=\"'primary'\" (click)=\"create()\" [tetaIconSprite]=\"'assets/icons.svg'\">\n  Create modal\n</button>\n"
        },
        {
            "name": "ModalFromTemplateComponent",
            "id": "component-ModalFromTemplateComponent-79e2a43fbef766251ba7cf12c5eb66de",
            "file": "projects/components/src/component/modal/modal-samples/modal-from-template/modal-from-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-from-template",
            "styleUrls": [
                "./modal-from-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-from-template.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeReason",
                    "defaultValue": "ModalCloseReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { ModalCloseReason } from '../../model/modal-close-reason.enum';\nimport { ModalService } from '../../modal.service';\n\n@Component({\n  selector: 'app-modal-from-template',\n  templateUrl: './modal-from-template.component.html',\n  styleUrls: ['./modal-from-template.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalFromTemplateComponent implements OnInit {\n  @Input() name: string;\n  @Input() description: string;\n\n  closeReason = ModalCloseReason;\n\n  constructor(private modal: ModalService) {}\n\n  ngOnInit(): void {}\n\n  create(template: TemplateRef<any>): void {\n    const modal = this.modal.create(template, {\n      name: this.name,\n      description: this.description,\n    });\n    modal.onClose.subscribe((_) => {});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-from-template.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #content let-data=\"data\" let-modal=\"modal\">\n  <div class=\"column\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-toolbar [palette]=\"'background'\" class=\"justify-content-between\">\n      <span>Создать проект</span>\n      <teta-icon [name]=\"'closeBig'\" (click)=\"modal.close({reason: closeReason.exit })\"></teta-icon>\n    </teta-toolbar>\n    <div class=\"padding-3 column\">\n      <div class=\"margin-v-2\">\n        <input class=\"input\" type=\"text\" [(ngModel)]=\"data.name\" placeholder=\"'Название'\">\n      </div>\n      <div class=\"margin-v-2\">\n        <input class=\"input\" type=\"text\" [(ngModel)]=\"data.description\" placeholder=\"'Описание'\">\n      </div>\n    </div>\n    <teta-toolbar [palette]=\"'panel'\">\n      <button teta-button\n              [palette]=\"'primary'\"\n              (click)=\"modal.close({reason: closeReason.exit })\">\n        Отменить\n      </button>\n      <button teta-button\n              [palette]=\"'primary'\"\n              (click)=\"modal.close({reason: closeReason.resolve })\">\n        Создать\n      </button>\n    </teta-toolbar>\n  </div>\n</ng-template>\n<button teta-button [palette]=\"'primary'\" (click)=\"create(content)\">\n  Create modal\n</button>\n"
        },
        {
            "name": "MonthPickerComponent",
            "id": "component-MonthPickerComponent-ffbc3a75559569a6ab4c45f339e4470a",
            "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-month-picker",
            "styleUrls": [
                "./month-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./month-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendToBody",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Date"
                },
                {
                    "name": "showToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "_currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "classDatepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "datePickerModeEnum",
                    "defaultValue": "DatePickerMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayMode",
                    "defaultValue": "DatePickerMode.month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerMode",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "scrollMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "scrollYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "setToday",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 250
                },
                {
                    "name": "showPicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker_open'"
                        }
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "clearPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initPicker",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.datepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "true"
                },
                {
                    "name": "class.datepicker_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "0"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PickerLocaleModel } from '../model/picker-locale-model';\nimport { PickerLocaleService } from '../service/picker-locale.service';\nimport { takeWhile } from 'rxjs/operators';\nimport { DatePickerMode } from '../model/date-picker-mode.enum';\n\nexport const MONTH_PICKER_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MonthPickerComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-month-picker',\n  templateUrl: './month-picker.component.html',\n  styleUrls: ['./month-picker.component.scss'],\n  providers: [MONTH_PICKER_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MonthPickerComponent\n  implements ControlValueAccessor, OnInit, OnDestroy\n{\n  @Input() disabled: boolean;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() showToday = true;\n  @Input() appendToBody = true;\n\n  @HostBinding('class.datepicker_open') showPicker: boolean;\n  @HostBinding('class.datepicker') private readonly classDatepicker = true;\n  @HostBinding('tabindex') private readonly tabindex = 0;\n\n  datePickerModeEnum = DatePickerMode;\n\n  locale: PickerLocaleModel;\n  today: Date;\n\n  displayMode: DatePickerMode = DatePickerMode.month;\n\n  _value: Date | null = null;\n  _currentMonth: number | null;\n  _currentYear: number | null;\n\n  get value(): any {\n    return this._value;\n  }\n\n  set value(v: any) {\n    if (v !== this._value) {\n      this._value = v;\n      this.onChange(v);\n    }\n  }\n\n  get currentMonth(): number | null {\n    return this._currentMonth;\n  }\n\n  set currentMonth(v: number | null) {\n    if (v === null || v === undefined || v < 0 || v > 11) {\n      return;\n    }\n    if (v !== this._currentMonth) {\n      this._currentMonth = v;\n    }\n  }\n\n  get currentYear(): number | null {\n    return this._currentYear;\n  }\n\n  set currentYear(v: number | null) {\n    if (v !== this._currentYear) {\n      this._currentYear = v;\n    }\n  }\n\n  private _alive = true;\n\n  constructor(\n    public localeService: PickerLocaleService,\n    private _cdr: ChangeDetectorRef\n  ) {\n    localeService.locale\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((locale: PickerLocaleModel) => {\n        this.locale = locale;\n      });\n    this.setDefaults();\n  }\n\n  writeValue(value: any) {\n    this._value = value;\n    this.initPicker(value);\n  }\n\n  initPicker(date: Date) {\n    if (!date || !(date instanceof Date)) {\n      this.setDefaults();\n    } else {\n      this.currentMonth = date.getMonth();\n      this.currentYear = date.getFullYear();\n    }\n    this._cdr.markForCheck();\n  }\n\n  setDefaults() {\n    this.today = new Date();\n    this.currentMonth = null;\n    this.currentYear = null;\n  }\n\n  clearPicker() {\n    this.value = null;\n  }\n\n  onChange = (_: any) => {};\n\n  onTouched = () => {};\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  ngOnInit() {\n    if (!this.minDate || !(this.minDate instanceof Date)) {\n      this.minDate = new Date('1900-01-01T00:00:00Z');\n    }\n    if (!this.maxDate || !(this.maxDate instanceof Date)) {\n      this.maxDate = new Date('2100-12-31T00:00:00Z');\n    }\n    this.initPicker(this.value);\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  isMinInvalid = (dat: Date): boolean => {\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\n      return false;\n    }\n    const min = new Date(\n      this.minDate.getFullYear(),\n      this.minDate.getMonth(),\n      1\n    );\n    return min.getTime() > dat.getTime();\n  };\n\n  isMaxInvalid = (dat: Date): boolean => {\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\n      return false;\n    }\n    const max = new Date(\n      this.maxDate.getFullYear(),\n      this.maxDate.getMonth(),\n      1\n    );\n    return max.getTime() < dat.getTime();\n  };\n\n  scrollMonth = (e: any) => {\n    if (this.showPicker) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this._value) {\n      return;\n    }\n    if (this.currentYear === null || this.currentYear === undefined) {\n      this.currentYear = this.today.getFullYear();\n    }\n    if (this.currentMonth === null || this.currentMonth === undefined) {\n      this.currentMonth = this.today.getMonth();\n    }\n    if (e.deltaY > 0) {\n      if (this.currentMonth === 11) {\n        this.currentMonth = 0;\n        this.currentYear++;\n      } else {\n        this.currentMonth++;\n      }\n    } else {\n      if (this.currentMonth === 0) {\n        this.currentMonth = 11;\n        this.currentYear--;\n      } else {\n        this.currentMonth--;\n      }\n    }\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\n      this.value = newDate;\n    }\n  };\n\n  scrollYear = (e: any) => {\n    if (this.showPicker) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this._value) {\n      return;\n    }\n    if (!this.currentYear) {\n      this.currentYear = this.today.getFullYear();\n    }\n    if (!this.currentMonth) {\n      this.currentMonth = this.today.getMonth();\n    }\n    if (e.deltaY > 0) {\n      this.currentYear++;\n    } else {\n      this.currentYear--;\n    }\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\n      this.value = newDate;\n    }\n  };\n\n  setMonth = (month: number) => {\n    this.currentMonth = month;\n    if (!this.currentYear) {\n      this.currentYear = this.today.getFullYear();\n    }\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\n      this.value = newDate;\n    }\n  };\n\n  setYear = (year: number) => {\n    this.currentYear = year;\n    if (!this.currentMonth) {\n      this.currentMonth = this.today.getMonth();\n    }\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\n      this.value = newDate;\n    }\n  };\n\n  setToday = () => {\n    const today = new Date();\n    this.currentYear = today.getFullYear();\n    this.currentMonth = today.getMonth();\n    this.value = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\n    this.showPicker = false;\n  };\n\n  setMode(mode: DatePickerMode) {\n    let result: DatePickerMode;\n    if (mode === this.displayMode || mode === DatePickerMode.month) {\n      result = DatePickerMode.month;\n    } else {\n      result = mode;\n    }\n    this.displayMode = result;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./month-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 54
                    }
                },
                "currentMonth": {
                    "name": "currentMonth",
                    "setSignature": {
                        "name": "currentMonth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentMonth",
                        "type": "",
                        "returnType": "number | null",
                        "line": 65
                    }
                },
                "currentYear": {
                    "name": "currentYear",
                    "setSignature": {
                        "name": "currentYear",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentYear",
                        "type": "",
                        "returnType": "number | null",
                        "line": 78
                    }
                }
            },
            "templateData": "<teta-dropdown\n  class=\"row row_auto\"\n  [appendToBody]=\"appendToBody\"\n  [(open)]=\"showPicker\"\n  [disabled]=\"disabled\">\n  <div tetaDropdownHead\n       (wheel)=\"scrollMonth($event)\"\n       class=\"datepicker-head font-body-3\">\n    <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>\n    <div class=\"row_auto\">\n      <ng-container *ngIf=\"_value !==null && _value!==undefined\">\n        {{locale.monthNames[_value.getMonth()]}} {{_value.getFullYear()}}\n      </ng-container>\n    </div>\n    <teta-icon [name]=\"'closeBig'\" (click)=\"clearPicker()\" class=\"margin-left-2\"></teta-icon>\n  </div>\n  <div tetaDropdownContent class=\"datepicker-body padding-3\">\n    <div class=\"row align-center justify-content-between\">\n      <div>\n        <button teta-button\n                [palette]=\"'text'\"\n                [view]=\"displayMode===datePickerModeEnum.month ? 'primary' : 'ghost'\"\n                (click)=\"setMode(datePickerModeEnum.month)\"\n                (wheel)=\"scrollMonth($event);\">\n          {{locale.monthNames[_currentMonth || today.getMonth()]}}\n        </button>\n        <button teta-button\n                class=\"margin-left-2\"\n                [palette]=\"'text'\"\n                [view]=\"displayMode===datePickerModeEnum.year ? 'primary' : 'ghost'\"\n                (click)=\"setMode(datePickerModeEnum.year)\"\n                (wheel)=\"scrollYear($event);\">\n          {{_currentYear || today.getFullYear()}}\n        </button>\n      </div>\n      <button teta-button\n              [palette]=\"'text'\"\n              [view]=\"'ghost'\"\n              (click)=\"setToday()\">\n        <teta-icon [name]=\"'calendar'\"></teta-icon>\n      </button>\n    </div>\n    <div class=\"datepicker-content\">\n      <teta-year-select\n        *ngIf=\"displayMode === datePickerModeEnum.year\"\n        [currentYear]=\"_currentYear\"\n        [today]=\"today\"\n        [size]=\"8\"\n        [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\"\n        (yearSelected)=\"setYear($event)\">\n      </teta-year-select>\n      <teta-month-select\n        *ngIf=\"displayMode === datePickerModeEnum.month\"\n        [currentMonth]=\"_currentMonth\"\n        [locale]=\"locale\"\n        [currentYear]=\"_currentYear\"\n        [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\"\n        (monthSelected)=\"setMonth($event)\">\n      </teta-month-select>\n    </div>\n  </div>\n</teta-dropdown>\n"
        },
        {
            "name": "MonthSelectComponent",
            "id": "component-MonthSelectComponent-c2458ef74fed1f4adbb061f152784e16",
            "file": "projects/components/src/component/date-picker/month-select/month-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-month-select",
            "styleUrls": [
                "./month-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./month-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "number"
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "PickerLocaleModel"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Date"
                },
                {
                    "name": "size",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "monthApplied",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "monthSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "_currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "applyMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "isMonthDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "scrollMonthSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "shift",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "shiftMonthSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "makeMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { PickerLocaleModel } from '../model/picker-locale-model';\nimport { fromEvent, merge } from 'rxjs';\nimport { takeWhile, tap } from 'rxjs/operators';\nimport { PickerTouchService } from '../service/picker-touch.service';\n\n@Component({\n  selector: 'teta-month-select',\n  templateUrl: './month-select.component.html',\n  styleUrls: ['./month-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MonthSelectComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() locale: PickerLocaleModel;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() size = 8;\n  @Output() monthSelected = new EventEmitter<number>();\n  @Output() monthApplied = new EventEmitter<number>();\n\n  _currentMonth: number;\n\n  @Input()\n  set currentMonth(val: number) {\n    this._currentMonth = val;\n    this.makeMonths();\n  }\n\n  get currentMonth(): number {\n    return this._currentMonth;\n  }\n\n  _currentYear: number;\n\n  @Input()\n  set currentYear(val: number) {\n    this._currentYear = val;\n  }\n\n  get currentYear(): number {\n    return this._currentYear;\n  }\n\n  today: Date;\n  months: number[] = [];\n  shift = 0;\n\n  private _alive = true;\n\n  private get _displayDate(): Date {\n    let month = 0;\n    let year = 0;\n    if (\n      this.currentMonth !== null &&\n      this.currentMonth !== undefined &&\n      this.currentMonth >= 0 &&\n      this.currentMonth <= 11\n    ) {\n      month = this.currentMonth;\n    }\n    if (this.currentYear !== null && this.currentYear !== undefined) {\n      year = this.currentYear;\n    }\n    return new Date(year, month, 1);\n  }\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _cdr: ChangeDetectorRef,\n    private _pickerTouchService: PickerTouchService\n  ) {\n    this.today = new Date();\n    this.today.setHours(0, 0, 0, 0);\n  }\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  ngAfterViewInit() {\n    const touchMove$ = fromEvent(\n      this._elementRef.nativeElement.parentElement,\n      'touchmove'\n    );\n\n    touchMove$\n      .pipe(\n        takeWhile((_) => this._alive),\n        tap((e: TouchEvent) => {\n          if (e.type === 'touchmove') {\n            this._pickerTouchService.onTouchMove(e);\n          }\n        })\n      )\n      .subscribe();\n\n    this._pickerTouchService.step\n      .pipe(\n        takeWhile((_) => this._alive),\n        tap((_) => {\n          this.shiftMonthSelector(_);\n          this._cdr.detectChanges();\n        })\n      )\n      .subscribe();\n  }\n\n  scrollMonthSelector = (e: WheelEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const step = e.deltaY > 0 ? 1 : -1;\n    this.shiftMonthSelector(step);\n  };\n\n  shiftMonthSelector = (step: number = 0) => {\n    this.shift += step;\n    this.makeMonths();\n  };\n\n  setMonth = (e: any, month: number) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this.isMonthDisabled(month)) {\n      this.shift = 0;\n      this.monthSelected.emit(month);\n    }\n  };\n\n  applyMonth = (e: any, month: number) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this.isMonthDisabled(month)) {\n      this.monthApplied.emit(month);\n    }\n  };\n\n  isMonthDisabled = (month: number) => {\n    if (!month && !this.currentYear) {\n      const dat = new Date(this.currentYear, month, 1);\n      return this.isMaxInvalid(dat) || this.isMinInvalid(dat);\n    }\n    return false;\n  };\n\n  isMinInvalid = (dat: Date): boolean => {\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\n      return false;\n    }\n    const min = new Date(\n      this.minDate.getFullYear(),\n      this.minDate.getMonth(),\n      1\n    );\n    return min.getTime() > dat.getTime();\n  };\n\n  isMaxInvalid = (dat: Date): boolean => {\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\n      return false;\n    }\n    const max = new Date(\n      this.maxDate.getFullYear(),\n      this.maxDate.getMonth(),\n      1\n    );\n    return max.getTime() < dat.getTime();\n  };\n\n  private makeMonths() {\n    const start = this._displayDate;\n    this.months = [];\n    start.setMonth(start.getMonth() - 3);\n    for (let i = this.shift; i < this.size + this.shift; i++) {\n      const dt = new Date(start.getFullYear(), start.getMonth() + i, 1);\n      this.months.push(dt.getMonth());\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n}\n",
                    "styleUrl": "./month-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "currentMonth": {
                    "name": "currentMonth",
                    "setSignature": {
                        "name": "currentMonth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentMonth",
                        "type": "number",
                        "returnType": "number",
                        "line": 41
                    }
                },
                "currentYear": {
                    "name": "currentYear",
                    "setSignature": {
                        "name": "currentYear",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 52
                    }
                },
                "_displayDate": {
                    "name": "_displayDate",
                    "getSignature": {
                        "name": "_displayDate",
                        "type": "",
                        "returnType": "Date",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"list row_auto margin-top-2\"\n     (wheel)=\"scrollMonthSelector($event);\">\n  <div *ngFor=\"let month of months\"\n       class=\"list-item list-item_interactive\"\n       [class.list-item_active]=\"month === _currentMonth\"\n       [class.list-item_disabled]=\"isMonthDisabled(month)\"\n       [class.datepicker__month__item_current]=\"month === today?.getMonth() && currentYear === today?.getFullYear()\"\n       (click)=\"setMonth($event, month)\"\n       (dblclick)=\"applyMonth($event, month)\">\n    <span class=\"color-text-20 margin-right-2\">\n      {{month + 1 | tetaPrependZero: 2}}\n    </span>\n    {{locale.monthNames[month]}}\n  </div>\n</div>\n"
        },
        {
            "name": "NumericCellComponent",
            "id": "component-NumericCellComponent-605e622086d59c827c33d768e951d60d",
            "file": "projects/components/src/component/table/default/numeric-cell/numeric-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-cell",
            "styleUrls": [
                "./numeric-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { CellComponentBase } from '../../base/cell-component-base';\nimport { TableService } from '../../service/table.service';\nimport { TableColumn } from '../../contract/table-column';\nimport { TableRow } from '../../contract/table-row';\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\n\n@Component({\n  selector: 'teta-numeric-cell',\n  templateUrl: './numeric-cell.component.html',\n  styleUrls: ['./numeric-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NumericCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit\n{\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n  @ViewChild('input', { static: false }) input: ElementRef;\n\n  constructor(\n    protected override svc: TableService<T>,\n    protected override cdr: ChangeDetectorRef\n  ) {\n    super(svc, cdr);\n  }\n\n  setValue(): void {\n    this.valueChanged();\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      setTimeout(() => {\n        this.input?.nativeElement.focus();\n        this.cdr.markForCheck();\n      }, 0);\n    }\n  }\n\n  stopEdit(): void {\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  justify-content: end;\n}\n",
                    "styleUrl": "./numeric-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text cell-text_numeric\">\n  {{row.data[column.name] | tetaNumber : 2}}\n</span>\n<input #input\n       *ngIf=\"edit\"\n       tetaOnlyNumber\n       type=\"text\"\n       class=\"input row_auto border-radius-0\"\n       (blur)=\"setValue()\"\n       [ngModel]=\"row.data[column.name]\"\n       (ngModelChange)=\"row.data[column.name]=$event;\"/>\n"
        },
        {
            "name": "NumericFilterComponent",
            "id": "component-NumericFilterComponent-db5a9cba4cb11287004327cfdaefce95",
            "file": "projects/components/src/component/filter/numeric-filter/numeric-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-filter",
            "styleUrls": [
                "./numeric-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilter",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "NumericFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { NumericFilter } from '../contarct/numeric-filter';\nimport { FilterComponentBase } from '../base/filter-component-base';\nimport { FilterBase } from '../base/filter-base';\nimport { FilterState } from '../contarct/filter-state';\nimport { FilterItem } from '../contarct/filter-item';\nimport { NumericFilterValue } from '../contarct/numeric-filter-value';\nimport { IIdName } from '../../../common/contract/i-id-name';\n\n@Component({\n  selector: 'teta-numeric-filter',\n  templateUrl: './numeric-filter.component.html',\n  styleUrls: ['./numeric-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NumericFilterComponent\n  extends FilterComponentBase\n  implements OnInit\n{\n  @Input() column: FilterItem;\n  @Input() filterOptions: IIdName<any>[] = [];\n  @Output() filterChanged: EventEmitter<FilterBase> =\n    new EventEmitter<FilterBase>();\n\n  filter: NumericFilter;\n\n  private state$: FilterState;\n\n  @Input()\n  set state(val: FilterState) {\n    this.state$ = val;\n    this.filter = this.getFilter();\n    this.changeDetector.detectChanges();\n  }\n\n  get state() {\n    return this.state$;\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.filter = this.getFilter();\n  }\n\n  private getFilter(): NumericFilter {\n    let filter = this.state.numericFilters?.find(\n      (f) => f.field === this.column.filterField\n    );\n    if (filter === null || filter === undefined) {\n      filter = this.state.addNumericFilter(\n        new NumericFilter({\n          value: new NumericFilterValue(),\n          field: this.column.filterField,\n          name: this.column.name,\n          strict: true,\n        })\n      );\n    }\n    return filter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./numeric-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"form-row padding-3\">\n  <teta-input [label]=\"'От'\">\n    <input class=\"input\" type=\"text\"\n           style=\"width: 110px\"\n           [ngModel]=\"filter.value?.greaterThan\"\n           (ngModelChange)=\"filter.value.greaterThan=$event\"/>\n  </teta-input>\n  <teta-input [label]=\"'До'\">\n    <input class=\"input\" type=\"text\"\n           style=\"width: 110px\"\n           [ngModel]=\"filter.value?.lessThan\"\n           (ngModelChange)=\"filter.value.lessThan=$event\"/>\n  </teta-input>\n</div>\n"
        },
        {
            "name": "NumericItemDefaultComponent",
            "id": "component-NumericItemDefaultComponent-ce7671d62617babf0dbd49a1d96f7411",
            "file": "projects/components/src/component/property-grid/default/numeric-item-default/numeric-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-item-default",
            "styleUrls": [
                "./numeric-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-numeric-item-default',\n  templateUrl: './numeric-item-default.component.html',\n  styleUrls: ['./numeric-item-default.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NumericItemDefaultComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./numeric-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>numeric-item-default works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-360545580fa3c6d3122860446da481b7",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PagerComponent",
            "id": "component-PagerComponent-08333b288918c71e6df563f195330350",
            "file": "projects/components/src/component/pager/pager/pager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-pager",
            "styleUrls": [
                "./pager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-pager',\n  templateUrl: './pager.component.html',\n  styleUrls: ['./pager.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PagerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>pager works!</p>\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-38942a23e84f16df618d3334ce9af3ff",
            "file": "projects/components/src/component/panel/panel/panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auto",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.column_fixed'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "column",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.column'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@panel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "{ value: boolean; params: { width: number; }; }"
                },
                {
                    "name": "class.column",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "true"
                },
                {
                    "name": "class.column_fixed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'teta-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('panel', [\n      transition('void => *', [\n        style({ opacity: '0' }),\n        animate(300, style({ opacity: '1' })),\n      ]),\n      transition('* => void', [animate(150, style({ opacity: '0' }))]),\n    ]),\n  ],\n})\nexport class PanelComponent implements OnInit {\n  @Input() width = 500;\n\n  @HostBinding('@panel')\n  private get panel() {\n    return {\n      value: true,\n      params: { width: this.width },\n    };\n  }\n\n  @HostBinding('class.column') private readonly column = true;\n  @HostBinding('class.column_fixed') private readonly auto = true;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "panel": {
                    "name": "panel",
                    "getSignature": {
                        "name": "panel",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "PlotbandComponent",
            "id": "component-PlotbandComponent-05f227358c47f7d2b0c9f277d7c3fbc0",
            "file": "projects/chart/src/chart/chart-container/plotband/plotband.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "g teta-plotband",
            "styleUrls": [
                "./plotband.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plotband.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'g teta-plotband',\n  templateUrl: './plotband.component.html',\n  styleUrls: ['./plotband.component.scss']\n})\nexport class PlotbandComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plotband.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:rect></svg:rect>\n"
        },
        {
            "name": "PlotlineComponent",
            "id": "component-PlotlineComponent-943cf78d690498dd2a31faed6549d31b",
            "file": "projects/chart/src/chart/chart-container/plotline/plotline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "g teta-plotline",
            "styleUrls": [
                "./plotline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plotline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'g teta-plotline',\n  templateUrl: './plotline.component.html',\n  styleUrls: ['./plotline.component.scss']\n})\nexport class PlotlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plotline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:line></svg:line>\n"
        },
        {
            "name": "PopupContentComponent",
            "id": "component-PopupContentComponent-c404dde1007eb5dab61965790b306d82",
            "file": "projects/components/src/component/dynamic-component/popup-content/popup-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-popup-content",
            "styleUrls": [
                "./popup-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string | string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@dialog'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ArrayUtil } from '../../../common/util/array-util';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'teta-popup-content',\n  templateUrl: './popup-content.component.html',\n  styleUrls: ['./popup-content.component.scss'],\n  animations: [\n    trigger('dialog', [\n      transition('void => *', [\n        style({ opacity: '0' }),\n        animate(200, style({ opacity: '1' })),\n      ]),\n      transition('* => void', [animate(200, style({ opacity: '0' }))]),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PopupContentComponent implements OnInit, OnDestroy {\n  @HostBinding('@dialog') dialog = true;\n\n  @Input() className: string | string[];\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [...ArrayUtil.asArray(this.className), 'popup-content'];\n    return result.join(' ');\n  }\n\n  constructor() {}\n\n  addClass(className: string) {\n    if (this.className) {\n      if (typeof this.className === 'string') {\n        this.className = className;\n      }\n      if (this.className instanceof Array) {\n        this.className.push(className);\n      }\n    } else {\n      this.className = [className];\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-e689c132df61225f875a2ec65a5a425e",
            "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SLIDER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number"
                },
                {
                    "name": "step",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ]
                },
                {
                    "name": "getMousePositionInPercents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mousedown",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "mousemove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "moving",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "preventGlobalMouseEvents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "progressBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.progress'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "restoreGlobalMouseEvents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'progressSlider', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getValueFromPercent",
                    "args": [
                        {
                            "name": "percent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "percent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPercentFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.progress",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73
                },
                {
                    "name": "document:mouseup",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ProgressBarComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n  providers: [SLIDER_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressBarComponent implements OnInit, ControlValueAccessor {\n  @Input() min = 0;\n  @Input() max = 100;\n  @Input() step = 0;\n\n  @ViewChild('progressSlider', { static: true })\n  private readonly slider: ElementRef;\n  @HostBinding('class.progress') private readonly progressBar = true;\n\n  percent: number;\n  moving: boolean;\n\n  set value(value: number) {\n    this._value = value;\n    this.percent = this.setPercentFromValue();\n    this._cdr.detectChanges();\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get containerPosition() {\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\n    return { min: rect.x, max: rect.x + rect.width };\n  }\n\n  private _value;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    private _cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) private _document: any\n  ) {}\n\n  @HostListener('document:mouseup', ['$event']) mouseup() {\n    this.moving = false;\n    this.restoreGlobalMouseEvents();\n    this.removeListener();\n  }\n\n  @HostListener('click', ['$event']) click = (event: MouseEvent) => {\n    this.getMousePositionInPercents(event);\n  };\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {}\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  mousedown = () => {\n    this.moving = true;\n    this.preventGlobalMouseEvents();\n    this.addListener();\n  };\n\n  ngOnInit(): void {}\n\n  private mousemove = (event: MouseEvent) => {\n    event.preventDefault();\n    this.getMousePositionInPercents(event);\n  };\n\n  private getMousePositionInPercents = (event: MouseEvent) => {\n    const position = event.clientX - this.containerPosition.min;\n    let percent =\n      (100 / (this.containerPosition.max - this.containerPosition.min)) *\n      position;\n    percent = percent <= 0 ? 0 : percent > 100 ? 100 : percent;\n    this.setValue(this.getValueFromPercent(percent));\n  };\n\n  private setValue(value: number) {\n    this.value = value;\n    this.onChange(this.value);\n  }\n\n  private getValueFromPercent(percent: number): number {\n    if (percent === 0) {\n      return this.min;\n    }\n    if (percent === 100) {\n      return this.max;\n    }\n    const exactValue = this.min + (percent * (this.max - this.min)) / 100;\n    if (!this.step || this.step <= 0 || isNaN(this.step)) {\n      return exactValue;\n    }\n    return (\n      Math.round((exactValue - this.min) / this.step) * this.step + this.min\n    );\n  }\n\n  private preventGlobalMouseEvents = () => {\n    this._document.body.style['pointer-events'] = 'none';\n  };\n\n  private restoreGlobalMouseEvents = () => {\n    this._document.body.style['pointer-events'] = 'auto';\n  };\n\n  private addListener() {\n    this._document.addEventListener('mousemove', this.mousemove);\n  }\n\n  private removeListener() {\n    this._document.removeEventListener('mousemove', this.mousemove);\n  }\n\n  private setPercentFromValue() {\n    const range = this.max - this.min;\n    return (100 / range) * (this.value - this.min);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                },
                "containerPosition": {
                    "name": "containerPosition",
                    "getSignature": {
                        "name": "containerPosition",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<div class=\"progress-bar\" [style.width.%]=\"percent\"></div>\n<div class=\"progress-slider\"\n     [class.progress-slider_visible]=\"moving\"\n     #progressSlider\n     (mousedown)=\"mousedown()\"\n     (click)=\"click($event)\"\n     [style.left.%]=\"percent\"></div>\n"
        },
        {
            "name": "PropertyGridComponent",
            "id": "component-PropertyGridComponent-53880479baedf384daf9a977e7d96368",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid",
            "styleUrls": [
                "./property-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TableColumn[]"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup"
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-container'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDictValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onControlValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IIdName<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IIdName<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { TableColumn } from '../../table/contract/table-column';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'teta-property-grid',\n  templateUrl: './property-grid.component.html',\n  styleUrls: ['./property-grid.component.scss'],\n})\nexport class PropertyGridComponent<T> implements OnInit, OnDestroy {\n  @HostBinding('class.form-container') formClass = true;\n\n  @Input() hideNonEditable: boolean;\n  @Input() columns: TableColumn[];\n  @Input() dict: IDictionary<IIdName<any>[]>;\n  @Input() formGroup: FormGroup;\n  @Input() horizontal: boolean;\n\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\n\n  private _alive = true;\n\n  constructor() {}\n\n  onControlValueChange(event: IIdName<any>) {\n    const affected = this.columns.filter((_) => _.parentName === event.name);\n    if (affected?.length) {\n      affected.forEach((item) => {\n        const value = this.formGroup.getRawValue()[item.name];\n        if (value) {\n          const dictValue = this.getDictValue(value, item.name);\n          if (dictValue && dictValue.parentId !== event.id) {\n            const newObj = {};\n            newObj[item.name] = null;\n            this.formGroup.patchValue(newObj);\n          }\n        }\n      });\n    }\n    this.controlValueChange.emit(event);\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n\n  private getDictValue(value: any, name: string) {\n    return this.dict[name]?.find((_) => _.id === value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  padding: 12px 8px;\n}\n",
                    "styleUrl": "./property-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"columns?.length\">\n  <ng-container *ngFor=\"let column of columns\">\n    <teta-property-grid-item *ngIf=\"column.columns?.length < 1 && (column.editable || !hideNonEditable)\"\n                             [dict]=\"dict\"\n                             [column]=\"column\"\n                             [formGroup]=\"formGroup\"\n                             [horizontal]=\"horizontal\"\n                             (controlValueChange)=\"onControlValueChange($event)\"\n                             [hideNonEditable]=\"hideNonEditable\"></teta-property-grid-item>\n    <teta-property-grid-group *ngIf=\"column.columns?.length > 0\"\n                              [dict]=\"dict\"\n                              [column]=\"column\"\n                              [formGroup]=\"formGroup\"\n                              [horizontal]=\"horizontal\"\n                              (controlValueChange)=\"onControlValueChange($event)\"\n                              [hideNonEditable]=\"hideNonEditable\"></teta-property-grid-group>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "PropertyGridGroupComponent",
            "id": "component-PropertyGridGroupComponent-1b29161794eead7f22bf8e8a628e9a4c",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid-group/property-grid-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid-group",
            "styleUrls": [
                "./property-grid-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup"
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-container'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { TableColumn } from '../../../table/contract/table-column';\nimport { IDictionary } from '../../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../../common/contract/i-id-name';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'teta-property-grid-group',\n  templateUrl: './property-grid-group.component.html',\n  styleUrls: ['./property-grid-group.component.scss'],\n})\nexport class PropertyGridGroupComponent<T> implements OnInit {\n  @HostBinding('class.form-container') formClass = true;\n  @Input() column: TableColumn;\n  @Input() hideNonEditable: boolean;\n  @Input() dict: IDictionary<IIdName<any>[]>;\n  @Input() formGroup: FormGroup;\n  @Input() horizontal: boolean;\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-grid-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"font-title-3\">{{column.caption}}</div>\n<ng-container *ngFor=\"let col of column.columns\">\n  <ng-container *ngIf=\"col.columns?.length < 1\">\n    <teta-property-grid-item *ngIf=\"column.editable || !hideNonEditable\"\n                             [dict]=\"dict\"\n                             [column]=\"col\"\n                             [hideNonEditable]=\"hideNonEditable\"\n                             (controlValueChange)=\"controlValueChange.emit($event)\"\n                             [horizontal]=\"horizontal\"\n                             [formGroup]=\"formGroup\"></teta-property-grid-item>\n  </ng-container>\n  <ng-container *ngIf=\"col.columns?.length > 0\">\n    <teta-property-grid-group [dict]=\"dict\"\n                              [column]=\"col\"\n                              [hideNonEditable]=\"hideNonEditable\"\n                              [horizontal]=\"horizontal\"\n                              (controlValueChange)=\"controlValueChange.emit($event)\"\n                              [formGroup]=\"formGroup\"></teta-property-grid-group>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "PropertyGridItemComponent",
            "id": "component-PropertyGridItemComponent-f625b9ed57b375b68704fff4d805811b",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid-item/property-grid-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid-item",
            "styleUrls": [
                "./property-grid-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": ""
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_formSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterTypeEnum",
                    "defaultValue": "FilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "controlIsInvalid",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDict",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { TableColumn } from '../../../table/contract/table-column';\nimport { IDictionary } from '../../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../../common/contract/i-id-name';\nimport { FilterType } from '../../../filter/enum/filter-type.enum';\nimport { FormGroup } from '@angular/forms';\nimport { FormsUtil } from '../../../../util/forms-util';\nimport { TranslocoService } from '@ngneat/transloco';\nimport { filter, takeWhile } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'teta-property-grid-item',\n  templateUrl: './property-grid-item.component.html',\n  styleUrls: ['./property-grid-item.component.scss'],\n})\nexport class PropertyGridItemComponent<T> implements OnInit, OnDestroy {\n  @Input() column: TableColumn;\n  @Input() hideNonEditable: boolean;\n  @Input() dict: IDictionary<IIdName<any>[]>;\n\n  @Input()\n  set formGroup(form: FormGroup) {\n    this._formGroup = form;\n    this._formSub?.unsubscribe();\n    this._formSub = this._formGroup.controls[this.column.name].valueChanges\n      .pipe(\n        takeWhile(() => this._alive),\n        filter(\n          (_) =>\n            this.column.filterType !== FilterType.string &&\n            this.column.filterType !== FilterType.number\n        )\n      )\n      .subscribe((_) => {\n        this.controlValueChange.emit({\n          id: _,\n          name: this.column.name,\n        });\n      });\n  }\n\n  get formGroup() {\n    return this._formGroup;\n  }\n\n  @Input() horizontal: boolean;\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\n  filterTypeEnum = FilterType;\n\n  private _formGroup: FormGroup;\n  private _formSub: Subscription;\n\n  get caption(): string {\n    if (this.column.filterType === FilterType.boolean) {\n      return '';\n    }\n    return `${this.column.caption}${\n      this.column.unit ? `, ${this.column.unit}` : ''\n    }`;\n  }\n\n  private _alive = true;\n\n  constructor(private _transloco: TranslocoService) {}\n\n  getDict() {\n    const dict = this.dict[this.column.name];\n    if (this.column.parentName?.length > 0) {\n      return dict?.filter(\n        (dictItem: IIdName<any>) =>\n          dictItem.parentId ===\n          this.formGroup.getRawValue()[this.column.parentName]\n      );\n    }\n    return dict;\n  }\n\n  controlIsInvalid(controlName: string) {\n    return FormsUtil.controlIsInvalid(this.formGroup, controlName);\n  }\n\n  getError(column: TableColumn): string {\n    const control = this.formGroup.get(column.name);\n    if (control?.hasError('required')) {\n      return this._transloco.translate('errors.field_is_required');\n    }\n    if (control?.hasError('min')) {\n      return this._transloco.translate('errors.min_value', {\n        value: column.minValue,\n      });\n    }\n    if (control?.hasError('max')) {\n      return this._transloco.translate('errors.max_value', {\n        value: column.maxValue,\n      });\n    }\n  }\n\n  valueChange() {\n    this.controlValueChange.emit({\n      id: this.formGroup.controls[this.column.name].value,\n      name: this.column.name,\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy() {\n    this._alive = false;\n    this._formSub?.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-grid-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "_transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "setSignature": {
                        "name": "formGroup",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "form",
                                "type": "FormGroup",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "form",
                                "type": "FormGroup",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "caption": {
                    "name": "caption",
                    "getSignature": {
                        "name": "caption",
                        "type": "string",
                        "returnType": "string",
                        "line": 61
                    }
                }
            },
            "templateData": "<teta-input [label]=\"caption\"\n            [formGroup]=\"formGroup\"\n            [horizontal]=\"horizontal\"\n            *ngIf=\"column.editable || !hideNonEditable\">\n  <ng-container [ngSwitch]=\"column.filterType\">\n    <teta-select class=\"row_auto\"\n                 *ngSwitchCase=\"filterTypeEnum.list\"\n                 [searchRef]=\"getDict()?.length > 10 ? 'name' : ''\"\n                 [allowNull]=\"!column.required\"\n                 [appendToBody]=\"true\"\n                 [invalid]=\"controlIsInvalid(column.name)\"\n                 [formControlName]=\"column.name\"\n                 [options]=\"getDict()\"\n                 [valueRef]=\"'id'\"\n                 [textRef]=\"'name'\"\n                 [multiple]=\"false\"></teta-select>\n    <teta-date-picker *ngSwitchCase=\"filterTypeEnum.date\"\n                      class=\"row_auto\"\n                      [appendToBody]=\"true\"\n                      [invalid]=\"controlIsInvalid(column.name)\"\n                      [formControlName]=\"column.name\"></teta-date-picker>\n    <teta-toggle *ngSwitchCase=\"filterTypeEnum.boolean\"\n                 [formControlName]=\"column.name\">{{column.caption}}</teta-toggle>\n    <teta-text-field class=\"row_auto\"\n                     *ngSwitchDefault\n                     (focusout)=\"valueChange()\"\n                     [onlyNumber]=\"column.filterType === filterTypeEnum.number\"\n                     [placeholder]=\"column.caption\"\n                     [invalid]=\"controlIsInvalid(column.name)\"\n                     [formControlName]=\"column.name\"></teta-text-field>\n  </ng-container>\n  <div *ngIf=\"controlIsInvalid(column.name)\"\n       ngProjectAs=\"message\"\n       class=\"color-red-50\">\n    {{getError(column)}}\n  </div>\n</teta-input>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-1a7b3ab1d4ebd0bfe2eb0da01efa0a90",
            "file": "projects/components/src/component/radio/radio-button/radio-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "radio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioComponent",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "radioButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio-button'"
                        }
                    ]
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio-button-selected'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hostClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.radio-button",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "class.radio-button-selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Host,\n  OnDestroy,\n  ViewContainerRef,\n  Input,\n  HostListener,\n  HostBinding,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { RadioComponent } from '../radio/radio.component';\n\n@Component({\n  selector: 'teta-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n  @HostBinding('class.radio-button')\n  radioButton = true;\n\n  @HostBinding('class.radio-button-selected')\n  selected: boolean;\n\n  @Input()\n  @HostBinding('class.radio-button-checked')\n  checked: boolean;\n\n  @Input()\n  @HostBinding('class.radio-button_disabled')\n  disabled: boolean;\n\n  @Input() set value(val: any) {\n    this._value = val;\n  }\n\n  get value() {\n    if (this._value === undefined) {\n      if (this.container.element.nativeElement instanceof HTMLElement) {\n        return this.container.element.nativeElement.innerText;\n      }\n    }\n    return this._value;\n  }\n\n  private _value: any;\n\n  constructor(\n    private container: ViewContainerRef,\n    @Host() public radio: RadioComponent\n  ) {}\n\n  @HostListener('click')\n  hostClick() {\n    if (!this.disabled) {\n      this.radio._setChecked(this);\n    }\n  }\n\n  ngOnInit() {\n    this.radio._addButton(this);\n  }\n\n  ngOnDestroy(): void {\n    this.radio._removeButton(this);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "radio",
                        "type": "RadioComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "radio",
                        "type": "RadioComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"radio-button-icon\">\n  <div *ngIf=\"checked\" class=\"radio-button-small-icon\"></div>\n</div>\n<ng-content></ng-content>\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-fbab63bb737f5a1dad8093dd24471f9e",
            "file": "projects/components/src/component/radio/radio/radio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-radio",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkChangeSelected",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Менять значение при изменении выбранного",
                    "description": "<p>Менять значение при изменении выбранного</p>\n",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>model callback вызовется когда модель измениться из ui</p>\n",
                    "line": 177,
                    "rawdescription": "\nmodel callback вызовется когда модель измениться из ui"
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "buttons$",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioButtonComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "checkedButton$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonOrNullOrUndefined",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disabled$",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "radioClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio'"
                        }
                    ]
                },
                {
                    "name": "selectedButton$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonOrNullOrUndefined",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_addButton",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_removeButton",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setChecked",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusoutHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRegisters a callback function that should be called when the control's value changes in the UI",
                    "description": "<p>Registers a callback function that should be called when the control&#39;s value changes in the UI</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRegisters a callback function that should be called when the control receives a blur event.",
                    "description": "<p>Registers a callback function that should be called when the control receives a blur event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectBtn",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectFirst",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis function is called by the forms API when the control status changes to or from \"DISABLED\".",
                    "description": "<p>This function is called by the forms API when the control status changes to or from &quot;DISABLED&quot;.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWrites a new value to the element.",
                    "description": "<p>Writes a new value to the element.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.radio",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number"
                }
            ],
            "hostListeners": [
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68
                },
                {
                    "name": "focusout",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Input,\n  forwardRef,\n  HostBinding,\n  HostListener,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RadioButtonComponent } from '../radio-button/radio-button.component';\n\ntype ButtonOrNullOrUndefined = RadioButtonComponent | undefined | null;\n\n@Component({\n  selector: 'teta-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RadioComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RadioComponent implements OnInit, ControlValueAccessor {\n  @HostBinding('tabindex') tabindex = 0;\n  @HostBinding('class.radio') radioClass = true;\n\n  /** Менять значение при изменении выбранного */\n  @Input()\n  @HostBinding('class.radio_inline')\n  inline: boolean;\n\n  @Input() checkChangeSelected = true;\n\n  @Input() set disabled(val: boolean) {\n    this.disabled$ = val;\n    this.buttons$.forEach((b) => (b.disabled = this.disabled));\n  }\n\n  get disabled() {\n    return this.disabled$;\n  }\n\n  @Input() get value(): any {\n    if (this.checkedButton$) {\n      return this.checkedButton$.value;\n    }\n    return null;\n  }\n\n  set value(val: any) {\n    this.writeValue(val);\n  }\n\n  private buttons$: RadioButtonComponent[] = [];\n  private checkedButton$: ButtonOrNullOrUndefined;\n  private selectedButton$: ButtonOrNullOrUndefined;\n  private disabled$ = false;\n\n  constructor(private _cdr: ChangeDetectorRef) {}\n\n  @HostListener('focus', ['$event'])\n  focusHandler(event: FocusEvent) {\n    this.selectFirst();\n  }\n\n  @HostListener('focusout', ['$event'])\n  focusoutHandler(event: FocusEvent) {\n    if (this.selectedButton$) {\n      this.selectedButton$.selected = false;\n      this.selectedButton$ = null;\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    const key = event.code || event.key;\n    switch (key) {\n      case 'Space':\n      case 'Enter':\n      case 'Spacebar':\n        this.checkSelected();\n        break;\n\n      case 'ArrowUp':\n      case 'Up':\n      case 'ArrowLeft':\n      case 'Left':\n        this.selectPrevious();\n        break;\n\n      case 'ArrowDown':\n      case 'Down':\n      case 'ArrowRight':\n      case 'Right':\n        this.selectNext();\n        break;\n      default:\n        return;\n    }\n\n    event.cancelBubble = true;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    }\n    return false;\n  }\n\n  ngOnInit() {}\n\n  selectFirst() {\n    if (!this.selectedButton$) {\n      if (this.checkedButton$) {\n        this.selectedButton$ = this.checkedButton$;\n        this.selectedButton$.selected = true;\n        return true;\n      }\n\n      for (const btn of this.buttons$) {\n        if (!btn.disabled) {\n          this.selectedButton$ = btn;\n          this.selectedButton$.selected = true;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  _setChecked(btn: RadioButtonComponent) {\n    if (this.checkedButton$) {\n      this.checkedButton$.checked = false;\n    }\n    this.checkedButton$ = btn;\n    this.checkedButton$.checked = true;\n    if (this.selectedButton$) {\n      this.selectedButton$.selected = false;\n    }\n    this.selectedButton$ = btn;\n    this.selectedButton$.selected = true;\n    this._onChange(this.value);\n    this._cdr.markForCheck();\n  }\n\n  _addButton(btn: RadioButtonComponent) {\n    if (this.disabled) {\n      btn.disabled = this.disabled;\n    }\n    return this.buttons$.push(btn) - 1;\n  }\n\n  _removeButton(btn: RadioButtonComponent) {\n    const index = this.buttons$.indexOf(btn);\n    if (index > -1) {\n      this.buttons$.splice(index, 1);\n    }\n  }\n\n  /** Writes a new value to the element. */\n  writeValue(obj: any): void {\n    if (this.checkedButton$) {\n      this.checkedButton$.checked = false;\n    }\n\n    this.checkedButton$ = this.buttons$.find((b) => b.value === obj);\n    if (this.checkedButton$) {\n      this.checkedButton$.checked = true;\n    }\n    this._cdr.markForCheck();\n  }\n\n  /** model callback вызовется когда модель измениться из ui */\n  _onChange: (value: any) => void = () => {};\n\n  /** Registers a callback function that should be called when the control's value changes in the UI */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  _onTouched = () => {};\n\n  /** Registers a callback function that should be called when the control receives a blur event. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** This function is called by the forms API when the control status changes to or from \"DISABLED\". */\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._cdr.markForCheck();\n  }\n\n  private selectBtn(btn: RadioButtonComponent) {\n    if (this.selectedButton$) {\n      this.selectedButton$.selected = false;\n    }\n    this.selectedButton$ = btn;\n    this.selectedButton$.selected = true;\n    if (this.checkChangeSelected) {\n      this.checkSelected();\n    }\n    this._cdr.markForCheck();\n  }\n\n  private selectNext() {\n    if (this.selectFirst()) {\n      return;\n    }\n\n    const length = this.buttons$.length;\n    let newIndex = this.selectedButton$\n      ? this.buttons$.indexOf(this.selectedButton$)\n      : 0;\n    let firstCycle = true;\n    do {\n      newIndex++;\n      if (firstCycle && newIndex === length) {\n        newIndex = 0;\n        firstCycle = false;\n      }\n      const btn = this.buttons$[newIndex];\n      if (btn && !btn.disabled) {\n        this.selectBtn(btn);\n        return;\n      }\n    } while (newIndex < length);\n  }\n\n  private selectPrevious() {\n    if (this.selectFirst()) {\n      return;\n    }\n\n    let newIndex = this.selectedButton$\n      ? this.buttons$.indexOf(this.selectedButton$)\n      : 0;\n    let firstCycle = true;\n    do {\n      newIndex--;\n      if (firstCycle && newIndex === -1) {\n        newIndex = this.buttons$.length - 1;\n        firstCycle = false;\n      }\n      const btn = this.buttons$[newIndex];\n      if (btn && !btn.disabled) {\n        this.selectBtn(btn);\n        return;\n      }\n    } while (newIndex >= 0);\n  }\n\n  private checkSelected() {\n    if (this.selectFirst()) {\n      return;\n    }\n    if (this.selectedButton$) {\n      this._setChecked(this.selectedButton$);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 49
                    }
                }
            },
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "ResizePanelComponent",
            "id": "component-ResizePanelComponent-12984d76c1d16e664df3112f8a17ed8d",
            "file": "projects/components/src/component/resize-panel/resize-panel/resize-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-resize-panel",
            "styleUrls": [
                "./resize-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./resize-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": ""
                },
                {
                    "name": "grabPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": ""
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number"
                },
                {
                    "name": "minSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_direction",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"vertical\" | \"horizontal\"",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_grabPosition",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_positionMap",
                    "defaultValue": "new Map<string, string>()\n    .set('left', 'resize-grab_left')\n    .set('right', 'resize-grab_right')\n    .set('top', 'resize-grab_top')\n    .set('bottom', 'resize-grab_bottom')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resizePanelClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.resize-panel'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "manageHorizontal",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "manageVertical",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeProcess",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "restorePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setStartPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.resize-panel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Component({\n  selector: 'teta-resize-panel',\n  templateUrl: './resize-panel.component.html',\n  styleUrls: ['./resize-panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ResizePanelComponent implements OnInit, OnDestroy {\n  @Input()\n  set direction(val: 'vertical' | 'horizontal') {\n    this._direction = val;\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  @Input()\n  set grabPosition(val: 'top' | 'left' | 'bottom' | 'right') {\n    this._grabPosition = val;\n  }\n\n  get grabPosition() {\n    if (this.direction === 'vertical') {\n      if (['left', 'right'].includes(this._grabPosition)) {\n        return this._grabPosition;\n      }\n      return 'left';\n    }\n    if (['top', 'bottom'].includes(this._grabPosition)) {\n      return this._grabPosition;\n    }\n    return 'bottom';\n  }\n\n  @Input() name: string;\n  @Input() minSize: number;\n  @Input() maxSize: number;\n  @HostBinding('class.resize-panel') private readonly resizePanelClass = true;\n\n  private _direction: 'vertical' | 'horizontal' = 'horizontal';\n  private _grabPosition: 'top' | 'left' | 'bottom' | 'right' = 'left';\n  private _startSize: number;\n  private _startPosition: number;\n\n  private _positionMap: Map<string, string> = new Map<string, string>()\n    .set('left', 'resize-grab_left')\n    .set('right', 'resize-grab_right')\n    .set('top', 'resize-grab_top')\n    .set('bottom', 'resize-grab_bottom');\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    @Inject(DOCUMENT) private _document: any\n  ) {\n  }\n\n  resizeStart(event: MouseEvent) {\n    this.setStartPosition();\n    if (this.direction === 'vertical') {\n      this._startSize = this._elementRef.nativeElement.clientWidth;\n      this._startPosition = event.clientX;\n    } else {\n      this._startSize = this._elementRef.nativeElement.clientHeight;\n      this._startPosition = event.clientY;\n    }\n  }\n\n  resizeProcess(event: MouseEvent) {\n    event.preventDefault();\n    if (this.direction === 'vertical') {\n      this.manageVertical(event);\n    } else {\n      this.manageHorizontal(event);\n    }\n  }\n\n  resizeEnd(event: MouseEvent) {\n    window.dispatchEvent(new Event('resize'));\n  }\n\n  ngOnInit() {\n    this.restorePosition();\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  getClassName() {\n    return this._positionMap.get(this.grabPosition) || '';\n  }\n\n  private setStartPosition() {\n    if (this.direction === 'vertical') {\n      this._renderer.setStyle(\n        this._elementRef.nativeElement,\n        'width',\n        `${this._elementRef.nativeElement.offsetWidth}px`\n      );\n    } else {\n      this._renderer.setStyle(\n        this._elementRef.nativeElement,\n        'height',\n        `${this._elementRef.nativeElement.offsetHeight}px`\n      );\n    }\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex-grow', `0`);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex-shrink', `0`);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex', `none`);\n  }\n\n  private manageHorizontal(event: MouseEvent) {\n    let newSize =\n      this.grabPosition === 'bottom'\n        ? this._startSize + (event.clientY - this._startPosition)\n        : this._startSize - (event.clientY - this._startPosition);\n    if (this.maxSize && newSize > this.maxSize) {\n      newSize = this.maxSize;\n    }\n    if (this.minSize && newSize < this.minSize) {\n      newSize = this.minSize;\n    }\n    this._renderer.setStyle(\n      this._elementRef.nativeElement,\n      'height',\n      `${newSize}px`\n    );\n    this.save();\n  }\n\n  private manageVertical(event: MouseEvent) {\n    let newSize =\n      this.grabPosition === 'right'\n        ? this._startSize + (event.clientX - this._startPosition)\n        : this._startSize - (event.clientX - this._startPosition);\n    if (this.maxSize && newSize > this.maxSize) {\n      newSize = this.maxSize;\n    }\n    if (this.minSize && newSize < this.minSize) {\n      newSize = this.minSize;\n    }\n    this._renderer.setStyle(\n      this._elementRef.nativeElement,\n      'width',\n      `${newSize}px`\n    );\n    this.save();\n  }\n\n  private restore() {\n    if (this.name?.length > 0) {\n      return JSON.parse(localStorage.getItem(`resize-panel${this.name}`) || '');\n    }\n  }\n\n  private restorePosition() {\n    const savedSize = this.restore();\n    if (savedSize) {\n      if (this.direction === 'vertical') {\n        this._renderer.setStyle(\n          this._elementRef.nativeElement,\n          'width',\n          `${savedSize}px`\n        );\n      } else {\n        this._renderer.setStyle(\n          this._elementRef.nativeElement,\n          'height',\n          `${savedSize}px`\n        );\n      }\n      this._renderer.setStyle(this._elementRef.nativeElement, 'flex-grow', `0`);\n      this._renderer.setStyle(\n        this._elementRef.nativeElement,\n        'flex-shrink',\n        `0`\n      );\n      this._renderer.setStyle(this._elementRef.nativeElement, 'flex', `none`);\n    }\n  }\n\n  private save() {\n    if (this.name?.length > 0) {\n      if (this.direction === 'vertical') {\n        localStorage.setItem(\n          `resize-panel${this.name}`,\n          this._elementRef.nativeElement.clientWidth\n        );\n      } else {\n        localStorage.setItem(\n          `resize-panel${this.name}`,\n          this._elementRef.nativeElement.clientHeight\n        );\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./resize-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "direction": {
                    "name": "direction",
                    "setSignature": {
                        "name": "direction",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "\"vertical\" | \"horizontal\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "\"vertical\" | \"horizontal\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "direction",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "grabPosition": {
                    "name": "grabPosition",
                    "setSignature": {
                        "name": "grabPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "grabPosition",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n<div #grab class=\"resize-grab\"\n     (resizeStart)=\"resizeStart($event)\"\n     (resizeProcess)=\"resizeProcess($event)\"\n     (resizeEnd)=\"resizeEnd($event)\"\n     [tetaResizeDrag]=\"direction\"\n     [ngClass]=\"getClassName()\">\n  <teta-icon [name]=\"direction\"></teta-icon>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-6d03b0d93a71b28e70346abe4fbab440",
            "file": "projects/components/src/component/select/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Align"
                },
                {
                    "name": "allowNull",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean"
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Array<AutoCloseIgnoreCase>"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "itemSize",
                    "defaultValue": "32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any[]"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "searchRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string | "
                },
                {
                    "name": "textRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": " | string"
                },
                {
                    "name": "valueRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": " | string"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "VerticalAlign"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 210
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.select_open'"
                        }
                    ]
                },
                {
                    "name": "optionDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionDirective",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SelectOptionDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "searchText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "selectClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.select'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | any[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "valueDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectValueDirective",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SelectValueDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSearchString",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getText",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.select",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "true"
                },
                {
                    "name": "class.select_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "class.select_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "0"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Align } from '../../../common/enum/align.enum';\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\nimport { AutoCloseIgnoreCase } from '../../../common/contract/auto-close-ignore-case';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SelectOptionDirective } from '../select-option.directive';\nimport { SelectValueDirective } from '../select-value.directive';\n\n@Component({\n  selector: 'teta-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectComponent implements ControlValueAccessor, OnInit {\n  @HostBinding('class.select_multiple')\n  @Input()\n  multiple: boolean;\n  @Input() options: any[];\n  @Input() invalid: boolean;\n  @Input() align: Align = Align.minWidth;\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\n  @Input() autoClose = true;\n  @Input() autoCloseIgnore: Array<AutoCloseIgnoreCase> = ['inside'];\n  @Input() disabled: boolean;\n  @Input() itemSize = 32;\n  @Input() virtual: boolean;\n  @Input() icon: string;\n  @Input() placeholder: string;\n  @Input() appendToBody: boolean;\n  @Input() allowNull = true;\n\n  @Input() valueRef: ((item: any) => any) | string;\n  @Input() textRef: ((item: any) => string) | string;\n  @Input() searchRef: string | ((item: any) => string);\n\n  @ContentChild(SelectOptionDirective, { static: true })\n  optionDirective: SelectOptionDirective;\n\n  @ContentChild(SelectValueDirective, { static: true })\n  valueDirective: SelectValueDirective;\n\n  @HostBinding('class.select_open') open = false;\n\n  @HostBinding('class.select') private readonly selectClass = true;\n  @HostBinding('tabindex') private readonly tabindex = 0;\n\n  @HostBinding('class.select_disabled')\n  get isDisabled() {\n    return this.disabled;\n  }\n\n  value: any | any[];\n  searchText: string;\n\n  get visibleOptions(): any[] {\n    if (!this.searchText) {\n      return this.options;\n    }\n    return this.options?.filter(\n      (option) =>\n        this.getSearchString(option)\n          .toLowerCase()\n          .indexOf(this.searchText.toLowerCase()) >= 0\n    );\n  }\n\n  constructor(\n    private _cdr: ChangeDetectorRef,\n    private _elementRef: ElementRef\n  ) {}\n\n  clear() {\n    let val: any;\n    if (this.multiple === true) {\n      val = [];\n    } else {\n      val = null;\n    }\n    this.value = val;\n    this.onChange(this.value);\n    this.open = false;\n    this._cdr.markForCheck();\n    this._cdr.detectChanges();\n  }\n\n  clickOption(option: any, event: MouseEvent): void {\n    if (this.multiple === true) {\n      if (!this.value?.length) {\n        this.value = [];\n      }\n      if (this.value.indexOf(option) >= 0) {\n        this.removeItem(option);\n      } else {\n        this.value = [...this.value, option];\n      }\n      this.onChange(this.value.map((_) => this.getValue(_)));\n    } else {\n      this.value = option;\n      this.onChange(this.getValue(this.value));\n      this.open = false;\n    }\n    this._cdr.markForCheck();\n    this._cdr.detectChanges();\n  }\n\n  itemSelected(option: any): boolean {\n    if (this.multiple) {\n      return this.value?.indexOf(option) >= 0;\n    } else {\n      return this.value === option;\n    }\n  }\n\n  removeItemClick(option: any, event: MouseEvent): void {\n    event.stopPropagation();\n    this.removeItem(option);\n    this.onChange(this.value.map((_) => this.getValue(_)));\n  }\n\n  removeItem(option: any): void {\n    this.value = this.value.filter((_) => _ !== option);\n  }\n\n  search(text: string): void {\n    this.searchText = text;\n  }\n\n  getText(option: any): string {\n    if (option == null) {\n      return '';\n    }\n    switch (typeof this.textRef) {\n      case 'string':\n        return option[this.textRef];\n      case 'function':\n        return this.textRef(option);\n      default:\n        return option;\n    }\n  }\n\n  getValue(option: any): any {\n    switch (typeof this.valueRef) {\n      case 'string':\n        return option[this.valueRef];\n      case 'function':\n        return this.valueRef(option);\n      default:\n        return option;\n    }\n  }\n\n  getSearchString(option: any): string {\n    switch (typeof this.searchRef) {\n      case 'string':\n        return option[this.searchRef];\n      case 'function':\n        return this.searchRef(option);\n      default:\n        return '';\n    }\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  ngOnInit(): void {}\n\n  writeValue(value: any | any[]): void {\n    if (this.multiple) {\n      this.value =\n        value && this.options\n          ? this.options.filter(\n              (option) => value.indexOf(this.getValue(option)) > -1\n            )\n          : [];\n    } else {\n      this.value =\n        this.options &&\n        this.options.find((option) => this.getValue(option) === value);\n    }\n    this._cdr.detectChanges();\n  }\n\n  onChange: (value: any) => void = () => {};\n\n  registerOnChange(fn: (value: any) => void): void {\n    this.onChange = fn;\n  }\n\n  onTouched = () => {};\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._cdr.markForCheck();\n  }\n\n  private getSelectedValue() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "visibleOptions": {
                    "name": "visibleOptions",
                    "getSignature": {
                        "name": "visibleOptions",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 73
                    }
                }
            },
            "templateData": "<teta-dropdown [align]=\"align\"\n               [verticalAlign]=\"verticalAlign\"\n               [autoClose]=\"autoClose\"\n               [autoCloseIgnore]=\"autoCloseIgnore\"\n               [(open)]=\"open\"\n               [appendToBody]=\"appendToBody\"\n               [disabled]=\"disabled\"\n               class=\"row row_auto\">\n  <div tetaDropdownHead\n       class=\"row row_auto select-head\"\n       [class.select-head_invalid]=\"invalid\">\n    <div class=\"row_auto flex align-center\">\n      <teta-icon *ngIf=\"icon\" [name]=\"icon\" class=\"margin-right-1\"></teta-icon>\n      <span class=\"placeholder\" *ngIf=\"(value == null || value?.length === 0) && placeholder\">\n          {{placeholder}}\n        </span>\n      <ng-container\n        *ngTemplateOutlet=\"valueDirective ? valueDirective.template : valueDefault; context: {$implicit: value, value: value}\"></ng-container>\n    </div>\n    <teta-icon [name]=\"'arrowDownSmall'\"></teta-icon>\n  </div>\n  <div *ngIf=\"options?.length\" tetaDropdownContent class=\"select-list scrollable row_auto\">\n    <ng-container *ngIf=\"searchRef\">\n      <div class=\"select-search\">\n        <teta-text-field [ngModel]=\"searchText\"\n                         (ngModelChange)=\"search($event)\"\n                         [placeholder]=\"'Поиск'\"\n                         [leftIconName]=\"'search'\"></teta-text-field>\n      </div>\n      <div class=\"list-divider\"></div>\n    </ng-container>\n    <ng-container *ngIf=\"!multiple && allowNull\">\n      <div class=\"list-item list-item_interactive\"\n           (click)=\"clear()\"\n           [class.list-item_active]=\"value==null\">\n        Не выбрано\n      </div>\n      <div class=\"list-divider\"></div>\n    </ng-container>\n    <ng-container *ngIf=\"!virtual\">\n      <div class=\"list-item list-item_interactive\"\n           *ngFor=\"let option of visibleOptions\"\n           [class.select-list-item_active]=\"itemSelected(option) && multiple\"\n           [class.list-item_active]=\"itemSelected(option)\"\n           [class.select-list-item]=\"multiple\"\n           (click)=\"clickOption(option, $event)\">\n        <teta-icon *ngIf=\"itemSelected(option) && multiple\" [name]=\"'tick'\" [palette]=\"'primary'\"></teta-icon>\n        <span [tetaHighlight]=\"searchText\">\n          <ng-container\n            *ngTemplateOutlet=\"optionDirective ? optionDirective.template : optionDefault; context: {$implicit: option, option: option}\">\n          </ng-container>\n        </span>\n      </div>\n    </ng-container>\n    <cdk-virtual-scroll-viewport *ngIf=\"virtual\"\n                                 [itemSize]=\"40\"\n                                 minBufferPx=\"200\"\n                                 maxBufferPx=\"600\">\n      <div class=\"select-list-item select-list-item_interactive\"\n           *cdkVirtualFor=\"let option of visibleOptions; templateCacheSize: 0;\"\n           [class.select-list-item_active]=\"itemSelected(option)\"\n           [tetaHighlight]=\"searchText\"\n           (click)=\"clickOption(option, $event)\">\n        <teta-icon *ngIf=\"itemSelected(option)\" [name]=\"'tick'\" [palette]=\"'primary'\" class=\"margin-left-2\"></teta-icon>\n        <div [tetaHighlight]=\"searchText\">\n          <ng-container\n            *ngTemplateOutlet=\"optionDirective ? optionDirective.template : optionDefault; context: {$implicit: option, option: option}\">\n          </ng-container>\n        </div>\n      </div>\n    </cdk-virtual-scroll-viewport>\n    <div class=\"row row_auto select-chip-field flex-wrap\" *ngIf=\"multiple && value?.length\">\n      <div *ngFor=\"let item of value\" class=\"chip\">\n        <teta-icon [name]=\"'closeCircle'\" (click)=\"removeItemClick(item, $event)\"></teta-icon>\n        {{getText(item)}}\n      </div>\n    </div>\n  </div>\n</teta-dropdown>\n\n<ng-template #optionDefault let-option>\n  {{getText(option)}}\n</ng-template>\n<ng-template #valueDefault let-value>\n  <div class=\"row_auto overflow-hidden text-overflow-ellipsis\" *ngIf=\"multiple\">\n    <ng-container\n      *ngFor=\"let item of value; let i = index\">{{getText(item) + (value.length === i + 1 ? '' : ', ') }}</ng-container>\n  </div>\n  <ng-container *ngIf=\"!multiple\">\n    <span class=\"row row_auto  overflow-hidden text-overflow-ellipsis\">{{getText(value)}}</span>\n  </ng-container>\n</ng-template>\n"
        },
        {
            "name": "SelectionCellComponent",
            "id": "component-SelectionCellComponent-67fcc4129cc28cd3d121773cb97e7672",
            "file": "projects/components/src/component/table/selection-cell/selection-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-selection-cell",
            "styleUrls": [
                "./selection-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableService } from '../service/table.service';\nimport { TableRow } from '../contract/table-row';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-selection-cell',\n  templateUrl: './selection-cell.component.html',\n  styleUrls: ['./selection-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectionCellComponent<T> implements OnInit, OnDestroy {\n  @Input() row: TableRow<T>;\n\n  @HostBinding('class.cell') private readonly tableCellClass = true;\n  selectedRows: TableRow<T>[] = [];\n\n  private _alive = true;\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {}\n\n  selectRow(value: boolean) {\n    if (value) {\n      this._svc.selectRow(this.row);\n    } else {\n      this._svc.deselectRow(this.row);\n    }\n  }\n\n  ngOnInit(): void {\n    this._svc.selectedRows\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((_) => {\n        this.selectedRows = _;\n        this._cdr.markForCheck();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./selection-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-checkbox [binary]=\"true\"\n               [noLabel]=\"true\"\n               [ngModel]=\"selectedRows?.indexOf(row) >= 0\"\n               (ngModelChange)=\"selectRow($event)\"></teta-checkbox>\n"
        },
        {
            "name": "SelectionHeadCellComponent",
            "id": "component-SelectionHeadCellComponent-fbafa0149839254e89352c6f6bcbf26d",
            "file": "projects/components/src/component/table/selection-head-cell/selection-head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-selection-head-cell",
            "styleUrls": [
                "./selection-head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__group'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__group",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableService } from '../service/table.service';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-selection-head-cell',\n  templateUrl: './selection-head-cell.component.html',\n  styleUrls: ['./selection-head-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectionHeadCellComponent<T> implements OnInit, OnDestroy {\n  @HostBinding('class.table-head__group') private readonly tableCellClass =\n    true;\n\n  private _alive = true;\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {}\n\n  selectAll(value: boolean) {\n    if (value) {\n      this._svc.selectAll();\n    } else {\n      this._svc.deselectAll();\n    }\n  }\n\n  allSelected() {\n    return this._svc.allRowsSelected();\n  }\n\n  ngOnInit(): void {\n    this._svc.selectedRows\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((_) => {\n        this._cdr.markForCheck();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./selection-head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-checkbox [binary]=\"true\"\n               [allowNull]=\"true\"\n               [noLabel]=\"true\"\n               [ngModel]=\"allSelected()\"\n               (ngModelChange)=\"selectAll($event)\"></teta-checkbox>\n"
        },
        {
<<<<<<< Updated upstream
=======
            "name": "SeriesBaseComponent",
            "id": "component-SeriesBaseComponent-b9e106068fa24b4853e9938761fff7c5",
            "file": "projects/chart/src/chart/base/series-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Series<T>"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, Input, OnInit} from '@angular/core';\nimport {ChartService} from '../chart.service';\nimport {Series} from '../model/series';\nimport {BasePoint} from '../model/base-point';\n\n@Component({\n  template: ''\n})\nexport class SeriesBaseComponent<T extends BasePoint> implements OnInit {\n  @Input() series: Series<T>;\n  @Input() size: DOMRect;\n\n  constructor(protected svc: ChartService,\n              protected cdr: ChangeDetectorRef\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SeriesHostComponent",
            "id": "component-SeriesHostComponent-7b5ea7648d3eb53251ae495f75f0e34d",
            "file": "projects/chart/src/chart/chart-container/series-host/series-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-series-host]",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Series<T>"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  Input,\n  OnInit,\n  SimpleChanges,\n  ViewContainerRef\n} from '@angular/core';\nimport {SeriesBaseComponent} from '../../base/series-base.component';\nimport {LineSeriesComponent} from '../line-series/line-series.component';\nimport {Series} from '../../model/series';\nimport {BasePoint} from '../../model/base-point';\n\n@Component({\n  selector: '[teta-series-host]',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeriesHostComponent<T extends BasePoint> implements OnInit {\n  @Input() series: Series<T>;\n  @Input() size: DOMRect;\n\n  private _init = false;\n  private _componentRef: ComponentRef<any>;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {\n  }\n\n  ngOnInit(): void {\n    if (!SeriesBaseComponent.isPrototypeOf(this.series.component)) {\n      this.series.component = LineSeriesComponent;\n    }\n    this._componentRef = this.viewContainerRef.createComponent(this.series.component);\n    this._componentRef.instance.series = this.series;\n    this._init = true;\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      this._init &&\n      changes.hasOwnProperty('series')\n    ) {\n      this._componentRef.instance.series = this.series;\n      this._componentRef.injector.get(ChangeDetectorRef).markForCheck();\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
>>>>>>> Stashed changes
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-afa619eb97adf031ed85001a6cefae36",
            "file": "projects/components/src/component/sidebar/sidebar/sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | string[]"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "SidebarPosition.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SidebarPosition"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "sidebarPosition",
                    "defaultValue": "SidebarPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "zIndex",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.z-index'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOpen",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.z-index",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { SidebarPosition } from '../sidebar-position.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'teta-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('sidebar', [\n      transition('void => *', [\n        style({ opacity: '0' }),\n        animate(300, style({ opacity: '1' })),\n      ]),\n      transition('* => void', [animate(300, style({ opacity: '0' }))]),\n    ]),\n  ],\n})\nexport class SidebarComponent implements OnInit {\n  @Input() position: SidebarPosition = SidebarPosition.left;\n  @Input() backdrop: boolean;\n  @Input() open: boolean;\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Input() className: string | string[];\n\n  @HostBinding('style.z-index') zIndex = 10;\n\n  sidebarPosition = SidebarPosition;\n\n  constructor() {}\n\n  setOpen(value: boolean) {\n    this.open = value;\n    this.openChange.emit(this.open);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"backdrop && open\"\n     [@sidebar]\n     (click)=\"setOpen(false)\"\n     class=\"sidebar-backdrop\"></div>\n<div class=\"sidebar\"\n     [@sidebar]\n     [ngClass]=\"className\"\n     [class.sidebar-top]=\"position === sidebarPosition.top\"\n     [class.sidebar-bottom]=\"position === sidebarPosition.bottom\"\n     [class.sidebar-left]=\"position === sidebarPosition.left\"\n     [class.sidebar-right]=\"position === sidebarPosition.right\"\n     *ngIf=\"open\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "StringCellComponent",
            "id": "component-StringCellComponent-c4ae7b5a91c752537466803f867d1e43",
            "file": "projects/components/src/component/table/default/string-cell/string-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-cell",
            "styleUrls": [
                "./string-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "svc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { CellComponentBase } from '../../base/cell-component-base';\nimport { TableColumn } from '../../contract/table-column';\nimport { TableRow } from '../../contract/table-row';\nimport { TableService } from '../../service/table.service';\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\n\n@Component({\n  selector: 'teta-string-cell',\n  templateUrl: './string-cell.component.html',\n  styleUrls: ['./string-cell.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StringCellComponent<T>\n  extends CellComponentBase<T>\n  implements OnInit\n{\n  @Input() override column: TableColumn;\n  @Input() override row: TableRow<T>;\n  @ViewChild('input', { static: false }) input: ElementRef;\n\n  constructor(public override svc: TableService<T>, public override cdr: ChangeDetectorRef) {\n    super(svc, cdr);\n  }\n\n  setValue(): void {\n    this.valueChanged();\n  }\n\n  override ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\n    if (initiator?.column.name === this.column.name) {\n      this.cdr.markForCheck();\n      setTimeout(() => {\n        this.input.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  stopEdit(): void {\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\n  {{row.data[column.name]}}\n</span>\n<input #input\n       *ngIf=\"edit\"\n       type=\"text\"\n       class=\"input row_auto border-radius-0\"\n       (blur)=\"setValue()\"\n       [ngModel]=\"row.data[column.name]\"\n       (ngModelChange)=\"row.data[column.name]=$event\"/>\n\n"
        },
        {
            "name": "StringFilterComponent",
            "id": "component-StringFilterComponent-d3c14314e6c76490fe61176125faa2cf",
            "file": "projects/components/src/component/filter/string-filter/string-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-filter",
            "styleUrls": [
                "./string-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilter",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "StringFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { StringFilter } from '../contarct/string-filter';\nimport { FilterState } from '../contarct/filter-state';\nimport { FilterBase } from '../base/filter-base';\nimport { FilterComponentBase } from '../base/filter-component-base';\nimport { FilterItem } from '../contarct/filter-item';\nimport { IIdName } from '../../../common/contract/i-id-name';\n\n@Component({\n  selector: 'teta-string-filter',\n  templateUrl: './string-filter.component.html',\n  styleUrls: ['./string-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StringFilterComponent\n  extends FilterComponentBase\n  implements OnInit\n{\n  @Input() column: FilterItem;\n  @Input() filterOptions: IIdName<any>[] = [];\n  @Output() filterChanged: EventEmitter<FilterBase> =\n    new EventEmitter<FilterBase>();\n\n  filter: StringFilter;\n  state$: FilterState;\n\n  @Input()\n  set state(val: FilterState) {\n    this.state$ = val;\n    this.filter = this.getFilter();\n    this.changeDetector.detectChanges();\n  }\n\n  get state() {\n    return this.state$;\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {}\n\n  setFilter() {\n    this.filterChanged.emit(this.filter);\n  }\n\n  private getFilter(): StringFilter {\n    let filter = this.state.stringFilters.find(\n      (f) => f.field === this.column.filterField\n    );\n    if (!filter) {\n      filter = this.state.addStringFilter(\n        new StringFilter({\n          value: '',\n          field: this.column.filterField,\n          type: this.column.stringFilterType,\n          name: this.column.name,\n        })\n      );\n    }\n    filter.type = this.column.stringFilterType;\n    return filter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"padding-3\">\n  <teta-input [label]=\"'Поиск'\">\n    <input type=\"text\" class=\"input\" [(ngModel)]=\"filter.value\" (blur)=\"setFilter()\" />\n  </teta-input>\n</div>\n\n"
        },
        {
            "name": "StringItemDefaultComponent",
            "id": "component-StringItemDefaultComponent-bf662bf5ca720df299a5cd89ffd9fef0",
            "file": "projects/components/src/component/property-grid/default/string-item-default/string-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-item-default",
            "styleUrls": [
                "./string-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'teta-string-item-default',\n  templateUrl: './string-item-default.component.html',\n  styleUrls: ['./string-item-default.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StringItemDefaultComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>string-item-default works!</p>\n"
        },
        {
            "name": "SwitchButtonComponent",
            "id": "component-SwitchButtonComponent-04383ebd9abd5e78a5d3846197bad02e",
            "file": "projects/components/src/component/switch/switch-button/switch-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-switch-button",
            "styleUrls": [
                "./switch-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "svcValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { SwitchService } from '../switch.service';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-switch-button',\n  templateUrl: './switch-button.component.html',\n  styleUrls: ['./switch-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwitchButtonComponent implements OnInit, OnDestroy {\n  @Input() value: any;\n  @Input() class: string;\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [this.class, 'switch-button'];\n    if (\n      this.svcValue === this.value ||\n      (this.svcValue instanceof Array && this.svcValue.indexOf(this.value) >= 0)\n    ) {\n      result.push('switch-button_active');\n    }\n    return result.join(' ');\n  }\n\n  private svcValue: any;\n  private _alive = true;\n\n  constructor(private svc: SwitchService, private cdr: ChangeDetectorRef) {\n    this.svc.value.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\n      this.svcValue = _;\n      this.cdr.markForCheck();\n    });\n  }\n\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\n    this.svc.setValue(this.value);\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./switch-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-d0013e6cfd2e2282308bd8433fa5f0aa",
            "file": "projects/components/src/component/switch/switch/switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SWITCH_CONTROL_VALUE_ACCESSOR"
                },
                {
                    "name": "SwitchService"
                }
            ],
            "selector": "teta-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "switchClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.switch'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.switch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  HostBinding,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SwitchService } from '../switch.service';\nimport { filter, takeWhile } from 'rxjs/operators';\n\nexport const SWITCH_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SwitchComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-switch',\n  templateUrl: './switch.component.html',\n  styleUrls: ['./switch.component.scss'],\n  providers: [SWITCH_CONTROL_VALUE_ACCESSOR, SwitchService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwitchComponent\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  @HostBinding('class.switch') switchClass = true;\n\n  private _alive = true;\n  private _value: any;\n\n  constructor(private svc: SwitchService, private cdr: ChangeDetectorRef) {\n    this.svc.value\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((_) => _ !== this._value)\n      )\n      .subscribe((_) => {\n        this.onChange(_);\n        this._value = _;\n      });\n  }\n\n  writeValue(model: any) {\n    this._value = model;\n    this.svc.setValue(model);\n    this.cdr.markForCheck();\n  }\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-8c8095a09404baa3b55558caff67f3db",
            "file": "projects/components/src/component/tabs/tab/tab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allows toggling disabled state of a given state. Disabled tabs can't be selected.",
                    "description": "<p>Allows toggling disabled state of a given state. Disabled tabs can&#39;t be selected.</p>\n",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "id",
                    "defaultValue": "`teta-tab-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Unique tab identifier. Must be unique for the entire document for proper accessibility support.",
                    "description": "<p>Unique tab identifier. Must be unique for the entire document for proper accessibility support.</p>\n",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Simple (string only) title. Use the \"ItskTabTitleDirective\" directive for more complex use-cases.",
                    "description": "<p>Simple (string only) title. Use the &quot;ItskTabTitleDirective&quot; directive for more complex use-cases.</p>\n",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabContentDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "titleTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabTitleDirective",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabTitleDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Input,\n  QueryList,\n} from '@angular/core';\nimport { TabContentDirective } from '../tab-content.directive';\nimport { TabTitleDirective } from '../tab-title.directive';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'teta-tab',\n  template: '',\n  styleUrls: ['./tab.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabComponent implements AfterContentChecked {\n  /**\n   * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n   */\n  @Input() id = `teta-tab-${nextId++}`;\n  /**\n   * Simple (string only) title. Use the \"ItskTabTitleDirective\" directive for more complex use-cases.\n   */\n  @Input() title: string;\n  /**\n   * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n   */\n  @Input() disabled = false;\n\n  @ContentChild(TabTitleDirective, { static: false })\n  titleTpl: TabTitleDirective;\n  @ContentChild(TabContentDirective, { static: false })\n  contentTpl: TabContentDirective;\n  // titleTpl: TabTitleDirective | null;\n  // contentTpl: TabContentDirective | null;\n\n  ngAfterContentChecked(): void {\n    // this.titleTpl = this.titleTemplates.first;\n    // this.contentTpl = this.contentTemplates.first;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentChecked"
            ]
        },
        {
            "name": "TableBodyComponent",
            "id": "component-TableBodyComponent-93eeb6f58ac5604e22792a4fb2e1fbe6",
            "file": "projects/components/src/component/table/table-body/table-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-body",
            "styleUrls": [
                "./table-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "TableRow<T>"
                },
                {
                    "name": "additionalComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Type<DetailComponentBase<T>>"
                },
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "grouping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "groupRowComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "Type<GroupRowComponentBase<T>>"
                },
                {
                    "name": "openLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "rowClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "function"
                },
                {
                    "name": "rowHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number"
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "SelectType"
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatasource<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "gridTemplateColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "locked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "selectTypeEnum",
                    "defaultValue": "SelectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "tableBodyClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-body'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "unlocked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "viewport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'viewport', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createAdapter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAggregateText",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAggregateValue",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLockedGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMax",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMin",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpan",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSum",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetAdapter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "setActiveRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackColumns",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackRow",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-body",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Type,\n  ViewChild,\n} from '@angular/core';\nimport { TableRow } from '../contract/table-row';\nimport { TableColumn } from '../contract/table-column';\nimport { GroupRowComponentBase } from '../base/group-row-component-base';\nimport { TableService } from '../service/table.service';\nimport { DetailComponentBase } from '../base/detail-component-base';\nimport { takeWhile } from 'rxjs/operators';\nimport { TableUtil } from '../util/table-util';\nimport { SelectType } from '../enum/select-type.enum';\nimport { combineLatest } from 'rxjs';\nimport { ArrayUtil } from '../../../common/util/array-util';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { AggregationType } from '../enum/aggregation-type.enum';\nimport { Datasource, IDatasource, SizeStrategy } from 'ngx-ui-scroll';\n\n@Component({\n  selector: 'teta-table-body',\n  templateUrl: './table-body.component.html',\n  styleUrls: ['./table-body.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableBodyComponent<T> implements OnInit, OnDestroy {\n  @Input() virtual: boolean;\n  @Input() activeRow: TableRow<T>;\n  @Input() rowHeight: number;\n  @Input() additionalComponent: Type<DetailComponentBase<T>>;\n  @Input() tree: boolean;\n  @Input() aggregate: boolean;\n  @Input() grouping: boolean;\n  @Input() groupRowComponent: Type<GroupRowComponentBase<T>>;\n  @Input() openLevels: number;\n  @Input() selectType: SelectType;\n  @Input() rowClass: (row: TableRow<T>, index?: number) => string;\n\n  @ViewChild('viewport', { static: false }) viewport: ElementRef;\n\n  @HostBinding('class.table-body') private readonly tableBodyClass = true;\n\n  set data(data: TableRow<T>[]) {\n    this._data = data;\n    if (!this.dataSource) {\n      this.createAdapter();\n    }\n    this.resetAdapter();\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  dict: IDictionary<IIdName<any>[]>;\n\n  gridTemplateColumns: string;\n  selectedRows: TableRow<T>[] = [];\n  locked: TableColumn[] = [];\n  unlocked: TableColumn[] = [];\n\n  selectTypeEnum = SelectType;\n  dataSource: IDatasource<TableRow<T>>;\n\n  private _columns: TableColumn[] = [];\n  private _alive = true;\n  private _data: TableRow<T>[];\n  private _hiddenColumns: string[] = [];\n  private _index: number;\n\n  set columns(columns: TableColumn[]) {\n    this._columns = columns;\n    this.locked = this._columns?.filter((_) => _.locked === true);\n    this.unlocked = this._columns?.filter((_) => _.locked === false);\n  }\n\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\n    combineLatest([this._svc.columns, this._svc.hiddenColumns])\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((values: [TableColumn[], string[]]) => {\n        const [columns, hiddenColumns] = values;\n        this._hiddenColumns = hiddenColumns;\n        this.columns = ArrayUtil.flatten(columns, 'columns', true).filter(\n          (_) => this._hiddenColumns.indexOf(_.name) < 0\n        );\n        this.gridTemplateColumns = TableUtil.getGridTemplateColumns(\n          this.columns.sort((a, b) => Number(b.locked) - Number(a.locked))\n        );\n        this._cdr.markForCheck();\n      });\n\n    this._svc.displayData.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\n      this.data = _;\n      this._cdr.markForCheck();\n    });\n\n    this._svc.dict.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\n      this.dict = _;\n      this._cdr.markForCheck();\n    });\n\n    this._svc.scrollIndex\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe(async (_) => {\n        if (this.viewport && this.dataSource && _ !== null) {\n          await this.dataSource.adapter.relax();\n          await this.dataSource.adapter.fix({\n            scrollPosition: (_ + 1) * 24,\n          });\n        }\n        this._cdr.markForCheck();\n      });\n\n    this._svc.activeRow\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe(async (_) => {\n        this.activeRow = _;\n        this._cdr.markForCheck();\n      });\n  }\n\n  setActiveRow(row: TableRow<T>) {\n    this._svc.setActiveRow(row);\n  }\n\n  getData = (index, count, success) => {\n    const data = [];\n    if (this.data?.length > 0) {\n      const start = Math.max(0, index);\n      const end = Math.min(index + count - 1, this.data.length - 1);\n      for (let i = start; i <= end; i++) {\n        data.push(this.data[i]);\n      }\n    }\n    return success(data);\n  };\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n\n  getAggregateValue(column: TableColumn): number {\n    if (column.aggregate === AggregationType.sum) {\n      return this.getSum(column.name);\n    }\n    if (column.aggregate === AggregationType.avg) {\n      return this.getSum(column.name) / this.data.length;\n    }\n    if (column.aggregate === AggregationType.min) {\n      return this.getMin(column.name);\n    }\n    if (column.aggregate === AggregationType.max) {\n      return this.getMax(column.name);\n    }\n  }\n\n  getAggregateText(column: TableColumn): string {\n    if (column.aggregate === AggregationType.sum) {\n      return 'Сумма=';\n    }\n    if (column.aggregate === AggregationType.avg) {\n      return 'Среднее=';\n    }\n    if (column.aggregate === AggregationType.min) {\n      return 'Мин=';\n    }\n    if (column.aggregate === AggregationType.max) {\n      return 'Макс=';\n    }\n    return '';\n  }\n\n  getSpan(): string {\n    if (this.locked?.length > 0) {\n      let span = this.locked.length;\n      if (this.selectType !== SelectType.none) {\n        span += 1;\n      }\n      return `span ${span}`;\n    }\n    return null;\n  }\n\n  getTemplateColumns() {\n    let template = this.gridTemplateColumns;\n    if (this.selectType !== SelectType.none) {\n      template = `48px ${template}`;\n    }\n    return template;\n  }\n\n  getLockedGridTemplateColumns(columns: TableColumn[]) {\n    let template = TableUtil.getGridTemplateColumns(columns);\n    if (this.selectType !== SelectType.none) {\n      template = `48px ${template}`;\n    }\n    return template;\n  }\n\n  trackRow(index: number, row: TableRow<T>): any {\n    return row.hash;\n  }\n\n  trackColumns(index: number, column: TableColumn): any {\n    return column.name;\n  }\n\n  private getSum(columnName) {\n    return this.data?.reduce((accum, current) => {\n      const val = parseFloat(current.data[columnName]);\n      return accum + (isNaN(val) ? 0 : val);\n    }, 0);\n  }\n\n  private getMin(columnName) {\n    return this.data?.reduce(\n      (accum, current) =>\n        accum != null && accum <= current.data[columnName]\n          ? accum\n          : current.data[columnName],\n      null\n    );\n  }\n\n  private getMax(columnName) {\n    return this.data?.reduce(\n      (accum, current) =>\n        accum != null && accum >= current.data[columnName]\n          ? accum\n          : current.data[columnName],\n      null\n    );\n  }\n\n  private async resetAdapter() {\n    await this.dataSource.adapter.relax();\n    await this.dataSource.adapter.reset({\n      get: this.getData,\n      settings: {\n        minIndex: 0,\n        maxIndex: this._data?.length ? this._data.length - 1 : 0,\n        startIndex: 0,\n        itemSize: 24,\n        sizeStrategy: SizeStrategy.Constant,\n      },\n    });\n    await this.dataSource.adapter.check();\n  }\n\n  private createAdapter() {\n    this.dataSource = new Datasource<TableRow<T>>({\n      get: this.getData,\n      settings: {\n        startIndex: 0,\n        bufferSize: 2,\n        sizeStrategy: SizeStrategy.Constant,\n        itemSize: 24,\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-body.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "TableRow<T>[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "TableRow<T>[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 79,
                        "jsdoctags": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "columns",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 85
                    }
                }
            },
            "templateData": "<div #viewport class=\"table-body-container table-body-container-virtual\"\n     *ngIf=\"virtual\"\n     [style.grid-template-columns]=\"gridTemplateColumns\"\n     style=\"height: 100%;\">\n  <ng-container\n    *uiScroll=\"let row of dataSource; let rowIndex = index; let last = last;\" style=\"display: flex;flex-grow: 1\">\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {row: row, rowIndex: rowIndex}\"></ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"aggregate\">\n    <ng-container *ngTemplateOutlet=\"aggTemplate;\"></ng-container>\n  </ng-container>\n</div>\n\n<div *ngIf=\"!virtual\"\n     class=\"table-body-container\"\n     [style.grid-template-rows]=\"rowHeight + 'px'\"\n     [style.grid-auto-rows]=\"rowHeight + 'px'\"\n     [style.grid-template-columns]=\"getTemplateColumns()\">\n  <ng-container *ngFor=\"let row of data; let rowIndex = index; trackBy: trackRow;\">\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {row: row, rowIndex: rowIndex}\"></ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"aggregate\">\n    <ng-container *ngTemplateOutlet=\"aggTemplate;\"></ng-container>\n  </ng-container>\n</div>\n\n<ng-template #bodyTemplate let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <div class=\"table-row\"\n       (click)=\"setActiveRow(row)\"\n       [attr.data-row]=\"rowIndex\"\n       [ngClass]=\"rowClass ? rowClass(row, rowIndex) : ''\"\n       [class.table-row_virtual]=\"virtual\"\n       [style.grid-template-columns]=\"virtual ? getTemplateColumns() : ''\"\n       [class.table-row_active]=\"row === activeRow || selectedRows.indexOf(row) >= 0\">\n    <ng-container *ngIf=\"!grouping\">\n      <div class=\"table-row_locked\"\n           *ngIf=\"locked.length > 0\"\n           [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\n           [style.zIndex]=\"row === activeRow ? 1 : 'unset'\"\n           [style.grid-column-end]=\"getSpan()\">\n        <teta-selection-cell *ngIf=\"selectType !== selectTypeEnum.none && locked.length\"\n                             [row]=\"row\"></teta-selection-cell>\n        <teta-cell\n          *ngFor=\"let column of locked; let colIndex = index; trackBy: trackColumns;\"\n          [attr.data-row]=\"rowIndex\"\n          [attr.data-column]=\"column.name\"\n          [column]=\"column\"\n          [filterOptions]=\"dict[column.name]\"\n          [dict]=\"dict\"\n          [row]=\"row\"\n          [ngClass]=\"column.cellClass\"\n          [attr.tabindex]=\"0\"\n        ></teta-cell>\n      </div>\n      <teta-selection-cell *ngIf=\"selectType !== selectTypeEnum.none && locked.length < 1\"\n                           [row]=\"row\"></teta-selection-cell>\n      <teta-cell\n        *ngFor=\"let column of unlocked; let colIndex = index; trackBy: trackColumns;\"\n        [attr.data-row]=\"rowIndex\"\n        [attr.data-column]=\"column.name\"\n        [column]=\"column\"\n        [filterOptions]=\"dict[column.name]\"\n        [dict]=\"dict\"\n        [row]=\"row\"\n        [ngClass]=\"column.cellClass\"\n        [attr.tabindex]=\"0\"\n      ></teta-cell>\n    </ng-container>\n    <ng-container *ngIf=\"grouping\">\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #aggTemplate>\n  <div class=\"table-row\"\n       *ngIf=\"aggregate\"\n       [class.table-row_virtual]=\"virtual\"\n       [style.grid-template-columns]=\"virtual ? getTemplateColumns() : ''\">\n    <div class=\"table-row_locked\"\n         *ngIf=\"locked.length > 0\"\n         [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\n         [style.grid-column-end]=\"getSpan()\">\n      <div class=\"cell align-center justify-content-center\">\n        <teta-icon [name]=\"'sumColor'\"></teta-icon>\n      </div>\n      <div class=\"cell cell-component justify-content-end\"\n           *ngFor=\"let column of locked; let colIndex = index; trackBy: trackColumns;\"\n           [attr.data-column]=\"column.name\"\n           [ngClass]=\"column.cellClass\"\n           [attr.tabindex]=\"0\">\n        <span class=\"cell-text cell-text_numeric font-title-3\">\n          {{getAggregateText(column)}}:\n          {{getAggregateValue(column) | tetaNumber : 2}}\n        </span>\n      </div>\n    </div>\n    <div class=\"cell align-center justify-content-center\"\n         *ngIf=\"selectType !== selectTypeEnum.none && locked.length < 1\">\n      <teta-icon [name]=\"'sumColor'\"></teta-icon>\n    </div>\n    <div class=\"cell cell-component justify-content-end\"\n         *ngFor=\"let column of unlocked; let colIndex = index; trackBy: trackColumns;\"\n         [attr.data-column]=\"column.name\"\n         [ngClass]=\"column.cellClass\"\n         [attr.tabindex]=\"0\">\n      <span class=\"cell-text cell-text_numeric font-title-3\">\n        {{getAggregateText(column)}}\n        {{getAggregateValue(column) | tetaNumber : 2}}\n      </span>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-1f16b1ec13dd9521fcbc6ad0d08245a2",
            "file": "projects/components/src/component/table/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TableService"
                }
            ],
            "selector": "teta-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "TableRow<T>"
                },
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean"
                },
                {
                    "name": "cellEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean | "
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "TableColumn[]"
                },
                {
                    "name": "contextMenuConfig",
                    "defaultValue": "new TableContextMenuConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "TableContextMenuConfig"
                },
                {
                    "name": "cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string"
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "T[]"
                },
                {
                    "name": "detailComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "Type<DetailComponentBase<T>>"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "editEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EditEvent"
                },
                {
                    "name": "editType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EditType"
                },
                {
                    "name": "grouping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean"
                },
                {
                    "name": "groupRowComponent",
                    "defaultValue": "GroupRowComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "Type<GroupRowComponentBase<T>>"
                },
                {
                    "name": "openLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "number"
                },
                {
                    "name": "rowClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "function"
                },
                {
                    "name": "rowEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean | "
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "number"
                },
                {
                    "name": "scrollToIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "number"
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "TableRow<T>[]"
                },
                {
                    "name": "selectType",
                    "defaultValue": "SelectType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "SelectType"
                },
                {
                    "name": "showHeadCellMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": ""
                },
                {
                    "name": "trackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "function"
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "activeRowChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<TableRow<T>>"
                },
                {
                    "name": "addRow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "EventEmitter"
                },
                {
                    "name": "bodyLeft",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellClick",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellDoubleClick",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellEditEnd",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellEditStart",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellFocus",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellKeyUp",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteRows",
                    "defaultValue": "new EventEmitter<TableRow<T>[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter"
                },
                {
                    "name": "pasteRows",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowEditEnd",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowEditStart",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowLeft",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<TableRow[]>"
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<FilterState>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter<FilterState>"
                },
                {
                    "name": "tableService",
                    "defaultValue": "new EventEmitter<TableService<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_bodyElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_headElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "contextMenuTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 384,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedRowsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "showContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "tableClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "contextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'contextmenu', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copy",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dblclick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dblclick', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusIn",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusin', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromClipboard",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 425,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCell",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCoordinates",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICellEvent | null",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 388,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getVisibleColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hidden",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hidden",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClickOutsideAnyRow",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRow",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pasteData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "rowAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditRowOrCell",
                    "args": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toClipboardString",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 411,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230
                },
                {
                    "name": "dblclick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 196
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 170
                },
                {
                    "name": "focusin",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 185
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 224
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 207
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  Type,\n  ViewChild,\n} from '@angular/core';\nimport { TableRow } from '../contract/table-row';\nimport { TableService } from '../service/table.service';\nimport { TableColumn } from '../contract/table-column';\nimport { FilterState } from '../../filter/contarct/filter-state';\nimport { DetailComponentBase } from '../base/detail-component-base';\nimport { ICellEvent } from '../contract/i-cell-event';\nimport { ICellCoordinates } from '../contract/i-cell-coordinates';\nimport { GroupRowComponentBase } from '../base/group-row-component-base';\nimport { GroupRowComponent } from '../default/group-row/group-row.component';\nimport { filter, takeWhile, withLatestFrom } from 'rxjs/operators';\nimport { EditType } from '../enum/edit-type.enum';\nimport { EditEvent } from '../enum/edit-event.enum';\nimport { SelectType } from '../enum/select-type.enum';\nimport { IIdName } from '../../../common/contract/i-id-name';\nimport { IDictionary } from '../../../common/contract/i-dictionary';\nimport { of } from 'rxjs';\nimport { ArrayUtil } from '../../../common/util/array-util';\nimport { PositionUtil } from '../../../common/util/position-util';\nimport { Align } from '../../../common/enum/align.enum';\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\nimport { FilterType } from '../../filter/enum/filter-type.enum';\nimport { TableContextMenuConfig } from '../contract/table-context-menu-config';\n\n@Component({\n  selector: 'teta-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [TableService],\n})\nexport class TableComponent<T>\n  implements OnInit, OnDestroy, AfterViewInit, OnChanges\n{\n  @Input() data: T[] = [];\n  @Input() columns: TableColumn[] = [];\n  @Input() dict: IDictionary<IIdName<any>[]>;\n\n  @Input()\n  set state(state: FilterState) {\n    this._state = state;\n  }\n\n  @Input() rowHeight = 24;\n  @Input() cookieName: string;\n  @Input() virtual: boolean;\n  @Input() detailComponent: Type<DetailComponentBase<T>>;\n  @Input() activeRow: TableRow<T>;\n  @Input() selectedRows: TableRow<T>[];\n  @Input() selectType: SelectType = SelectType.none;\n  @Input() aggregate: boolean;\n  @Input() grouping: boolean;\n  @Input() groupRowComponent: Type<GroupRowComponentBase<T>> =\n    GroupRowComponent;\n  @Input() openLevels: number;\n  @Input() tree: boolean;\n  @Input() trackBy: (row: TableRow<T>) => any;\n  @Input() editType: EditType;\n  @Input() editEvent: EditEvent;\n  @Input() rowEditable: boolean | ((row: TableRow<T>) => boolean);\n  @Input() cellEditable: boolean | ((row: ICellCoordinates<T>) => boolean);\n  @Input() rowClass: (row: TableRow<T>, index?: number) => string;\n\n  @Input() set scrollToIndex(index: number) {\n    this._svc.scrollToIndex(index);\n  }\n\n  @Input() contextMenuConfig: TableContextMenuConfig =\n    new TableContextMenuConfig();\n\n  @Input() showHeadCellMenu = true;\n\n  @Output()\n  stateChange: EventEmitter<FilterState> = new EventEmitter<FilterState>();\n  @Output() bodyLeft = new EventEmitter<TableRow<T>>();\n  @Output() activeRowChange: EventEmitter<TableRow<T>> = new EventEmitter();\n  @Output() selectedRowsChange: EventEmitter<TableRow<T>[]> =\n    new EventEmitter();\n  @Output() rowLeft = new EventEmitter<TableRow<T>>();\n  @Output() rowEditStart = new EventEmitter<TableRow<T>>();\n  @Output() rowEditEnd = new EventEmitter<TableRow<T>>();\n  @Output() cellClick = new EventEmitter<ICellEvent<T>>();\n  @Output() cellDoubleClick = new EventEmitter<ICellEvent<T>>();\n  @Output() cellFocus = new EventEmitter<ICellEvent<T>>();\n  @Output() cellEditStart = new EventEmitter<ICellCoordinates<T>>();\n  @Output() cellEditEnd = new EventEmitter<ICellCoordinates<T>>();\n  @Output() valueChange = new EventEmitter<ICellCoordinates<T>>();\n  @Output() cellKeyUp = new EventEmitter<ICellEvent<T>>();\n\n  @Output() pasteRows = new EventEmitter<any[]>();\n  @Output() addRow = new EventEmitter<void>();\n  @Output() deleteRows = new EventEmitter<TableRow<T>[]>();\n  @Output() tableService = new EventEmitter<TableService<T>>();\n\n  @ViewChild('contextMenu', { static: true }) menu: ElementRef;\n  @HostBinding('class.table') private readonly tableClass = true;\n\n  showContextMenu: boolean;\n  selectedRowsList: TableRow<T>[];\n  contextMenuTarget: ICellCoordinates<T>;\n\n  private _alive = true;\n  private _bodyElement: HTMLElement;\n  private _headElement: HTMLElement;\n\n  private _state: FilterState;\n\n  constructor(private _svc: TableService<T>, private _elementRef: ElementRef) {\n    this._svc.state\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((state) => state !== this._state)\n      )\n      .subscribe((state: FilterState) => this.stateChange.next(state));\n\n    this._svc.editCellStart\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((item: ICellCoordinates<T>) => this.cellEditStart.emit(item));\n\n    this._svc.editCellStop\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((item: ICellCoordinates<T>) => this.cellEditEnd.emit(item));\n\n    this._svc.editRowStart\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((item: ICellCoordinates<T>) =>\n        this.rowEditStart.emit(item?.row)\n      );\n\n    this._svc.editRowStop\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((item: ICellCoordinates<T>) =>\n        this.rowEditEnd.emit(item?.row)\n      );\n\n    this._svc.selectedRows\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((items: TableRow<T>[]) => {\n        this.selectedRowsList = items;\n        this.selectedRowsChange.emit(items);\n      });\n\n    this._svc.activeRow\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((item: TableRow<T>) => this.activeRowChange.emit(item));\n\n    this._svc.valueChanged\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((coordinates: ICellCoordinates<T>) => {\n        this.valueChange.emit(coordinates);\n      });\n  }\n\n  @HostListener('document:click', ['$event']) handleClickOutsideAnyRow(\n    event: MouseEvent\n  ) {\n    const coordinates = this.getCoordinates(event);\n    if (coordinates) {\n      this.cellClick.emit(coordinates);\n      if (this.editEvent === EditEvent.click) {\n        this.startEditRowOrCell(coordinates);\n      }\n    }\n    if (!this.isRow(event.target as HTMLElement)) {\n      this._svc.startEditRow(null);\n    }\n  }\n\n  @HostListener('focusin', ['$event']) focusIn(event: any) {\n    const coordinates = this.getCoordinates(event);\n    if (coordinates) {\n      this.cellFocus.emit(coordinates);\n      if (this.editEvent === EditEvent.focus) {\n        this.startEditRowOrCell(coordinates);\n      }\n    }\n  }\n\n  @HostListener('dblclick', ['$event'])\n  dblclick(event: MouseEvent) {\n    const coordinates = this.getCoordinates(event);\n    if (coordinates) {\n      this.cellDoubleClick.emit(coordinates);\n      if (this.editEvent === EditEvent.doubleClick) {\n        this.startEditRowOrCell(coordinates);\n      }\n    }\n  }\n\n  @HostListener('window:keyup', ['$event'])\n  keyup(event: KeyboardEvent) {\n    const coordinates = this.getCoordinates(event);\n    if (coordinates) {\n      this.cellKeyUp.emit(coordinates);\n    }\n    switch (event.key) {\n      case 'Enter':\n        this._svc.startEditRow(null);\n        break;\n      case 'Escape':\n        this._svc.startEditRow(null);\n        break;\n      default:\n        break;\n    }\n  }\n\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent) {\n    if (event.button === 2) {\n      event.preventDefault();\n    }\n  }\n\n  @HostListener('contextmenu', ['$event']) contextMenu(event: MouseEvent) {\n    if (\n      this.getSelectedText() ||\n      this.contextMenuConfig?.contextMenu === false\n    ) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.contextMenuTarget = this.getCoordinates(event);\n    this.showContextMenu = true;\n    this.setPosition(event);\n  }\n\n  rowAdd() {\n    this.addRow.emit();\n    this.contextMenuTarget = null;\n    this.showContextMenu = false;\n  }\n\n  copy(rows: TableRow<T>[]) {\n    of(1)\n      .pipe(withLatestFrom(this._svc.columns, this._svc.hiddenColumns))\n      .subscribe((data: [number, TableColumn[], string[]]) => {\n        const [, columns, hidden] = data;\n        navigator.clipboard.writeText(\n          this.toClipboardString(rows, this.getVisibleColumns(columns, hidden))\n        );\n        this.contextMenuTarget = null;\n        this.showContextMenu = false;\n      });\n  }\n\n  delete(rows: TableRow<T>[]) {\n    this.deleteRows.emit(rows);\n    this.contextMenuTarget = null;\n    this.showContextMenu = false;\n  }\n\n  async pasteData() {\n    const result = await navigator.clipboard.readText();\n    of(1)\n      .pipe(withLatestFrom(this._svc.columns, this._svc.hiddenColumns))\n      .subscribe((data: [number, TableColumn[], string[]]) => {\n        const [, columns, hidden] = data;\n        this.pasteRows.emit(\n          this.fromClipboard(result, this.getVisibleColumns(columns, hidden))\n        );\n      });\n    this.contextMenuTarget = null;\n    this.showContextMenu = false;\n  }\n\n  ngOnInit(): void {\n    this._svc.restoreState();\n    this._svc.restoreHiddenColumns();\n    this.tableService.emit(this._svc);\n  }\n\n  ngAfterViewInit(): void {\n    this._headElement =\n      this._elementRef.nativeElement.querySelector('.table-head');\n    this._bodyElement = this._elementRef.nativeElement.querySelector(\n      '.table-body-container'\n    );\n    this._bodyElement.addEventListener('scroll', this.onScroll);\n  }\n\n  ngOnDestroy(): void {\n    this._alive = false;\n    this._bodyElement.removeEventListener('scroll', this.onScroll);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('editType')) {\n      this._svc.editType = this.editType;\n    }\n    if (changes.hasOwnProperty('selectType')) {\n      this._svc.selectType = this.selectType;\n    }\n    if (changes.hasOwnProperty('selectedRows')) {\n      this._svc.selectRows(this.selectedRows);\n    }\n    if (changes.hasOwnProperty('rowEditable')) {\n      this._svc.rowEditable = this.rowEditable;\n    }\n    if (changes.hasOwnProperty('cellEditable')) {\n      this._svc.cellEditable = this.cellEditable;\n    }\n    if (changes.hasOwnProperty('cookieName')) {\n      this._svc.setCookieName(this.cookieName);\n    }\n    if (changes.hasOwnProperty('columns')) {\n      this._svc.setColumns(this.columns);\n    }\n    if (changes.hasOwnProperty('data')) {\n      this._svc.setData(this.data);\n      this._svc.selectRows([]);\n    }\n    if (changes.hasOwnProperty('dict')) {\n      this._svc.setDict(this.dict);\n    }\n  }\n\n  private startEditRowOrCell(coordinates: ICellCoordinates<T>): void {\n    if (this.editType === EditType.row) {\n      this._svc.startEditRow(coordinates);\n    }\n    if (this.editType === EditType.cell) {\n      this._svc.startEditCell(coordinates);\n    }\n  }\n\n  private getCell(element: HTMLElement): HTMLElement | null {\n    if (!element.parentElement) {\n      return null;\n    }\n    if (element.tagName.toLowerCase() === 'teta-cell') {\n      return element;\n    }\n    return this.getCell(element.parentElement);\n  }\n\n  private isRow(element: HTMLElement): boolean {\n    if (!element.parentElement) {\n      return false;\n    }\n    if (\n      this._elementRef.nativeElement.contains(element) &&\n      element.getAttribute('data-row')\n    ) {\n      return true;\n    }\n    return this.isRow(element.parentElement);\n  }\n\n  private getCoordinates(event: Event): ICellEvent<T> | null {\n    const cell = this.getCell(event.target as HTMLElement);\n    if (cell) {\n      const rowIndex = cell.getAttribute('data-row');\n      const columnName = cell.getAttribute('data-column');\n      if (rowIndex && columnName) {\n        const row = this._svc.getRowByIndex(rowIndex);\n        const column = this._svc.getColumnByName(columnName);\n        return {\n          row,\n          column: column ? column : new TableColumn(),\n          event,\n        };\n      }\n    }\n    return null;\n  }\n\n  private onScroll = () => {\n    this._headElement.scrollLeft = this._bodyElement.scrollLeft;\n  };\n\n  private getSelectedText() {\n    let text = '';\n    if (typeof window.getSelection != 'undefined') {\n      text = window.getSelection().toString();\n    }\n    return text;\n  }\n\n  private setPosition(event: MouseEvent) {\n    const position = PositionUtil.getPosition(\n      {\n        top: event.y,\n        bottom: event.y,\n        left: event.x,\n        right: event.x,\n      },\n      this.menu.nativeElement.getBoundingClientRect(),\n      Align.left,\n      VerticalAlign.auto\n    );\n    PositionUtil.setElementPosition(this.menu.nativeElement, position);\n  }\n\n  private toClipboardString(rows: TableRow<T>[], columns: TableColumn[]) {\n    return rows.reduce(\n      (res: string, currentRow: TableRow<T>, i: number) =>\n        `${res}${i === 0 ? '' : '\\n'}${columns.reduce(\n          (columnResult: string, column: TableColumn, j: number) =>\n            `${columnResult}${j === 0 ? '' : '\\t'}${\n              currentRow.data[column.name] ?? ''\n            }`,\n          ''\n        )}`,\n      ''\n    );\n  }\n\n  private fromClipboard(data: string, columns: TableColumn[]) {\n    const rows = data.split('\\n').filter((_) => _?.length > 0);\n    const result = rows.map((_) =>\n      _.replace('\\r', '').replace('\\n', '').split('\\t')\n    );\n    return result.map((row: string[]) =>\n      row.reduce((res, item, index) => {\n        let value: any = item;\n        if (\n          columns[index]?.filterType === FilterType.number ||\n          columns[index]?.filterType === FilterType.list\n        ) {\n          value = parseFloat(item);\n        }\n        if (columns[index]?.filterType === FilterType.boolean) {\n          value = Boolean(JSON.parse(item.toLowerCase()));\n        }\n        if (columns[index]) {\n          res[columns[index].name] = value;\n        }\n        return res;\n      }, {})\n    );\n  }\n\n  private getVisibleColumns(columns: TableColumn[], hidden: string[]) {\n    const visible = ArrayUtil.flatten(columns, 'columns', true).filter(\n      (_) => hidden.indexOf(_.name) < 0\n    );\n    return visible.sort((a, b) => Number(b.locked) - Number(a.locked));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 122,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit",
                "OnChanges"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "state",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "state",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "scrollToIndex": {
                    "name": "scrollToIndex",
                    "setSignature": {
                        "name": "scrollToIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "index",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "index",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"column column_auto\">\n  <teta-table-head [selectType]=\"selectType\" [showHeadCellMenu]=\"showHeadCellMenu\"></teta-table-head>\n  <teta-table-body\n    [aggregate]=\"aggregate\"\n    [virtual]=\"virtual\"\n    [activeRow]=\"activeRow\"\n    [additionalComponent]=\"detailComponent\"\n    [grouping]=\"grouping\"\n    [groupRowComponent]=\"groupRowComponent\"\n    [openLevels]=\"openLevels\"\n    [selectType]=\"selectType\"\n    [rowHeight]=\"rowHeight\"\n    [rowClass]=\"rowClass\"\n    [tree]=\"tree\"></teta-table-body>\n</div>\n\n<div #contextMenu\n     class=\"list shadow-1\"\n     style=\"position: fixed; z-index: 2;\"\n     [style.visibility]=\"showContextMenu ? 'visible ' : 'hidden'\"\n     [tetaClickOutside]=\"showContextMenu\"\n     (clickOutside)=\"showContextMenu = false\">\n  <ng-container *ngIf=\"contextMenuConfig?.add\">\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"rowAdd()\">\n      <teta-icon [name]=\"'add'\" [palette]=\"'text'\"></teta-icon>\n      Добавить строку\n    </div>\n    <div class=\"list-divider\"></div>\n  </ng-container>\n  <ng-container *ngIf=\"contextMenuConfig?.copy\">\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"copy(selectedRowsList)\"\n         *ngIf=\"selectedRowsList?.length > 0\">\n      <teta-icon [name]=\"'copySelected'\" [palette]=\"'text'\"></teta-icon>\n      Копировать выделенные строки\n    </div>\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"copy([contextMenuTarget.row])\"\n         *ngIf=\"contextMenuTarget\">\n      <teta-icon [name]=\"'copy'\" [palette]=\"'text'\"></teta-icon>\n      Копировать строку\n    </div>\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"pasteData()\">\n      <teta-icon [name]=\"'paste'\" [palette]=\"'text'\"></teta-icon>\n      Вставить\n    </div>\n    <div class=\"list-divider\"></div>\n  </ng-container>\n  <ng-container *ngIf=\"contextMenuConfig?.delete\">\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"delete(selectedRowsList)\"\n         *ngIf=\"selectedRowsList?.length > 0\">\n      <teta-icon [name]=\"'deleteSelected'\" [palette]=\"'text'\"></teta-icon>\n      Удалить выделенные строки\n    </div>\n    <div class=\"list-item list-item_interactive\"\n         (click)=\"delete([contextMenuTarget.row])\"\n         *ngIf=\"contextMenuTarget\">\n      <teta-icon [name]=\"'delete'\" [palette]=\"'text'\"></teta-icon>\n      Удалить строку\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "TableHeadComponent",
            "id": "component-TableHeadComponent-c990a5273d5f5d837403dffb63986048",
            "file": "projects/components/src/component/table/table-head/table-head.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-head",
            "styleUrls": [
                "./table-head.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-head.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SelectType"
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gridTemplateColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectTypeEnum",
                    "defaultValue": "SelectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tableHeadClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLockedGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpan",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "track",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "true"
                },
                {
                    "name": "style.grid-template-columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableColumn } from '../contract/table-column';\nimport { FilterState } from '../../filter/contarct/filter-state';\nimport { TableService } from '../service/table.service';\nimport { takeWhile } from 'rxjs/operators';\nimport { TableUtil } from '../util/table-util';\nimport { SelectType } from '../enum/select-type.enum';\nimport { combineLatest } from 'rxjs';\nimport { ArrayUtil } from '../../../common/util/array-util';\n\n@Component({\n  selector: 'teta-table-head',\n  templateUrl: './table-head.component.html',\n  styleUrls: ['./table-head.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableHeadComponent<T> implements OnInit, OnDestroy {\n  @Input() selectType: SelectType;\n  @Input() showHeadCellMenu: boolean;\n  @HostBinding('class.table-head') private readonly tableHeadClass = true;\n  gridTemplateColumns: string;\n\n  @HostBinding('style.grid-template-columns')\n  get getTemplateColumns() {\n    let template = this.gridTemplateColumns;\n    if (this.selectType !== SelectType.none) {\n      template = `48px ${template}`;\n    }\n    return template;\n  }\n\n  state: FilterState;\n  selectTypeEnum = SelectType;\n\n  private _alive = true;\n  private _columns: TableColumn[] = [];\n  private _hiddenColumns: string[] = [];\n\n  set columns(columns: TableColumn[]) {\n    this._columns = columns;\n    this._cdr.markForCheck();\n  }\n\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  get locked(): TableColumn[] {\n    return this._columns.filter(\n      (_) => _.locked === true && this._hiddenColumns.indexOf(_.name) < 0\n    );\n  }\n\n  get unlocked(): TableColumn[] {\n    return this._columns.filter(\n      (_) => _.locked === false && this._hiddenColumns.indexOf(_.name) < 0\n    );\n  }\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\n    combineLatest([this._svc.columns, this._svc.hiddenColumns])\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((values: [TableColumn[], string[]]) => {\n        const [columns, hiddenColumns] = values;\n        this._hiddenColumns = hiddenColumns;\n        this.columns = columns;\n\n        this.gridTemplateColumns = TableUtil.getGridTemplateColumns(\n          ArrayUtil.flatten(columns, 'columns', true)\n            .filter((_) => this._hiddenColumns.indexOf(_.name) < 0)\n            .sort((a, b) => Number(b.locked) - Number(a.locked))\n        );\n        this._cdr.markForCheck();\n      });\n\n    this._svc.state.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\n      this.state = _;\n      this._cdr.markForCheck();\n    });\n  }\n\n  getSpan(): string {\n    if (this.locked?.length > 0) {\n      let span = this.locked.length;\n      if (this.selectType !== SelectType.none) {\n        span += 1;\n      }\n      return `span ${span}`;\n    }\n    return null;\n  }\n\n  getLockedGridTemplateColumns(columns: TableColumn[]) {\n    let template = TableUtil.getGridTemplateColumns(columns);\n    if (this.selectType !== SelectType.none) {\n      template = `48px ${template}`;\n    }\n    return template;\n  }\n\n  track(index: number, item: TableColumn): any {\n    return item.name;\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-head.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getTemplateColumns": {
                    "name": "getTemplateColumns",
                    "getSignature": {
                        "name": "getTemplateColumns",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "columns",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 52
                    }
                },
                "locked": {
                    "name": "locked",
                    "getSignature": {
                        "name": "locked",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 56
                    }
                },
                "unlocked": {
                    "name": "unlocked",
                    "getSignature": {
                        "name": "unlocked",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"table-head_locked\"\n     *ngIf=\"locked?.length\"\n     [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\n     [style.grid-column-end]=\"getSpan()\">\n  <teta-selection-head-cell *ngIf=\"selectType !== selectTypeEnum.none\"></teta-selection-head-cell>\n  <ng-container *ngFor=\"let column of locked; trackBy: track\">\n    <teta-table-head-group\n      class=\"table-head__group\"\n      [showHeadCellMenu]=\"showHeadCellMenu\"\n      [column]=\"column\"></teta-table-head-group>\n  </ng-container>\n</div>\n<ng-container *ngIf=\"unlocked?.length\">\n  <teta-selection-head-cell *ngIf=\"selectType !== selectTypeEnum.none && locked?.length < 1\"></teta-selection-head-cell>\n  <ng-container *ngFor=\"let column of unlocked; trackBy: track\">\n    <teta-table-head-group\n      class=\"table-head__group\"\n      [showHeadCellMenu]=\"showHeadCellMenu\"\n      [column]=\"column\"></teta-table-head-group>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "TableHeadGroupComponent",
            "id": "component-TableHeadGroupComponent-1ed87f0e0b7804afb698e9f4494ed82c",
            "file": "projects/components/src/component/table/table-head-group/table-head-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-head-group",
            "styleUrls": [
                "./table-head-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-head-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": ""
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.grid-column-end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TableColumn } from '../contract/table-column';\nimport { TableUtil } from '../util/table-util';\nimport { TableService } from '../service/table.service';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-table-head-group',\n  templateUrl: './table-head-group.component.html',\n  styleUrls: ['./table-head-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableHeadGroupComponent<T> implements OnInit, OnDestroy {\n  @Input() showHeadCellMenu: boolean;\n\n  @Input()\n  set column(column: TableColumn) {\n    this._column = column;\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  private _alive = true;\n  private _column: TableColumn;\n  private _hiddenColumns: string[];\n\n  private get _leaves() {\n    return TableUtil.getColumnLeaves(this._column)?.filter(\n      (_) => this._hiddenColumns.indexOf(_.name) < 0\n    );\n  }\n\n  @HostBinding('style.grid-column-end')\n  get gridColumnEnd(): string {\n    if (this._leaves?.length > 0) {\n      return `span ${this._leaves.length}`;\n    }\n    return null;\n  }\n\n  get gridTemplateColumns(): string {\n    return TableUtil.getGridTemplateColumns(this._leaves);\n  }\n\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\n    this._svc.hiddenColumns\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((_) => {\n        this._hiddenColumns = _;\n        this._cdr.markForCheck();\n      });\n  }\n\n  columnIsHidden(column: TableColumn) {\n    return this._svc.columnIsHidden(column);\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-head-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 29
                    }
                },
                "_leaves": {
                    "name": "_leaves",
                    "getSignature": {
                        "name": "_leaves",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "gridColumnEnd": {
                    "name": "gridColumnEnd",
                    "getSignature": {
                        "name": "gridColumnEnd",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "gridTemplateColumns": {
                    "name": "gridTemplateColumns",
                    "getSignature": {
                        "name": "gridTemplateColumns",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"column.columns && column.columns.length > 0\">\n  <div class=\"table-head__group__container\">\n    <div class=\"table-head__group__caption\">\n      {{column.caption}}\n    </div>\n    <div class=\"table-head__group__children\" [style.grid-template-columns]=\"gridTemplateColumns\">\n      <ng-container *ngFor=\"let col of column.columns\">\n        <teta-table-head-group\n          class=\"table-head__group\"\n          *ngIf=\"!columnIsHidden(col)\"\n          [showHeadCellMenu]=\"showHeadCellMenu\"\n          [column]=\"col\"></teta-table-head-group>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"!column.columns || column.columns.length === 0\">\n  <teta-head-cell\n    *ngIf=\"!columnIsHidden(column)\"\n    class=\"table-head__cell\"\n    [showHeadCellMenu]=\"showHeadCellMenu\"\n    [attr.data-column]=\"column.name\"\n    [column]=\"column\"></teta-head-cell>\n</ng-container>\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-867f7538d0b17d37a8d102d6f7ead1d7",
            "file": "projects/components/src/component/tabs/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.",
                    "description": "<p>An identifier of an initially selected (active) tab. Use the &quot;select&quot; method to switch a tab programmatically.</p>\n",
                    "line": 29,
                    "type": "string | null"
                },
                {
                    "name": "destroyOnHide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the closed tabs should be hidden without destroying them",
                    "description": "<p>Whether the closed tabs should be hidden without destroying them</p>\n",
                    "line": 34,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "tabChange",
                    "defaultValue": "new EventEmitter<ITabChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n",
                    "description": "<p>A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classTabs",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.tabs'"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getTabById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TabComponent | null",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "tabId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects the tab with the given id and shows its associated pane.\nAny other tab that was previously selected becomes unselected and its associated pane is hidden.\n",
                    "description": "<p>Selects the tab with the given id and shows its associated pane.\nAny other tab that was previously selected becomes unselected and its associated pane is hidden.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tabId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.tabs",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentChecked,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { TabComponent } from '../tab/tab.component';\n\nexport interface ITabChangeEvent {\n  activeId: string | null;\n  nextId: string;\n  preventDefault: () => void;\n}\n\n@Component({\n  selector: 'teta-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss'],\n})\nexport class TabsComponent implements AfterContentChecked {\n  @HostBinding('class.tabs') classTabs = true;\n  /**\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n   */\n  @Input() activeId: string | null;\n\n  /**\n   * Whether the closed tabs should be hidden without destroying them\n   */\n  @Input() destroyOnHide = true;\n\n  /**\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n   */\n  @Output() tabChange = new EventEmitter<ITabChangeEvent>();\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n\n  constructor() {}\n\n  /**\n   * Selects the tab with the given id and shows its associated pane.\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n   */\n  select(tabId: string): void {\n    const selectedTab = this._getTabById(tabId);\n    if (\n      selectedTab &&\n      !selectedTab.disabled &&\n      this.activeId !== selectedTab.id\n    ) {\n      let defaultPrevented = false;\n\n      this.tabChange.emit({\n        activeId: this.activeId,\n        nextId: selectedTab.id,\n        preventDefault: () => {\n          defaultPrevented = true;\n        },\n      });\n\n      if (!defaultPrevented) {\n        this.activeId = selectedTab.id;\n      }\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    const activeTab = this._getTabById(this.activeId);\n    this.activeId = activeTab\n      ? activeTab.id\n      : this.tabs.length\n      ? this.tabs.first.id\n      : null;\n  }\n\n  private _getTabById(id: string | null): TabComponent | null {\n    const tabsWithId: TabComponent[] = this.tabs.filter((tab) => tab.id === id);\n    return tabsWithId.length ? tabsWithId[0] : null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "AfterContentChecked"
            ],
            "templateData": "<div class=\"tabs-head\" role=\"tablist\">\n  <div class=\"tabs-head-item\"\n       *ngFor=\"let tab of tabs\"\n       (click)=\"select(tab.id);\"\n       [class.tabs-head-item_active]=\"tab.id === activeId\"\n       [class.tabs-head-item_disabled]=\"tab.disabled\">\n    <span [id]=\"tab.id\" class=\"tabs-title\"\n          role=\"tab\"\n          [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\n          [attr.aria-expanded]=\"tab.id === activeId\"\n          [attr.aria-disabled]=\"tab.disabled\">\n      {{tab.title}}\n      <ng-template [ngTemplateOutlet]=\"tab.titleTpl?.template\"></ng-template>\n    </span>\n  </div>\n</div>\n<div class=\"tabs-content\">\n  <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n    <ng-container *ngIf=\"!destroyOnHide || tab.id === activeId\">\n      <ng-template [ngTemplateOutlet]=\"tab.contentTpl?.template\"></ng-template>\n    </ng-container>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "TextFieldComponent",
            "id": "component-TextFieldComponent-d0edef4a1cfc2b5722bf9393ff6a03db",
            "file": "projects/components/src/component/input/text-field/text-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-text-field",
            "styleUrls": [
                "./text-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "leftIconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "onlyNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "textField",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.text-field'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "keyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.text-field",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'teta-text-field',\n  templateUrl: './text-field.component.html',\n  styleUrls: ['./text-field.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TextFieldComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextFieldComponent implements ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() leftIconName?: string;\n  @HostBinding('class.text-field_disabled')\n  @Input()\n  disabled = false;\n  @Input() onlyNumber = false;\n  @HostBinding('class.text-field_invalid')\n  @Input()\n  invalid: boolean;\n  @ViewChild('input', { static: false }) input: ElementRef;\n\n  @HostBinding('class.text-field')\n  private readonly textField = true;\n  value = '';\n\n  constructor(private _cdr: ChangeDetectorRef) {}\n\n  @HostListener('click') onFocus() {\n    this.input.nativeElement.focus();\n  }\n\n  keyPress(event: KeyboardEvent) {\n    if (event.key === 'Enter' || event.keyCode === 13) {\n      this.input.nativeElement.blur();\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._cdr.detectChanges();\n  }\n\n  writeValue(input: string): void {\n    this.value = input;\n    this._cdr.detectChanges();\n  }\n\n  onChange(input: string): void {}\n\n  onTouched(input: string): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<teta-icon *ngIf=\"leftIconName\" [name]=\"leftIconName\"></teta-icon>\n<input\n  #input\n  [ngModel]=\"value\"\n  [tetaOnlyNumber]=\"onlyNumber\"\n  (ngModelChange)=\"value = $event; onChange($event);\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  (keydown)=\"keyPress($event)\"\n  autocomplete=\"off\"\n  type=\"text\"\n/>\n<teta-icon\n  *ngIf=\"value && !disabled\"\n  class=\"close-icon\"\n  [name]=\"'closeCircle'\"\n  (click)=\"value = ''; onChange('');\"\n></teta-icon>\n"
        },
        {
            "name": "ThemeSwitchComponent",
            "id": "component-ThemeSwitchComponent-82c86b62897700d0f91be9848acb6ab4",
            "file": "projects/components/src/component/theme-switch/theme-switch/theme-switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-theme-switch",
            "styleUrls": [
                "./theme-switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "palette",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "view",
                    "defaultValue": "'ghost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ButtonViewType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ThemeSwitchService } from '../theme-switch.service';\nimport { Observable } from 'rxjs';\nimport {ButtonViewType} from '../../button/button/button.component';\n\n@Component({\n  selector: 'teta-theme-switch',\n  templateUrl: './theme-switch.component.html',\n  styleUrls: ['./theme-switch.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemeSwitchComponent implements OnInit {\n  @Input() palette = 'text';\n  @Input() view: ButtonViewType = 'ghost';\n  theme: Observable<boolean>;\n\n  constructor(private _svc: ThemeSwitchService) {\n    this.theme = this._svc.theme;\n  }\n\n  ngOnInit(): void {}\n\n  switchTheme() {\n    this._svc.switchTheme();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./theme-switch.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button teta-button [palette]=\"palette\" [view]=\"view\" [square]=\"true\" (click)=\"switchTheme()\">\n  <teta-icon [name]=\"'lamp'\" [palette]=\"'text'\"></teta-icon>\n</button>\n"
        },
        {
            "name": "TimePartControlComponent",
            "id": "component-TimePartControlComponent-2ec059132d4dd237ecfd47e5a57572a2",
            "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TIME_PART_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-time-part-control",
            "styleUrls": [
                "./time-part-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-part-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "max",
                    "defaultValue": "59",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scroll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "down",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "up",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const TIME_PART_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TimePartControlComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-time-part-control',\n  templateUrl: './time-part-control.component.html',\n  styleUrls: ['./time-part-control.component.scss'],\n  providers: [TIME_PART_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimePartControlComponent implements OnInit, ControlValueAccessor {\n  @Input() min = 0;\n  @Input() max = 59;\n  @Input() disabled: boolean;\n\n  private _value: number;\n\n  set value(value: number) {\n    this._value = value;\n    this.onChange(this._value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  constructor(private _cdr: ChangeDetectorRef) {}\n\n  up() {\n    this.value = this.value < this.max ? this.value + 1 : this.min;\n  }\n\n  down() {\n    this.value = this.value > this.min ? this.value - 1 : this.max;\n  }\n\n  scroll = (e: any) => {\n    const delta = e?.deltaY ?? e;\n\n    if (e instanceof WheelEvent) {\n      e.preventDefault();\n    }\n    if (delta > 0) {\n      this.down();\n    } else {\n      this.up();\n    }\n  };\n\n  ngOnInit() {}\n\n  writeValue(model: number) {\n    this._value = model;\n    this._cdr.markForCheck();\n  }\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./time-part-control.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<button teta-button [square]=\"true\" (click)=\"up()\" [palette]=\"'text'\" [view]=\"'ghost'\">\n  <teta-icon [name]=\"'arrowUpKey'\"></teta-icon>\n</button>\n<div (wheel)=\"scroll($event);\" class=\"row row_auto font-body-3 height-6 width-6 align-center justify-content-center\">\n  {{value | tetaPrependZero: 2}}\n</div>\n<button teta-button [square]=\"true\" (click)=\"down()\" [palette]=\"'text'\" [view]=\"'ghost'\">\n  <teta-icon [name]=\"'arrowDownKey'\"></teta-icon>\n</button>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-04298536ebf03990a107e2976e7965cb",
            "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TOGGLE_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "компонент неактивен",
                    "description": "<p>компонент неактивен</p>\n",
                    "line": 44,
                    "type": "boolean"
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Значение</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nЗначение\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                },
                {
                    "name": "toggleClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.toggle'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "class.toggle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const TOGGLE_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'teta-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.scss'],\n  providers: [TOGGLE_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToggleComponent implements ControlValueAccessor, OnInit {\n  @HostBinding('attr.tabindex') tabindex = 0;\n  @HostBinding('class.toggle') toggleClass = true;\n\n  get paletteClass() {\n    if (this.palette) {\n      return `toggle-button-${this.palette}`;\n    }\n  }\n\n  @Input() palette = 'primary';\n  @Input() noLabel: boolean;\n\n  /**\n   * компонент неактивен\n   */\n  @HostBinding('class.toggle_disabled')\n  @Input()\n  disabled: boolean;\n\n  /**\n   * Значение\n   */\n  private model$: boolean;\n\n  get model(): any {\n    return this.model$;\n  }\n\n  set model(v: any) {\n    if (v !== this.model$) {\n      this.model$ = v;\n      this.onChange(v);\n    }\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  @HostListener('click')\n  changeValue() {\n    if (this.disabled) {\n      return;\n    }\n    this.model = !this.model;\n  }\n\n  writeValue(model: boolean) {\n    this.model$ = model;\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit() {}\n\n  onChange(_: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "paletteClass": {
                    "name": "paletteClass",
                    "getSignature": {
                        "name": "paletteClass",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                },
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "any",
                        "returnType": "any",
                        "line": 51
                    }
                }
            },
            "templateData": "<span class=\"font-body-3 row_auto\" *ngIf=\"!noLabel\">\n  <ng-content></ng-content>\n</span>\n<div class=\"toggle-button\" [class.toggle-button-on]=\"model\" [ngClass]=\"paletteClass\">\n  <div class=\"toggle-button-circle\"></div>\n</div>\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-b998bb66345a0e364ff64db2fe7ef1d8",
            "file": "projects/components/src/component/toolbar/toolbar/toolbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'teta-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToolbarComponent implements OnInit {\n  @Input() palette: string;\n  @Input() class;\n\n  @HostBinding('class')\n  private get getClass() {\n    const result = [this.class, 'toolbar', 'toolbar_panel'];\n    if (this.palette) {\n      result.push(`toolbar-${this.palette}`);\n    }\n    return result.join(' ');\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-a74d35b1cd10b5e196c49dd7d997986b",
            "file": "projects/components/src/component/tree/tree/tree.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TreeService"
                }
            ],
            "selector": "teta-tree",
            "styleUrls": [
                "./tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childNodeName",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any"
                },
                {
                    "name": "compareItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "function"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ITreeData[]"
                },
                {
                    "name": "openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "[]"
                },
                {
                    "name": "padding",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "openItemsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                },
                {
                    "name": "service",
                    "defaultValue": "new EventEmitter<TreeService>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<TreeService>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[]",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaTemplateDirective",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TetaTemplateDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { ITreeData } from '../../../common/contract/i-tree-data';\nimport { TreeService } from '../tree.service';\nimport { TetaTemplateDirective } from '../../../directive/teta-template/teta-template.directive';\nimport { filter, takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'teta-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.scss'],\n  providers: [TreeService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeComponent\n  implements OnInit, AfterContentInit, OnChanges, OnDestroy\n{\n  @Input() data: ITreeData[];\n  @Output() service: EventEmitter<TreeService> =\n    new EventEmitter<TreeService>();\n  @Input() class;\n  @Input() padding = 8;\n  @Input() childNodeName = 'children';\n\n  @Input()\n  set openItems(items: ITreeData[]) {\n    this._openItems = items;\n    this._service.setOpenItems(items);\n  }\n\n  get noChildMode(): boolean {\n    const hasChildren = this.data.find(\n      (_) => _[this.childNodeName]?.length > 0\n    );\n    return !hasChildren;\n  }\n\n  @Output() openItemsChange = new EventEmitter();\n\n  @ContentChild(TetaTemplateDirective, { static: true })\n  template: TetaTemplateDirective;\n\n  private _openItems: ITreeData[];\n  private _alive = true;\n\n  constructor(private _service: TreeService, private _cdr: ChangeDetectorRef) {\n    this._service.openItems\n      .pipe(\n        takeWhile((_) => this._alive),\n        filter((_) => this._openItems !== _)\n      )\n      .subscribe((_) => this.openItemsChange.emit(_));\n  }\n\n  @Input()\n  set compareItems(func: (item: ITreeData) => any) {\n    this._service.compareItems = func;\n  }\n\n  @HostBinding('class')\n  private get getClass(): string {\n    const result = [this.class, 'tree'];\n    return result.join(' ');\n  }\n\n  ngOnInit(): void {\n    this.service.emit(this._service);\n  }\n\n  ngAfterContentInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "openItems": {
                    "name": "openItems",
                    "setSignature": {
                        "name": "openItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "items",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "items",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "noChildMode": {
                    "name": "noChildMode",
                    "getSignature": {
                        "name": "noChildMode",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "compareItems": {
                    "name": "compareItems",
                    "setSignature": {
                        "name": "compareItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "func",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "item",
                                        "type": "ITreeData",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ]
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "func",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "item",
                                        "type": "ITreeData",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ],
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 74
                    }
                }
            },
            "templateData": "<ng-container *ngFor=\"let item of data\">\n  <teta-tree-item [item]=\"item\"\n                  [depth]=\"0\"\n                  [padding]=\"padding\"\n                  [childNodeName]=\"childNodeName\"\n                  [noChildMode]=\"noChildMode\"\n                  [template]=\"template?.template\"></teta-tree-item>\n</ng-container>\n"
        },
        {
            "name": "TreeItemComponent",
            "id": "component-TreeItemComponent-fb6bf78228f374732fb2304770d03cf5",
            "file": "projects/components/src/component/tree/tree-item/tree-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tree-item",
            "styleUrls": [
                "./tree-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childNodeName",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "depth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ITreeData"
                },
                {
                    "name": "noChildMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "padding",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number"
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "itemIsOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeService",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treeItemClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.tree__item-container'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.tree__item-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "<p>TODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand</p>\n",
            "rawdescription": "\n\nTODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { ITreeData } from '../../../common/contract/i-tree-data';\nimport { TreeService } from '../tree.service';\nimport { takeWhile } from 'rxjs/operators';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n/**\n * TODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand\n */\n@Component({\n  selector: 'teta-tree-item',\n  templateUrl: './tree-item.component.html',\n  styleUrls: ['./tree-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('children', [\n      transition('void => *', [\n        style({ opacity: '0' }),\n        animate(200, style({ opacity: '1' })),\n      ]),\n      transition('* => void', [animate(200, style({ opacity: '0' }))]),\n    ]),\n  ],\n})\nexport class TreeItemComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() item: ITreeData;\n  @Input() depth = 0;\n  @Input() padding = 16;\n  @Input() childNodeName = 'children';\n  @Input() template: TemplateRef<any>;\n  @Input() noChildMode: boolean;\n\n  @HostBinding('class.tree__item-container') private readonly treeItemClass =\n    true;\n\n  itemIsOpen = false;\n\n  private _alive = true;\n\n  get computedDepth(): number {\n    return (\n      this.depth +\n      (this.item[this.childNodeName]?.length > 0 ? 0 : this.noChildMode ? 1 : 2)\n    );\n  }\n\n  constructor(public service: TreeService, private _cdr: ChangeDetectorRef) {}\n\n  openItem() {\n    this.service.openItem(this.item);\n  }\n\n  ngOnInit(): void {\n    this.service.openItems\n      .pipe(takeWhile((_) => this._alive))\n      .subscribe((_) => {\n        const found = _?.find(\n          (x) =>\n            this.service.compareItems(x) ===\n            this.service.compareItems(this.item)\n        );\n        this.itemIsOpen = found != null;\n        this._cdr.markForCheck();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {}\n\n  ngOnDestroy(): void {\n    this._alive = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "computedDepth": {
                    "name": "computedDepth",
                    "getSignature": {
                        "name": "computedDepth",
                        "type": "number",
                        "returnType": "number",
                        "line": 52
                    }
                }
            },
            "templateData": "<div class=\"tree__item_content\" [ngClass]=\"'tree__item_content-' + computedDepth\" (click)=\"openItem()\">\n  <ng-container\n    *ngTemplateOutlet=\"template; context: {$implicit: item, item: item, open: itemIsOpen, service: service, depth: depth}\"></ng-container>\n</div>\n<div [@children] class=\"tree__children\" *ngIf=\"itemIsOpen && item[childNodeName]?.length > 0\">\n  <teta-tree-item *ngFor=\"let child of item[childNodeName];\"\n                  [item]=\"child\"\n                  [template]=\"template\"\n                  [padding]=\"padding\"\n                  [childNodeName]=\"childNodeName\"\n                  [depth]=\"depth + 1\"></teta-tree-item>\n</div>\n"
        },
        {
            "name": "TreeItemToggleComponent",
            "id": "component-TreeItemToggleComponent-34d2bb460895a473b9e720a322b42444",
            "file": "projects/components/src/component/tree/tree-item-toggle/tree-item-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tree-item-toggle",
            "styleUrls": [
                "./tree-item-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-item-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ITreeData"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { TreeService } from '../tree.service';\nimport { ITreeData } from '../../../common/contract/i-tree-data';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'teta-tree-item-toggle',\n  templateUrl: './tree-item-toggle.component.html',\n  styleUrls: ['./tree-item-toggle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeItemToggleComponent implements OnInit {\n  @Input() item: ITreeData;\n  open: Observable<boolean>;\n\n  constructor(public service: TreeService, private _cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.open = this.service.openItems.pipe(\n      map((_) => {\n        const found = _?.find(\n          (x) =>\n            this.service.compareItems(x) ===\n            this.service.compareItems(this.item)\n        );\n        return found != null;\n      })\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./tree-item-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<teta-icon [name]=\"(open | async) ? 'arrowDownKey' : 'arrowRightKey'\"\n           class=\"tree__icon\"></teta-icon>\n"
        },
        {
            "name": "XAxisComponent",
            "id": "component-XAxisComponent-13632ddca8ecc699a5d201a0ba60cdb8",
            "file": "projects/chart/src/chart/chart-container/x-axis/x-axis.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "g teta-x-axis",
            "styleUrls": [
                "./x-axis.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./x-axis.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "axis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "AxisOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AxisOptions } from '../../model/axis-options';\n\n@Component({\n  selector: 'g teta-x-axis',\n  templateUrl: './x-axis.component.html',\n  styleUrls: ['./x-axis.component.scss'],\n})\nexport class XAxisComponent implements OnInit {\n  @Input() axis: AxisOptions;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    console.log('init');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./x-axis.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:text>x-axis works!</svg:text>\n"
        },
        {
            "name": "YAxisComponent",
            "id": "component-YAxisComponent-20d96e003b038a6a57481ac4f311f7b4",
            "file": "projects/chart/src/chart/chart-container/y-axis/y-axis.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-y-axis]",
            "styleUrls": [
                "./y-axis.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./y-axis.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "axis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Axis"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svg'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drawAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { Axis } from '../../core/axis';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: '[teta-y-axis]',\n  templateUrl: './y-axis.component.html',\n  styleUrls: ['./y-axis.component.scss'],\n})\nexport class YAxisComponent implements OnInit, AfterViewInit {\n  @Input() axis: Axis;\n  @ViewChild('svg') node: ElementRef;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.drawAxis();\n  }\n\n  private drawAxis() {\n    const selection = d3.select(this.node.nativeElement);\n\n    d3.select(this.node.nativeElement).text('olololo');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./y-axis.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<svg:g #svg></svg:g>\n"
        },
        {
            "name": "YearSelectComponent",
            "id": "component-YearSelectComponent-5b85db09fa0d33bab5d3e1588d002765",
            "file": "projects/components/src/component/date-picker/year-select/year-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-year-select",
            "styleUrls": [
                "./year-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./year-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowableRange",
                    "defaultValue": "[1900, 2100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number[]"
                },
                {
                    "name": "currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Date"
                },
                {
                    "name": "size",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "yearApplied",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "yearSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "checkRanges",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "decreaseInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "decreaseYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "increaseInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "increaseYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "initMaxYearList",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "initMinYearList",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "initYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "isMaxYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "isMinYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "isYearDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "maxYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "maxYearList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "minYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "minYearList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scrollYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "shiftYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "years",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { takeWhile, tap } from 'rxjs/operators';\nimport { PickerTouchService } from '../service/picker-touch.service';\n\n@Component({\n  selector: 'teta-year-select',\n  templateUrl: './year-select.component.html',\n  styleUrls: ['./year-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class YearSelectComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input() currentYear: number;\n  @Input() today: Date;\n  @Input() size = 8;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() allowableRange: number[] = [1900, 2100];\n  @Output() yearSelected = new EventEmitter<number>();\n  @Output() yearApplied = new EventEmitter<number>();\n\n  minYearDate: Date;\n  maxYearDate: Date;\n  years: number[];\n  minYearList: number[];\n  maxYearList: number[];\n  decreaseInterval: number;\n  increaseInterval: number;\n  private _alive = true;\n\n  constructor(\n    private _cdr: ChangeDetectorRef,\n    private _pickerTouchService: PickerTouchService,\n    private _elementRef: ElementRef\n  ) {}\n\n  ngOnInit() {\n    const [minRange, maxRange] = this.allowableRange;\n    this.minYearDate = new Date(minRange, 0, 1);\n    this.maxYearDate = new Date(maxRange, 11, 31);\n    this.initMinYearList();\n    this.initMaxYearList();\n    this.initYearSelector(this.currentYear);\n  }\n\n  ngAfterViewInit() {\n    const touchMove$ = fromEvent(\n      this._elementRef.nativeElement.parentElement,\n      'touchmove'\n    );\n\n    touchMove$\n      .pipe(\n        takeWhile((_) => this._alive),\n        tap((e: TouchEvent) => {\n          this._pickerTouchService.onTouchMove(e);\n        })\n      )\n      .subscribe();\n\n    this._pickerTouchService.step\n      .pipe(\n        takeWhile((_) => this._alive),\n        tap((_) => {\n          this.shiftYearSelector(_);\n          this._cdr.detectChanges();\n        })\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    window.clearInterval(this.decreaseInterval);\n    window.clearInterval(this.increaseInterval);\n    this._alive = false;\n  }\n\n  scrollYearSelector = (e: WheelEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const step = e.deltaY > 0 ? 1 : -1;\n    this.shiftYearSelector(step);\n  };\n\n  setYear = (e: any, year: number) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this.isYearDisabled(year)) {\n      this.yearSelected.emit(year);\n    }\n  };\n\n  applyYear = (e: any, year: number) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!this.isYearDisabled(year)) {\n      this.yearApplied.emit(year);\n    }\n  };\n\n  initYearSelector = (year: number) => {\n    if (!year) {\n      year = this.today.getFullYear();\n    }\n    this.years = [year];\n    let direction = false;\n    for (let i = 1; i < this.size; i++) {\n      if (direction) {\n        this.years.unshift(this.years[0] - 1);\n      } else {\n        this.years.push(this.years[this.years.length - 1] + 1);\n      }\n      direction = !direction;\n    }\n    this.checkRanges();\n  };\n\n  initMinYearList = () => {\n    this.minYearList = [this.minYearDate.getFullYear()];\n    for (let i = 1; i < this.size; i++) {\n      this.minYearList.push(this.minYearList[this.minYearList.length - 1] + 1);\n    }\n  };\n\n  initMaxYearList = () => {\n    this.maxYearList = [this.maxYearDate.getFullYear()];\n    for (let i = 1; i < this.size; i++) {\n      this.maxYearList.unshift(this.maxYearList[0] - 1);\n    }\n  };\n\n  checkRanges = () => {\n    if (\n      this.years.some((year) => {\n        const dat = new Date(year, 0, 1);\n        return this.isMinYear(dat);\n      })\n    ) {\n      this.years = this.minYearList;\n    }\n    if (\n      this.years.some((year) => {\n        const dat = new Date(year, 0, 1);\n        return this.isMaxYear(dat);\n      })\n    ) {\n      this.years = this.maxYearList;\n    }\n  };\n\n  shiftYearSelector = (step: number = 0) => {\n    this.years = this.years.map((year) => year + step);\n    this.checkRanges();\n  };\n\n  decreaseYearSelector = (step: number = 3) => {\n    const dat = new Date(this.years[0] - step, 0, 1);\n    if (this.isMinYear(dat)) {\n      this.years = this.minYearList;\n      return;\n    }\n\n    this.years = this.years.map((year) => year - step);\n  };\n\n  increaseYearSelector = (step: number = 3) => {\n    const dat = new Date(this.years[this.years.length - 1] + step, 0, 1);\n    if (this.isMaxYear(dat)) {\n      this.years = this.maxYearList;\n      return;\n    }\n    this.years = this.years.map((year) => year + step);\n  };\n\n  // stopLongDecrease = () => {\n  //   window.clearInterval(this.decreaseInterval);\n  // };\n  //\n  // stopLongIncrease = () => {\n  //   window.clearInterval(this.increaseInterval);\n  // };\n\n  isMinYear = (dat: Date): boolean => {\n    if (!this.minYearDate || !(this.minYearDate instanceof Date) || !dat) {\n      return false;\n    }\n    return this.minYearDate.getFullYear() > dat.getFullYear();\n  };\n\n  isMaxYear = (dat: Date): boolean => {\n    if (!this.maxYearDate || !(this.maxYearDate instanceof Date) || !dat) {\n      return false;\n    }\n    return this.maxYearDate.getFullYear() < dat.getFullYear();\n  };\n\n  isYearDisabled = (year: number) => {\n    if (year) {\n      const dat = new Date(year, 0, 1);\n      return this.isMaxInvalid(dat) || this.isMinInvalid(dat);\n    }\n    return false;\n  };\n\n  isMinInvalid = (dat: Date): boolean => {\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\n      return false;\n    }\n    return this.minDate.getFullYear() > dat.getFullYear();\n  };\n\n  isMaxInvalid = (dat: Date): boolean => {\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\n      return false;\n    }\n    return this.maxDate.getFullYear() < dat.getFullYear();\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n}\n",
                    "styleUrl": "./year-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"list row_auto margin-top-2\"\n     (wheel)=\"scrollYearSelector($event);\">\n  <div class=\"list-item list-item_interactive\"\n       [class.list-item_active]=\"year === currentYear\"\n       [class.list-item_disabled]=\"isYearDisabled(year)\"\n       (click)=\"setYear($event, year)\"\n       (dblclick)=\"applyYear($event, year)\"\n       *ngFor=\"let year of years\">\n    {{year}}\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AccordionModule",
            "id": "module-AccordionModule-b94ebf17f1388d947f68e3e18fc0f98f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AccordionComponent} from './accordion/accordion.component';\nimport {AccordionHeadComponent} from './accordion-head/accordion-head.component';\nimport {AccordionContentDirective} from './accordion-content.directive';\nimport {IconModule} from '../icon/icon.module';\nimport {AccordionItemComponent} from './accordion-item/accordion-item.component';\n\n@NgModule({\n  declarations: [AccordionComponent, AccordionHeadComponent, AccordionContentDirective, AccordionItemComponent],\n  exports: [AccordionComponent, AccordionHeadComponent, AccordionContentDirective, AccordionItemComponent],\n  imports: [\n    CommonModule,\n    IconModule\n  ]\n})\nexport class AccordionModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionContentDirective"
                        },
                        {
                            "name": "AccordionHeadComponent"
                        },
                        {
                            "name": "AccordionItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionContentDirective"
                        },
                        {
                            "name": "AccordionHeadComponent"
                        },
                        {
                            "name": "AccordionItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-66f0f78d55c290e5053eebf035a824d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/button/button.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonComponent} from './button/button.component';\n\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\nexport class ButtonModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Chart3dModule",
            "id": "module-Chart3dModule-4e447f366df5e32a7bb8c4116143b411",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/chart-3d/chart-3d.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Chart3dComponent } from './chart3d/chart3d.component';\n\n@NgModule({\n  declarations: [Chart3dComponent],\n  exports: [Chart3dComponent],\n  imports: [CommonModule],\n})\nexport class Chart3dModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Chart3dComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Chart3dComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartModule",
<<<<<<< Updated upstream
            "id": "module-ChartModule-ee9911cee4377bec3e1678ce1cee4005",
=======
            "id": "module-ChartModule-69296f55c525010e6f2925cd2ed251d6",
>>>>>>> Stashed changes
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/chart/chart.module.ts",
            "methods": [],
<<<<<<< Updated upstream
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartComponent } from './chart/chart.component';\r\n\r\n@NgModule({\r\n  declarations: [ChartComponent],\r\n  exports: [ChartComponent],\r\n  imports: [CommonModule],\r\n})\r\nexport class ChartModule {}\r\n",
=======
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ChartComponent} from './chart/chart.component';\nimport {SeriesHostComponent} from './chart-container/series-host/series-host.component';\nimport {ChartContainerComponent} from './chart-container/chart-container.component';\nimport {LegendComponent} from './legend/legend.component';\nimport {SeriesBaseComponent} from './base/series-base.component';\nimport {LineSeriesComponent} from './chart-container/line-series/line-series.component';\nimport { GridlinesComponent } from './chart-container/gridlines/gridlines.component';\nimport { XAxisComponent } from './chart-container/x-axis/x-axis.component';\nimport { YAxisComponent } from './chart-container/y-axis/y-axis.component';\nimport { PlotlineComponent } from './chart-container/plotline/plotline.component';\nimport { PlotbandComponent } from './chart-container/plotband/plotband.component';\n\n@NgModule({\n  declarations: [\n    ChartComponent,\n    SeriesHostComponent,\n    ChartContainerComponent,\n    LegendComponent,\n    SeriesBaseComponent,\n    LineSeriesComponent,\n    GridlinesComponent,\n    XAxisComponent,\n    YAxisComponent,\n    PlotlineComponent,\n    PlotbandComponent\n  ],\n  exports: [\n    ChartComponent\n  ],\n  imports: [\n    CommonModule,\n  ]\n})\nexport class ChartModule {\n}\n",
>>>>>>> Stashed changes
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChartComponent"
<<<<<<< Updated upstream
=======
                        },
                        {
                            "name": "ChartContainerComponent"
                        },
                        {
                            "name": "GridlinesComponent"
                        },
                        {
                            "name": "LegendComponent"
                        },
                        {
                            "name": "LineSeriesComponent"
                        },
                        {
                            "name": "PlotbandComponent"
                        },
                        {
                            "name": "PlotlineComponent"
                        },
                        {
                            "name": "SeriesBaseComponent"
                        },
                        {
                            "name": "SeriesHostComponent"
                        },
                        {
                            "name": "XAxisComponent"
                        },
                        {
                            "name": "YAxisComponent"
>>>>>>> Stashed changes
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChartComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
<<<<<<< Updated upstream
=======
            "name": "ChartModule",
            "id": "module-ChartModule-7aa04315d3584ae4da4f0fdd40e22278-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/chart/chart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChartComponent } from './chart/chart.component';\n\n@NgModule({\n  declarations: [ChartComponent],\n  exports: [ChartComponent],\n  imports: [CommonModule],\n})\nexport class ChartModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
>>>>>>> Stashed changes
            "name": "CheckboxModule",
            "id": "module-CheckboxModule-4055b066711cd431fc1c0ace80fe24a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CheckboxComponent} from './checkbox/checkbox.component';\nimport {IconModule} from '../icon/icon.module';\n\n@NgModule({\n  declarations: [CheckboxComponent],\n  imports: [\n    CommonModule,\n    IconModule\n  ],\n  exports: [\n    CheckboxComponent\n  ]\n})\nexport class CheckboxModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClickOutsideModule",
            "id": "module-ClickOutsideModule-b3263656d8926bb89c0702caaf0c4217",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/click-outside/click-outside.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ClickOutsideDirective} from './click-outside.directive';\n\n@NgModule({\n  declarations: [ClickOutsideDirective],\n  exports: [ClickOutsideDirective],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ClickOutsideModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContextMenuModule",
            "id": "module-ContextMenuModule-52c97e98152d350c61962e2f6bfd0808",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/context-menu/context-menu.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ContextMenuDirective} from './context-menu.directive';\nimport {DynamicComponentModule} from '../../component/dynamic-component/dynamic-component.module';\n\n@NgModule({\n  declarations: [ContextMenuDirective],\n  exports: [ContextMenuDirective],\n  imports: [\n    CommonModule,\n    DynamicComponentModule\n  ]\n})\nexport class ContextMenuModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatePickerModule",
            "id": "module-DatePickerModule-9474a962d79949aa552dc425c21421e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/date-picker/date-picker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DatePickerComponent } from './date-picker/date-picker.component';\nimport { MonthPickerComponent } from './month-picker/month-picker.component';\nimport { DropdownModule } from '../dropdown/dropdown.module';\nimport { ClickOutsideModule } from '../../directive/click-outside/click-outside.module';\nimport { IconModule } from '../icon/icon.module';\nimport { DaySelectComponent } from './day-select/day-select.component';\nimport { YearSelectComponent } from './year-select/year-select.component';\nimport { MonthSelectComponent } from './month-select/month-select.component';\nimport { PrependZeroModule } from '../../pipe/prepend-zero/prepend-zero.module';\nimport { ButtonModule } from '../button/button.module';\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\nimport { FormsModule } from '@angular/forms';\nimport { TimePartControlComponent } from './time-part-control/time-part-control.component';\n\n@NgModule({\n  declarations: [\n    DatePickerComponent,\n    MonthPickerComponent,\n    DaySelectComponent,\n    YearSelectComponent,\n    MonthSelectComponent,\n    TimePartControlComponent,\n  ],\n  exports: [DatePickerComponent, MonthPickerComponent],\n  imports: [\n    CommonModule,\n    DropdownModule,\n    ClickOutsideModule,\n    FormsModule,\n    IconModule,\n    PrependZeroModule,\n    ButtonModule,\n    OnlyNumberModule,\n  ],\n})\nexport class DatePickerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "DaySelectComponent"
                        },
                        {
                            "name": "MonthPickerComponent"
                        },
                        {
                            "name": "MonthSelectComponent"
                        },
                        {
                            "name": "TimePartControlComponent"
                        },
                        {
                            "name": "YearSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ClickOutsideModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "PrependZeroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "MonthPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DelimiterModule",
            "id": "module-DelimiterModule-f5cf4adeca82eee57a10838c75a029c4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/delimiter/delimiter.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DelimiterComponent} from './delimiter/delimiter.component';\n\n@NgModule({\n  declarations: [DelimiterComponent],\n  exports: [DelimiterComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class DelimiterModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DelimiterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DelimiterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisableControlModule",
            "id": "module-DisableControlModule-eaf92a8e12f2f7b6c06de597cfb41281",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/disable-control/disable-control.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DisableControlDirective} from './disable-control.directive';\n\n\n@NgModule({\n  declarations: [DisableControlDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    DisableControlDirective\n  ]\n})\nexport class DisableControlModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisableControlDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DisableControlDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DragSortModule",
            "id": "module-DragSortModule-bb128d1e612562cd1a3f734e2e514686",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/drag-sort/drag-sort.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragSortContainerDirective } from './drag-sort-container.directive';\nimport { DragSortItemDirective } from './drag-sort-item.directive';\n\n@NgModule({\n  declarations: [DragSortContainerDirective, DragSortItemDirective],\n  exports: [DragSortContainerDirective, DragSortItemDirective],\n  imports: [CommonModule],\n})\nexport class DragSortModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DragSortContainerDirective"
                        },
                        {
                            "name": "DragSortItemDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DragSortContainerDirective"
                        },
                        {
                            "name": "DragSortItemDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropdownModule",
            "id": "module-DropdownModule-539d6e6a84cb635587c96cffe5292dfe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/dropdown/dropdown.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DropdownComponent} from './dropdown/dropdown.component';\nimport {DropdownHeadDirective} from './dropdown-head.directive';\nimport {DropdownContentDirective} from './dropdown-content.directive';\nimport {DropdownDirective} from './dropdown.directive';\n\n@NgModule({\n  declarations: [\n    DropdownComponent,\n    DropdownHeadDirective,\n    DropdownContentDirective,\n    DropdownDirective\n  ],\n  exports: [\n    DropdownComponent,\n    DropdownHeadDirective,\n    DropdownContentDirective,\n    DropdownDirective\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class DropdownModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownContentDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "DropdownHeadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownContentDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "DropdownHeadDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicComponentModule",
            "id": "module-DynamicComponentModule-aa61ce2a533177665d2e3d177a3aa092",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/dynamic-component/dynamic-component.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PopupContentComponent} from './popup-content/popup-content.component';\n\n@NgModule({\n  declarations: [PopupContentComponent],\n  exports: [PopupContentComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class DynamicComponentModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopupContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PopupContentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpandPanelModule",
            "id": "module-ExpandPanelModule-6ef356edb5d1e3a780509c542314841c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/expand-panel/expand-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExpandPanelComponent } from './expand-panel/expand-panel.component';\nimport { DelimiterModule } from '../delimiter/delimiter.module';\nimport { ToolbarModule } from '../toolbar/toolbar.module';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\nimport { ExpandPanelHeadDirective } from './expand-panel-head.directive';\nimport { ExpandPanelContentDirective } from './expand-panel-content.directive';\n\n@NgModule({\n  declarations: [\n    ExpandPanelComponent,\n    ExpandPanelHeadDirective,\n    ExpandPanelContentDirective,\n  ],\n  exports: [\n    ExpandPanelComponent,\n    ExpandPanelHeadDirective,\n    ExpandPanelContentDirective,\n  ],\n  imports: [\n    CommonModule,\n    DelimiterModule,\n    ToolbarModule,\n    ButtonModule,\n    IconModule,\n  ],\n})\nexport class ExpandPanelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpandPanelComponent"
                        },
                        {
                            "name": "ExpandPanelContentDirective"
                        },
                        {
                            "name": "ExpandPanelHeadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DelimiterModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpandPanelComponent"
                        },
                        {
                            "name": "ExpandPanelContentDirective"
                        },
                        {
                            "name": "ExpandPanelHeadDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileUploadModule",
            "id": "module-FileUploadModule-ac769c2343ba2b450396e0f0f8ea3169",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/file-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FileUploadAreaComponent } from './file-upload-area/file-upload-area.component';\nimport { FileItemComponent } from './file-item/file-item.component';\nimport { ButtonModule } from '../button/button.module';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n  declarations: [FileUploadAreaComponent, FileItemComponent],\n  exports: [FileUploadAreaComponent, FileItemComponent],\n  imports: [CommonModule, ButtonModule, IconModule],\n})\nexport class FileUploadModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileItemComponent"
                        },
                        {
                            "name": "FileUploadAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileItemComponent"
                        },
                        {
                            "name": "FileUploadAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilterModule",
            "id": "module-FilterModule-78c490db4c85491c7ffcdd8ad6ca1bd4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/filter/filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FilterPanelComponent } from './filter-panel/filter-panel.component';\nimport { NumericFilterComponent } from './numeric-filter/numeric-filter.component';\nimport { StringFilterComponent } from './string-filter/string-filter.component';\nimport { ListFilterComponent } from './list-filter/list-filter.component';\nimport { DateFilterComponent } from './date-filter/date-filter.component';\nimport { FilterHostComponent } from './filter-host/filter-host.component';\nimport { SelectModule } from '../select/select.module';\nimport { FormsModule } from '@angular/forms';\nimport { DatePickerModule } from '../date-picker/date-picker.module';\nimport { BooleanFilterComponent } from './boolean-filter/boolean-filter.component';\nimport { RadioModule } from '../radio/radio.module';\nimport { InputModule } from '../input/input.module';\nimport { CheckboxModule } from '../checkbox/checkbox.module';\n\n@NgModule({\n  declarations: [\n    FilterPanelComponent,\n    NumericFilterComponent,\n    StringFilterComponent,\n    ListFilterComponent,\n    DateFilterComponent,\n    FilterHostComponent,\n    BooleanFilterComponent,\n  ],\n  exports: [\n    FilterPanelComponent,\n    NumericFilterComponent,\n    StringFilterComponent,\n    ListFilterComponent,\n    DateFilterComponent,\n    FilterHostComponent,\n    BooleanFilterComponent,\n  ],\n  imports: [\n    CommonModule,\n    SelectModule,\n    FormsModule,\n    DatePickerModule,\n    RadioModule,\n    InputModule,\n    CheckboxModule,\n  ],\n})\nexport class FilterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BooleanFilterComponent"
                        },
                        {
                            "name": "DateFilterComponent"
                        },
                        {
                            "name": "FilterHostComponent"
                        },
                        {
                            "name": "FilterPanelComponent"
                        },
                        {
                            "name": "ListFilterComponent"
                        },
                        {
                            "name": "NumericFilterComponent"
                        },
                        {
                            "name": "StringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "RadioModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooleanFilterComponent"
                        },
                        {
                            "name": "DateFilterComponent"
                        },
                        {
                            "name": "FilterHostComponent"
                        },
                        {
                            "name": "FilterPanelComponent"
                        },
                        {
                            "name": "ListFilterComponent"
                        },
                        {
                            "name": "NumericFilterComponent"
                        },
                        {
                            "name": "StringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HighlightModule",
            "id": "module-HighlightModule-daa9f827ed06415a40bdd7fdbade3619",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/highlight/highlight.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HighlightDirective} from './highlight.directive';\n\n@NgModule({\n  declarations: [HighlightDirective],\n  exports: [HighlightDirective],\n  imports: [\n    CommonModule\n  ]\n})\nexport class HighlightModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HintModule",
            "id": "module-HintModule-1dfac351870541494dd35918971da9d3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/hint/hint.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HintDirective} from './hint.directive';\nimport {DynamicComponentModule} from '../../component/dynamic-component/dynamic-component.module';\n\n@NgModule({\n  declarations: [HintDirective],\n  exports: [HintDirective],\n  imports: [\n    CommonModule,\n    DynamicComponentModule\n  ]\n})\nexport class HintModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HintDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HintDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-74ae0bce538d356a9f98e6fed8db7e9b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconComponent} from './icon/icon.component';\nimport {IconSpriteDirective} from './icon-sprite.directive';\nimport {HttpClientModule} from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    IconComponent,\n    IconSpriteDirective\n  ],\n  exports: [\n    IconComponent,\n    IconSpriteDirective\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ]\n})\nexport class IconModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconSpriteDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconSpriteDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-16be192c4ef963df8ced8b44316d4df7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputComponent } from './input/input.component';\nimport { TextFieldComponent } from './text-field/text-field.component';\nimport { IconModule } from '../icon/icon.module';\nimport { FormsModule } from '@angular/forms';\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\nimport { FormGroupTitleComponent } from './form-group-title/form-group-title.component';\n\n@NgModule({\n  declarations: [InputComponent, TextFieldComponent, FormGroupTitleComponent],\n  exports: [InputComponent, TextFieldComponent, FormGroupTitleComponent],\n  imports: [CommonModule, IconModule, FormsModule, OnlyNumberModule],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormGroupTitleComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormGroupTitleComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListModule",
            "id": "module-ListModule-74d21fc45370fbc904af41de7004dd14",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/list/list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ListModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoaderModule",
            "id": "module-LoaderModule-1766cd0245874402c96dd036a686022b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/loader/loader.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LoaderDirective} from './loader.directive';\n\n@NgModule({\n  declarations: [LoaderDirective],\n  exports: [LoaderDirective],\n  imports: [\n    CommonModule\n  ]\n})\nexport class LoaderModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoaderDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoaderDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessageModule",
            "id": "module-MessageModule-56538682dbc125320ec3def5a3e1ce45",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/message/message.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MessageHostComponent} from './message-host/message-host.component';\nimport {MessageComponent} from './message/message.component';\nimport {IconModule} from '../icon/icon.module';\nimport {ButtonModule} from '../button/button.module';\n\n@NgModule({\n  declarations: [MessageHostComponent, MessageComponent],\n  exports: [MessageHostComponent, MessageComponent],\n  imports: [\n    CommonModule,\n    IconModule,\n    ButtonModule\n  ]\n})\nexport class MessageModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "MessageHostComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "MessageHostComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessageSamplesModule",
            "id": "module-MessageSamplesModule-b7b8d2fe60a79041676fef35990b3b71",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/message/message-samples/message-samples.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MessageSampleComponent} from './message-sample/message-sample.component';\nimport {ButtonModule} from '../../button/button.module';\nimport {MessageModule} from '../message.module';\nimport {IconModule} from '../../icon/icon.module';\n\n@NgModule({\n  declarations: [MessageSampleComponent],\n  exports: [MessageSampleComponent],\n  imports: [\n    CommonModule,\n    ButtonModule,\n    MessageModule,\n    IconModule\n  ]\n})\nexport class MessageSamplesModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MessageSampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "MessageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MessageSampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-ba4ebfe94e7fe7d8652418f21ec3788c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ModalContainerComponent } from './modal-container/modal-container.component';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { ToolbarModule } from '../toolbar/toolbar.module';\nimport { ButtonModule } from '../button/button.module';\nimport { TRANSLOCO_SCOPE, TranslocoModule } from '@ngneat/transloco';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n  declarations: [ModalContainerComponent, DialogComponent],\n  exports: [ModalContainerComponent, DialogComponent],\n  imports: [\n    CommonModule,\n    ToolbarModule,\n    ButtonModule,\n    TranslocoModule,\n    IconModule,\n  ],\n  providers: [\n    {\n      provide: TRANSLOCO_SCOPE,\n      useValue: { scope: 'common', alias: 'common' },\n      multi: true,\n    },\n  ],\n})\nexport class ModalModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "ModalContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "ModalContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalSamplesModule",
            "id": "module-ModalSamplesModule-807d57e027ad7f7515f961bb77101322",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/modal/modal-samples/modal-samples.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ModalFromComponentComponent } from './modal-from-component/modal-from-component.component';\nimport { ModalFromTemplateComponent } from './modal-from-template/modal-from-template.component';\nimport { FormsModule } from '@angular/forms';\nimport { ModalExampleComponent } from './modal-example/modal-example.component';\nimport { ModalContainerComponent } from '../modal-container/modal-container.component';\nimport { ModalModule } from '../modal.module';\nimport { ToolbarModule } from '../../toolbar/toolbar.module';\nimport { ButtonModule } from '../../button/button.module';\nimport { IconModule } from '../../icon/icon.module';\nimport { AlertSampleComponent } from './alert-sample/alert-sample.component';\nimport { DialogComponent } from '../dialog/dialog.component';\n\n@NgModule({\n  declarations: [\n    ModalFromComponentComponent,\n    ModalFromTemplateComponent,\n    ModalExampleComponent,\n    AlertSampleComponent,\n  ],\n  exports: [\n    ModalFromComponentComponent,\n    ModalFromTemplateComponent,\n    ModalExampleComponent,\n    AlertSampleComponent,\n  ],\n  imports: [\n    CommonModule,\n    ModalModule,\n    ButtonModule,\n    ToolbarModule,\n    FormsModule,\n    IconModule,\n  ],\n  entryComponents: [\n    ModalContainerComponent,\n    DialogComponent,\n    ModalExampleComponent,\n    AlertSampleComponent,\n  ],\n})\nexport class ModalSamplesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertSampleComponent"
                        },
                        {
                            "name": "ModalExampleComponent"
                        },
                        {
                            "name": "ModalFromComponentComponent"
                        },
                        {
                            "name": "ModalFromTemplateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ModalModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertSampleComponent"
                        },
                        {
                            "name": "ModalExampleComponent"
                        },
                        {
                            "name": "ModalFromComponentComponent"
                        },
                        {
                            "name": "ModalFromTemplateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NoAutofillModule",
            "id": "module-NoAutofillModule-b89bbcd90f73ad6b11aece1b32937d4a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/no-autofill/no-autofill.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NoAutofillDirective } from './no-autofill.directive';\n\n@NgModule({\n  exports: [NoAutofillDirective],\n  declarations: [NoAutofillDirective],\n  imports: [CommonModule],\n})\nexport class NoAutofillModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NoAutofillDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NoAutofillDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NumberPipeModule",
            "id": "module-NumberPipeModule-9de5afcc59bb61eaeb2203b8698a5c28",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/pipe/number-pipe/number-pipe.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NumberPipe} from './number.pipe';\n\n@NgModule({\n  declarations: [NumberPipe],\n  exports: [\n    NumberPipe\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NumberPipeModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NumberPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NumberPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OnlyNumberModule",
            "id": "module-OnlyNumberModule-29b4e18c2b9e7f536e5ac9666b7f4768",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/only-number/only-number.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n  imports: [CommonModule],\n})\nexport class OnlyNumberModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OnlyNumberDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OnlyNumberDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagerModule",
            "id": "module-PagerModule-8a204f79bbb5d3f042a83a567d22ed86",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/pager/pager.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PagerComponent} from './pager/pager.component';\nimport {IconModule} from '../icon/icon.module';\n\n@NgModule({\n  declarations: [PagerComponent],\n  exports: [PagerComponent],\n  imports: [\n    CommonModule,\n    IconModule\n  ]\n})\nexport class PagerModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PanelModule",
            "id": "module-PanelModule-c3c3cbfd099d1a483da7eaaa66a22eea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/panel/panel.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PanelComponent} from './panel/panel.component';\n\n@NgModule({\n  declarations: [PanelComponent],\n  exports: [PanelComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class PanelModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrependZeroModule",
            "id": "module-PrependZeroModule-2c3d051d3f6cdae6abde1a25604ff903",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/pipe/prepend-zero/prepend-zero.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrependZeroPipe } from './prepend-zero.pipe';\n\n@NgModule({\n  declarations: [PrependZeroPipe],\n  exports: [PrependZeroPipe],\n  imports: [CommonModule],\n})\nexport class PrependZeroModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PrependZeroPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrependZeroPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressBarModule",
            "id": "module-ProgressBarModule-90f8de3a8378cb0ff86862d57f06ace6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ProgressBarComponent} from './progress-bar/progress-bar.component';\n\n@NgModule({\n  declarations: [ProgressBarComponent],\n  exports: [ProgressBarComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ProgressBarModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PropertyGridModule",
            "id": "module-PropertyGridModule-073ec7cf49e7cee1d2a0dbfe3547aed3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/property-grid/property-grid.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PropertyGridComponent } from './property-grid/property-grid.component';\nimport { NumericItemDefaultComponent } from './default/numeric-item-default/numeric-item-default.component';\nimport { DateItemDefaultComponent } from './default/date-item-default/date-item-default.component';\nimport { ListItemDefaultComponent } from './default/list-item-default/list-item-default.component';\nimport { StringItemDefaultComponent } from './default/string-item-default/string-item-default.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NumberPipeModule } from '../../pipe/number-pipe/number-pipe.module';\nimport { DatePickerModule } from '../date-picker/date-picker.module';\nimport { SelectModule } from '../select/select.module';\nimport { PropertyGridGroupComponent } from './property-grid/property-grid-group/property-grid-group.component';\nimport { PropertyGridItemComponent } from './property-grid/property-grid-item/property-grid-item.component';\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\nimport { InputModule } from '../input/input.module';\nimport { ToggleModule } from '../toggle/toggle.module';\nimport { TRANSLOCO_SCOPE, TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [\n    PropertyGridComponent,\n    NumericItemDefaultComponent,\n    DateItemDefaultComponent,\n    ListItemDefaultComponent,\n    StringItemDefaultComponent,\n    PropertyGridGroupComponent,\n    PropertyGridItemComponent,\n  ],\n  exports: [PropertyGridComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NumberPipeModule,\n    DatePickerModule,\n    SelectModule,\n    OnlyNumberModule,\n    InputModule,\n    ToggleModule,\n    ReactiveFormsModule,\n    TranslocoModule,\n  ],\n  providers: [\n    {\n      provide: TRANSLOCO_SCOPE,\n      useValue: { scope: 'errors', alias: 'errors' },\n      multi: true,\n    },\n  ],\n})\nexport class PropertyGridModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateItemDefaultComponent"
                        },
                        {
                            "name": "ListItemDefaultComponent"
                        },
                        {
                            "name": "NumericItemDefaultComponent"
                        },
                        {
                            "name": "PropertyGridComponent"
                        },
                        {
                            "name": "PropertyGridGroupComponent"
                        },
                        {
                            "name": "PropertyGridItemComponent"
                        },
                        {
                            "name": "StringItemDefaultComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "ToggleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PropertyGridComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioModule",
            "id": "module-RadioModule-5bb54cd49c7be48749b82352eb23a036",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/radio/radio.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioComponent } from './radio/radio.component';\nimport { RadioButtonComponent } from './radio-button/radio-button.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RadioComponent, RadioButtonComponent],\n  exports: [RadioComponent, RadioButtonComponent],\n  imports: [CommonModule, FormsModule],\n})\nexport class RadioModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResizeDragModule",
            "id": "module-ResizeDragModule-587e99cda6a0a71c106def459fdcf09b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/resize-drag/resize-drag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizeDragDirective } from './resize-drag.directive';\n\n@NgModule({\n  declarations: [ResizeDragDirective],\n  exports: [ResizeDragDirective],\n  imports: [CommonModule],\n})\nexport class ResizeDragModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResizeDragDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResizeDragDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResizePanelModule",
            "id": "module-ResizePanelModule-68bdade0d537134a4fb10e5d19b476f8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/resize-panel/resize-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizePanelComponent } from './resize-panel/resize-panel.component';\nimport { IconModule } from '../icon/icon.module';\nimport { ResizeDragModule } from '../../directive/resize-drag/resize-drag.module';\n\n@NgModule({\n  declarations: [ResizePanelComponent],\n  exports: [ResizePanelComponent],\n  imports: [CommonModule, IconModule, ResizeDragModule],\n})\nexport class ResizePanelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResizePanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ResizeDragModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResizePanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-6c96777b2fb2c55955d9ee10d8566c1f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/select/select.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectComponent} from './select/select.component';\nimport {DropdownModule} from '../dropdown/dropdown.module';\nimport {SelectOptionDirective} from './select-option.directive';\nimport {SelectValueDirective} from './select-value.directive';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {FormsModule} from '@angular/forms';\nimport {IconModule} from '../icon/icon.module';\nimport {HighlightModule} from '../../directive/highlight/highlight.module';\nimport {InputModule} from '../input/input.module';\n\n@NgModule({\n  declarations: [SelectComponent, SelectOptionDirective, SelectValueDirective],\n  exports: [SelectComponent, SelectOptionDirective, SelectValueDirective],\n  imports: [\n    DropdownModule,\n    CommonModule,\n    ScrollingModule,\n    FormsModule,\n    IconModule,\n    HighlightModule,\n    InputModule,\n  ],\n})\nexport class SelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectOptionDirective"
                        },
                        {
                            "name": "SelectValueDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "HighlightModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectOptionDirective"
                        },
                        {
                            "name": "SelectValueDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "id": "module-SidebarModule-f5cd7b7c841c81a2f138448443f47298",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/sidebar/sidebar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport {ButtonModule} from '../button/button.module';\nimport {IconModule} from '../icon/icon.module';\n\n@NgModule({\n  declarations: [SidebarComponent],\n  exports: [SidebarComponent],\n  imports: [\n    CommonModule,\n    ButtonModule,\n    IconModule\n  ]\n})\nexport class SidebarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SwitchModule",
            "id": "module-SwitchModule-0418424211aee2ab04174b8a0233f5d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SwitchComponent} from './switch/switch.component';\nimport {SwitchButtonComponent} from './switch-button/switch-button.component';\n\n\n@NgModule({\n  declarations: [SwitchComponent, SwitchButtonComponent],\n  exports: [SwitchComponent, SwitchButtonComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class SwitchModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SwitchButtonComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SwitchButtonComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-13747a421ae68ca31d13cb9d6b6a6140",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TableComponent } from './table/table.component';\nimport { FilterModule } from '../filter/filter.module';\nimport { NumericCellComponent } from './default/numeric-cell/numeric-cell.component';\nimport { ListCellComponent } from './default/list-cell/list-cell.component';\nimport { DateCellComponent } from './default/date-cell/date-cell.component';\nimport { StringCellComponent } from './default/string-cell/string-cell.component';\nimport { HeadCellHostComponent } from './head-cell-host/head-cell-host.component';\nimport { TableHeadComponent } from './table-head/table-head.component';\nimport { TableBodyComponent } from './table-body/table-body.component';\nimport { CellComponent } from './cell/cell.component';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/checkbox.module';\nimport { CellHostComponent } from './cell-host/cell-host.component';\nimport { GroupRowComponent } from './default/group-row/group-row.component';\nimport { TableHeadGroupComponent } from './table-head-group/table-head-group.component';\nimport { HeadCellComponent } from './head-cell/head-cell.component';\nimport { DefaultHeadCellComponent } from './default/default-head-cell/default-head-cell.component';\nimport { IconModule } from '../icon/icon.module';\nimport { DropdownModule } from '../dropdown/dropdown.module';\nimport { TabsModule } from '../tabs/tabs.module';\nimport { SelectModule } from '../select/select.module';\nimport { NumberPipeModule } from '../../pipe/number-pipe/number-pipe.module';\nimport { DatePickerModule } from '../date-picker/date-picker.module';\nimport { ButtonModule } from '../button/button.module';\nimport { SelectionCellComponent } from './selection-cell/selection-cell.component';\nimport { SelectionHeadCellComponent } from './selection-head-cell/selection-head-cell.component';\nimport { HintModule } from '../../directive/hint/hint.module';\nimport { TreeModule } from '../tree/tree.module';\nimport { HeadCellDropdownComponent } from './head-cell-dropdown/head-cell-dropdown.component';\nimport { DateTimeCellComponent } from './default/date-time-cell/date-time-cell.component';\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\nimport { BooleanCellComponent } from './default/boolean-cell/boolean-cell.component';\nimport { UiScrollModule } from 'ngx-ui-scroll';\nimport { ToolbarModule } from '../toolbar/toolbar.module';\nimport { ClickOutsideModule } from '../../directive/click-outside/click-outside.module';\nimport {ResizeDragModule} from '../../directive/resize-drag/resize-drag.module';\n\n@NgModule({\n  declarations: [\n    TableComponent,\n    NumericCellComponent,\n    ListCellComponent,\n    DateCellComponent,\n    StringCellComponent,\n    HeadCellHostComponent,\n    TableHeadComponent,\n    TableBodyComponent,\n    CellComponent,\n    CellHostComponent,\n    GroupRowComponent,\n    TableHeadGroupComponent,\n    HeadCellComponent,\n    DefaultHeadCellComponent,\n    SelectionCellComponent,\n    SelectionHeadCellComponent,\n    HeadCellDropdownComponent,\n    DateTimeCellComponent,\n    BooleanCellComponent,\n  ],\n  exports: [\n    TableComponent,\n    NumericCellComponent,\n    ListCellComponent,\n    DateCellComponent,\n    StringCellComponent,\n    HeadCellHostComponent,\n    TableHeadComponent,\n    TableBodyComponent,\n    CellComponent,\n    CellHostComponent,\n    GroupRowComponent,\n    DateTimeCellComponent,\n    BooleanCellComponent,\n  ],\n  imports: [\n    CommonModule,\n    FilterModule,\n    FormsModule,\n    CheckboxModule,\n    IconModule,\n    DropdownModule,\n    TabsModule,\n    SelectModule,\n    NumberPipeModule,\n    DatePickerModule,\n    ButtonModule,\n    HintModule,\n    TreeModule,\n    OnlyNumberModule,\n    UiScrollModule,\n    ToolbarModule,\n    ClickOutsideModule,\n    ResizeDragModule,\n  ],\n})\nexport class TableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BooleanCellComponent"
                        },
                        {
                            "name": "CellComponent"
                        },
                        {
                            "name": "CellHostComponent"
                        },
                        {
                            "name": "DateCellComponent"
                        },
                        {
                            "name": "DateTimeCellComponent"
                        },
                        {
                            "name": "DefaultHeadCellComponent"
                        },
                        {
                            "name": "GroupRowComponent"
                        },
                        {
                            "name": "HeadCellComponent"
                        },
                        {
                            "name": "HeadCellDropdownComponent"
                        },
                        {
                            "name": "HeadCellHostComponent"
                        },
                        {
                            "name": "ListCellComponent"
                        },
                        {
                            "name": "NumericCellComponent"
                        },
                        {
                            "name": "SelectionCellComponent"
                        },
                        {
                            "name": "SelectionHeadCellComponent"
                        },
                        {
                            "name": "StringCellComponent"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeadComponent"
                        },
                        {
                            "name": "TableHeadGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "ClickOutsideModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "FilterModule"
                        },
                        {
                            "name": "HintModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "ResizeDragModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "TabsModule"
                        },
                        {
                            "name": "ToolbarModule"
                        },
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooleanCellComponent"
                        },
                        {
                            "name": "CellComponent"
                        },
                        {
                            "name": "CellHostComponent"
                        },
                        {
                            "name": "DateCellComponent"
                        },
                        {
                            "name": "DateTimeCellComponent"
                        },
                        {
                            "name": "GroupRowComponent"
                        },
                        {
                            "name": "HeadCellHostComponent"
                        },
                        {
                            "name": "ListCellComponent"
                        },
                        {
                            "name": "NumericCellComponent"
                        },
                        {
                            "name": "StringCellComponent"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-b35dbf3eeae06ed2238aa50f3e25bcd9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TabContentDirective} from './tab-content.directive';\nimport {TabTitleDirective} from './tab-title.directive';\nimport {TabComponent} from './tab/tab.component';\nimport {TabsComponent} from './tabs/tabs.component';\n\n@NgModule({\n  declarations: [\n    TabContentDirective,\n    TabTitleDirective,\n    TabComponent,\n    TabsComponent\n  ],\n  exports: [\n    TabContentDirective,\n    TabTitleDirective,\n    TabComponent,\n    TabsComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class TabsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabContentDirective"
                        },
                        {
                            "name": "TabTitleDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabContentDirective"
                        },
                        {
                            "name": "TabTitleDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TetaTemplateModule",
            "id": "module-TetaTemplateModule-befb53e64a2586a9af45a8640ce17dff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/teta-template/teta-template.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TetaTemplateDirective} from './teta-template.directive';\n\n\n@NgModule({\n  declarations: [\n    TetaTemplateDirective\n  ],\n  exports: [\n    TetaTemplateDirective\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class TetaTemplateModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TetaTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TetaTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeSwitchModule",
            "id": "module-ThemeSwitchModule-b27aa74e9cc5d8ad24977b04e521748f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/theme-switch/theme-switch.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ThemeSwitchComponent} from './theme-switch/theme-switch.component';\nimport {ButtonModule} from '../button/button.module';\nimport {IconModule} from '../icon/icon.module';\n\n@NgModule({\n  declarations: [ThemeSwitchComponent],\n  exports: [ThemeSwitchComponent],\n  imports: [\n    CommonModule,\n    ButtonModule,\n    IconModule\n  ]\n})\nexport class ThemeSwitchModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ThemeSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ThemeSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToggleModule",
            "id": "module-ToggleModule-ed6124e9e16222a3671394819292e6fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/toggle/toggle.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToggleComponent } from './toggle/toggle.component';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n  declarations: [ToggleComponent],\n  exports: [ToggleComponent],\n  imports: [CommonModule, IconModule],\n})\nexport class ToggleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-afdf96a433a3def23551eaea01f7113b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ToolbarComponent} from './toolbar/toolbar.component';\n\n@NgModule({\n  declarations: [ToolbarComponent],\n  exports: [ToolbarComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ToolbarModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-d36ec9b07037ae35116f953cc1a985c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TooltipDirective } from './tooltip.directive';\nimport { DynamicComponentModule } from '../../component/dynamic-component/dynamic-component.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [TooltipDirective],\n  exports: [TooltipDirective],\n  imports: [CommonModule, DynamicComponentModule, BrowserAnimationsModule],\n})\nexport class TooltipModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "id": "module-TreeModule-e8125fa3d561ee7c7f2019ecfa2ef886",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/tree/tree.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeComponent } from './tree/tree.component';\nimport { TreeItemComponent } from './tree-item/tree-item.component';\nimport { TetaTemplateModule } from '../../directive/teta-template/teta-template.module';\nimport { IconModule } from '../icon/icon.module';\nimport { TreeItemToggleComponent } from './tree-item-toggle/tree-item-toggle.component';\n\n@NgModule({\n  declarations: [TreeComponent, TreeItemComponent, TreeItemToggleComponent],\n  exports: [TreeComponent, TetaTemplateModule, TreeItemToggleComponent],\n  imports: [CommonModule, IconModule, TetaTemplateModule],\n})\nexport class TreeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemComponent"
                        },
                        {
                            "name": "TreeItemToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "TetaTemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TetaTemplateModule"
                        },
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "alert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: AlertSampleComponent,\n})"
            },
            {
                "name": "annotationMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/model/annotation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[\n  annotationBadge,\n  annotationLabel,\n  annotationCallout,\n  annotationCalloutCircle,\n  annotationCalloutCurve,\n  annotationCalloutElbow,\n  annotationCalloutRect,\n  annotationCustomType,\n  annotationXYThreshold,\n] as const"
            },
            {
                "name": "area",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/file-upload/File.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [FileUploadModule, IconModule]\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\n    <teta-file-upload-area style=\"height: 250px; width: 300px;\">\n      <div class=\"column column_auto font-body-3\">\n        <div class=\"row align-center justify-content-around\">\n          <svg class=\"icon__image fill-text-30\" style=\"width: 40px\">\n            <use [attr.xlink:href]=\"'#pdf'\"></use>\n          </svg>\n        </div>\n        <div class=\"text-align-center\">\n          Перетащите файлы в формате .xls, .las или .csv сюда или <span class=\"color-primary-30\">загрузите</span>\n        </div>\n      </div>\n    </teta-file-upload-area>\n  </div>`\n})"
            },
            {
                "name": "basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SidebarModule, IconModule, ButtonModule]\n  },\n  props: {\n    backdrop: boolean('backdrop', false),\n    position: SidebarPosition,\n    open1: false,\n    open2: false,\n    open3: false,\n    open4: false\n  },\n  template: `<div class=\"padding-14 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.left\" [open]=\"open1\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.right\" [open]=\"open2\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.top\" [open]=\"open3\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.bottom\" [open]=\"open4\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open1=!open1;open2=open3=open4=false;\">\n      <teta-icon [name]=\"'arrowLeft'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open2=!open2;open1=open3=open4=false;\">\n      <teta-icon [name]=\"'arrowRight'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open3=!open3;open2=open1=open4=false;\">\n      <teta-icon [name]=\"'arrowUp'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open4=!open4;open2=open3=open1=false;\">\n      <teta-icon [name]=\"'arrowDown'\"></teta-icon>\n    </button>\n  </div>`\n})"
            },
            {
                "name": "basicAccordion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/accordion/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [AccordionModule, IconModule]\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3 bg-panel-50\">\n      <teta-accordion class=\"bg-white-50\">\n        <teta-accordion-item>\n          <teta-accordion-head>\n            Heading 1\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 1</div>\n          </ng-template>\n        </teta-accordion-item>\n        <teta-accordion-item [disabled]=\"true\">\n          <teta-accordion-head>\n            Heading 2 (disabled)\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 2</div>\n          </ng-template>\n        </teta-accordion-item>\n        <teta-accordion-item>\n          <teta-accordion-head>\n            Heading 3\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 3</div>\n          </ng-template>\n        </teta-accordion-item>\n      </teta-accordion>\n    </div>`,\n})"
            },
            {
<<<<<<< Updated upstream
=======
                "name": "basicChart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ChartModule],\n  },\n  props: {\n    config,\n  },\n  template: `<div class=\"font-body-3 padding-3 bg-background-0\" style=\"width: auto; height: 300px;\">\n      <teta-chart [config]=\"config\" class=\"bg-background-50 border border-text-50\"></teta-chart>\n    </div>`,\n})"
            },
            {
>>>>>>> Stashed changes
                "name": "basicContextMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ContextMenuModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.left\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n  },\n  template: `<button teta-button\n                     [tetaIconSprite]=\"'assets/icons.svg'\"\n                     [palette]=\"'primary'\"\n                     [tetaContextMenu]=\"menu\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [className]=\"'one'\">\n              <teta-icon [palette]=\"'background'\" [name]=\"'settings'\"></teta-icon>\n              Right click on me\n            </button>\n            <ng-template #menu let-data=\"data\">\n              <div class=\"list shadow-1\" style=\"width: 200px\">\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'addCircle'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Add\n                </div>\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'closeBig'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Delete\n                </div>\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'copy'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Clone\n                </div>\n              </div>\n            </ng-template>`,\n})"
            },
            {
                "name": "basicInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [\n      IconModule,\n      InputModule,\n      FormsModule,\n      SelectModule,\n      RadioModule,\n      DatePickerModule,\n      ToggleModule,\n      CheckboxModule,\n    ],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\n  <div class=\"form-container\">\n    <div class=\"form-row\">\n      <teta-input [label]=\"'text-field'\">\n        <teta-text-field [leftIconName]=\"'user'\" [placeholder]=\"'placeholder'\"></teta-text-field>\n      </teta-input>\n      <teta-input [label]=\"'text-field disabled'\">\n        <teta-text-field [leftIconName]=\"'user'\" [disabled]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\n      </teta-input>\n      <teta-input [label]=\"'text-field invalid'\">\n        <teta-text-field [leftIconName]=\"'user'\" [invalid]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\n          Has errors\n        </div>\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'input'\">\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\n      </teta-input>\n      <teta-input [label]=\"'input disabled'\">\n        <input class=\"input\" disabled [placeholder]=\"'placeholder'\" />\n      </teta-input>\n      <teta-input [label]=\"'input invalid'\">\n        <input class=\"input\" [class.input_invalid]=\"true\" [placeholder]=\"'placeholder'\" />\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\n          Has errors\n        </div>\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'input required'\" [required]=\"true\">\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'Select'\">\n        <teta-select></teta-select>\n      </teta-input>\n      <teta-input [label]=\"'Select disabled'\">\n        <teta-select [disabled]=\"true\"></teta-select>\n      </teta-input>\n      <teta-input [label]=\"'Select invalid'\">\n        <teta-select [invalid]=\"true\"></teta-select>\n      </teta-input>\n    </div>\n    <teta-input [label]=\"'Selection'\">\n      <teta-radio>\n        <teta-radio-button>Option 1</teta-radio-button>\n        <teta-radio-button>Option 2</teta-radio-button>\n        <teta-radio-button [disabled]=\"true\">Option 3</teta-radio-button>\n      </teta-radio>\n    </teta-input>\n    <teta-toggle>Off / On</teta-toggle>\n    <teta-toggle [disabled]=\"true\">Off / On</teta-toggle>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'Date'\">\n        <teta-date-picker></teta-date-picker>\n      </teta-input>\n      <teta-input [label]=\"'Date disabled'\">\n        <teta-date-picker [disabled]=\"true\"></teta-date-picker>\n      </teta-input>\n      <teta-input [label]=\"'Date invalid'\">\n        <teta-date-picker [invalid]=\"true\"></teta-date-picker>\n      </teta-input>\n    </div>\n    <teta-checkbox [binary]=\"true\">Check Me, babe</teta-checkbox>\n    <teta-checkbox [binary]=\"true\" [disabled]=\"true\">I am disabled</teta-checkbox>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'textarea'\">\n        <textarea class=\"textarea\" [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n      <teta-input [label]=\"'textarea disabled'\">\n        <textarea class=\"textarea\" disabled [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n      <teta-input [label]=\"'textarea invalid'\">\n        <textarea class=\"textarea textarea_invalid\" [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n    </div>\n  </div>\n</div>`,\n})"
            },
            {
                "name": "basicList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/list/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-10\">\n<div class=\"list shadow-1\" style=\"width: 200px\">\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n  </div>\n</div>\n</div>`,\n})"
            },
            {
                "name": "basicTab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tabs/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TabsModule, IconModule]\n  },\n  props: {},\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-3\" style=\"width 100px; height 800px;\">\n    <teta-tabs>\n      <teta-tab>\n        <ng-template tetaTabTitle>\n          <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>Результат\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_accent\">\n            <div class=\"container\">\n             1111\n            </div>\n          </div>\n        </ng-template>\n      </teta-tab>\n      <teta-tab>\n        <ng-template tetaTabTitle>\n          Код\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_code\">\n           CODE\n          </div>\n        </ng-template>\n      </teta-tab>\n      <teta-tab [disabled]=\"true\">\n        <ng-template tetaTabTitle>\n          Disabled\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_code\">\n           Disabled\n          </div>\n        </ng-template>\n      </teta-tab>\n    </teta-tabs>\n  </div>`,\n})"
            },
            {
                "name": "basicTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TableModule, IconModule],\n    entryComponents: [\n      DefaultHeadCellComponent,\n      StringCellComponent,\n      DateCellComponent,\n      NumericCellComponent,\n      ListCellComponent,\n      StringFilterComponent,\n      ListFilterComponent,\n      NumericFilterComponent,\n      PopupContentComponent,\n      DateFilterComponent,\n    ],\n    providers: [TableService],\n  },\n  props: {\n    data: getData(15),\n    editType: select(\n      'editType',\n      {\n        row: EditType.row,\n        cell: EditType.cell,\n      },\n      EditType.cell\n    ),\n    selectType: select(\n      'selectType',\n      {\n        none: SelectType.none,\n        multiple: SelectType.multiple,\n        single: SelectType.single,\n      },\n      SelectType.multiple\n    ),\n    editEvent: select(\n      'editEvent',\n      {\n        focus: EditEvent.focus,\n        click: EditEvent.click,\n        doubleClick: EditEvent.doubleClick,\n      },\n      EditEvent.focus\n    ),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 1200px; height: 600px;\">\n              <div [tetaIconSprite]=\"'assets/color-icons.svg'\"></div>\n              <teta-table [data]=\"data\"\n                          [cookieName]=\"'table-stories'\"\n                          [columns]=\"columns\"\n                          [dict]=\"dict\"\n                          [editType]=\"editType\"\n                          [editEvent]=\"editEvent\"\n                          [selectType]=\"selectType\"\n                          (bodyLeft)=\"log('bodyLeft', $event)\"\n                          (cellClick)=\"log('cellClick', $event)\"\n                          (cellDoubleClick)=\"log('cellDoubleClick', $event)\"\n                          (cellEditEnd)=\"log('cellEditEnd', $event)\"\n                          (cellEditStart)=\"log('cellEditStart', $event)\"\n                          (cellFocus)=\"log('cellFocus', $event)\"\n                          (cellKeyUp)=\"log('cellKeyUp', $event)\"\n                          (rowEditEnd)=\"log('rowEditEnd', $event)\"\n                          (rowEditStart)=\"log('rowEditStart', $event)\"\n                          (rowLeft)=\"log('rowLeft', $event)\"\n                          (selectedRowsChange)=\"log('selectedRowsChange', $event)\"\n                          (stateChange)=\"log('stateChange', $event)\"\n                          (valueChange)=\"log('valueChange', $event)\"\n                          (activeRowChange)=\"log('activeRowChange', $event)\"></teta-table>\n            </div>`,\n})"
            },
            {
                "name": "basicToolbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ToolbarModule, ButtonModule, IconModule],\n  },\n  props: {\n    data: treeData,\n  },\n  template: `<teta-toolbar [tetaIconSprite]=\"'assets/icons.svg'\" [palette]=\"'primary'\">\n  <button teta-button [palette]=\"'primary'\" [square]=\"true\">\n    <teta-icon [name]=\"'moreVertical'\"></teta-icon>\n  </button>\n  <span class=\"margin-left-2\">Скважины</span>\n</teta-toolbar>`,\n})"
            },
            {
                "name": "basicTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tree/Tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TreeModule, TetaTemplateModule, IconModule, BrowserAnimationsModule]\n  },\n  props: {\n    data: treeData\n  },\n  template: `<teta-tree [tetaIconSprite]=\"'assets/icons.svg'\" style=\"width: 400px;\" [data]=\"data\">\n  <ng-template tetaTemplate let-item>\n    <teta-icon [name]=\"item.icon\" class=\"fill-text-30 margin-right-2\"></teta-icon> {{item.name}}\n  </ng-template>\n</teta-tree>`,\n})"
            },
            {
                "name": "binary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [CheckboxModule, IconModule, FormsModule],\n  },\n  props: {\n    type: select('type', ['binary', 'list'], 'binary'),\n    allowUndefined: boolean('allowUndefined', false),\n    text: text('text', 'Remember me'),\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n  },\n  template: `<teta-checkbox [tetaIconSprite]=\"'assets/icons.svg'\"\n                            [palette]=\"palette\"\n                            [ngModel]=\"value\"\n                            (ngModelChange)=\"setValue($event)\"\n                            [binary]=\"true\">\n              {{text}}\n            </teta-checkbox>`,\n})"
            },
            {
                "name": "buttons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ButtonModule, IconModule],\n  },\n  props: {\n    palettes: ['primary', 'text', 'red', 'yellow', 'green'],\n    text: text('text', 'Push me'),\n    leftIcon: boolean('leftIcon', true),\n    rightIcon: boolean('rightIcon', true),\n    disabled: boolean('disabled', false),\n  },\n  template: `<div class=\"row\" [tetaIconSprite]=\"'assets/icons.svg'\"  style=\"grid-gap: 12px\">\n  <div *ngFor=\"let palette of palettes\" class=\"column\" style=\"grid-gap: 8px\">\n    <div class=\"font-body-3\">\n      Default\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Only Icon\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [square]=\"true\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Outline\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'outline'\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Ghost\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'ghost'\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n  </div>\n</div>`,\n})"
            },
            {
                "name": "cellComponentsMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<FilterType, Type<any>>",
                "defaultValue": "new Map<\n  FilterType,\n  Type<any>\n>()\n  .set(FilterType.number, NumericCellComponent)\n  .set(FilterType.date, DateCellComponent)\n  .set(FilterType.list, ListCellComponent)\n  .set(FilterType.string, StringCellComponent)\n  .set(FilterType.boolean, BooleanCellComponent)\n  .set(FilterType.custom, StringCellComponent)"
            },
            {
                "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}"
            },
            {
                "name": "classTypeLegendMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<SeriesType, string>()\n  .set(SeriesType.line, 'line')\n  .set(SeriesType.spline, 'line')"
            },
            {
                "name": "coloredIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule]\n  },\n  props: {\n    palette: select('palette', ['primary', 'text', 'red', 'white', 'yellow', 'green'], 'primary'),\n    icons: coloredIconsList,\n  },\n  template: `<div [tetaIconSprite]=\"'assets/color-icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\n                <span class=\"padding-left-4\">{{icon}}</span>\n              </div>\n            </div>`,\n})"
            },
            {
                "name": "coloredIconsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/icons-list.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'gisColor',\n  'gisInnerColor',\n  'gisSimpleColor',\n  'grpAddColor',\n  'grpColor',\n  'handbagAddColor',\n  'handbagColor',\n  'improveColor',\n  'lineColor',\n  'lineDashedColor',\n  'lineGradientColor',\n  'liquidAddColor',\n  'liquidSystemColor',\n  'lithotypeColor',\n  'mapColor',\n  'nktColor',\n  'opzAddColor',\n  'opzColor',\n  'sortDownColor',\n  'sortUpColor',\n  'sumAddColor',\n  'sumColor',\n  'wellAddColor',\n  'wellColor',\n  'wellConstructionColor',\n  'addColor',\n  'areasColor',\n  'barChart',\n  'barChart',\n  'calcColor',\n  'calendarColor',\n  'chartLineColor',\n  'chartLineDashed',\n  'chartLineGradientColor',\n  'clusterColor',\n  'coinColor',\n  'deleteColor',\n  'documentColor',\n  'favorite',\n  'filterColor',\n  'filterSortDownColor',\n  'filterSortUpColor',\n  'folderAddColor',\n  'folderColor',\n  'geomechColor',\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  new TableColumn({\n    name: 'name',\n    flex: 1,\n    locked: true,\n    filterType: FilterType.string,\n  }),\n  new TableColumn({\n    name: 'date',\n    locked: true,\n    filterType: FilterType.date,\n  }),\n  new TableColumn({\n    name: 'value',\n    locked: true,\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'summary',\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'ram',\n    caption: 'RAM',\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'location',\n    columns: [\n      new TableColumn({\n        name: 'city',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'state',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'address',\n        flex: 2,\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'zip',\n        filterType: FilterType.string,\n      }),\n    ],\n  }),\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  new TableColumn({\n    name: 'name',\n    flex: 1,\n    locked: true,\n    filterType: FilterType.string,\n  }),\n  new TableColumn({\n    name: 'date',\n    locked: true,\n    filterType: FilterType.date,\n  }),\n  new TableColumn({\n    name: 'long',\n    locked: true,\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'value',\n    locked: true,\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'summary',\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'ram',\n    caption: 'RAM',\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'location',\n    columns: [\n      new TableColumn({\n        name: 'city',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'state',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'address',\n        flex: 2,\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'zip',\n        filterType: FilterType.string,\n      }),\n    ],\n  }),\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
<<<<<<< Updated upstream
=======
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IChartConfig",
                "defaultValue": "{\n  name: '123',\n  xAxis: [\n    {\n      type: AxisType.number,\n      visible: true,\n    },\n  ],\n  yAxis: [\n    {\n      type: AxisType.number,\n      visible: true,\n    },\n  ],\n  series: [\n    {\n      type: SeriesType.line,\n      data: points1,\n      name: 'Series 1',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'red',\n    },\n    {\n      type: SeriesType.line,\n      data: points2,\n      name: 'Series 2',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'blue',\n    },\n  ],\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
>>>>>>> Stashed changes
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ChartOptions",
                "defaultValue": "new ChartOptions({\n  name: '123',\n  zoom: { enable: true },\n  xAxis: [\n    new AxisOptions({\n      type: 'time',\n    }),\n  ],\n  yAxis: [new AxisOptions()],\n  series: [\n    new Series<BasePoint>({\n      type: SeriesType.line,\n      data: points1,\n      name: 'Serie 1',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'red',\n    }),\n    new Series<BasePoint>({\n      type: SeriesType.line,\n      data: points2,\n      name: 'Serie 2',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'steelblue',\n    }),\n  ],\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
<<<<<<< Updated upstream
=======
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
>>>>>>> Stashed changes
                "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DatePickerComponent),\n  multi: true,\n}"
            },
            {
                "name": "datePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: new Date(),\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-date-picker>`,\n})"
            },
            {
                "name": "dateTimePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: null,\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [showTime]=\"true\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-date-picker>`,\n})"
            },
            {
                "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DaySelectComponent),\n  multi: true,\n}"
            },
            {
<<<<<<< Updated upstream
=======
                "name": "defaultChartConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/default/default-chart-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IChartConfig",
                "defaultValue": "{\n  series: [],\n  xAxis: [{\n    visible: true\n  }],\n  yAxis: [{\n    visible: true\n  }],\n  gridLines: true\n}"
            },
            {
>>>>>>> Stashed changes
                "name": "defaultDrawerMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<SeriesType, IDrawer<BasePoint>>()\n  .set(SeriesType.area, new AreaDrawer())\n  .set(SeriesType.bar, new BarDrawer())\n  .set(SeriesType.line, new LineDrawer())\n  .set(SeriesType.pie, new PieDrawer())\n  .set(SeriesType.scatter, new ScatterDrawer())\n  .set(SeriesType.spline, new SplineDrawer())\n  .set(SeriesType.contour, new ContourDrawer())"
            },
            {
                "name": "defaultLegendDrawerMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<LegendType, ILegendDrawer>()\n  .set(LegendType.swatches, new SwatchDrawer())\n  .set(LegendType.gradient, new GradientDrawer())"
            },
            {
                "name": "dict",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  filterOptions: [\n    { id: 8, name: 8 },\n    { id: 16, name: 16 },\n    { id: 32, name: 32 },\n    { id: 64, name: 64 },\n    { id: 128, name: 128 },\n  ],\n}"
            },
            {
                "name": "dict",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ram: [\n    { id: 8, name: 8 },\n    { id: 16, name: 16 },\n    { id: 32, name: 32 },\n    { id: 64, name: 64 },\n    { id: 128, name: 128 },\n  ],\n  long: getLong(),\n}"
            },
            {
                "name": "dragSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DragSortModule],\n  },\n  props: {\n    items: [\n      {\n        id: 0,\n        name: 0,\n      },\n      {\n        id: 1,\n        name: 1,\n      },\n      {\n        id: 2,\n        name: 2,\n      },\n      {\n        id: 3,\n        name: 3,\n      },\n    ],\n    update: (event: DragSortEvent<any>, list: any[]) => {\n      return ArrayUtil.moveItem(list, event.previousIndex, event.newIndex);\n    },\n  },\n  template: `<div tetaDragSortContainer\n                  (dragSorted)=\"items = update($event, items)\"\n                  [dragSortList]=\"items\"\n                  class=\"padding-10 margin-10 row row_auto border border-text-5\">\n              <div [tetaDragSortItem]=\"item\"\n                    *ngFor=\"let item of items\"\n                    class=\"padding-4 border border-text-10\">\n                {{item.name}}\n              </div>\n            </div>\n            <div tetaDragSortContainer\n                  (dragSorted)=\"items = update($event, items)\"\n                  [dragSortList]=\"items\"\n                  class=\"padding-10 margin-10 column row_auto border border-text-5\">\n              <div [tetaDragSortItem]=\"item\"\n                    [dragSortDirection]=\"'vertical'\"\n                    *ngFor=\"let item of items\"\n                    class=\"padding-4 border border-text-10\">\n                {{item.name}}\n              </div>\n            </div>`,\n})"
            },
            {
                "name": "dropdownComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DropdownModule, ButtonModule, IconModule]\n  },\n  props: {\n    align: select('align', {\n      left: Align.left,\n      right: Align.right,\n      center: Align.center,\n      auto: Align.auto\n    }, Align.left),\n    verticalAlign: [\n      VerticalAlign.bottom,\n      VerticalAlign.top,\n      VerticalAlign.center,\n      VerticalAlign.auto],\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob('autoCloseIgnore', {\n      esc: 'esc',\n      enter: 'enter',\n      inside: 'inside',\n      outside: 'outside'\n    }, ['inside'], {\n      display: 'check',\n    })\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-dropdown *ngFor=\"let valign of verticalAlign\"\n                    [align]=\"align\"\n                    [verticalAlign]=\"valign\"\n                    [autoClose]=\"autoClose\"\n                    [autoCloseIgnore]=\"autoCloseIgnore\">\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\n        Click to open\n      </button>\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n        </div>\n      </div>\n    </teta-dropdown>\n  </div>`\n})"
            },
            {
                "name": "dropdownDirective",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DropdownModule, ButtonModule, IconModule]\n  },\n  props: {\n    align: select('align', {\n      left: Align.left,\n      right: Align.right,\n      center: Align.center,\n      auto: Align.auto\n    }, Align.left),\n    verticalAlign: [\n      VerticalAlign.bottom,\n      VerticalAlign.top,\n      VerticalAlign.center,\n      VerticalAlign.auto],\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob('autoCloseIgnore', {\n      esc: 'esc',\n      enter: 'enter',\n      inside: 'inside',\n      outside: 'outside'\n    }, ['inside'], {\n      display: 'check',\n    })\n  },\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <div tetaDropdown\n          class=\"margin-right-4\"\n          *ngFor=\"let valign of verticalAlign\"\n          [align]=\"align\"\n          [verticalAlign]=\"valign\"\n          [autoClose]=\"autoClose\"\n          [autoCloseIgnore]=\"autoCloseIgnore\">\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\n      Click to open\n      </button>\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\n        <ng-container *ngFor=\"let i of [1,2,3]\">\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>`\n})"
            },
            {
                "name": "filterComponentsMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<FilterType, Type<any>>",
                "defaultValue": "new Map<\n  FilterType,\n  Type<any>\n>()\n  .set(FilterType.number, NumericFilterComponent)\n  .set(FilterType.date, DateFilterComponent)\n  .set(FilterType.list, ListFilterComponent)\n  .set(FilterType.string, StringFilterComponent)\n  .set(FilterType.boolean, BooleanFilterComponent)\n  .set(FilterType.custom, StringFilterComponent)"
            },
            {
                "name": "formatNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  value: any,\n  decimalLength: number,\n  chunkDelimiter: string,\n  decimalDelimiter: string,\n  chunkLength: number\n) => {\n  const abs = Math.abs(value);\n  if (0 < abs && 1 > abs) {\n    const firstDigitIndex = Math.floor(Math.abs(Math.log10(abs)));\n    decimalLength += firstDigitIndex;\n  }\n  const precision = Math.min(getPrecision(value), Math.floor(decimalLength));\n  const result =\n    '\\\\d(?=(\\\\d{' + chunkLength + '})+' + (precision > 0 ? '\\\\D' : '$') + ')';\n  const num = value.toFixed(precision);\n  return (decimalDelimiter ? num.replace('.', decimalDelimiter) : num).replace(\n    new RegExp(result, 'g'),\n    '$&' + chunkDelimiter\n  );\n}"
            },
            {
                "name": "fromComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: ModalFromComponentComponent,\n  props: {\n    name: text('name', 'Название'),\n    description: text('description', 'Описание объекта'),\n  },\n})"
            },
            {
                "name": "fromString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/hint/Hint.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [HintModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n    delay: number('delay', 0, {\n      max: 5000,\n      min: 0,\n      range: true,\n      step: 100,\n    }),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n              <button teta-button\n                     [palette]=\"'primary'\"\n                     [tetaHint]=\"'You can get it now, right?'\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [delay]=\"delay\"\n                     [className]=\"'one'\">\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                Hover me\n              </button>\n            </div>`,\n})"
            },
            {
                "name": "fromString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TooltipModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n                <button teta-button\n                         [palette]=\"'primary'\"\n                         [tetaTooltip]=\"'You can get it now, right?'\"\n                         [align]=\"align\"\n                         [verticalAlign]=\"verticalAlign\"\n                         [className]=\"'one'\">\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                  Click me\n                </button>\n              </div>`,\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: ModalFromTemplateComponent,\n  props: {\n    name: text('name', 'Название'),\n    description: text('description', 'Описание объекта'),\n  },\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/hint/Hint.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [HintModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    test: 'AAAAA',\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n    delay: number('delay', 0, {\n      max: 5000,\n      min: 0,\n      range: true,\n      step: 100,\n    }),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n              <ng-template #hint>\n                <div>{{test}}</div>\n              </ng-template>\n              <button teta-button\n                     [palette]=\"'primary'\"\n                     [tetaHint]=\"hint\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [delay]=\"delay\"\n                     [className]=\"'one'\">\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                Hover me\n              </button>\n            </div>`,\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TooltipModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n                <ng-template #hint>\n                  From template\n                </ng-template>\n                <button teta-button\n                         [palette]=\"'primary'\"\n                         [tetaTooltip]=\"hint\"\n                         [align]=\"align\"\n                         [verticalAlign]=\"verticalAlign\"\n                         [className]=\"'one'\">\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                  Click me\n                </button>\n              </div>`,\n})"
            },
            {
                "name": "getCellComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(column: TableColumn): Type<any> =>\n  cellComponentsMap.has(column.filterType)\n    ? cellComponentsMap.get(column.filterType)\n    : StringCellComponent"
            },
            {
                "name": "getData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(size) => {\n  const res = [];\n  for (let i = 0; i < size; i++) {\n    res.push({\n      name: `${faker.name.firstName()} ${faker.name.lastName()}`,\n      date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\n      long: faker.helpers.randomize([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n      value: faker.datatype.number({ min: 0, max: 100 }),\n      summary: faker.datatype.number({ min: 0, max: 100000 }),\n      ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\n      address: faker.address.streetAddress(),\n      state: faker.address.state(),\n      city: faker.address.city(),\n      zip: faker.address.zipCode(),\n    });\n  }\n  return res;\n}"
            },
            {
                "name": "getFilterComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item: FilterItem): Type<any> =>\n  filterComponentsMap.has(item.filterType)\n    ? filterComponentsMap.get(item.filterType)\n    : StringFilterComponent"
            },
            {
                "name": "getLong",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  const res = [];\n  for (let i = 0; i <= 10; i++) {\n    res.push({\n      id: i,\n      name: `${faker.address.city()} ${faker.address.country()} ${faker.address.state()} ${faker.address.zipCode()}`,\n    });\n  }\n  return res;\n}"
            },
            {
                "name": "getOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(size) => {\n  const res = [];\n  for (let i = 0; i < size; i++) {\n    res.push({\n      id: i,\n      name: faker.address.city(),\n    });\n  }\n  return res;\n}"
            },
            {
                "name": "getPrecision",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: number) => {\n  if (!isFinite(a)) {\n    return 0;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(a * e) / e !== a) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}"
            },
            {
                "name": "horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DelimiterModule, ButtonModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <button teta-button [palette]=\"'primary'\">\n      <teta-icon [name]=\"'settings'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'add'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'delete'\"></teta-icon>\n    </button>\n  </div>`,\n})"
            },
            {
                "name": "horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ResizePanelModule],\n  },\n  props: {\n    maxSize: number('maxSize', 500, {\n      min: 300,\n      max: 450,\n      range: true,\n      step: 10,\n    }),\n    minSize: number('minSize', 50, {\n      min: 50,\n      max: 150,\n      range: true,\n      step: 10,\n    }),\n    grabPosition: select('grabPosition', ['left', 'right'], 'left'),\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <div class=\"row bg-white-50\"\n                      style=\"width: 500px; height: 500px;\">\n                  <div class=\"column_6 bg-primary-5\">\n                    I will surrender\n                  </div>\n                  <teta-resize-panel\n                        [maxSize]=\"maxSize\"\n                        [minSize]=\"minSize\"\n                        [direction]=\"'vertical'\"\n                        [grabPosition]=\"grabPosition\"\n                        class=\"column_6 bg-red-5\">\n                    I will resize\n                  </teta-resize-panel>\n                </div>\n              </div>`,\n})"
            },
            {
                "name": "icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule]\n  },\n  props: {\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    icons: iconsList,\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\n                <span class=\"padding-left-4\">{{icon}}</span>\n              </div>\n            </div>`,\n})"
            },
            {
                "name": "iconsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/icons-list.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'add',\n  'addArea',\n  'addCircle',\n  'addComment',\n  'arrowDown',\n  'arrowDownKey',\n  'arrowDownSmall',\n  'arrowLeft',\n  'arrowLeftKey',\n  'arrowLeftSmall',\n  'arrowRight',\n  'arrowRightKey',\n  'arrowRightSmall',\n  'arrowUp',\n  'arrowUpDownSmall',\n  'arrowUpKey',\n  'arrowUpSmall',\n  'autoSize',\n  'autoSizeAll',\n  'backspace',\n  'bullet',\n  'calc',\n  'calendar',\n  'camera',\n  'chart',\n  'checkCircle',\n  'clock',\n  'clockChange',\n  'closeBig',\n  'closeCircle',\n  'comment',\n  'copy',\n  'copySelected',\n  'cut',\n  'dash',\n  'delete',\n  'deleteSelected',\n  'document',\n  'documentAnalyze',\n  'dots',\n  'download',\n  'drop',\n  'edit',\n  'end',\n  'eye',\n  'fader',\n  'filter',\n  'filterSortDown',\n  'filterSortUp',\n  'flag',\n  'folder',\n  'fullScreen',\n  'gantt',\n  'gisMonochrome',\n  'handbag',\n  'info',\n  'isoline',\n  'lamp',\n  'layers',\n  'layersLines',\n  'link',\n  'list',\n  'lock',\n  'map',\n  'measurement',\n  'menu',\n  'minus',\n  'monitoringDepth',\n  'monitoringTime',\n  'moreHorizontal',\n  'moreVertical',\n  'multiCopy',\n  'newTemplate',\n  'noSignal',\n  'paste',\n  'pause',\n  'pc',\n  'pdf',\n  'pieChart',\n  'pin',\n  'play',\n  'playBackRight',\n  'playForwardRight',\n  'print',\n  'question',\n  'redo',\n  'rewBack',\n  'rewForward',\n  'ring',\n  'save',\n  'search',\n  'settings',\n  'signal',\n  'square',\n  'star',\n  'start',\n  'stop',\n  'sum',\n  'table',\n  'tabletGraph',\n  'templateDownload',\n  'templateSettings',\n  'templateUpload',\n  'tick',\n  'timeOut',\n  'tree',\n  'treeTurn',\n  'undo',\n  'unpin',\n  'update',\n  'upload',\n  'user',\n  'warning',\n  'well',\n  'wrench',\n  'xls',\n  'xyz',\n  'horizontal',\n  'vertical',\n  'srt',\n  'nolteAnalysis',\n  'miniFrac',\n  'hornerAnalysis',\n]"
            },
            {
                "name": "interactiveList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/list/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule],\n  },\n  template: `<div class=\"padding-10\">\n<div class=\"list shadow-1\" style=\"width: 200px\">\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n  </div>\n</div>\n</div>`,\n})"
            },
            {
                "name": "item",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  name: `${faker.name.firstName()} ${faker.name.lastName()}`,\n  date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\n  value: faker.datatype.number({ min: 0, max: 100 }),\n  summary: faker.datatype.number({ min: 0, max: 100000 }),\n  ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\n  address: faker.address.streetAddress(),\n  state: faker.address.state(),\n  city: faker.address.city(),\n  zip: faker.address.zipCode(),\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "line",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ChartModule],\n  },\n  props: {\n    config,\n  },\n  template: `<div style=\"height: 100vh\"><teta-chart [config]=\"config\"></teta-chart></div>`,\n})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [CheckboxModule, IconModule, FormsModule],\n  },\n  props: {\n    type: select('type', ['binary', 'list'], 'binary'),\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n    values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    result: [],\n    selectAll: (value: boolean, result: number[], values: number[]) => {\n      result = [];\n      if (value) {\n        result.push(...values);\n      }\n      return result;\n    },\n    allSelected: (result: number[], values: number[]) => {\n      if (!result || result?.length < 1) {\n        return false;\n      }\n      if (values.every((_) => result.indexOf(_) >= 0)) {\n        return true;\n      }\n      return undefined;\n    },\n  },\n  template: `\n<div style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-4\" [tetaIconSprite]=\"'assets/icons.svg'\">\n  <teta-checkbox  [ngModel]=\"allSelected(result, values)\"\n                  [palette]=\"palette\"\n                  (ngModelChange)=\"result = selectAll($event, result, values)\"\n                  [allowNull]=\"true\"\n                  [binary]=\"true\">Выбрать все</teta-checkbox>\n</div>\n<div *ngFor=\"let num of values\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n  <teta-checkbox [palette]=\"palette\" [ngModel]=\"result\" (ngModelChange)=\"result = $event;setValue($event)\" [value]=\"num\">\n    Option {{num}}\n  </teta-checkbox>\n</div>`,\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "messageSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/message/Message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [MessageSamplesModule]\n  },\n  template: `<teta-message-sample></teta-message-sample>`,\n})"
            },
            {
                "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MonthPickerComponent),\n  multi: true,\n}"
            },
            {
                "name": "monthPicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: new Date(),\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-month-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-month-picker>`,\n})"
            },
            {
                "name": "multipleCustom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: select('icon', iconsList, null),\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 300px;\"\n                  [options]=\"options\"\n                  [multiple]=\"true\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [valueRef]=\"'id'\"\n                  [textRef]=\"'name'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n      <ng-template tetaSelectValue let-value>\n      <div class=\"row row_auto overflow-hidden\">\n        <div *ngFor=\"let item of value\" class=\"color-red-50\">\n          {{item?.name}},\n        </div>\n      </div>\n      </ng-template>\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
            },
            {
                "name": "multipleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: select('icon', iconsList, null),\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 300px;\"\n                  [options]=\"options\"\n                  [multiple]=\"true\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [valueRef]=\"'id'\"\n                  [textRef]=\"'name'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n<!--      <ng-template tetaSelectValue let-value>-->\n<!--        {{value?.name}}-->\n<!--      </ng-template>-->\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tabs/tab/tab.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "onlyNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [OnlyNumberModule, FormsModule],\n  },\n  props: {\n    data: 123,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <input tetaOnlyNumber\n                        class=\"input\"\n                        [ngModel]=\"data\"\n                        (ngModelChange)=\"data=$event;log('tetaOnlyNumber', $event)\"/>\n                <div>{{data}}</div>\n              </div>`,\n})"
            },
            {
                "name": "pagerSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/pager/Pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [PagerModule, IconModule]\n  },\n  template: `<teta-pager [tetaIconSprite]=\"'assets/icons.svg'\"></teta-pager>`,\n})"
            },
            {
                "name": "panel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ExpandPanelModule],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\n    <teta-expand-panel></teta-expand-panel>\n  </div>`,\n})"
            },
            {
                "name": "points1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/chart-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    x: 1619169153454,\n    y: 0,\n  },\n  {\n    x: 1619268153454,\n    y: 40,\n  },\n  {\n    x: 1619286153454,\n    y: 40,\n  },\n  {\n    x: 1619289969454,\n    y: 40,\n  },\n  {\n    x: 1619308689454,\n    y: 170,\n  },\n  {\n    x: 1619319705454,\n    y: 170,\n  },\n  {\n    x: 1619321505454,\n    y: 170,\n  },\n  {\n    x: 1619326289854,\n    y: 170,\n  },\n  {\n    x: 1619328575854,\n    y: 170,\n  },\n  {\n    x: 1619394095854,\n    y: 625,\n  },\n  {\n    x: 1619419169854,\n    y: 625,\n  },\n  {\n    x: 1619443124693,\n    y: 625,\n  },\n  {\n    x: 1619462996693,\n    y: 625,\n  },\n  {\n    x: 1619465300693,\n    y: 625,\n  },\n  {\n    x: 1619467100693,\n    y: 625,\n  },\n  {\n    x: 1619476532693,\n    y: 625,\n  },\n  {\n    x: 1619481338693,\n    y: 625,\n  },\n  {\n    x: 1619486144693,\n    y: 625,\n  },\n  {\n    x: 1619495576693,\n    y: 625,\n  },\n  {\n    x: 1619499176693,\n    y: 625,\n  },\n  {\n    x: 1619500976693,\n    y: 625,\n  },\n  {\n    x: 1619510408693,\n    y: 625,\n  },\n  {\n    x: 1619512208693,\n    y: 625,\n  },\n  {\n    x: 1619515088693,\n    y: 625,\n  },\n  {\n    x: 1619529488693,\n    y: 625,\n  },\n  {\n    x: 1619543888693,\n    y: 625,\n  },\n  {\n    x: 1619556920693,\n    y: 625,\n  },\n  {\n    x: 1619560520693,\n    y: 625,\n  },\n  {\n    x: 1619562320693,\n    y: 625,\n  },\n  {\n    x: 1619570960693,\n    y: 625,\n  },\n  {\n    x: 1619581760693,\n    y: 625,\n  },\n  {\n    x: 1619594360693,\n    y: 625,\n  },\n  {\n    x: 1619597960693,\n    y: 625,\n  },\n  {\n    x: 1619633744693,\n    y: 625,\n  },\n  {\n    x: 1619637560693,\n    y: 625,\n  },\n  {\n    x: 1619641160693,\n    y: 625,\n  },\n  {\n    x: 1619649296693,\n    y: 625,\n  },\n  {\n    x: 1619706896693,\n    y: 625,\n  },\n  {\n    x: 1619836496693,\n    y: 625,\n  },\n  {\n    x: 1619843142293,\n    y: 625,\n  },\n  {\n    x: 1619861142293,\n    y: 625,\n  },\n  {\n    x: 1619862942293,\n    y: 625,\n  },\n  {\n    x: 1619872050293,\n    y: 625,\n  },\n  {\n    x: 1619878170293,\n    y: 625,\n  },\n  {\n    x: 1619891130293,\n    y: 625,\n  },\n  {\n    x: 1619896062293,\n    y: 625,\n  },\n  {\n    x: 1619977659893,\n    y: 965,\n  },\n  {\n    x: 1619998179893,\n    y: 965,\n  },\n  {\n    x: 1620016503893,\n    y: 965,\n  },\n  {\n    x: 1620042405893,\n    y: 965,\n  },\n  {\n    x: 1620222405893,\n    y: 1115,\n  },\n  {\n    x: 1620233043893,\n    y: 1115,\n  },\n  {\n    x: 1620245049893,\n    y: 1115,\n  },\n  {\n    x: 1620253491893,\n    y: 1115,\n  },\n  {\n    x: 1620257559893,\n    y: 1115,\n  },\n  {\n    x: 1620259359893,\n    y: 1115,\n  },\n  {\n    x: 1620277521893,\n    y: 1115,\n  },\n  {\n    x: 1620279321893,\n    y: 1115,\n  },\n  {\n    x: 1620281571893,\n    y: 1115,\n  },\n  {\n    x: 1620282291893,\n    y: 1115,\n  },\n  {\n    x: 1620296691893,\n    y: 1115,\n  },\n  {\n    x: 1620314691893,\n    y: 1115,\n  },\n  {\n    x: 1620317661893,\n    y: 1115,\n  },\n  {\n    x: 1620318381893,\n    y: 1115,\n  },\n  {\n    x: 1620320181893,\n    y: 1115,\n  },\n  {\n    x: 1620340143893,\n    y: 1115,\n  },\n  {\n    x: 1620345543893,\n    y: 1115,\n  },\n  {\n    x: 1620346083893,\n    y: 1115,\n  },\n  {\n    x: 1620510003893,\n    y: 1798,\n  },\n  {\n    x: 1620547674861,\n    y: 1798,\n  },\n  {\n    x: 1620577339377,\n    y: 1798,\n  },\n  {\n    x: 1620624661377,\n    y: 1798,\n  },\n  {\n    x: 1620743221377,\n    y: 2292,\n  },\n  {\n    x: 1620767892345,\n    y: 2292,\n  },\n  {\n    x: 1620783002022,\n    y: 2292,\n  },\n  {\n    x: 1620827498022,\n    y: 2292,\n  },\n  {\n    x: 1620832406934,\n    y: 2292,\n  },\n  {\n    x: 1620834206934,\n    y: 2292,\n  },\n  {\n    x: 1620870112737,\n    y: 2292,\n  },\n  {\n    x: 1620875021649,\n    y: 2292,\n  },\n  {\n    x: 1620876821649,\n    y: 2292,\n  },\n  {\n    x: 1620912176488,\n    y: 2292,\n  },\n  {\n    x: 1620924795843,\n    y: 2292,\n  },\n  {\n    x: 1620926595843,\n    y: 2292,\n  },\n  {\n    x: 1620940995843,\n    y: 2292,\n  },\n  {\n    x: 1620953775843,\n    y: 2292,\n  },\n  {\n    x: 1621117359843,\n    y: 2292,\n  },\n  {\n    x: 1621128159843,\n    y: 2292,\n  },\n  {\n    x: 1621133559843,\n    y: 2292,\n  },\n  {\n    x: 1621135359843,\n    y: 2292,\n  },\n  {\n    x: 1621170355172,\n    y: 2292,\n  },\n  {\n    x: 1621175893185,\n    y: 2292,\n  },\n  {\n    x: 1621177693185,\n    y: 2292,\n  },\n  {\n    x: 1621213045185,\n    y: 2292,\n  },\n  {\n    x: 1621221445185,\n    y: 2292,\n  },\n  {\n    x: 1621223245185,\n    y: 2292,\n  },\n  {\n    x: 1621234045185,\n    y: 2292,\n  },\n  {\n    x: 1621235125185,\n    y: 2292,\n  },\n  {\n    x: 1621245325185,\n    y: 2292,\n  },\n  {\n    x: 1621332870640,\n    y: 2292,\n  },\n  {\n    x: 1621334776066,\n    y: 2292,\n  },\n  {\n    x: 1621339254466,\n    y: 2292,\n  },\n  {\n    x: 1621353013666,\n    y: 2292,\n  },\n  {\n    x: 1621410613666,\n    y: 2292,\n  },\n  {\n    x: 1623114330638,\n    y: 2292,\n  },\n  {\n    x: 1623157530638,\n    y: 2292,\n  },\n  {\n    x: 1623175530638,\n    y: 2292,\n  },\n  {\n    x: 1623177330638,\n    y: 2292,\n  },\n  {\n    x: 1623253831799,\n    y: 2292,\n  },\n  {\n    x: 1623260653799,\n    y: 2292,\n  },\n  {\n    x: 1623266371114,\n    y: 2292,\n  },\n  {\n    x: 1623288223114,\n    y: 2292,\n  },\n  {\n    x: 1623306943114,\n    y: 2292,\n  },\n  {\n    x: 1623371023114,\n    y: 2470,\n  },\n  {\n    x: 1623377485049,\n    y: 2470,\n  },\n  {\n    x: 1623392414081,\n    y: 2470,\n  },\n  {\n    x: 1623398156016,\n    y: 2470,\n  },\n  {\n    x: 1623409205789,\n    y: 2470,\n  },\n  {\n    x: 1623411005789,\n    y: 2470,\n  },\n  {\n    x: 1623446425144,\n    y: 2470,\n  },\n  {\n    x: 1623460825144,\n    y: 2470,\n  },\n  {\n    x: 1623489625144,\n    y: 2470,\n  },\n  {\n    x: 1623525044499,\n    y: 2470,\n  },\n  {\n    x: 1623547488370,\n    y: 2470,\n  },\n  {\n    x: 1623606888370,\n    y: 2800,\n  },\n  {\n    x: 1623611053531,\n    y: 2800,\n  },\n  {\n    x: 1623626130950,\n    y: 2800,\n  },\n  {\n    x: 1623629576111,\n    y: 2800,\n  },\n  {\n    x: 1623638576111,\n    y: 2800,\n  },\n  {\n    x: 1623640376111,\n    y: 2800,\n  },\n  {\n    x: 1623657746735,\n    y: 2800,\n  },\n  {\n    x: 1623665133195,\n    y: 2800,\n  },\n  {\n    x: 1623666933195,\n    y: 2800,\n  },\n  {\n    x: 1623769533195,\n    y: 3370,\n  },\n  {\n    x: 1623786840292,\n    y: 3370,\n  },\n  {\n    x: 1623811246744,\n    y: 3370,\n  },\n  {\n    x: 1623827833841,\n    y: 3370,\n  },\n  {\n    x: 1623833965487,\n    y: 3370,\n  },\n  {\n    x: 1623835765487,\n    y: 3370,\n  },\n  {\n    x: 1623864987401,\n    y: 3370,\n  },\n  {\n    x: 1623873807401,\n    y: 3370,\n  },\n  {\n    x: 1623875607401,\n    y: 3370,\n  },\n  {\n    x: 1623921939401,\n    y: 3370,\n  },\n  {\n    x: 1623939939401,\n    y: 3370,\n  },\n  {\n    x: 1623941739401,\n    y: 3370,\n  },\n  {\n    x: 1623954963401,\n    y: 3370,\n  },\n  {\n    x: 1624010025401,\n    y: 3370,\n  },\n  {\n    x: 1624027521401,\n    y: 3370,\n  },\n  {\n    x: 1624034478401,\n    y: 3370,\n  },\n  {\n    x: 1624050191401,\n    y: 3370,\n  },\n  {\n    x: 1624062755401,\n    y: 3370,\n  },\n  {\n    x: 1624075193401,\n    y: 3370,\n  },\n  {\n    x: 1624087205401,\n    y: 3370,\n  },\n  {\n    x: 1624090805401,\n    y: 3370,\n  },\n  {\n    x: 1624142681401,\n    y: 3370,\n  },\n  {\n    x: 1624171481401,\n    y: 3370,\n  },\n  {\n    x: 1624196681401,\n    y: 3370,\n  },\n  {\n    x: 1624218641401,\n    y: 3370,\n  },\n  {\n    x: 1624229801401,\n    y: 3370,\n  },\n]"
            },
            {
                "name": "points2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/chart-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    x: 1618206576000,\n    y: 1257,\n  },\n  {\n    x: 1618242001000,\n    y: 1257.17,\n  },\n  {\n    x: 1618242006000,\n    y: 1257.48,\n  },\n  {\n    x: 1618242011000,\n    y: 1257.49,\n  },\n  {\n    x: 1618329491000,\n    y: 1257.5,\n  },\n  {\n    x: 1618329501000,\n    y: 1257.51,\n  },\n  {\n    x: 1618329511000,\n    y: 1257.52,\n  },\n  {\n    x: 1618329516000,\n    y: 1257.53,\n  },\n  {\n    x: 1618329521000,\n    y: 1257.54,\n  },\n  {\n    x: 1618329536000,\n    y: 1257.56,\n  },\n  {\n    x: 1618329546000,\n    y: 1257.57,\n  },\n  {\n    x: 1618329556000,\n    y: 1257.58,\n  },\n  {\n    x: 1618329566000,\n    y: 1257.59,\n  },\n  {\n    x: 1618329571000,\n    y: 1257.6,\n  },\n  {\n    x: 1618329576000,\n    y: 1257.61,\n  },\n  {\n    x: 1618329591000,\n    y: 1257.62,\n  },\n  {\n    x: 1618329596000,\n    y: 1257.63,\n  },\n  {\n    x: 1618329606000,\n    y: 1257.64,\n  },\n  {\n    x: 1618329616000,\n    y: 1257.65,\n  },\n  {\n    x: 1618329621000,\n    y: 1257.66,\n  },\n  {\n    x: 1618329631000,\n    y: 1257.67,\n  },\n  {\n    x: 1618329636000,\n    y: 1257.68,\n  },\n  {\n    x: 1618329666000,\n    y: 1257.7,\n  },\n  {\n    x: 1618329676000,\n    y: 1257.71,\n  },\n  {\n    x: 1618329681000,\n    y: 1257.72,\n  },\n  {\n    x: 1618329686000,\n    y: 1257.74,\n  },\n  {\n    x: 1618329701000,\n    y: 1257.75,\n  },\n  {\n    x: 1618329716000,\n    y: 1257.76,\n  },\n  {\n    x: 1618329751000,\n    y: 1257.78,\n  },\n  {\n    x: 1618329766000,\n    y: 1257.82,\n  },\n  {\n    x: 1618329776000,\n    y: 1257.83,\n  },\n  {\n    x: 1618329781000,\n    y: 1257.84,\n  },\n  {\n    x: 1618329786000,\n    y: 1257.85,\n  },\n  {\n    x: 1618329791000,\n    y: 1257.86,\n  },\n  {\n    x: 1618329796000,\n    y: 1257.87,\n  },\n  {\n    x: 1618329801000,\n    y: 1257.88,\n  },\n  {\n    x: 1618329811000,\n    y: 1257.89,\n  },\n  {\n    x: 1618329816000,\n    y: 1257.9,\n  },\n  {\n    x: 1618329836000,\n    y: 1257.91,\n  },\n  {\n    x: 1618329841000,\n    y: 1257.92,\n  },\n  {\n    x: 1618329856000,\n    y: 1257.93,\n  },\n  {\n    x: 1618329861000,\n    y: 1257.94,\n  },\n  {\n    x: 1618329876000,\n    y: 1257.95,\n  },\n  {\n    x: 1618329896000,\n    y: 1257.96,\n  },\n  {\n    x: 1618329906000,\n    y: 1257.97,\n  },\n  {\n    x: 1618329931000,\n    y: 1257.98,\n  },\n  {\n    x: 1618329936000,\n    y: 1258,\n  },\n  {\n    x: 1618329976000,\n    y: 1258.02,\n  },\n  {\n    x: 1618330011000,\n    y: 1258.03,\n  },\n  {\n    x: 1618330051000,\n    y: 1258.04,\n  },\n  {\n    x: 1618330061000,\n    y: 1258.05,\n  },\n  {\n    x: 1618330081000,\n    y: 1258.06,\n  },\n  {\n    x: 1618330106000,\n    y: 1258.07,\n  },\n  {\n    x: 1618330126000,\n    y: 1258.08,\n  },\n  {\n    x: 1618330146000,\n    y: 1258.1,\n  },\n  {\n    x: 1618330161000,\n    y: 1258.11,\n  },\n  {\n    x: 1618330166000,\n    y: 1258.12,\n  },\n  {\n    x: 1618330186000,\n    y: 1258.13,\n  },\n  {\n    x: 1618330191000,\n    y: 1258.14,\n  },\n  {\n    x: 1618330206000,\n    y: 1258.16,\n  },\n  {\n    x: 1618330221000,\n    y: 1258.17,\n  },\n  {\n    x: 1618330251000,\n    y: 1258.18,\n  },\n  {\n    x: 1618330261000,\n    y: 1258.19,\n  },\n  {\n    x: 1618330276000,\n    y: 1258.2,\n  },\n  {\n    x: 1618330291000,\n    y: 1258.21,\n  },\n  {\n    x: 1618330296000,\n    y: 1258.22,\n  },\n  {\n    x: 1618330316000,\n    y: 1258.23,\n  },\n  {\n    x: 1618330321000,\n    y: 1258.24,\n  },\n  {\n    x: 1618330346000,\n    y: 1258.25,\n  },\n  {\n    x: 1618330356000,\n    y: 1258.27,\n  },\n  {\n    x: 1618330381000,\n    y: 1258.28,\n  },\n  {\n    x: 1618330391000,\n    y: 1258.29,\n  },\n  {\n    x: 1618330411000,\n    y: 1258.3,\n  },\n  {\n    x: 1618330416000,\n    y: 1258.31,\n  },\n  {\n    x: 1618330431000,\n    y: 1258.32,\n  },\n  {\n    x: 1618330441000,\n    y: 1258.34,\n  },\n  {\n    x: 1618330451000,\n    y: 1258.35,\n  },\n  {\n    x: 1618330471000,\n    y: 1258.36,\n  },\n  {\n    x: 1618330486000,\n    y: 1258.37,\n  },\n  {\n    x: 1618330501000,\n    y: 1258.38,\n  },\n  {\n    x: 1618330511000,\n    y: 1258.39,\n  },\n  {\n    x: 1618330516000,\n    y: 1258.41,\n  },\n  {\n    x: 1618330526000,\n    y: 1258.42,\n  },\n  {\n    x: 1618330546000,\n    y: 1258.43,\n  },\n  {\n    x: 1618330571000,\n    y: 1258.44,\n  },\n  {\n    x: 1618330586000,\n    y: 1258.45,\n  },\n  {\n    x: 1618330601000,\n    y: 1258.46,\n  },\n  {\n    x: 1618330611000,\n    y: 1258.48,\n  },\n  {\n    x: 1618330641000,\n    y: 1258.5,\n  },\n  {\n    x: 1618330661000,\n    y: 1258.51,\n  },\n  {\n    x: 1618330676000,\n    y: 1258.52,\n  },\n  {\n    x: 1618330691000,\n    y: 1258.53,\n  },\n  {\n    x: 1618330696000,\n    y: 1258.54,\n  },\n  {\n    x: 1618330721000,\n    y: 1258.55,\n  },\n  {\n    x: 1618330746000,\n    y: 1258.58,\n  },\n  {\n    x: 1618330751000,\n    y: 1258.59,\n  },\n  {\n    x: 1618330761000,\n    y: 1258.6,\n  },\n  {\n    x: 1618330776000,\n    y: 1258.61,\n  },\n  {\n    x: 1618330786000,\n    y: 1258.62,\n  },\n  {\n    x: 1618330801000,\n    y: 1258.63,\n  },\n  {\n    x: 1618330831000,\n    y: 1258.65,\n  },\n  {\n    x: 1618330841000,\n    y: 1258.66,\n  },\n  {\n    x: 1618330856000,\n    y: 1258.67,\n  },\n  {\n    x: 1618330876000,\n    y: 1258.7,\n  },\n  {\n    x: 1618330906000,\n    y: 1258.71,\n  },\n  {\n    x: 1618330921000,\n    y: 1258.72,\n  },\n  {\n    x: 1618330926000,\n    y: 1258.74,\n  },\n  {\n    x: 1618330936000,\n    y: 1258.75,\n  },\n  {\n    x: 1618330941000,\n    y: 1258.77,\n  },\n  {\n    x: 1618330971000,\n    y: 1258.78,\n  },\n  {\n    x: 1618330981000,\n    y: 1258.79,\n  },\n  {\n    x: 1618330991000,\n    y: 1258.8,\n  },\n  {\n    x: 1618330996000,\n    y: 1258.84,\n  },\n  {\n    x: 1618331011000,\n    y: 1258.85,\n  },\n  {\n    x: 1618331026000,\n    y: 1258.86,\n  },\n  {\n    x: 1618331041000,\n    y: 1258.87,\n  },\n  {\n    x: 1618331051000,\n    y: 1258.89,\n  },\n  {\n    x: 1618331056000,\n    y: 1258.9,\n  },\n  {\n    x: 1618331066000,\n    y: 1258.91,\n  },\n  {\n    x: 1618331081000,\n    y: 1258.92,\n  },\n  {\n    x: 1618331096000,\n    y: 1258.94,\n  },\n  {\n    x: 1618331106000,\n    y: 1258.96,\n  },\n  {\n    x: 1618331116000,\n    y: 1258.97,\n  },\n  {\n    x: 1618331126000,\n    y: 1258.98,\n  },\n  {\n    x: 1618331131000,\n    y: 1259,\n  },\n  {\n    x: 1618331136000,\n    y: 1259.02,\n  },\n  {\n    x: 1618331191000,\n    y: 1259.03,\n  },\n  {\n    x: 1618331196000,\n    y: 1259.05,\n  },\n  {\n    x: 1618331206000,\n    y: 1259.07,\n  },\n  {\n    x: 1618331241000,\n    y: 1259.09,\n  },\n  {\n    x: 1618331251000,\n    y: 1259.1,\n  },\n  {\n    x: 1618331266000,\n    y: 1259.11,\n  },\n  {\n    x: 1618331276000,\n    y: 1259.12,\n  },\n  {\n    x: 1618331306000,\n    y: 1259.13,\n  },\n  {\n    x: 1618331311000,\n    y: 1259.14,\n  },\n  {\n    x: 1618331331000,\n    y: 1259.16,\n  },\n  {\n    x: 1618331341000,\n    y: 1259.17,\n  },\n  {\n    x: 1618331346000,\n    y: 1259.19,\n  },\n  {\n    x: 1618331366000,\n    y: 1259.2,\n  },\n  {\n    x: 1618331381000,\n    y: 1259.21,\n  },\n  {\n    x: 1618331396000,\n    y: 1259.22,\n  },\n  {\n    x: 1618331401000,\n    y: 1259.23,\n  },\n  {\n    x: 1618331421000,\n    y: 1259.24,\n  },\n  {\n    x: 1618331426000,\n    y: 1259.25,\n  },\n  {\n    x: 1618331446000,\n    y: 1259.27,\n  },\n  {\n    x: 1618331466000,\n    y: 1259.28,\n  },\n  {\n    x: 1618331486000,\n    y: 1259.3,\n  },\n  {\n    x: 1618331511000,\n    y: 1259.32,\n  },\n  {\n    x: 1618331521000,\n    y: 1259.33,\n  },\n  {\n    x: 1618331526000,\n    y: 1259.34,\n  },\n  {\n    x: 1618331551000,\n    y: 1259.35,\n  },\n  {\n    x: 1618331561000,\n    y: 1259.36,\n  },\n  {\n    x: 1618331566000,\n    y: 1259.38,\n  },\n  {\n    x: 1618331586000,\n    y: 1259.4,\n  },\n  {\n    x: 1618331601000,\n    y: 1259.41,\n  },\n  {\n    x: 1618331606000,\n    y: 1259.42,\n  },\n  {\n    x: 1618331616000,\n    y: 1259.43,\n  },\n  {\n    x: 1618331631000,\n    y: 1259.44,\n  },\n  {\n    x: 1618331636000,\n    y: 1259.45,\n  },\n  {\n    x: 1618331651000,\n    y: 1259.46,\n  },\n  {\n    x: 1618331671000,\n    y: 1259.48,\n  },\n  {\n    x: 1618331676000,\n    y: 1259.5,\n  },\n  {\n    x: 1618331701000,\n    y: 1259.51,\n  },\n  {\n    x: 1618331716000,\n    y: 1259.52,\n  },\n  {\n    x: 1618331721000,\n    y: 1259.53,\n  },\n  {\n    x: 1618331726000,\n    y: 1259.54,\n  },\n  {\n    x: 1618331731000,\n    y: 1259.55,\n  },\n  {\n    x: 1618331751000,\n    y: 1259.56,\n  },\n  {\n    x: 1618331756000,\n    y: 1259.57,\n  },\n  {\n    x: 1618331761000,\n    y: 1259.58,\n  },\n  {\n    x: 1618331781000,\n    y: 1259.59,\n  },\n  {\n    x: 1618331796000,\n    y: 1259.61,\n  },\n  {\n    x: 1618331806000,\n    y: 1259.62,\n  },\n  {\n    x: 1618331816000,\n    y: 1259.63,\n  },\n  {\n    x: 1618331826000,\n    y: 1259.64,\n  },\n  {\n    x: 1618331836000,\n    y: 1259.65,\n  },\n  {\n    x: 1618331841000,\n    y: 1259.66,\n  },\n  {\n    x: 1618331851000,\n    y: 1259.67,\n  },\n  {\n    x: 1618331856000,\n    y: 1259.68,\n  },\n  {\n    x: 1618331866000,\n    y: 1259.69,\n  },\n  {\n    x: 1618331891000,\n    y: 1259.7,\n  },\n  {\n    x: 1618331896000,\n    y: 1259.71,\n  },\n  {\n    x: 1618331901000,\n    y: 1259.72,\n  },\n  {\n    x: 1618331911000,\n    y: 1259.74,\n  },\n  {\n    x: 1618331926000,\n    y: 1259.75,\n  },\n  {\n    x: 1618331936000,\n    y: 1259.77,\n  },\n  {\n    x: 1618331941000,\n    y: 1259.78,\n  },\n  {\n    x: 1618331951000,\n    y: 1259.8,\n  },\n  {\n    x: 1618331976000,\n    y: 1259.81,\n  },\n  {\n    x: 1618331991000,\n    y: 1259.82,\n  },\n  {\n    x: 1618332001000,\n    y: 1259.84,\n  },\n  {\n    x: 1618332011000,\n    y: 1259.85,\n  },\n  {\n    x: 1618332016000,\n    y: 1259.86,\n  },\n  {\n    x: 1618332026000,\n    y: 1259.87,\n  },\n  {\n    x: 1618332036000,\n    y: 1259.88,\n  },\n  {\n    x: 1618332056000,\n    y: 1259.89,\n  },\n  {\n    x: 1618332061000,\n    y: 1259.9,\n  },\n  {\n    x: 1618332076000,\n    y: 1259.91,\n  },\n  {\n    x: 1618332091000,\n    y: 1259.92,\n  },\n  {\n    x: 1618332101000,\n    y: 1259.93,\n  },\n  {\n    x: 1618332141000,\n    y: 1259.95,\n  },\n  {\n    x: 1618332151000,\n    y: 1259.97,\n  },\n  {\n    x: 1618332161000,\n    y: 1259.98,\n  },\n  {\n    x: 1618332166000,\n    y: 1260,\n  },\n  {\n    x: 1618332181000,\n    y: 1260.01,\n  },\n  {\n    x: 1618332186000,\n    y: 1260.03,\n  },\n  {\n    x: 1618332191000,\n    y: 1260.04,\n  },\n  {\n    x: 1618332196000,\n    y: 1260.05,\n  },\n  {\n    x: 1618332226000,\n    y: 1260.06,\n  },\n  {\n    x: 1618332241000,\n    y: 1260.07,\n  },\n  {\n    x: 1618332251000,\n    y: 1260.08,\n  },\n  {\n    x: 1618332261000,\n    y: 1260.09,\n  },\n  {\n    x: 1618332276000,\n    y: 1260.1,\n  },\n  {\n    x: 1618332281000,\n    y: 1260.11,\n  },\n  {\n    x: 1618332296000,\n    y: 1260.13,\n  },\n  {\n    x: 1618332311000,\n    y: 1260.14,\n  },\n  {\n    x: 1618332316000,\n    y: 1260.15,\n  },\n  {\n    x: 1618332326000,\n    y: 1260.16,\n  },\n  {\n    x: 1618332336000,\n    y: 1260.18,\n  },\n  {\n    x: 1618332356000,\n    y: 1260.19,\n  },\n  {\n    x: 1618332361000,\n    y: 1260.2,\n  },\n  {\n    x: 1618332371000,\n    y: 1260.21,\n  },\n  {\n    x: 1618332376000,\n    y: 1260.22,\n  },\n  {\n    x: 1618332391000,\n    y: 1260.23,\n  },\n  {\n    x: 1618332396000,\n    y: 1260.24,\n  },\n  {\n    x: 1618332416000,\n    y: 1260.25,\n  },\n  {\n    x: 1618332421000,\n    y: 1260.26,\n  },\n  {\n    x: 1618332436000,\n    y: 1260.27,\n  },\n  {\n    x: 1618332441000,\n    y: 1260.29,\n  },\n  {\n    x: 1618332456000,\n    y: 1260.3,\n  },\n  {\n    x: 1618332486000,\n    y: 1260.31,\n  },\n  {\n    x: 1618332491000,\n    y: 1260.32,\n  },\n  {\n    x: 1618332501000,\n    y: 1260.33,\n  },\n  {\n    x: 1618332516000,\n    y: 1260.34,\n  },\n  {\n    x: 1618332531000,\n    y: 1260.35,\n  },\n  {\n    x: 1618332546000,\n    y: 1260.36,\n  },\n  {\n    x: 1618332556000,\n    y: 1260.37,\n  },\n  {\n    x: 1618332566000,\n    y: 1260.38,\n  },\n  {\n    x: 1618332571000,\n    y: 1260.39,\n  },\n  {\n    x: 1618332581000,\n    y: 1260.4,\n  },\n  {\n    x: 1618332596000,\n    y: 1260.41,\n  },\n  {\n    x: 1618332606000,\n    y: 1260.42,\n  },\n  {\n    x: 1618332636000,\n    y: 1260.43,\n  },\n  {\n    x: 1618332666000,\n    y: 1260.44,\n  },\n  {\n    x: 1618332671000,\n    y: 1260.45,\n  },\n  {\n    x: 1618332681000,\n    y: 1260.46,\n  },\n  {\n    x: 1618332686000,\n    y: 1260.47,\n  },\n  {\n    x: 1618332696000,\n    y: 1260.48,\n  },\n  {\n    x: 1618332716000,\n    y: 1260.5,\n  },\n  {\n    x: 1618332741000,\n    y: 1260.51,\n  },\n  {\n    x: 1618332751000,\n    y: 1260.53,\n  },\n  {\n    x: 1618332761000,\n    y: 1260.54,\n  },\n  {\n    x: 1618332771000,\n    y: 1260.55,\n  },\n  {\n    x: 1618332811000,\n    y: 1260.56,\n  },\n  {\n    x: 1618332871000,\n    y: 1260.57,\n  },\n  {\n    x: 1618332886000,\n    y: 1260.58,\n  },\n  {\n    x: 1618332896000,\n    y: 1260.59,\n  },\n  {\n    x: 1618332911000,\n    y: 1260.6,\n  },\n  {\n    x: 1618332916000,\n    y: 1260.62,\n  },\n  {\n    x: 1618332926000,\n    y: 1260.63,\n  },\n  {\n    x: 1618332931000,\n    y: 1260.64,\n  },\n  {\n    x: 1618332936000,\n    y: 1260.65,\n  },\n  {\n    x: 1618332951000,\n    y: 1260.66,\n  },\n  {\n    x: 1618332976000,\n    y: 1260.67,\n  },\n  {\n    x: 1618332986000,\n    y: 1260.68,\n  },\n  {\n    x: 1618332991000,\n    y: 1260.69,\n  },\n  {\n    x: 1618333016000,\n    y: 1260.7,\n  },\n  {\n    x: 1618333046000,\n    y: 1260.72,\n  },\n  {\n    x: 1618333056000,\n    y: 1260.73,\n  },\n  {\n    x: 1618333066000,\n    y: 1260.75,\n  },\n  {\n    x: 1618333106000,\n    y: 1260.76,\n  },\n  {\n    x: 1618333126000,\n    y: 1260.77,\n  },\n  {\n    x: 1618333136000,\n    y: 1260.78,\n  },\n  {\n    x: 1618333146000,\n    y: 1260.79,\n  },\n  {\n    x: 1618333166000,\n    y: 1260.8,\n  },\n  {\n    x: 1618333176000,\n    y: 1260.82,\n  },\n  {\n    x: 1618333186000,\n    y: 1260.83,\n  },\n  {\n    x: 1618333206000,\n    y: 1260.84,\n  },\n  {\n    x: 1618333231000,\n    y: 1260.85,\n  },\n  {\n    x: 1618333256000,\n    y: 1260.86,\n  },\n  {\n    x: 1618333271000,\n    y: 1260.87,\n  },\n  {\n    x: 1618333296000,\n    y: 1260.88,\n  },\n  {\n    x: 1618333306000,\n    y: 1260.89,\n  },\n  {\n    x: 1618333311000,\n    y: 1260.9,\n  },\n  {\n    x: 1618333316000,\n    y: 1260.91,\n  },\n  {\n    x: 1618333331000,\n    y: 1260.92,\n  },\n  {\n    x: 1618333341000,\n    y: 1260.93,\n  },\n  {\n    x: 1618333361000,\n    y: 1260.94,\n  },\n  {\n    x: 1618333386000,\n    y: 1260.95,\n  },\n  {\n    x: 1618333421000,\n    y: 1260.96,\n  },\n  {\n    x: 1618333436000,\n    y: 1260.97,\n  },\n  {\n    x: 1618333451000,\n    y: 1260.98,\n  },\n  {\n    x: 1618333456000,\n    y: 1260.99,\n  },\n  {\n    x: 1618333466000,\n    y: 1261,\n  },\n  {\n    x: 1618333471000,\n    y: 1261.01,\n  },\n  {\n    x: 1618333481000,\n    y: 1261.02,\n  },\n  {\n    x: 1618333486000,\n    y: 1261.03,\n  },\n  {\n    x: 1618333511000,\n    y: 1261.04,\n  },\n  {\n    x: 1618333516000,\n    y: 1261.24,\n  },\n  {\n    x: 1618333811000,\n    y: 1261.25,\n  },\n  {\n    x: 1618333851000,\n    y: 1261.26,\n  },\n  {\n    x: 1618333861000,\n    y: 1261.27,\n  },\n  {\n    x: 1618333866000,\n    y: 1261.28,\n  },\n  {\n    x: 1618333881000,\n    y: 1261.29,\n  },\n  {\n    x: 1618333891000,\n    y: 1261.3,\n  },\n  {\n    x: 1618333901000,\n    y: 1261.31,\n  },\n  {\n    x: 1618333926000,\n    y: 1261.32,\n  },\n  {\n    x: 1618333931000,\n    y: 1261.33,\n  },\n  {\n    x: 1618333941000,\n    y: 1261.34,\n  },\n  {\n    x: 1618333956000,\n    y: 1261.35,\n  },\n  {\n    x: 1618333966000,\n    y: 1261.36,\n  },\n  {\n    x: 1618333986000,\n    y: 1261.37,\n  },\n  {\n    x: 1618333991000,\n    y: 1261.38,\n  },\n  {\n    x: 1618334001000,\n    y: 1261.39,\n  },\n  {\n    x: 1618334011000,\n    y: 1261.4,\n  },\n  {\n    x: 1618334026000,\n    y: 1261.41,\n  },\n  {\n    x: 1618334036000,\n    y: 1261.42,\n  },\n  {\n    x: 1618334046000,\n    y: 1261.43,\n  },\n  {\n    x: 1618334051000,\n    y: 1261.44,\n  },\n  {\n    x: 1618334061000,\n    y: 1261.45,\n  },\n  {\n    x: 1618334076000,\n    y: 1261.46,\n  },\n  {\n    x: 1618334091000,\n    y: 1261.47,\n  },\n  {\n    x: 1618334106000,\n    y: 1261.48,\n  },\n  {\n    x: 1618334121000,\n    y: 1261.49,\n  },\n  {\n    x: 1618334126000,\n    y: 1261.5,\n  },\n  {\n    x: 1618334141000,\n    y: 1261.51,\n  },\n  {\n    x: 1618334156000,\n    y: 1261.52,\n  },\n  {\n    x: 1618334161000,\n    y: 1261.53,\n  },\n  {\n    x: 1618334171000,\n    y: 1261.54,\n  },\n  {\n    x: 1618334186000,\n    y: 1261.55,\n  },\n  {\n    x: 1618334196000,\n    y: 1261.56,\n  },\n  {\n    x: 1618334211000,\n    y: 1261.57,\n  },\n  {\n    x: 1618334221000,\n    y: 1261.58,\n  },\n  {\n    x: 1618334241000,\n    y: 1261.59,\n  },\n  {\n    x: 1618334251000,\n    y: 1261.6,\n  },\n  {\n    x: 1618334261000,\n    y: 1261.61,\n  },\n  {\n    x: 1618334271000,\n    y: 1261.62,\n  },\n  {\n    x: 1618334286000,\n    y: 1261.63,\n  },\n  {\n    x: 1618334291000,\n    y: 1261.64,\n  },\n  {\n    x: 1618334301000,\n    y: 1261.66,\n  },\n  {\n    x: 1618334321000,\n    y: 1261.67,\n  },\n  {\n    x: 1618334336000,\n    y: 1261.68,\n  },\n  {\n    x: 1618334346000,\n    y: 1261.69,\n  },\n  {\n    x: 1618334356000,\n    y: 1261.7,\n  },\n  {\n    x: 1618334401000,\n    y: 1261.71,\n  },\n  {\n    x: 1618334406000,\n    y: 1261.73,\n  },\n  {\n    x: 1618334411000,\n    y: 1261.74,\n  },\n  {\n    x: 1618334421000,\n    y: 1261.75,\n  },\n  {\n    x: 1618334431000,\n    y: 1261.76,\n  },\n  {\n    x: 1618334456000,\n    y: 1261.77,\n  },\n  {\n    x: 1618334476000,\n    y: 1261.78,\n  },\n  {\n    x: 1618334486000,\n    y: 1261.79,\n  },\n  {\n    x: 1618334496000,\n    y: 1261.8,\n  },\n  {\n    x: 1618334506000,\n    y: 1261.81,\n  },\n  {\n    x: 1618334526000,\n    y: 1261.82,\n  },\n  {\n    x: 1618334541000,\n    y: 1261.83,\n  },\n  {\n    x: 1618334556000,\n    y: 1261.84,\n  },\n  {\n    x: 1618334566000,\n    y: 1261.85,\n  },\n  {\n    x: 1618334581000,\n    y: 1261.86,\n  },\n  {\n    x: 1618334591000,\n    y: 1261.87,\n  },\n  {\n    x: 1618334601000,\n    y: 1261.88,\n  },\n  {\n    x: 1618334626000,\n    y: 1261.89,\n  },\n  {\n    x: 1618334646000,\n    y: 1261.9,\n  },\n  {\n    x: 1618334661000,\n    y: 1261.91,\n  },\n  {\n    x: 1618334671000,\n    y: 1261.92,\n  },\n  {\n    x: 1618334681000,\n    y: 1261.93,\n  },\n  {\n    x: 1618334706000,\n    y: 1261.94,\n  },\n  {\n    x: 1618334721000,\n    y: 1261.95,\n  },\n  {\n    x: 1618334746000,\n    y: 1261.96,\n  },\n  {\n    x: 1618334751000,\n    y: 1261.97,\n  },\n  {\n    x: 1618334776000,\n    y: 1261.98,\n  },\n  {\n    x: 1618334786000,\n    y: 1261.99,\n  },\n  {\n    x: 1618334806000,\n    y: 1262,\n  },\n  {\n    x: 1618334816000,\n    y: 1262.01,\n  },\n  {\n    x: 1618334821000,\n    y: 1262.02,\n  },\n  {\n    x: 1618334841000,\n    y: 1262.03,\n  },\n  {\n    x: 1618334856000,\n    y: 1262.04,\n  },\n  {\n    x: 1618334871000,\n    y: 1262.05,\n  },\n  {\n    x: 1618334881000,\n    y: 1262.06,\n  },\n  {\n    x: 1618334891000,\n    y: 1262.07,\n  },\n  {\n    x: 1618334916000,\n    y: 1262.08,\n  },\n  {\n    x: 1618334926000,\n    y: 1262.09,\n  },\n  {\n    x: 1618334941000,\n    y: 1262.1,\n  },\n  {\n    x: 1618334956000,\n    y: 1262.11,\n  },\n  {\n    x: 1618334961000,\n    y: 1262.12,\n  },\n  {\n    x: 1618334971000,\n    y: 1262.13,\n  },\n  {\n    x: 1618334981000,\n    y: 1262.14,\n  },\n  {\n    x: 1618334991000,\n    y: 1262.15,\n  },\n  {\n    x: 1618335001000,\n    y: 1262.16,\n  },\n  {\n    x: 1618335011000,\n    y: 1262.17,\n  },\n  {\n    x: 1618335036000,\n    y: 1262.18,\n  },\n  {\n    x: 1618335051000,\n    y: 1262.19,\n  },\n  {\n    x: 1618335061000,\n    y: 1262.2,\n  },\n  {\n    x: 1618335066000,\n    y: 1262.21,\n  },\n  {\n    x: 1618335076000,\n    y: 1262.22,\n  },\n  {\n    x: 1618335096000,\n    y: 1262.23,\n  },\n  {\n    x: 1618335111000,\n    y: 1262.24,\n  },\n  {\n    x: 1618335121000,\n    y: 1262.25,\n  },\n  {\n    x: 1618335131000,\n    y: 1262.26,\n  },\n  {\n    x: 1618335151000,\n    y: 1262.27,\n  },\n  {\n    x: 1618335166000,\n    y: 1262.28,\n  },\n  {\n    x: 1618335186000,\n    y: 1262.29,\n  },\n  {\n    x: 1618335196000,\n    y: 1262.3,\n  },\n  {\n    x: 1618335216000,\n    y: 1262.31,\n  },\n  {\n    x: 1618335226000,\n    y: 1262.32,\n  },\n  {\n    x: 1618335236000,\n    y: 1262.33,\n  },\n  {\n    x: 1618335251000,\n    y: 1262.34,\n  },\n  {\n    x: 1618335266000,\n    y: 1262.35,\n  },\n  {\n    x: 1618335281000,\n    y: 1262.36,\n  },\n  {\n    x: 1618335296000,\n    y: 1262.37,\n  },\n  {\n    x: 1618335311000,\n    y: 1262.38,\n  },\n  {\n    x: 1618335331000,\n    y: 1262.39,\n  },\n  {\n    x: 1618335341000,\n    y: 1262.4,\n  },\n  {\n    x: 1618335356000,\n    y: 1262.41,\n  },\n  {\n    x: 1618335376000,\n    y: 1262.42,\n  },\n  {\n    x: 1618335386000,\n    y: 1262.43,\n  },\n  {\n    x: 1618335396000,\n    y: 1262.44,\n  },\n  {\n    x: 1618335406000,\n    y: 1262.45,\n  },\n  {\n    x: 1618335421000,\n    y: 1262.46,\n  },\n  {\n    x: 1618335426000,\n    y: 1262.47,\n  },\n  {\n    x: 1618335441000,\n    y: 1262.48,\n  },\n  {\n    x: 1618335456000,\n    y: 1262.49,\n  },\n  {\n    x: 1618335466000,\n    y: 1262.5,\n  },\n  {\n    x: 1618335486000,\n    y: 1262.51,\n  },\n  {\n    x: 1618335501000,\n    y: 1262.52,\n  },\n  {\n    x: 1618335506000,\n    y: 1262.53,\n  },\n  {\n    x: 1618335511000,\n    y: 1262.54,\n  },\n  {\n    x: 1618335521000,\n    y: 1262.55,\n  },\n  {\n    x: 1618335531000,\n    y: 1262.56,\n  },\n  {\n    x: 1618335541000,\n    y: 1262.57,\n  },\n  {\n    x: 1618335551000,\n    y: 1262.58,\n  },\n  {\n    x: 1618335561000,\n    y: 1262.59,\n  },\n  {\n    x: 1618335581000,\n    y: 1262.6,\n  },\n  {\n    x: 1618335586000,\n    y: 1262.61,\n  },\n  {\n    x: 1618335596000,\n    y: 1262.62,\n  },\n  {\n    x: 1618335611000,\n    y: 1262.63,\n  },\n  {\n    x: 1618335621000,\n    y: 1262.64,\n  },\n  {\n    x: 1618335626000,\n    y: 1262.65,\n  },\n  {\n    x: 1618335636000,\n    y: 1262.66,\n  },\n  {\n    x: 1618335646000,\n    y: 1262.67,\n  },\n  {\n    x: 1618335661000,\n    y: 1262.68,\n  },\n  {\n    x: 1618335671000,\n    y: 1262.69,\n  },\n  {\n    x: 1618335681000,\n    y: 1262.7,\n  },\n  {\n    x: 1618335691000,\n    y: 1262.71,\n  },\n  {\n    x: 1618335701000,\n    y: 1262.72,\n  },\n  {\n    x: 1618335706000,\n    y: 1262.73,\n  },\n  {\n    x: 1618335721000,\n    y: 1262.74,\n  },\n  {\n    x: 1618335731000,\n    y: 1262.75,\n  },\n  {\n    x: 1618335741000,\n    y: 1262.76,\n  },\n  {\n    x: 1618335751000,\n    y: 1262.77,\n  },\n  {\n    x: 1618335761000,\n    y: 1262.78,\n  },\n  {\n    x: 1618335771000,\n    y: 1262.79,\n  },\n  {\n    x: 1618335781000,\n    y: 1262.8,\n  },\n  {\n    x: 1618335791000,\n    y: 1262.81,\n  },\n  {\n    x: 1618335801000,\n    y: 1262.82,\n  },\n  {\n    x: 1618335816000,\n    y: 1262.83,\n  },\n  {\n    x: 1618335831000,\n    y: 1262.84,\n  },\n  {\n    x: 1618335851000,\n    y: 1262.85,\n  },\n  {\n    x: 1618335856000,\n    y: 1262.86,\n  },\n  {\n    x: 1618335861000,\n    y: 1262.87,\n  },\n  {\n    x: 1618335871000,\n    y: 1262.88,\n  },\n  {\n    x: 1618335876000,\n    y: 1262.89,\n  },\n  {\n    x: 1618335886000,\n    y: 1262.9,\n  },\n  {\n    x: 1618335896000,\n    y: 1262.91,\n  },\n  {\n    x: 1618335906000,\n    y: 1262.92,\n  },\n  {\n    x: 1618335916000,\n    y: 1262.93,\n  },\n  {\n    x: 1618335931000,\n    y: 1262.94,\n  },\n  {\n    x: 1618335941000,\n    y: 1262.95,\n  },\n  {\n    x: 1618335951000,\n    y: 1262.96,\n  },\n  {\n    x: 1618335961000,\n    y: 1262.97,\n  },\n  {\n    x: 1618335966000,\n    y: 1262.98,\n  },\n  {\n    x: 1618335996000,\n    y: 1262.99,\n  },\n  {\n    x: 1618336001000,\n    y: 1263,\n  },\n  {\n    x: 1618336016000,\n    y: 1263.01,\n  },\n  {\n    x: 1618336021000,\n    y: 1263.02,\n  },\n  {\n    x: 1618336031000,\n    y: 1263.03,\n  },\n  {\n    x: 1618336041000,\n    y: 1263.04,\n  },\n  {\n    x: 1618336056000,\n    y: 1263.05,\n  },\n  {\n    x: 1618336076000,\n    y: 1263.06,\n  },\n  {\n    x: 1618336096000,\n    y: 1263.07,\n  },\n  {\n    x: 1618336106000,\n    y: 1263.08,\n  },\n  {\n    x: 1618336111000,\n    y: 1263.09,\n  },\n  {\n    x: 1618336116000,\n    y: 1263.1,\n  },\n  {\n    x: 1618336126000,\n    y: 1263.11,\n  },\n  {\n    x: 1618336141000,\n    y: 1263.12,\n  },\n  {\n    x: 1618336146000,\n    y: 1263.13,\n  },\n  {\n    x: 1618336156000,\n    y: 1263.14,\n  },\n  {\n    x: 1618336166000,\n    y: 1263.15,\n  },\n  {\n    x: 1618336191000,\n    y: 1263.16,\n  },\n  {\n    x: 1618336201000,\n    y: 1263.17,\n  },\n  {\n    x: 1618336211000,\n    y: 1263.18,\n  },\n  {\n    x: 1618336221000,\n    y: 1263.19,\n  },\n  {\n    x: 1618336226000,\n    y: 1263.2,\n  },\n  {\n    x: 1618336236000,\n    y: 1263.21,\n  },\n  {\n    x: 1618336251000,\n    y: 1263.22,\n  },\n  {\n    x: 1618336261000,\n    y: 1263.23,\n  },\n  {\n    x: 1618336271000,\n    y: 1263.24,\n  },\n  {\n    x: 1618336281000,\n    y: 1263.25,\n  },\n  {\n    x: 1618336291000,\n    y: 1263.26,\n  },\n  {\n    x: 1618336311000,\n    y: 1263.27,\n  },\n  {\n    x: 1618336326000,\n    y: 1263.28,\n  },\n  {\n    x: 1618336341000,\n    y: 1263.29,\n  },\n  {\n    x: 1618336346000,\n    y: 1263.3,\n  },\n  {\n    x: 1618336361000,\n    y: 1263.31,\n  },\n  {\n    x: 1618336366000,\n    y: 1263.32,\n  },\n  {\n    x: 1618336371000,\n    y: 1263.34,\n  },\n  {\n    x: 1618336381000,\n    y: 1263.35,\n  },\n  {\n    x: 1618336401000,\n    y: 1263.36,\n  },\n  {\n    x: 1618336416000,\n    y: 1263.37,\n  },\n  {\n    x: 1618336426000,\n    y: 1263.38,\n  },\n  {\n    x: 1618336436000,\n    y: 1263.39,\n  },\n  {\n    x: 1618336456000,\n    y: 1263.4,\n  },\n  {\n    x: 1618336466000,\n    y: 1263.41,\n  },\n  {\n    x: 1618336486000,\n    y: 1263.42,\n  },\n  {\n    x: 1618336501000,\n    y: 1263.43,\n  },\n  {\n    x: 1618336516000,\n    y: 1263.44,\n  },\n  {\n    x: 1618336536000,\n    y: 1263.45,\n  },\n  {\n    x: 1618336546000,\n    y: 1263.46,\n  },\n  {\n    x: 1618336556000,\n    y: 1263.47,\n  },\n  {\n    x: 1618336566000,\n    y: 1263.48,\n  },\n  {\n    x: 1618336576000,\n    y: 1263.49,\n  },\n  {\n    x: 1618336591000,\n    y: 1263.5,\n  },\n  {\n    x: 1618336601000,\n    y: 1263.51,\n  },\n  {\n    x: 1618336611000,\n    y: 1263.52,\n  },\n  {\n    x: 1618336626000,\n    y: 1263.53,\n  },\n  {\n    x: 1618336631000,\n    y: 1263.54,\n  },\n  {\n    x: 1618336641000,\n    y: 1263.55,\n  },\n  {\n    x: 1618336651000,\n    y: 1263.56,\n  },\n  {\n    x: 1618336656000,\n    y: 1263.57,\n  },\n  {\n    x: 1618336666000,\n    y: 1263.58,\n  },\n  {\n    x: 1618336681000,\n    y: 1263.59,\n  },\n  {\n    x: 1618336701000,\n    y: 1263.6,\n  },\n  {\n    x: 1618336711000,\n    y: 1263.61,\n  },\n  {\n    x: 1618336726000,\n    y: 1263.62,\n  },\n  {\n    x: 1618336746000,\n    y: 1263.63,\n  },\n  {\n    x: 1618336756000,\n    y: 1263.64,\n  },\n  {\n    x: 1618336761000,\n    y: 1263.65,\n  },\n  {\n    x: 1618336766000,\n    y: 1263.66,\n  },\n  {\n    x: 1618336776000,\n    y: 1263.67,\n  },\n  {\n    x: 1618336786000,\n    y: 1263.68,\n  },\n  {\n    x: 1618336791000,\n    y: 1263.69,\n  },\n  {\n    x: 1618336801000,\n    y: 1263.7,\n  },\n  {\n    x: 1618336811000,\n    y: 1263.71,\n  },\n  {\n    x: 1618336821000,\n    y: 1263.72,\n  },\n  {\n    x: 1618336831000,\n    y: 1263.73,\n  },\n  {\n    x: 1618336841000,\n    y: 1263.74,\n  },\n  {\n    x: 1618336856000,\n    y: 1263.75,\n  },\n  {\n    x: 1618336861000,\n    y: 1263.76,\n  },\n  {\n    x: 1618336881000,\n    y: 1263.77,\n  },\n  {\n    x: 1618336891000,\n    y: 1263.78,\n  },\n  {\n    x: 1618336916000,\n    y: 1263.79,\n  },\n  {\n    x: 1618336921000,\n    y: 1263.8,\n  },\n  {\n    x: 1618336936000,\n    y: 1263.81,\n  },\n  {\n    x: 1618336951000,\n    y: 1263.82,\n  },\n  {\n    x: 1618336976000,\n    y: 1263.83,\n  },\n  {\n    x: 1618336981000,\n    y: 1263.84,\n  },\n  {\n    x: 1618336991000,\n    y: 1263.85,\n  },\n  {\n    x: 1618336996000,\n    y: 1263.86,\n  },\n  {\n    x: 1618337006000,\n    y: 1263.87,\n  },\n  {\n    x: 1618337026000,\n    y: 1263.88,\n  },\n  {\n    x: 1618337036000,\n    y: 1263.89,\n  },\n  {\n    x: 1618337056000,\n    y: 1263.9,\n  },\n  {\n    x: 1618337061000,\n    y: 1263.91,\n  },\n  {\n    x: 1618337071000,\n    y: 1263.92,\n  },\n  {\n    x: 1618337081000,\n    y: 1263.93,\n  },\n  {\n    x: 1618337096000,\n    y: 1263.94,\n  },\n  {\n    x: 1618337111000,\n    y: 1263.95,\n  },\n  {\n    x: 1618337121000,\n    y: 1263.96,\n  },\n  {\n    x: 1618337131000,\n    y: 1263.97,\n  },\n  {\n    x: 1618337136000,\n    y: 1263.98,\n  },\n  {\n    x: 1618337141000,\n    y: 1263.99,\n  },\n  {\n    x: 1618337166000,\n    y: 1264,\n  },\n  {\n    x: 1618337261000,\n    y: 1264.01,\n  },\n  {\n    x: 1618337276000,\n    y: 1264.02,\n  },\n  {\n    x: 1618337286000,\n    y: 1264.03,\n  },\n  {\n    x: 1618337296000,\n    y: 1264.04,\n  },\n  {\n    x: 1618337306000,\n    y: 1264.05,\n  },\n  {\n    x: 1618337311000,\n    y: 1264.06,\n  },\n  {\n    x: 1618337336000,\n    y: 1264.07,\n  },\n  {\n    x: 1618337341000,\n    y: 1264.08,\n  },\n  {\n    x: 1618337346000,\n    y: 1264.09,\n  },\n  {\n    x: 1618337351000,\n    y: 1264.1,\n  },\n  {\n    x: 1618337356000,\n    y: 1264.12,\n  },\n  {\n    x: 1618337366000,\n    y: 1264.13,\n  },\n  {\n    x: 1618337376000,\n    y: 1264.14,\n  },\n  {\n    x: 1618337396000,\n    y: 1264.15,\n  },\n  {\n    x: 1618337406000,\n    y: 1264.16,\n  },\n  {\n    x: 1618337411000,\n    y: 1264.17,\n  },\n  {\n    x: 1618337421000,\n    y: 1264.18,\n  },\n  {\n    x: 1618337431000,\n    y: 1264.19,\n  },\n  {\n    x: 1618337446000,\n    y: 1264.2,\n  },\n  {\n    x: 1618337461000,\n    y: 1264.21,\n  },\n  {\n    x: 1618337466000,\n    y: 1264.22,\n  },\n  {\n    x: 1618337476000,\n    y: 1264.23,\n  },\n  {\n    x: 1618337496000,\n    y: 1264.24,\n  },\n  {\n    x: 1618337506000,\n    y: 1264.25,\n  },\n  {\n    x: 1618337511000,\n    y: 1264.26,\n  },\n  {\n    x: 1618337521000,\n    y: 1264.27,\n  },\n  {\n    x: 1618337531000,\n    y: 1264.28,\n  },\n  {\n    x: 1618337536000,\n    y: 1264.29,\n  },\n  {\n    x: 1618337541000,\n    y: 1264.3,\n  },\n  {\n    x: 1618337551000,\n    y: 1264.31,\n  },\n  {\n    x: 1618337556000,\n    y: 1264.32,\n  },\n  {\n    x: 1618337566000,\n    y: 1264.33,\n  },\n  {\n    x: 1618337571000,\n    y: 1264.34,\n  },\n  {\n    x: 1618337576000,\n    y: 1264.35,\n  },\n  {\n    x: 1618337591000,\n    y: 1264.36,\n  },\n  {\n    x: 1618337606000,\n    y: 1264.37,\n  },\n  {\n    x: 1618337611000,\n    y: 1264.38,\n  },\n  {\n    x: 1618337621000,\n    y: 1264.39,\n  },\n  {\n    x: 1618337636000,\n    y: 1264.4,\n  },\n  {\n    x: 1618337656000,\n    y: 1264.41,\n  },\n  {\n    x: 1618337661000,\n    y: 1264.42,\n  },\n  {\n    x: 1618337666000,\n    y: 1264.43,\n  },\n  {\n    x: 1618337676000,\n    y: 1264.44,\n  },\n  {\n    x: 1618337686000,\n    y: 1264.45,\n  },\n  {\n    x: 1618337696000,\n    y: 1264.46,\n  },\n  {\n    x: 1618337701000,\n    y: 1264.47,\n  },\n  {\n    x: 1618337711000,\n    y: 1264.48,\n  },\n  {\n    x: 1618337716000,\n    y: 1264.49,\n  },\n  {\n    x: 1618337731000,\n    y: 1264.5,\n  },\n  {\n    x: 1618337741000,\n    y: 1264.51,\n  },\n  {\n    x: 1618337761000,\n    y: 1264.52,\n  },\n  {\n    x: 1618337771000,\n    y: 1264.53,\n  },\n  {\n    x: 1618337776000,\n    y: 1264.54,\n  },\n  {\n    x: 1618337786000,\n    y: 1264.55,\n  },\n  {\n    x: 1618337796000,\n    y: 1264.56,\n  },\n  {\n    x: 1618337801000,\n    y: 1264.57,\n  },\n  {\n    x: 1618337811000,\n    y: 1264.58,\n  },\n  {\n    x: 1618337836000,\n    y: 1264.59,\n  },\n  {\n    x: 1618337841000,\n    y: 1264.6,\n  },\n  {\n    x: 1618337851000,\n    y: 1264.61,\n  },\n  {\n    x: 1618337856000,\n    y: 1264.62,\n  },\n  {\n    x: 1618337866000,\n    y: 1264.63,\n  },\n  {\n    x: 1618337871000,\n    y: 1264.64,\n  },\n  {\n    x: 1618337876000,\n    y: 1264.65,\n  },\n  {\n    x: 1618337886000,\n    y: 1264.66,\n  },\n  {\n    x: 1618337901000,\n    y: 1264.67,\n  },\n  {\n    x: 1618337916000,\n    y: 1264.68,\n  },\n  {\n    x: 1618337931000,\n    y: 1264.7,\n  },\n  {\n    x: 1618337941000,\n    y: 1264.71,\n  },\n  {\n    x: 1618337946000,\n    y: 1264.72,\n  },\n  {\n    x: 1618337951000,\n    y: 1264.73,\n  },\n  {\n    x: 1618337966000,\n    y: 1264.74,\n  },\n  {\n    x: 1618337976000,\n    y: 1264.75,\n  },\n  {\n    x: 1618337981000,\n    y: 1264.76,\n  },\n  {\n    x: 1618337991000,\n    y: 1264.77,\n  },\n  {\n    x: 1618338001000,\n    y: 1264.78,\n  },\n  {\n    x: 1618338016000,\n    y: 1264.79,\n  },\n  {\n    x: 1618338021000,\n    y: 1264.8,\n  },\n  {\n    x: 1618338051000,\n    y: 1264.82,\n  },\n  {\n    x: 1618338056000,\n    y: 1264.83,\n  },\n  {\n    x: 1618338061000,\n    y: 1264.84,\n  },\n  {\n    x: 1618338076000,\n    y: 1264.85,\n  },\n  {\n    x: 1618338086000,\n    y: 1264.86,\n  },\n  {\n    x: 1618338091000,\n    y: 1264.87,\n  },\n  {\n    x: 1618338101000,\n    y: 1264.88,\n  },\n  {\n    x: 1618338111000,\n    y: 1264.89,\n  },\n  {\n    x: 1618338131000,\n    y: 1264.9,\n  },\n  {\n    x: 1618338141000,\n    y: 1264.91,\n  },\n  {\n    x: 1618338151000,\n    y: 1264.92,\n  },\n  {\n    x: 1618338161000,\n    y: 1264.93,\n  },\n  {\n    x: 1618338166000,\n    y: 1264.94,\n  },\n  {\n    x: 1618338171000,\n    y: 1264.95,\n  },\n  {\n    x: 1618338186000,\n    y: 1264.96,\n  },\n  {\n    x: 1618338196000,\n    y: 1264.97,\n  },\n  {\n    x: 1618338201000,\n    y: 1264.98,\n  },\n  {\n    x: 1618338211000,\n    y: 1264.99,\n  },\n  {\n    x: 1618338221000,\n    y: 1265,\n  },\n  {\n    x: 1618338236000,\n    y: 1265.01,\n  },\n  {\n    x: 1618338246000,\n    y: 1265.02,\n  },\n  {\n    x: 1618338256000,\n    y: 1265.03,\n  },\n  {\n    x: 1618338266000,\n    y: 1265.04,\n  },\n  {\n    x: 1618338276000,\n    y: 1265.05,\n  },\n  {\n    x: 1618338281000,\n    y: 1265.06,\n  },\n  {\n    x: 1618338291000,\n    y: 1265.07,\n  },\n  {\n    x: 1618338296000,\n    y: 1265.08,\n  },\n  {\n    x: 1618338311000,\n    y: 1265.09,\n  },\n  {\n    x: 1618338331000,\n    y: 1265.1,\n  },\n  {\n    x: 1618338336000,\n    y: 1265.11,\n  },\n  {\n    x: 1618338346000,\n    y: 1265.12,\n  },\n  {\n    x: 1618338356000,\n    y: 1265.13,\n  },\n  {\n    x: 1618338361000,\n    y: 1265.14,\n  },\n  {\n    x: 1618338371000,\n    y: 1265.15,\n  },\n  {\n    x: 1618338376000,\n    y: 1265.16,\n  },\n  {\n    x: 1618338391000,\n    y: 1265.17,\n  },\n  {\n    x: 1618338401000,\n    y: 1265.18,\n  },\n  {\n    x: 1618338406000,\n    y: 1265.19,\n  },\n  {\n    x: 1618338416000,\n    y: 1265.2,\n  },\n  {\n    x: 1618338421000,\n    y: 1265.21,\n  },\n  {\n    x: 1618338431000,\n    y: 1265.22,\n  },\n  {\n    x: 1618338436000,\n    y: 1265.23,\n  },\n  {\n    x: 1618338446000,\n    y: 1265.24,\n  },\n  {\n    x: 1618338461000,\n    y: 1265.25,\n  },\n  {\n    x: 1618338476000,\n    y: 1265.26,\n  },\n  {\n    x: 1618338486000,\n    y: 1265.27,\n  },\n  {\n    x: 1618338491000,\n    y: 1265.28,\n  },\n  {\n    x: 1618338496000,\n    y: 1265.29,\n  },\n  {\n    x: 1618338506000,\n    y: 1265.3,\n  },\n  {\n    x: 1618338511000,\n    y: 1265.31,\n  },\n  {\n    x: 1618338516000,\n    y: 1265.32,\n  },\n  {\n    x: 1618338526000,\n    y: 1265.33,\n  },\n  {\n    x: 1618338531000,\n    y: 1265.34,\n  },\n  {\n    x: 1618338541000,\n    y: 1265.35,\n  },\n  {\n    x: 1618338546000,\n    y: 1265.36,\n  },\n  {\n    x: 1618338556000,\n    y: 1265.37,\n  },\n  {\n    x: 1618338561000,\n    y: 1265.38,\n  },\n  {\n    x: 1618338571000,\n    y: 1265.39,\n  },\n  {\n    x: 1618338576000,\n    y: 1265.4,\n  },\n  {\n    x: 1618338586000,\n    y: 1265.42,\n  },\n  {\n    x: 1618338591000,\n    y: 1265.43,\n  },\n  {\n    x: 1618338596000,\n    y: 1265.44,\n  },\n  {\n    x: 1618338601000,\n    y: 1265.45,\n  },\n  {\n    x: 1618338606000,\n    y: 1265.46,\n  },\n  {\n    x: 1618338611000,\n    y: 1265.47,\n  },\n  {\n    x: 1618338616000,\n    y: 1265.48,\n  },\n  {\n    x: 1618338621000,\n    y: 1265.49,\n  },\n  {\n    x: 1618338631000,\n    y: 1265.5,\n  },\n  {\n    x: 1618338636000,\n    y: 1265.51,\n  },\n  {\n    x: 1618338641000,\n    y: 1265.52,\n  },\n  {\n    x: 1618338646000,\n    y: 1265.54,\n  },\n  {\n    x: 1618338651000,\n    y: 1265.55,\n  },\n  {\n    x: 1618338656000,\n    y: 1265.58,\n  },\n  {\n    x: 1618338666000,\n    y: 1265.59,\n  },\n  {\n    x: 1618338671000,\n    y: 1265.6,\n  },\n  {\n    x: 1618338681000,\n    y: 1265.61,\n  },\n  {\n    x: 1618338691000,\n    y: 1265.62,\n  },\n  {\n    x: 1618338701000,\n    y: 1265.63,\n  },\n  {\n    x: 1618338706000,\n    y: 1265.64,\n  },\n  {\n    x: 1618338711000,\n    y: 1265.65,\n  },\n  {\n    x: 1618338716000,\n    y: 1265.66,\n  },\n  {\n    x: 1618338721000,\n    y: 1265.67,\n  },\n  {\n    x: 1618338726000,\n    y: 1265.68,\n  },\n  {\n    x: 1618338741000,\n    y: 1265.69,\n  },\n  {\n    x: 1618338746000,\n    y: 1265.7,\n  },\n  {\n    x: 1618338751000,\n    y: 1265.71,\n  },\n  {\n    x: 1618338761000,\n    y: 1265.72,\n  },\n  {\n    x: 1618338776000,\n    y: 1265.74,\n  },\n  {\n    x: 1618338786000,\n    y: 1265.75,\n  },\n  {\n    x: 1618338796000,\n    y: 1265.76,\n  },\n  {\n    x: 1618338801000,\n    y: 1265.77,\n  },\n  {\n    x: 1618338816000,\n    y: 1265.78,\n  },\n  {\n    x: 1618338831000,\n    y: 1265.79,\n  },\n  {\n    x: 1618338836000,\n    y: 1265.8,\n  },\n  {\n    x: 1618338846000,\n    y: 1265.81,\n  },\n  {\n    x: 1618338886000,\n    y: 1265.83,\n  },\n  {\n    x: 1618338891000,\n    y: 1265.85,\n  },\n  {\n    x: 1618338896000,\n    y: 1265.87,\n  },\n  {\n    x: 1618338901000,\n    y: 1265.89,\n  },\n  {\n    x: 1618338921000,\n    y: 1265.9,\n  },\n  {\n    x: 1618338926000,\n    y: 1265.91,\n  },\n  {\n    x: 1618338936000,\n    y: 1265.92,\n  },\n  {\n    x: 1618338941000,\n    y: 1265.93,\n  },\n  {\n    x: 1618338946000,\n    y: 1265.95,\n  },\n  {\n    x: 1618338961000,\n    y: 1265.96,\n  },\n  {\n    x: 1618338971000,\n    y: 1265.97,\n  },\n  {\n    x: 1618338976000,\n    y: 1265.98,\n  },\n  {\n    x: 1618338986000,\n    y: 1265.99,\n  },\n  {\n    x: 1618338991000,\n    y: 1266.01,\n  },\n  {\n    x: 1618339006000,\n    y: 1266.02,\n  },\n  {\n    x: 1618339011000,\n    y: 1266.03,\n  },\n  {\n    x: 1618339021000,\n    y: 1266.04,\n  },\n  {\n    x: 1618339036000,\n    y: 1266.05,\n  },\n  {\n    x: 1618339041000,\n    y: 1266.06,\n  },\n  {\n    x: 1618339051000,\n    y: 1266.07,\n  },\n  {\n    x: 1618339056000,\n    y: 1266.08,\n  },\n  {\n    x: 1618339061000,\n    y: 1266.09,\n  },\n  {\n    x: 1618339066000,\n    y: 1266.1,\n  },\n  {\n    x: 1618339071000,\n    y: 1266.11,\n  },\n  {\n    x: 1618339086000,\n    y: 1266.12,\n  },\n  {\n    x: 1618339096000,\n    y: 1266.13,\n  },\n  {\n    x: 1618339121000,\n    y: 1266.14,\n  },\n  {\n    x: 1618339141000,\n    y: 1266.15,\n  },\n  {\n    x: 1618339146000,\n    y: 1266.16,\n  },\n  {\n    x: 1618339156000,\n    y: 1266.17,\n  },\n  {\n    x: 1618339161000,\n    y: 1266.18,\n  },\n  {\n    x: 1618339166000,\n    y: 1266.19,\n  },\n  {\n    x: 1618339191000,\n    y: 1266.2,\n  },\n  {\n    x: 1618339211000,\n    y: 1266.21,\n  },\n  {\n    x: 1618339221000,\n    y: 1266.22,\n  },\n  {\n    x: 1618339231000,\n    y: 1266.23,\n  },\n  {\n    x: 1618339241000,\n    y: 1266.24,\n  },\n  {\n    x: 1618339256000,\n    y: 1266.25,\n  },\n  {\n    x: 1618339266000,\n    y: 1266.26,\n  },\n  {\n    x: 1618339286000,\n    y: 1266.27,\n  },\n  {\n    x: 1618339306000,\n    y: 1266.28,\n  },\n  {\n    x: 1618339316000,\n    y: 1266.29,\n  },\n  {\n    x: 1618339321000,\n    y: 1266.3,\n  },\n  {\n    x: 1618339336000,\n    y: 1266.31,\n  },\n  {\n    x: 1618339346000,\n    y: 1266.32,\n  },\n  {\n    x: 1618339356000,\n    y: 1266.33,\n  },\n  {\n    x: 1618339376000,\n    y: 1266.34,\n  },\n  {\n    x: 1618339386000,\n    y: 1266.35,\n  },\n  {\n    x: 1618339401000,\n    y: 1266.36,\n  },\n  {\n    x: 1618339421000,\n    y: 1266.37,\n  },\n  {\n    x: 1618339436000,\n    y: 1266.38,\n  },\n  {\n    x: 1618339451000,\n    y: 1266.39,\n  },\n  {\n    x: 1618339461000,\n    y: 1266.4,\n  },\n  {\n    x: 1618339476000,\n    y: 1266.41,\n  },\n  {\n    x: 1618339486000,\n    y: 1266.42,\n  },\n  {\n    x: 1618339496000,\n    y: 1266.43,\n  },\n  {\n    x: 1618339501000,\n    y: 1266.44,\n  },\n  {\n    x: 1618339511000,\n    y: 1266.45,\n  },\n  {\n    x: 1618339521000,\n    y: 1266.46,\n  },\n  {\n    x: 1618339531000,\n    y: 1266.47,\n  },\n  {\n    x: 1618339536000,\n    y: 1266.48,\n  },\n  {\n    x: 1618339546000,\n    y: 1266.49,\n  },\n  {\n    x: 1618339556000,\n    y: 1266.5,\n  },\n  {\n    x: 1618339561000,\n    y: 1266.51,\n  },\n  {\n    x: 1618339571000,\n    y: 1266.52,\n  },\n  {\n    x: 1618339581000,\n    y: 1266.53,\n  },\n  {\n    x: 1618339586000,\n    y: 1266.54,\n  },\n  {\n    x: 1618339596000,\n    y: 1266.55,\n  },\n  {\n    x: 1618339606000,\n    y: 1266.56,\n  },\n  {\n    x: 1618339616000,\n    y: 1266.57,\n  },\n  {\n    x: 1618339631000,\n    y: 1266.58,\n  },\n  {\n    x: 1618339646000,\n    y: 1266.59,\n  },\n  {\n    x: 1618339651000,\n    y: 1266.6,\n  },\n  {\n    x: 1618339656000,\n    y: 1266.61,\n  },\n  {\n    x: 1618339666000,\n    y: 1266.62,\n  },\n  {\n    x: 1618339681000,\n    y: 1266.63,\n  },\n  {\n    x: 1618339696000,\n    y: 1266.64,\n  },\n  {\n    x: 1618339726000,\n    y: 1266.65,\n  },\n  {\n    x: 1618339731000,\n    y: 1266.66,\n  },\n  {\n    x: 1618339736000,\n    y: 1266.67,\n  },\n  {\n    x: 1618339741000,\n    y: 1266.68,\n  },\n  {\n    x: 1618339746000,\n    y: 1266.69,\n  },\n  {\n    x: 1618339751000,\n    y: 1266.7,\n  },\n  {\n    x: 1618339766000,\n    y: 1266.71,\n  },\n  {\n    x: 1618339791000,\n    y: 1266.72,\n  },\n  {\n    x: 1618339806000,\n    y: 1266.73,\n  },\n  {\n    x: 1618339811000,\n    y: 1266.74,\n  },\n  {\n    x: 1618339816000,\n    y: 1266.75,\n  },\n  {\n    x: 1618339821000,\n    y: 1266.76,\n  },\n  {\n    x: 1618339826000,\n    y: 1266.77,\n  },\n  {\n    x: 1618339836000,\n    y: 1266.78,\n  },\n  {\n    x: 1618339846000,\n    y: 1266.79,\n  },\n  {\n    x: 1618339856000,\n    y: 1266.8,\n  },\n  {\n    x: 1618339866000,\n    y: 1266.81,\n  },\n  {\n    x: 1618339876000,\n    y: 1266.82,\n  },\n  {\n    x: 1618339886000,\n    y: 1266.83,\n  },\n  {\n    x: 1618339891000,\n    y: 1266.84,\n  },\n  {\n    x: 1618339896000,\n    y: 1266.85,\n  },\n  {\n    x: 1618339911000,\n    y: 1266.86,\n  },\n  {\n    x: 1618339916000,\n    y: 1266.87,\n  },\n  {\n    x: 1618339921000,\n    y: 1266.88,\n  },\n  {\n    x: 1618339926000,\n    y: 1266.89,\n  },\n  {\n    x: 1618339931000,\n    y: 1266.9,\n  },\n  {\n    x: 1618339941000,\n    y: 1266.91,\n  },\n  {\n    x: 1618339951000,\n    y: 1266.92,\n  },\n  {\n    x: 1618339966000,\n    y: 1266.93,\n  },\n  {\n    x: 1618339986000,\n    y: 1266.94,\n  },\n  {\n    x: 1618339991000,\n    y: 1266.95,\n  },\n  {\n    x: 1618340001000,\n    y: 1266.96,\n  },\n  {\n    x: 1618340006000,\n    y: 1266.97,\n  },\n  {\n    x: 1618340011000,\n    y: 1266.98,\n  },\n  {\n    x: 1618340016000,\n    y: 1266.99,\n  },\n  {\n    x: 1618340021000,\n    y: 1267,\n  },\n  {\n    x: 1618340031000,\n    y: 1267.01,\n  },\n  {\n    x: 1618340041000,\n    y: 1267.02,\n  },\n  {\n    x: 1618340051000,\n    y: 1267.03,\n  },\n  {\n    x: 1618341291000,\n    y: 1267.05,\n  },\n  {\n    x: 1618341296000,\n    y: 1267.09,\n  },\n  {\n    x: 1618341311000,\n    y: 1267.1,\n  },\n  {\n    x: 1618341306000,\n    y: 1267.11,\n  },\n  {\n    x: 1618341301000,\n    y: 1267.12,\n  },\n  {\n    x: 1618341421000,\n    y: 1267.13,\n  },\n  {\n    x: 1618341431000,\n    y: 1267.14,\n  },\n  {\n    x: 1618341451000,\n    y: 1267.15,\n  },\n  {\n    x: 1618341466000,\n    y: 1267.16,\n  },\n  {\n    x: 1618341481000,\n    y: 1267.17,\n  },\n  {\n    x: 1618341491000,\n    y: 1267.18,\n  },\n  {\n    x: 1618341511000,\n    y: 1267.19,\n  },\n  {\n    x: 1618341521000,\n    y: 1267.2,\n  },\n  {\n    x: 1618341531000,\n    y: 1267.21,\n  },\n  {\n    x: 1618341541000,\n    y: 1267.22,\n  },\n  {\n    x: 1618341546000,\n    y: 1267.23,\n  },\n  {\n    x: 1618341556000,\n    y: 1267.24,\n  },\n  {\n    x: 1618341586000,\n    y: 1267.25,\n  },\n  {\n    x: 1618341611000,\n    y: 1267.26,\n  },\n  {\n    x: 1618341626000,\n    y: 1267.27,\n  },\n  {\n    x: 1618341641000,\n    y: 1267.28,\n  },\n  {\n    x: 1618341646000,\n    y: 1267.29,\n  },\n  {\n    x: 1618341666000,\n    y: 1267.3,\n  },\n  {\n    x: 1618341686000,\n    y: 1267.31,\n  },\n  {\n    x: 1618341701000,\n    y: 1267.32,\n  },\n  {\n    x: 1618341711000,\n    y: 1267.33,\n  },\n  {\n    x: 1618341721000,\n    y: 1267.34,\n  },\n  {\n    x: 1618341736000,\n    y: 1267.35,\n  },\n  {\n    x: 1618341746000,\n    y: 1267.36,\n  },\n  {\n    x: 1618341756000,\n    y: 1267.37,\n  },\n  {\n    x: 1618341771000,\n    y: 1267.38,\n  },\n  {\n    x: 1618341791000,\n    y: 1267.39,\n  },\n  {\n    x: 1618341806000,\n    y: 1267.4,\n  },\n  {\n    x: 1618341811000,\n    y: 1267.41,\n  },\n  {\n    x: 1618341826000,\n    y: 1267.42,\n  },\n  {\n    x: 1618341846000,\n    y: 1267.43,\n  },\n  {\n    x: 1618341861000,\n    y: 1267.44,\n  },\n  {\n    x: 1618341881000,\n    y: 1267.45,\n  },\n  {\n    x: 1618341896000,\n    y: 1267.46,\n  },\n  {\n    x: 1618341906000,\n    y: 1267.47,\n  },\n  {\n    x: 1618341916000,\n    y: 1267.48,\n  },\n  {\n    x: 1618341931000,\n    y: 1267.49,\n  },\n  {\n    x: 1618341941000,\n    y: 1267.5,\n  },\n  {\n    x: 1618341961000,\n    y: 1267.51,\n  },\n  {\n    x: 1618341986000,\n    y: 1267.52,\n  },\n  {\n    x: 1618341996000,\n    y: 1267.53,\n  },\n  {\n    x: 1618342006000,\n    y: 1267.54,\n  },\n  {\n    x: 1618342016000,\n    y: 1267.55,\n  },\n  {\n    x: 1618342031000,\n    y: 1267.56,\n  },\n  {\n    x: 1618342061000,\n    y: 1267.57,\n  },\n  {\n    x: 1618342066000,\n    y: 1267.58,\n  },\n  {\n    x: 1618342081000,\n    y: 1267.59,\n  },\n  {\n    x: 1618342096000,\n    y: 1267.6,\n  },\n  {\n    x: 1618342101000,\n    y: 1267.61,\n  },\n  {\n    x: 1618342116000,\n    y: 1267.62,\n  },\n  {\n    x: 1618342126000,\n    y: 1267.63,\n  },\n  {\n    x: 1618342136000,\n    y: 1267.64,\n  },\n  {\n    x: 1618342151000,\n    y: 1267.65,\n  },\n  {\n    x: 1618342161000,\n    y: 1267.66,\n  },\n  {\n    x: 1618342176000,\n    y: 1267.67,\n  },\n  {\n    x: 1618342186000,\n    y: 1267.68,\n  },\n  {\n    x: 1618342211000,\n    y: 1267.69,\n  },\n  {\n    x: 1618342226000,\n    y: 1267.7,\n  },\n  {\n    x: 1618342241000,\n    y: 1267.71,\n  },\n  {\n    x: 1618342251000,\n    y: 1267.72,\n  },\n  {\n    x: 1618342266000,\n    y: 1267.73,\n  },\n  {\n    x: 1618342276000,\n    y: 1267.74,\n  },\n  {\n    x: 1618342291000,\n    y: 1267.75,\n  },\n  {\n    x: 1618342306000,\n    y: 1267.76,\n  },\n  {\n    x: 1618342316000,\n    y: 1267.77,\n  },\n  {\n    x: 1618342331000,\n    y: 1267.78,\n  },\n  {\n    x: 1618342346000,\n    y: 1267.79,\n  },\n  {\n    x: 1618342356000,\n    y: 1267.8,\n  },\n  {\n    x: 1618342371000,\n    y: 1267.81,\n  },\n  {\n    x: 1618342381000,\n    y: 1267.82,\n  },\n  {\n    x: 1618342391000,\n    y: 1267.83,\n  },\n  {\n    x: 1618342411000,\n    y: 1267.84,\n  },\n  {\n    x: 1618342421000,\n    y: 1267.85,\n  },\n  {\n    x: 1618342441000,\n    y: 1267.86,\n  },\n  {\n    x: 1618342466000,\n    y: 1267.87,\n  },\n  {\n    x: 1618342476000,\n    y: 1267.88,\n  },\n  {\n    x: 1618342496000,\n    y: 1267.89,\n  },\n  {\n    x: 1618342521000,\n    y: 1267.9,\n  },\n  {\n    x: 1618342531000,\n    y: 1267.91,\n  },\n  {\n    x: 1618342551000,\n    y: 1267.92,\n  },\n  {\n    x: 1618342566000,\n    y: 1267.93,\n  },\n  {\n    x: 1618342581000,\n    y: 1267.94,\n  },\n  {\n    x: 1618342596000,\n    y: 1267.95,\n  },\n  {\n    x: 1618342616000,\n    y: 1267.96,\n  },\n  {\n    x: 1618342631000,\n    y: 1267.97,\n  },\n  {\n    x: 1618342651000,\n    y: 1267.98,\n  },\n  {\n    x: 1618342656000,\n    y: 1267.99,\n  },\n  {\n    x: 1618342671000,\n    y: 1268,\n  },\n  {\n    x: 1618342681000,\n    y: 1268.01,\n  },\n  {\n    x: 1618342691000,\n    y: 1268.02,\n  },\n  {\n    x: 1618342716000,\n    y: 1268.03,\n  },\n  {\n    x: 1618342741000,\n    y: 1268.04,\n  },\n  {\n    x: 1618342756000,\n    y: 1268.05,\n  },\n  {\n    x: 1618342771000,\n    y: 1268.06,\n  },\n  {\n    x: 1618342781000,\n    y: 1268.07,\n  },\n  {\n    x: 1618342801000,\n    y: 1268.08,\n  },\n  {\n    x: 1618342821000,\n    y: 1268.09,\n  },\n  {\n    x: 1618342836000,\n    y: 1268.1,\n  },\n  {\n    x: 1618342851000,\n    y: 1268.11,\n  },\n  {\n    x: 1618342866000,\n    y: 1268.12,\n  },\n  {\n    x: 1618342876000,\n    y: 1268.13,\n  },\n  {\n    x: 1618342896000,\n    y: 1268.14,\n  },\n  {\n    x: 1618342906000,\n    y: 1268.15,\n  },\n  {\n    x: 1618342936000,\n    y: 1268.16,\n  },\n  {\n    x: 1618342956000,\n    y: 1268.17,\n  },\n  {\n    x: 1618342966000,\n    y: 1268.18,\n  },\n  {\n    x: 1618342986000,\n    y: 1268.19,\n  },\n  {\n    x: 1618343001000,\n    y: 1268.2,\n  },\n  {\n    x: 1618343016000,\n    y: 1268.21,\n  },\n  {\n    x: 1618343021000,\n    y: 1268.22,\n  },\n  {\n    x: 1618343041000,\n    y: 1268.23,\n  },\n  {\n    x: 1618343056000,\n    y: 1268.24,\n  },\n  {\n    x: 1618343066000,\n    y: 1268.25,\n  },\n  {\n    x: 1618343081000,\n    y: 1268.26,\n  },\n  {\n    x: 1618343096000,\n    y: 1268.27,\n  },\n  {\n    x: 1618343116000,\n    y: 1268.28,\n  },\n  {\n    x: 1618343136000,\n    y: 1268.29,\n  },\n  {\n    x: 1618343151000,\n    y: 1268.3,\n  },\n  {\n    x: 1618343161000,\n    y: 1268.31,\n  },\n  {\n    x: 1618343171000,\n    y: 1268.32,\n  },\n  {\n    x: 1618343186000,\n    y: 1268.33,\n  },\n  {\n    x: 1618343206000,\n    y: 1268.34,\n  },\n  {\n    x: 1618343216000,\n    y: 1268.35,\n  },\n  {\n    x: 1618343231000,\n    y: 1268.36,\n  },\n  {\n    x: 1618343241000,\n    y: 1268.37,\n  },\n  {\n    x: 1618343256000,\n    y: 1268.38,\n  },\n  {\n    x: 1618343271000,\n    y: 1268.39,\n  },\n  {\n    x: 1618343286000,\n    y: 1268.4,\n  },\n  {\n    x: 1618343306000,\n    y: 1268.41,\n  },\n  {\n    x: 1618343316000,\n    y: 1268.42,\n  },\n  {\n    x: 1618343331000,\n    y: 1268.43,\n  },\n  {\n    x: 1618343336000,\n    y: 1268.44,\n  },\n  {\n    x: 1618343346000,\n    y: 1268.45,\n  },\n  {\n    x: 1618343361000,\n    y: 1268.46,\n  },\n  {\n    x: 1618343401000,\n    y: 1268.47,\n  },\n  {\n    x: 1618343411000,\n    y: 1268.48,\n  },\n  {\n    x: 1618343426000,\n    y: 1268.49,\n  },\n  {\n    x: 1618343436000,\n    y: 1268.5,\n  },\n  {\n    x: 1618343451000,\n    y: 1268.51,\n  },\n  {\n    x: 1618343471000,\n    y: 1268.52,\n  },\n  {\n    x: 1618343486000,\n    y: 1268.53,\n  },\n  {\n    x: 1618343496000,\n    y: 1268.54,\n  },\n  {\n    x: 1618343506000,\n    y: 1268.55,\n  },\n  {\n    x: 1618343526000,\n    y: 1268.56,\n  },\n  {\n    x: 1618343546000,\n    y: 1268.57,\n  },\n  {\n    x: 1618343556000,\n    y: 1268.58,\n  },\n  {\n    x: 1618343576000,\n    y: 1268.59,\n  },\n  {\n    x: 1618343586000,\n    y: 1268.6,\n  },\n  {\n    x: 1618343596000,\n    y: 1268.61,\n  },\n  {\n    x: 1618343606000,\n    y: 1268.62,\n  },\n  {\n    x: 1618343616000,\n    y: 1268.63,\n  },\n  {\n    x: 1618343636000,\n    y: 1268.64,\n  },\n  {\n    x: 1618343651000,\n    y: 1268.65,\n  },\n  {\n    x: 1618343671000,\n    y: 1268.66,\n  },\n  {\n    x: 1618343676000,\n    y: 1268.67,\n  },\n  {\n    x: 1618343701000,\n    y: 1268.68,\n  },\n  {\n    x: 1618343706000,\n    y: 1268.69,\n  },\n  {\n    x: 1618343726000,\n    y: 1268.7,\n  },\n  {\n    x: 1618343741000,\n    y: 1268.71,\n  },\n  {\n    x: 1618343756000,\n    y: 1268.72,\n  },\n  {\n    x: 1618343776000,\n    y: 1268.73,\n  },\n  {\n    x: 1618343796000,\n    y: 1268.74,\n  },\n  {\n    x: 1618343816000,\n    y: 1268.76,\n  },\n  {\n    x: 1618343826000,\n    y: 1268.77,\n  },\n  {\n    x: 1618343836000,\n    y: 1268.78,\n  },\n  {\n    x: 1618343851000,\n    y: 1268.79,\n  },\n  {\n    x: 1618343871000,\n    y: 1268.8,\n  },\n  {\n    x: 1618343881000,\n    y: 1268.81,\n  },\n  {\n    x: 1618343896000,\n    y: 1268.82,\n  },\n  {\n    x: 1618343906000,\n    y: 1268.83,\n  },\n  {\n    x: 1618343916000,\n    y: 1268.84,\n  },\n  {\n    x: 1618343926000,\n    y: 1268.85,\n  },\n  {\n    x: 1618343946000,\n    y: 1268.86,\n  },\n  {\n    x: 1618343956000,\n    y: 1268.87,\n  },\n  {\n    x: 1618343976000,\n    y: 1268.88,\n  },\n  {\n    x: 1618343996000,\n    y: 1268.89,\n  },\n  {\n    x: 1618344021000,\n    y: 1268.9,\n  },\n  {\n    x: 1618344031000,\n    y: 1268.91,\n  },\n  {\n    x: 1618344056000,\n    y: 1268.92,\n  },\n  {\n    x: 1618344066000,\n    y: 1268.93,\n  },\n  {\n    x: 1618344071000,\n    y: 1268.94,\n  },\n  {\n    x: 1618344091000,\n    y: 1268.95,\n  },\n  {\n    x: 1618344101000,\n    y: 1268.96,\n  },\n  {\n    x: 1618344111000,\n    y: 1268.97,\n  },\n  {\n    x: 1618344126000,\n    y: 1268.98,\n  },\n  {\n    x: 1618344136000,\n    y: 1268.99,\n  },\n  {\n    x: 1618344146000,\n    y: 1269,\n  },\n  {\n    x: 1618344176000,\n    y: 1269.01,\n  },\n  {\n    x: 1618344181000,\n    y: 1269.02,\n  },\n  {\n    x: 1618344211000,\n    y: 1269.03,\n  },\n  {\n    x: 1618344216000,\n    y: 1269.04,\n  },\n  {\n    x: 1618344226000,\n    y: 1269.05,\n  },\n  {\n    x: 1618344231000,\n    y: 1269.06,\n  },\n  {\n    x: 1618344251000,\n    y: 1269.07,\n  },\n  {\n    x: 1618344271000,\n    y: 1269.08,\n  },\n  {\n    x: 1618344286000,\n    y: 1269.09,\n  },\n  {\n    x: 1618344306000,\n    y: 1269.1,\n  },\n  {\n    x: 1618344316000,\n    y: 1269.11,\n  },\n  {\n    x: 1618344326000,\n    y: 1269.12,\n  },\n  {\n    x: 1618344346000,\n    y: 1269.13,\n  },\n  {\n    x: 1618344366000,\n    y: 1269.14,\n  },\n  {\n    x: 1618344391000,\n    y: 1269.15,\n  },\n  {\n    x: 1618344406000,\n    y: 1269.16,\n  },\n  {\n    x: 1618344411000,\n    y: 1269.17,\n  },\n  {\n    x: 1618344426000,\n    y: 1269.18,\n  },\n  {\n    x: 1618344461000,\n    y: 1269.19,\n  },\n  {\n    x: 1618344476000,\n    y: 1269.2,\n  },\n  {\n    x: 1618344486000,\n    y: 1269.21,\n  },\n  {\n    x: 1618344491000,\n    y: 1269.22,\n  },\n  {\n    x: 1618344501000,\n    y: 1269.23,\n  },\n  {\n    x: 1618344511000,\n    y: 1269.24,\n  },\n  {\n    x: 1618344546000,\n    y: 1269.26,\n  },\n  {\n    x: 1618344556000,\n    y: 1269.27,\n  },\n  {\n    x: 1618344566000,\n    y: 1269.28,\n  },\n  {\n    x: 1618344571000,\n    y: 1269.29,\n  },\n  {\n    x: 1618344586000,\n    y: 1269.3,\n  },\n  {\n    x: 1618344596000,\n    y: 1269.31,\n  },\n  {\n    x: 1618344601000,\n    y: 1269.32,\n  },\n  {\n    x: 1618344616000,\n    y: 1269.33,\n  },\n  {\n    x: 1618344636000,\n    y: 1269.34,\n  },\n  {\n    x: 1618344646000,\n    y: 1269.35,\n  },\n  {\n    x: 1618344656000,\n    y: 1269.36,\n  },\n  {\n    x: 1618344666000,\n    y: 1269.37,\n  },\n  {\n    x: 1618344676000,\n    y: 1269.38,\n  },\n  {\n    x: 1618344686000,\n    y: 1269.39,\n  },\n  {\n    x: 1618344706000,\n    y: 1269.4,\n  },\n  {\n    x: 1618344716000,\n    y: 1269.41,\n  },\n  {\n    x: 1618344731000,\n    y: 1269.42,\n  },\n  {\n    x: 1618344736000,\n    y: 1269.43,\n  },\n  {\n    x: 1618344746000,\n    y: 1269.44,\n  },\n  {\n    x: 1618344756000,\n    y: 1269.45,\n  },\n  {\n    x: 1618344771000,\n    y: 1269.46,\n  },\n  {\n    x: 1618344781000,\n    y: 1269.47,\n  },\n  {\n    x: 1618344796000,\n    y: 1269.48,\n  },\n  {\n    x: 1618344806000,\n    y: 1269.49,\n  },\n  {\n    x: 1618344821000,\n    y: 1269.5,\n  },\n  {\n    x: 1618344836000,\n    y: 1269.51,\n  },\n  {\n    x: 1618345211000,\n    y: 1269.7,\n  },\n  {\n    x: 1618345406000,\n    y: 1269.85,\n  },\n  {\n    x: 1618346746000,\n    y: 1269.86,\n  },\n  {\n    x: 1618346756000,\n    y: 1269.87,\n  },\n  {\n    x: 1618346771000,\n    y: 1269.88,\n  },\n  {\n    x: 1618346786000,\n    y: 1269.89,\n  },\n  {\n    x: 1618346831000,\n    y: 1269.91,\n  },\n  {\n    x: 1618346841000,\n    y: 1269.92,\n  },\n  {\n    x: 1618346851000,\n    y: 1269.93,\n  },\n  {\n    x: 1618346881000,\n    y: 1269.94,\n  },\n  {\n    x: 1618346901000,\n    y: 1270.7,\n  },\n  {\n    x: 1618346916000,\n    y: 1270.71,\n  },\n  {\n    x: 1618346936000,\n    y: 1270.72,\n  },\n  {\n    x: 1618346956000,\n    y: 1270.73,\n  },\n  {\n    x: 1618346971000,\n    y: 1270.74,\n  },\n  {\n    x: 1618346981000,\n    y: 1270.75,\n  },\n  {\n    x: 1618347001000,\n    y: 1270.76,\n  },\n  {\n    x: 1618347026000,\n    y: 1270.77,\n  },\n  {\n    x: 1618347041000,\n    y: 1270.78,\n  },\n  {\n    x: 1618347051000,\n    y: 1270.79,\n  },\n  {\n    x: 1618347071000,\n    y: 1270.8,\n  },\n  {\n    x: 1618347096000,\n    y: 1270.81,\n  },\n  {\n    x: 1618347101000,\n    y: 1270.82,\n  },\n  {\n    x: 1618347121000,\n    y: 1270.83,\n  },\n  {\n    x: 1618347146000,\n    y: 1270.84,\n  },\n  {\n    x: 1618347161000,\n    y: 1270.86,\n  },\n  {\n    x: 1618347186000,\n    y: 1270.87,\n  },\n  {\n    x: 1618347216000,\n    y: 1270.88,\n  },\n  {\n    x: 1618347231000,\n    y: 1270.89,\n  },\n  {\n    x: 1618347241000,\n    y: 1270.9,\n  },\n  {\n    x: 1618347256000,\n    y: 1270.91,\n  },\n  {\n    x: 1618347271000,\n    y: 1270.92,\n  },\n  {\n    x: 1618347296000,\n    y: 1270.93,\n  },\n  {\n    x: 1618347321000,\n    y: 1270.94,\n  },\n  {\n    x: 1618347331000,\n    y: 1270.95,\n  },\n  {\n    x: 1618347341000,\n    y: 1270.96,\n  },\n  {\n    x: 1618347361000,\n    y: 1270.97,\n  },\n  {\n    x: 1618347376000,\n    y: 1270.98,\n  },\n  {\n    x: 1618347386000,\n    y: 1270.99,\n  },\n  {\n    x: 1618347396000,\n    y: 1271,\n  },\n  {\n    x: 1618347461000,\n    y: 1271.01,\n  },\n  {\n    x: 1618347481000,\n    y: 1271.02,\n  },\n  {\n    x: 1618347511000,\n    y: 1271.03,\n  },\n  {\n    x: 1618347531000,\n    y: 1271.04,\n  },\n  {\n    x: 1618347541000,\n    y: 1271.05,\n  },\n  {\n    x: 1618347551000,\n    y: 1271.06,\n  },\n  {\n    x: 1618347571000,\n    y: 1271.07,\n  },\n  {\n    x: 1618347596000,\n    y: 1271.08,\n  },\n  {\n    x: 1618347606000,\n    y: 1271.09,\n  },\n  {\n    x: 1618347626000,\n    y: 1271.1,\n  },\n  {\n    x: 1618347651000,\n    y: 1271.11,\n  },\n  {\n    x: 1618347666000,\n    y: 1271.12,\n  },\n  {\n    x: 1618347681000,\n    y: 1271.13,\n  },\n  {\n    x: 1618347701000,\n    y: 1271.14,\n  },\n  {\n    x: 1618347726000,\n    y: 1271.15,\n  },\n  {\n    x: 1618347736000,\n    y: 1271.16,\n  },\n  {\n    x: 1618347751000,\n    y: 1271.17,\n  },\n  {\n    x: 1618347776000,\n    y: 1271.18,\n  },\n  {\n    x: 1618347791000,\n    y: 1271.19,\n  },\n  {\n    x: 1618347816000,\n    y: 1271.2,\n  },\n  {\n    x: 1618347836000,\n    y: 1271.21,\n  },\n  {\n    x: 1618347851000,\n    y: 1271.22,\n  },\n  {\n    x: 1618347866000,\n    y: 1271.23,\n  },\n  {\n    x: 1618347881000,\n    y: 1271.24,\n  },\n  {\n    x: 1618347911000,\n    y: 1271.25,\n  },\n  {\n    x: 1618347926000,\n    y: 1271.26,\n  },\n  {\n    x: 1618347956000,\n    y: 1271.27,\n  },\n  {\n    x: 1618347981000,\n    y: 1271.28,\n  },\n  {\n    x: 1618347996000,\n    y: 1271.29,\n  },\n  {\n    x: 1618348021000,\n    y: 1271.3,\n  },\n  {\n    x: 1618348051000,\n    y: 1271.31,\n  },\n  {\n    x: 1618348071000,\n    y: 1271.32,\n  },\n  {\n    x: 1618348086000,\n    y: 1271.33,\n  },\n  {\n    x: 1618348111000,\n    y: 1271.34,\n  },\n  {\n    x: 1618348136000,\n    y: 1271.35,\n  },\n  {\n    x: 1618348161000,\n    y: 1271.36,\n  },\n  {\n    x: 1618348181000,\n    y: 1271.37,\n  },\n  {\n    x: 1618348196000,\n    y: 1271.38,\n  },\n  {\n    x: 1618348216000,\n    y: 1271.39,\n  },\n  {\n    x: 1618348236000,\n    y: 1271.4,\n  },\n  {\n    x: 1618348256000,\n    y: 1271.41,\n  },\n  {\n    x: 1618348271000,\n    y: 1271.42,\n  },\n  {\n    x: 1618348281000,\n    y: 1271.43,\n  },\n  {\n    x: 1618348291000,\n    y: 1271.44,\n  },\n  {\n    x: 1618348296000,\n    y: 1271.45,\n  },\n  {\n    x: 1618348326000,\n    y: 1271.46,\n  },\n  {\n    x: 1618348336000,\n    y: 1271.47,\n  },\n  {\n    x: 1618348351000,\n    y: 1271.48,\n  },\n  {\n    x: 1618348371000,\n    y: 1271.49,\n  },\n  {\n    x: 1618348381000,\n    y: 1271.5,\n  },\n  {\n    x: 1618348396000,\n    y: 1271.51,\n  },\n  {\n    x: 1618348406000,\n    y: 1271.52,\n  },\n  {\n    x: 1618348416000,\n    y: 1271.53,\n  },\n  {\n    x: 1618348426000,\n    y: 1271.54,\n  },\n  {\n    x: 1618348436000,\n    y: 1271.55,\n  },\n  {\n    x: 1618348456000,\n    y: 1271.56,\n  },\n  {\n    x: 1618348471000,\n    y: 1271.57,\n  },\n  {\n    x: 1618348486000,\n    y: 1271.58,\n  },\n  {\n    x: 1618348496000,\n    y: 1271.59,\n  },\n  {\n    x: 1618348521000,\n    y: 1271.6,\n  },\n  {\n    x: 1618348536000,\n    y: 1271.61,\n  },\n  {\n    x: 1618348546000,\n    y: 1271.62,\n  },\n  {\n    x: 1618348561000,\n    y: 1271.63,\n  },\n  {\n    x: 1618348571000,\n    y: 1271.64,\n  },\n  {\n    x: 1618348581000,\n    y: 1271.65,\n  },\n  {\n    x: 1618348596000,\n    y: 1271.66,\n  },\n  {\n    x: 1618348606000,\n    y: 1271.67,\n  },\n  {\n    x: 1618348621000,\n    y: 1271.68,\n  },\n  {\n    x: 1618348641000,\n    y: 1271.69,\n  },\n  {\n    x: 1618348656000,\n    y: 1271.7,\n  },\n  {\n    x: 1618348661000,\n    y: 1271.71,\n  },\n  {\n    x: 1618348671000,\n    y: 1271.72,\n  },\n  {\n    x: 1618348686000,\n    y: 1271.73,\n  },\n  {\n    x: 1618348696000,\n    y: 1271.74,\n  },\n  {\n    x: 1618348706000,\n    y: 1271.75,\n  },\n  {\n    x: 1618348716000,\n    y: 1271.76,\n  },\n  {\n    x: 1618348736000,\n    y: 1271.77,\n  },\n  {\n    x: 1618348751000,\n    y: 1271.78,\n  },\n  {\n    x: 1618348766000,\n    y: 1271.79,\n  },\n  {\n    x: 1618348771000,\n    y: 1271.8,\n  },\n  {\n    x: 1618348781000,\n    y: 1271.81,\n  },\n  {\n    x: 1618348796000,\n    y: 1271.82,\n  },\n  {\n    x: 1618348806000,\n    y: 1271.83,\n  },\n  {\n    x: 1618348816000,\n    y: 1271.84,\n  },\n  {\n    x: 1618348836000,\n    y: 1271.85,\n  },\n  {\n    x: 1618348841000,\n    y: 1271.86,\n  },\n  {\n    x: 1618348851000,\n    y: 1271.87,\n  },\n  {\n    x: 1618348866000,\n    y: 1271.88,\n  },\n  {\n    x: 1618348881000,\n    y: 1271.89,\n  },\n  {\n    x: 1618348901000,\n    y: 1271.9,\n  },\n  {\n    x: 1618348911000,\n    y: 1271.91,\n  },\n  {\n    x: 1618348921000,\n    y: 1271.92,\n  },\n  {\n    x: 1618348936000,\n    y: 1271.93,\n  },\n  {\n    x: 1618348941000,\n    y: 1271.94,\n  },\n  {\n    x: 1618348956000,\n    y: 1271.95,\n  },\n  {\n    x: 1618348971000,\n    y: 1271.96,\n  },\n  {\n    x: 1618348986000,\n    y: 1271.97,\n  },\n  {\n    x: 1618348991000,\n    y: 1271.98,\n  },\n  {\n    x: 1618349001000,\n    y: 1271.99,\n  },\n  {\n    x: 1618349011000,\n    y: 1272,\n  },\n  {\n    x: 1618349026000,\n    y: 1272.01,\n  },\n  {\n    x: 1618349041000,\n    y: 1272.02,\n  },\n  {\n    x: 1618349181000,\n    y: 1272.03,\n  },\n  {\n    x: 1618349196000,\n    y: 1272.04,\n  },\n  {\n    x: 1618349221000,\n    y: 1272.05,\n  },\n  {\n    x: 1618349236000,\n    y: 1272.06,\n  },\n  {\n    x: 1618349246000,\n    y: 1272.07,\n  },\n  {\n    x: 1618349256000,\n    y: 1272.08,\n  },\n  {\n    x: 1618349276000,\n    y: 1272.09,\n  },\n  {\n    x: 1618349291000,\n    y: 1272.1,\n  },\n  {\n    x: 1618349296000,\n    y: 1272.11,\n  },\n  {\n    x: 1618349306000,\n    y: 1272.12,\n  },\n  {\n    x: 1618349316000,\n    y: 1272.13,\n  },\n  {\n    x: 1618349331000,\n    y: 1272.14,\n  },\n  {\n    x: 1618349341000,\n    y: 1272.15,\n  },\n  {\n    x: 1618349346000,\n    y: 1272.16,\n  },\n  {\n    x: 1618349351000,\n    y: 1272.17,\n  },\n  {\n    x: 1618349366000,\n    y: 1272.18,\n  },\n  {\n    x: 1618349376000,\n    y: 1272.19,\n  },\n  {\n    x: 1618349391000,\n    y: 1272.2,\n  },\n  {\n    x: 1618349396000,\n    y: 1272.21,\n  },\n  {\n    x: 1618349401000,\n    y: 1272.22,\n  },\n  {\n    x: 1618349421000,\n    y: 1272.23,\n  },\n  {\n    x: 1618349436000,\n    y: 1272.24,\n  },\n  {\n    x: 1618349446000,\n    y: 1272.25,\n  },\n  {\n    x: 1618349461000,\n    y: 1272.26,\n  },\n  {\n    x: 1618349486000,\n    y: 1272.27,\n  },\n  {\n    x: 1618349521000,\n    y: 1272.28,\n  },\n  {\n    x: 1618349541000,\n    y: 1272.29,\n  },\n  {\n    x: 1618349561000,\n    y: 1272.3,\n  },\n  {\n    x: 1618349571000,\n    y: 1272.31,\n  },\n  {\n    x: 1618349576000,\n    y: 1272.32,\n  },\n  {\n    x: 1618349596000,\n    y: 1272.33,\n  },\n  {\n    x: 1618349626000,\n    y: 1272.34,\n  },\n  {\n    x: 1618349641000,\n    y: 1272.35,\n  },\n  {\n    x: 1618349656000,\n    y: 1272.36,\n  },\n  {\n    x: 1618349671000,\n    y: 1272.37,\n  },\n  {\n    x: 1618349691000,\n    y: 1272.38,\n  },\n  {\n    x: 1618349711000,\n    y: 1272.39,\n  },\n  {\n    x: 1618349716000,\n    y: 1272.4,\n  },\n  {\n    x: 1618349751000,\n    y: 1272.41,\n  },\n  {\n    x: 1618349766000,\n    y: 1272.42,\n  },\n  {\n    x: 1618349776000,\n    y: 1272.43,\n  },\n  {\n    x: 1618349791000,\n    y: 1272.44,\n  },\n  {\n    x: 1618349796000,\n    y: 1272.45,\n  },\n  {\n    x: 1618349811000,\n    y: 1272.46,\n  },\n  {\n    x: 1618349831000,\n    y: 1272.47,\n  },\n  {\n    x: 1618349846000,\n    y: 1272.48,\n  },\n  {\n    x: 1618349866000,\n    y: 1272.49,\n  },\n  {\n    x: 1618349881000,\n    y: 1272.5,\n  },\n  {\n    x: 1618349891000,\n    y: 1272.51,\n  },\n  {\n    x: 1618349921000,\n    y: 1272.52,\n  },\n  {\n    x: 1618349936000,\n    y: 1272.53,\n  },\n  {\n    x: 1618349941000,\n    y: 1272.54,\n  },\n  {\n    x: 1618349956000,\n    y: 1272.55,\n  },\n  {\n    x: 1618349981000,\n    y: 1272.56,\n  },\n  {\n    x: 1618350001000,\n    y: 1272.57,\n  },\n  {\n    x: 1618350006000,\n    y: 1272.58,\n  },\n  {\n    x: 1618350021000,\n    y: 1272.59,\n  },\n  {\n    x: 1618350036000,\n    y: 1272.6,\n  },\n  {\n    x: 1618350056000,\n    y: 1272.61,\n  },\n  {\n    x: 1618350066000,\n    y: 1272.62,\n  },\n  {\n    x: 1618350086000,\n    y: 1272.63,\n  },\n  {\n    x: 1618350101000,\n    y: 1272.64,\n  },\n  {\n    x: 1618350116000,\n    y: 1272.65,\n  },\n  {\n    x: 1618350126000,\n    y: 1272.66,\n  },\n  {\n    x: 1618350141000,\n    y: 1272.67,\n  },\n  {\n    x: 1618350161000,\n    y: 1272.68,\n  },\n  {\n    x: 1618350166000,\n    y: 1272.69,\n  },\n  {\n    x: 1618350186000,\n    y: 1272.7,\n  },\n  {\n    x: 1618350196000,\n    y: 1272.71,\n  },\n  {\n    x: 1618350216000,\n    y: 1272.72,\n  },\n  {\n    x: 1618350231000,\n    y: 1272.73,\n  },\n  {\n    x: 1618350246000,\n    y: 1272.74,\n  },\n  {\n    x: 1618350256000,\n    y: 1272.75,\n  },\n  {\n    x: 1618350271000,\n    y: 1272.76,\n  },\n  {\n    x: 1618350286000,\n    y: 1272.77,\n  },\n  {\n    x: 1618350311000,\n    y: 1272.78,\n  },\n  {\n    x: 1618350331000,\n    y: 1272.79,\n  },\n  {\n    x: 1618350341000,\n    y: 1272.8,\n  },\n  {\n    x: 1618350516000,\n    y: 1272.81,\n  },\n  {\n    x: 1618350526000,\n    y: 1272.82,\n  },\n  {\n    x: 1618350541000,\n    y: 1272.83,\n  },\n  {\n    x: 1618350561000,\n    y: 1272.84,\n  },\n  {\n    x: 1618350576000,\n    y: 1272.85,\n  },\n  {\n    x: 1618350586000,\n    y: 1272.86,\n  },\n  {\n    x: 1618350596000,\n    y: 1272.87,\n  },\n  {\n    x: 1618350621000,\n    y: 1272.88,\n  },\n  {\n    x: 1618350631000,\n    y: 1272.89,\n  },\n  {\n    x: 1618350646000,\n    y: 1272.9,\n  },\n  {\n    x: 1618350661000,\n    y: 1272.91,\n  },\n  {\n    x: 1618350676000,\n    y: 1272.92,\n  },\n  {\n    x: 1618350696000,\n    y: 1272.93,\n  },\n  {\n    x: 1618350706000,\n    y: 1272.94,\n  },\n  {\n    x: 1618350731000,\n    y: 1272.95,\n  },\n  {\n    x: 1618350746000,\n    y: 1272.96,\n  },\n  {\n    x: 1618350756000,\n    y: 1272.97,\n  },\n  {\n    x: 1618350766000,\n    y: 1272.98,\n  },\n  {\n    x: 1618350806000,\n    y: 1272.99,\n  },\n  {\n    x: 1618350816000,\n    y: 1273,\n  },\n  {\n    x: 1618350821000,\n    y: 1273.01,\n  },\n  {\n    x: 1618350841000,\n    y: 1273.02,\n  },\n  {\n    x: 1618350846000,\n    y: 1273.03,\n  },\n  {\n    x: 1618350851000,\n    y: 1273.04,\n  },\n  {\n    x: 1618350866000,\n    y: 1273.05,\n  },\n  {\n    x: 1618350876000,\n    y: 1273.06,\n  },\n  {\n    x: 1618350891000,\n    y: 1273.07,\n  },\n  {\n    x: 1618350906000,\n    y: 1273.08,\n  },\n  {\n    x: 1618350916000,\n    y: 1273.09,\n  },\n  {\n    x: 1618350931000,\n    y: 1273.1,\n  },\n  {\n    x: 1618350951000,\n    y: 1273.11,\n  },\n  {\n    x: 1618350966000,\n    y: 1273.12,\n  },\n  {\n    x: 1618350981000,\n    y: 1273.13,\n  },\n  {\n    x: 1618351011000,\n    y: 1273.14,\n  },\n  {\n    x: 1618351026000,\n    y: 1273.15,\n  },\n  {\n    x: 1618351046000,\n    y: 1273.16,\n  },\n  {\n    x: 1618351071000,\n    y: 1273.17,\n  },\n  {\n    x: 1618351091000,\n    y: 1273.18,\n  },\n  {\n    x: 1618351101000,\n    y: 1273.19,\n  },\n  {\n    x: 1618351111000,\n    y: 1273.2,\n  },\n  {\n    x: 1618351126000,\n    y: 1273.21,\n  },\n  {\n    x: 1618351151000,\n    y: 1273.22,\n  },\n  {\n    x: 1618351166000,\n    y: 1273.23,\n  },\n  {\n    x: 1618351181000,\n    y: 1273.24,\n  },\n  {\n    x: 1618351201000,\n    y: 1273.25,\n  },\n  {\n    x: 1618351211000,\n    y: 1273.26,\n  },\n  {\n    x: 1618351231000,\n    y: 1273.27,\n  },\n  {\n    x: 1618351261000,\n    y: 1273.28,\n  },\n  {\n    x: 1618351291000,\n    y: 1273.29,\n  },\n  {\n    x: 1618351306000,\n    y: 1273.3,\n  },\n  {\n    x: 1618351316000,\n    y: 1273.31,\n  },\n  {\n    x: 1618351326000,\n    y: 1273.32,\n  },\n  {\n    x: 1618351341000,\n    y: 1273.33,\n  },\n  {\n    x: 1618351361000,\n    y: 1273.34,\n  },\n  {\n    x: 1618351381000,\n    y: 1273.35,\n  },\n  {\n    x: 1618351396000,\n    y: 1273.36,\n  },\n  {\n    x: 1618351411000,\n    y: 1273.37,\n  },\n  {\n    x: 1618351426000,\n    y: 1273.38,\n  },\n  {\n    x: 1618351441000,\n    y: 1273.39,\n  },\n  {\n    x: 1618351461000,\n    y: 1273.4,\n  },\n  {\n    x: 1618351476000,\n    y: 1273.41,\n  },\n  {\n    x: 1618351486000,\n    y: 1273.42,\n  },\n  {\n    x: 1618351501000,\n    y: 1273.43,\n  },\n  {\n    x: 1618351511000,\n    y: 1273.44,\n  },\n  {\n    x: 1618351536000,\n    y: 1273.45,\n  },\n  {\n    x: 1618351566000,\n    y: 1273.46,\n  },\n  {\n    x: 1618351581000,\n    y: 1273.47,\n  },\n  {\n    x: 1618351596000,\n    y: 1273.48,\n  },\n  {\n    x: 1618351616000,\n    y: 1273.49,\n  },\n  {\n    x: 1618351636000,\n    y: 1273.5,\n  },\n  {\n    x: 1618351646000,\n    y: 1273.51,\n  },\n  {\n    x: 1618351656000,\n    y: 1273.52,\n  },\n  {\n    x: 1618351666000,\n    y: 1273.53,\n  },\n  {\n    x: 1618351681000,\n    y: 1273.54,\n  },\n  {\n    x: 1618351691000,\n    y: 1273.55,\n  },\n  {\n    x: 1618351701000,\n    y: 1273.56,\n  },\n  {\n    x: 1618351716000,\n    y: 1273.57,\n  },\n  {\n    x: 1618351726000,\n    y: 1273.58,\n  },\n  {\n    x: 1618351736000,\n    y: 1273.59,\n  },\n  {\n    x: 1618351751000,\n    y: 1273.6,\n  },\n  {\n    x: 1618351766000,\n    y: 1273.61,\n  },\n  {\n    x: 1618351786000,\n    y: 1273.62,\n  },\n  {\n    x: 1618351796000,\n    y: 1273.63,\n  },\n  {\n    x: 1618351806000,\n    y: 1273.64,\n  },\n  {\n    x: 1618351816000,\n    y: 1273.65,\n  },\n  {\n    x: 1618351836000,\n    y: 1273.66,\n  },\n  {\n    x: 1618351856000,\n    y: 1273.67,\n  },\n  {\n    x: 1618351866000,\n    y: 1273.68,\n  },\n  {\n    x: 1618351881000,\n    y: 1273.69,\n  },\n  {\n    x: 1618351891000,\n    y: 1273.7,\n  },\n  {\n    x: 1618351906000,\n    y: 1273.71,\n  },\n  {\n    x: 1618351916000,\n    y: 1273.72,\n  },\n  {\n    x: 1618351931000,\n    y: 1273.73,\n  },\n  {\n    x: 1618351951000,\n    y: 1273.74,\n  },\n  {\n    x: 1618351966000,\n    y: 1273.75,\n  },\n  {\n    x: 1618351981000,\n    y: 1273.76,\n  },\n  {\n    x: 1618351996000,\n    y: 1273.77,\n  },\n  {\n    x: 1618352016000,\n    y: 1273.78,\n  },\n  {\n    x: 1618352021000,\n    y: 1273.79,\n  },\n  {\n    x: 1618352036000,\n    y: 1273.8,\n  },\n  {\n    x: 1618352051000,\n    y: 1273.81,\n  },\n  {\n    x: 1618352061000,\n    y: 1273.82,\n  },\n  {\n    x: 1618352076000,\n    y: 1273.83,\n  },\n  {\n    x: 1618352091000,\n    y: 1273.84,\n  },\n  {\n    x: 1618352101000,\n    y: 1273.85,\n  },\n  {\n    x: 1618352111000,\n    y: 1273.86,\n  },\n  {\n    x: 1618352121000,\n    y: 1273.87,\n  },\n  {\n    x: 1618352136000,\n    y: 1273.88,\n  },\n  {\n    x: 1618352156000,\n    y: 1273.89,\n  },\n  {\n    x: 1618352171000,\n    y: 1273.9,\n  },\n  {\n    x: 1618352186000,\n    y: 1273.91,\n  },\n  {\n    x: 1618352201000,\n    y: 1273.92,\n  },\n  {\n    x: 1618352216000,\n    y: 1273.93,\n  },\n  {\n    x: 1618352231000,\n    y: 1273.94,\n  },\n  {\n    x: 1618352246000,\n    y: 1273.95,\n  },\n  {\n    x: 1618352256000,\n    y: 1273.96,\n  },\n  {\n    x: 1618352266000,\n    y: 1273.97,\n  },\n  {\n    x: 1618352276000,\n    y: 1273.98,\n  },\n  {\n    x: 1618352291000,\n    y: 1273.99,\n  },\n  {\n    x: 1618352306000,\n    y: 1274,\n  },\n  {\n    x: 1618352871000,\n    y: 1274.01,\n  },\n  {\n    x: 1618352876000,\n    y: 1274.02,\n  },\n  {\n    x: 1618352891000,\n    y: 1274.04,\n  },\n  {\n    x: 1618352896000,\n    y: 1274.06,\n  },\n  {\n    x: 1618352906000,\n    y: 1274.08,\n  },\n  {\n    x: 1618352926000,\n    y: 1274.09,\n  },\n  {\n    x: 1618352936000,\n    y: 1274.1,\n  },\n  {\n    x: 1618352941000,\n    y: 1274.11,\n  },\n  {\n    x: 1618352946000,\n    y: 1274.12,\n  },\n  {\n    x: 1618352966000,\n    y: 1274.13,\n  },\n  {\n    x: 1618352971000,\n    y: 1274.14,\n  },\n  {\n    x: 1618352976000,\n    y: 1274.15,\n  },\n  {\n    x: 1618352986000,\n    y: 1274.16,\n  },\n  {\n    x: 1618353006000,\n    y: 1274.17,\n  },\n  {\n    x: 1618353016000,\n    y: 1274.19,\n  },\n  {\n    x: 1618353036000,\n    y: 1274.2,\n  },\n  {\n    x: 1618353056000,\n    y: 1274.21,\n  },\n  {\n    x: 1618353061000,\n    y: 1274.22,\n  },\n  {\n    x: 1618353066000,\n    y: 1274.23,\n  },\n  {\n    x: 1618353091000,\n    y: 1274.24,\n  },\n  {\n    x: 1618353096000,\n    y: 1274.25,\n  },\n  {\n    x: 1618353111000,\n    y: 1274.26,\n  },\n  {\n    x: 1618353126000,\n    y: 1274.27,\n  },\n  {\n    x: 1618353131000,\n    y: 1274.28,\n  },\n  {\n    x: 1618353146000,\n    y: 1274.29,\n  },\n  {\n    x: 1618353156000,\n    y: 1274.3,\n  },\n  {\n    x: 1618353171000,\n    y: 1274.31,\n  },\n  {\n    x: 1618353186000,\n    y: 1274.32,\n  },\n  {\n    x: 1618353196000,\n    y: 1274.33,\n  },\n  {\n    x: 1618353211000,\n    y: 1274.34,\n  },\n  {\n    x: 1618353226000,\n    y: 1274.35,\n  },\n  {\n    x: 1618353241000,\n    y: 1274.36,\n  },\n  {\n    x: 1618353266000,\n    y: 1274.37,\n  },\n  {\n    x: 1618353276000,\n    y: 1274.38,\n  },\n  {\n    x: 1618353291000,\n    y: 1274.39,\n  },\n  {\n    x: 1618353301000,\n    y: 1274.4,\n  },\n  {\n    x: 1618353311000,\n    y: 1274.41,\n  },\n  {\n    x: 1618353326000,\n    y: 1274.42,\n  },\n  {\n    x: 1618353336000,\n    y: 1274.43,\n  },\n  {\n    x: 1618353346000,\n    y: 1274.44,\n  },\n  {\n    x: 1618353361000,\n    y: 1274.45,\n  },\n  {\n    x: 1618353376000,\n    y: 1274.46,\n  },\n  {\n    x: 1618353391000,\n    y: 1274.47,\n  },\n  {\n    x: 1618353401000,\n    y: 1274.48,\n  },\n  {\n    x: 1618353416000,\n    y: 1274.49,\n  },\n  {\n    x: 1618353436000,\n    y: 1274.5,\n  },\n  {\n    x: 1618353451000,\n    y: 1274.51,\n  },\n  {\n    x: 1618353466000,\n    y: 1274.52,\n  },\n  {\n    x: 1618353481000,\n    y: 1274.53,\n  },\n  {\n    x: 1618353491000,\n    y: 1274.54,\n  },\n  {\n    x: 1618353511000,\n    y: 1274.55,\n  },\n  {\n    x: 1618353521000,\n    y: 1274.56,\n  },\n  {\n    x: 1618353541000,\n    y: 1274.57,\n  },\n  {\n    x: 1618353561000,\n    y: 1274.58,\n  },\n  {\n    x: 1618353571000,\n    y: 1274.59,\n  },\n  {\n    x: 1618353581000,\n    y: 1274.6,\n  },\n  {\n    x: 1618353606000,\n    y: 1274.61,\n  },\n  {\n    x: 1618353616000,\n    y: 1274.62,\n  },\n  {\n    x: 1618353626000,\n    y: 1274.63,\n  },\n  {\n    x: 1618353641000,\n    y: 1274.64,\n  },\n  {\n    x: 1618353651000,\n    y: 1274.65,\n  },\n  {\n    x: 1618353666000,\n    y: 1274.66,\n  },\n  {\n    x: 1618353676000,\n    y: 1274.67,\n  },\n  {\n    x: 1618353696000,\n    y: 1274.68,\n  },\n  {\n    x: 1618353716000,\n    y: 1274.69,\n  },\n  {\n    x: 1618353721000,\n    y: 1274.7,\n  },\n  {\n    x: 1618353731000,\n    y: 1274.71,\n  },\n  {\n    x: 1618353741000,\n    y: 1274.72,\n  },\n  {\n    x: 1618353756000,\n    y: 1274.73,\n  },\n  {\n    x: 1618353771000,\n    y: 1274.74,\n  },\n  {\n    x: 1618353786000,\n    y: 1274.75,\n  },\n  {\n    x: 1618353796000,\n    y: 1274.76,\n  },\n  {\n    x: 1618353816000,\n    y: 1274.77,\n  },\n  {\n    x: 1618353836000,\n    y: 1274.78,\n  },\n  {\n    x: 1618353846000,\n    y: 1274.79,\n  },\n  {\n    x: 1618353856000,\n    y: 1274.95,\n  },\n  {\n    x: 1618354076000,\n    y: 1274.96,\n  },\n  {\n    x: 1618354091000,\n    y: 1274.97,\n  },\n  {\n    x: 1618354096000,\n    y: 1274.98,\n  },\n  {\n    x: 1618354106000,\n    y: 1274.99,\n  },\n  {\n    x: 1618354136000,\n    y: 1275,\n  },\n  {\n    x: 1618354141000,\n    y: 1275.01,\n  },\n  {\n    x: 1618354156000,\n    y: 1275.02,\n  },\n  {\n    x: 1618354166000,\n    y: 1275.03,\n  },\n  {\n    x: 1618354181000,\n    y: 1275.04,\n  },\n  {\n    x: 1618354191000,\n    y: 1275.05,\n  },\n  {\n    x: 1618354201000,\n    y: 1275.06,\n  },\n  {\n    x: 1618354216000,\n    y: 1275.07,\n  },\n  {\n    x: 1618354236000,\n    y: 1275.08,\n  },\n  {\n    x: 1618354251000,\n    y: 1275.09,\n  },\n  {\n    x: 1618354266000,\n    y: 1275.1,\n  },\n  {\n    x: 1618354281000,\n    y: 1275.11,\n  },\n  {\n    x: 1618354296000,\n    y: 1275.12,\n  },\n  {\n    x: 1618354311000,\n    y: 1275.13,\n  },\n  {\n    x: 1618354321000,\n    y: 1275.14,\n  },\n  {\n    x: 1618354341000,\n    y: 1275.15,\n  },\n  {\n    x: 1618354346000,\n    y: 1275.16,\n  },\n  {\n    x: 1618354356000,\n    y: 1275.17,\n  },\n  {\n    x: 1618354376000,\n    y: 1275.18,\n  },\n  {\n    x: 1618354396000,\n    y: 1275.19,\n  },\n  {\n    x: 1618354406000,\n    y: 1275.2,\n  },\n  {\n    x: 1618354411000,\n    y: 1275.21,\n  },\n  {\n    x: 1618354426000,\n    y: 1275.22,\n  },\n  {\n    x: 1618354446000,\n    y: 1275.23,\n  },\n  {\n    x: 1618354456000,\n    y: 1275.24,\n  },\n  {\n    x: 1618354471000,\n    y: 1275.25,\n  },\n  {\n    x: 1618354481000,\n    y: 1275.26,\n  },\n  {\n    x: 1618354486000,\n    y: 1275.27,\n  },\n  {\n    x: 1618354496000,\n    y: 1275.28,\n  },\n  {\n    x: 1618354511000,\n    y: 1275.29,\n  },\n  {\n    x: 1618354521000,\n    y: 1275.3,\n  },\n  {\n    x: 1618354541000,\n    y: 1275.31,\n  },\n  {\n    x: 1618354546000,\n    y: 1275.32,\n  },\n  {\n    x: 1618354561000,\n    y: 1275.33,\n  },\n  {\n    x: 1618354586000,\n    y: 1275.34,\n  },\n  {\n    x: 1618354596000,\n    y: 1275.35,\n  },\n  {\n    x: 1618354611000,\n    y: 1275.36,\n  },\n  {\n    x: 1618354621000,\n    y: 1275.37,\n  },\n  {\n    x: 1618354631000,\n    y: 1275.38,\n  },\n  {\n    x: 1618354641000,\n    y: 1275.39,\n  },\n  {\n    x: 1618354656000,\n    y: 1275.4,\n  },\n  {\n    x: 1618354661000,\n    y: 1275.41,\n  },\n  {\n    x: 1618354686000,\n    y: 1275.42,\n  },\n  {\n    x: 1618354706000,\n    y: 1275.43,\n  },\n  {\n    x: 1618354726000,\n    y: 1275.44,\n  },\n  {\n    x: 1618354746000,\n    y: 1275.45,\n  },\n  {\n    x: 1618354766000,\n    y: 1275.46,\n  },\n  {\n    x: 1618354776000,\n    y: 1275.47,\n  },\n  {\n    x: 1618354786000,\n    y: 1275.48,\n  },\n  {\n    x: 1618354801000,\n    y: 1275.49,\n  },\n  {\n    x: 1618354811000,\n    y: 1275.5,\n  },\n  {\n    x: 1618354816000,\n    y: 1275.51,\n  },\n  {\n    x: 1618354831000,\n    y: 1275.52,\n  },\n  {\n    x: 1618354836000,\n    y: 1275.53,\n  },\n  {\n    x: 1618354856000,\n    y: 1275.54,\n  },\n  {\n    x: 1618354871000,\n    y: 1275.55,\n  },\n  {\n    x: 1618354881000,\n    y: 1275.56,\n  },\n  {\n    x: 1618354896000,\n    y: 1275.57,\n  },\n  {\n    x: 1618354911000,\n    y: 1275.58,\n  },\n  {\n    x: 1618354916000,\n    y: 1275.59,\n  },\n  {\n    x: 1618354921000,\n    y: 1275.6,\n  },\n  {\n    x: 1618354931000,\n    y: 1275.61,\n  },\n  {\n    x: 1618354941000,\n    y: 1275.62,\n  },\n  {\n    x: 1618354956000,\n    y: 1275.63,\n  },\n  {\n    x: 1618354971000,\n    y: 1275.64,\n  },\n  {\n    x: 1618354986000,\n    y: 1275.65,\n  },\n  {\n    x: 1618354996000,\n    y: 1275.66,\n  },\n  {\n    x: 1618355006000,\n    y: 1275.67,\n  },\n  {\n    x: 1618355021000,\n    y: 1275.68,\n  },\n  {\n    x: 1618355031000,\n    y: 1275.69,\n  },\n  {\n    x: 1618355041000,\n    y: 1275.7,\n  },\n  {\n    x: 1618355051000,\n    y: 1275.71,\n  },\n  {\n    x: 1618355071000,\n    y: 1275.72,\n  },\n  {\n    x: 1618355086000,\n    y: 1275.73,\n  },\n  {\n    x: 1618355106000,\n    y: 1275.74,\n  },\n  {\n    x: 1618355116000,\n    y: 1275.75,\n  },\n  {\n    x: 1618355136000,\n    y: 1275.76,\n  },\n  {\n    x: 1618355141000,\n    y: 1275.77,\n  },\n  {\n    x: 1618355156000,\n    y: 1275.78,\n  },\n  {\n    x: 1618355166000,\n    y: 1275.79,\n  },\n  {\n    x: 1618355181000,\n    y: 1275.8,\n  },\n  {\n    x: 1618355186000,\n    y: 1275.81,\n  },\n  {\n    x: 1618355191000,\n    y: 1275.82,\n  },\n  {\n    x: 1618355206000,\n    y: 1275.83,\n  },\n  {\n    x: 1618355246000,\n    y: 1275.84,\n  },\n  {\n    x: 1618355261000,\n    y: 1275.85,\n  },\n  {\n    x: 1618355276000,\n    y: 1275.86,\n  },\n  {\n    x: 1618355281000,\n    y: 1275.87,\n  },\n  {\n    x: 1618355306000,\n    y: 1275.88,\n  },\n  {\n    x: 1618355336000,\n    y: 1275.89,\n  },\n  {\n    x: 1618355366000,\n    y: 1275.9,\n  },\n  {\n    x: 1618355386000,\n    y: 1275.91,\n  },\n  {\n    x: 1618355401000,\n    y: 1275.92,\n  },\n  {\n    x: 1618355426000,\n    y: 1275.93,\n  },\n  {\n    x: 1618355431000,\n    y: 1275.94,\n  },\n  {\n    x: 1618355446000,\n    y: 1275.95,\n  },\n  {\n    x: 1618355471000,\n    y: 1275.96,\n  },\n  {\n    x: 1618355491000,\n    y: 1275.97,\n  },\n  {\n    x: 1618355511000,\n    y: 1275.98,\n  },\n  {\n    x: 1618355541000,\n    y: 1275.99,\n  },\n  {\n    x: 1618355556000,\n    y: 1276,\n  },\n  {\n    x: 1618382941000,\n    y: 1276.13,\n  },\n  {\n    x: 1618382946000,\n    y: 1276.33,\n  },\n  {\n    x: 1618382951000,\n    y: 1276.39,\n  },\n  {\n    x: 1618382956000,\n    y: 1276.48,\n  },\n  {\n    x: 1618382961000,\n    y: 1276.59,\n  },\n  {\n    x: 1618382966000,\n    y: 1276.62,\n  },\n  {\n    x: 1618382971000,\n    y: 1276.73,\n  },\n  {\n    x: 1618382976000,\n    y: 1276.95,\n  },\n  {\n    x: 1618382981000,\n    y: 1277.08,\n  },\n  {\n    x: 1618382986000,\n    y: 1277.16,\n  },\n  {\n    x: 1618448871000,\n    y: 1278.42,\n  },\n  {\n    x: 1618448876000,\n    y: 1280.19,\n  },\n  {\n    x: 1618448881000,\n    y: 1280.42,\n  },\n  {\n    x: 1618449101000,\n    y: 1281.88,\n  },\n  {\n    x: 1618449106000,\n    y: 1283.29,\n  },\n  {\n    x: 1618449111000,\n    y: 1285.17,\n  },\n  {\n    x: 1618449116000,\n    y: 1286.35,\n  },\n  {\n    x: 1618449121000,\n    y: 1288.77,\n  },\n  {\n    x: 1618449126000,\n    y: 1289.87,\n  },\n  {\n    x: 1618449131000,\n    y: 1289.98,\n  },\n  {\n    x: 1618449136000,\n    y: 1290.08,\n  },\n  {\n    x: 1618449376000,\n    y: 1290.31,\n  },\n  {\n    x: 1618449381000,\n    y: 1290.68,\n  },\n  {\n    x: 1618449386000,\n    y: 1291.09,\n  },\n  {\n    x: 1618449391000,\n    y: 1291.47,\n  },\n  {\n    x: 1618449396000,\n    y: 1291.86,\n  },\n  {\n    x: 1618449401000,\n    y: 1291.94,\n  },\n  {\n    x: 1618449406000,\n    y: 1292.03,\n  },\n  {\n    x: 1618449416000,\n    y: 1292.13,\n  },\n  {\n    x: 1618449421000,\n    y: 1292.5,\n  },\n  {\n    x: 1618449426000,\n    y: 1292.8,\n  },\n  {\n    x: 1618449431000,\n    y: 1293.11,\n  },\n  {\n    x: 1618449436000,\n    y: 1293.26,\n  },\n  {\n    x: 1618449441000,\n    y: 1293.49,\n  },\n  {\n    x: 1618449446000,\n    y: 1293.75,\n  },\n  {\n    x: 1618449451000,\n    y: 1293.94,\n  },\n  {\n    x: 1618449456000,\n    y: 1294.14,\n  },\n  {\n    x: 1618449461000,\n    y: 1294.36,\n  },\n  {\n    x: 1618449466000,\n    y: 1294.59,\n  },\n  {\n    x: 1618449471000,\n    y: 1294.77,\n  },\n  {\n    x: 1618449476000,\n    y: 1295.02,\n  },\n  {\n    x: 1618449481000,\n    y: 1295.16,\n  },\n  {\n    x: 1618449486000,\n    y: 1295.35,\n  },\n  {\n    x: 1618449491000,\n    y: 1295.46,\n  },\n  {\n    x: 1618449496000,\n    y: 1295.49,\n  },\n  {\n    x: 1618449501000,\n    y: 1295.65,\n  },\n  {\n    x: 1618449506000,\n    y: 1295.82,\n  },\n  {\n    x: 1618449511000,\n    y: 1295.96,\n  },\n  {\n    x: 1618449516000,\n    y: 1296.22,\n  },\n  {\n    x: 1618449521000,\n    y: 1296.23,\n  },\n  {\n    x: 1618449531000,\n    y: 1296.27,\n  },\n  {\n    x: 1618449536000,\n    y: 1296.33,\n  },\n  {\n    x: 1618449541000,\n    y: 1296.55,\n  },\n  {\n    x: 1618449546000,\n    y: 1296.75,\n  },\n  {\n    x: 1618449551000,\n    y: 1296.87,\n  },\n  {\n    x: 1618449556000,\n    y: 1297.11,\n  },\n  {\n    x: 1618449561000,\n    y: 1297.29,\n  },\n  {\n    x: 1618449566000,\n    y: 1297.53,\n  },\n  {\n    x: 1618449571000,\n    y: 1297.65,\n  },\n  {\n    x: 1618449576000,\n    y: 1297.79,\n  },\n  {\n    x: 1618449581000,\n    y: 1297.92,\n  },\n  {\n    x: 1618449586000,\n    y: 1298.11,\n  },\n  {\n    x: 1618449591000,\n    y: 1298.38,\n  },\n  {\n    x: 1618449596000,\n    y: 1298.54,\n  },\n  {\n    x: 1618449601000,\n    y: 1298.83,\n  },\n  {\n    x: 1618449606000,\n    y: 1299.05,\n  },\n  {\n    x: 1618449611000,\n    y: 1299.34,\n  },\n  {\n    x: 1618449616000,\n    y: 1299.54,\n  },\n  {\n    x: 1618449621000,\n    y: 1299.76,\n  },\n  {\n    x: 1618449626000,\n    y: 1299.97,\n  },\n  {\n    x: 1618449631000,\n    y: 1300.2,\n  },\n  {\n    x: 1618449636000,\n    y: 1300.23,\n  },\n  {\n    x: 1618449641000,\n    y: 1300.46,\n  },\n  {\n    x: 1618449646000,\n    y: 1300.6,\n  },\n  {\n    x: 1618449651000,\n    y: 1300.68,\n  },\n  {\n    x: 1618449656000,\n    y: 1300.7,\n  },\n  {\n    x: 1618449661000,\n    y: 1300.9,\n  },\n  {\n    x: 1618449666000,\n    y: 1301,\n  },\n  {\n    x: 1618449671000,\n    y: 1301.12,\n  },\n  {\n    x: 1618449676000,\n    y: 1301.23,\n  },\n  {\n    x: 1618449681000,\n    y: 1301.36,\n  },\n  {\n    x: 1618449686000,\n    y: 1301.46,\n  },\n  {\n    x: 1618449691000,\n    y: 1301.58,\n  },\n  {\n    x: 1618449696000,\n    y: 1301.7,\n  },\n  {\n    x: 1618449701000,\n    y: 1301.79,\n  },\n  {\n    x: 1618449706000,\n    y: 1301.87,\n  },\n  {\n    x: 1618449731000,\n    y: 1301.9,\n  },\n  {\n    x: 1618449761000,\n    y: 1301.96,\n  },\n  {\n    x: 1618560496000,\n    y: 1303.31,\n  },\n  {\n    x: 1618802366000,\n    y: 1304.9,\n  },\n  {\n    x: 1618802371000,\n    y: 1306.95,\n  },\n  {\n    x: 1618802376000,\n    y: 1309.52,\n  },\n  {\n    x: 1618802381000,\n    y: 1310.17,\n  },\n  {\n    x: 1618802491000,\n    y: 1311.35,\n  },\n  {\n    x: 1618802496000,\n    y: 1314.55,\n  },\n  {\n    x: 1618802501000,\n    y: 1316.6,\n  },\n  {\n    x: 1618802506000,\n    y: 1319.03,\n  },\n  {\n    x: 1618802511000,\n    y: 1321.19,\n  },\n  {\n    x: 1618802516000,\n    y: 1323.27,\n  },\n  {\n    x: 1618802521000,\n    y: 1325.33,\n  },\n  {\n    x: 1618802526000,\n    y: 1327.18,\n  },\n  {\n    x: 1618802531000,\n    y: 1328.55,\n  },\n  {\n    x: 1618802536000,\n    y: 1328.6,\n  },\n  {\n    x: 1618802866000,\n    y: 1329.5,\n  },\n  {\n    x: 1618802991000,\n    y: 1339,\n  },\n  {\n    x: 1618803826000,\n    y: 1339.2,\n  },\n  {\n    x: 1618803831000,\n    y: 1339.55,\n  },\n  {\n    x: 1618803836000,\n    y: 1339.85,\n  },\n  {\n    x: 1618803841000,\n    y: 1340.16,\n  },\n  {\n    x: 1618803846000,\n    y: 1340.43,\n  },\n  {\n    x: 1618803851000,\n    y: 1340.64,\n  },\n  {\n    x: 1618803856000,\n    y: 1340.87,\n  },\n  {\n    x: 1618803861000,\n    y: 1341.17,\n  },\n  {\n    x: 1618803866000,\n    y: 1341.43,\n  },\n  {\n    x: 1618803871000,\n    y: 1341.59,\n  },\n  {\n    x: 1618803876000,\n    y: 1341.98,\n  },\n  {\n    x: 1618803881000,\n    y: 1342.41,\n  },\n  {\n    x: 1618803886000,\n    y: 1342.67,\n  },\n  {\n    x: 1618803891000,\n    y: 1342.81,\n  },\n  {\n    x: 1618803896000,\n    y: 1342.92,\n  },\n  {\n    x: 1618803901000,\n    y: 1343.01,\n  },\n  {\n    x: 1618803906000,\n    y: 1343.05,\n  },\n  {\n    x: 1618805446000,\n    y: 1343.08,\n  },\n  {\n    x: 1618806236000,\n    y: 1351.4,\n  },\n  {\n    x: 1618831221000,\n    y: 1351.41,\n  },\n  {\n    x: 1618894766000,\n    y: 1351.53,\n  },\n  {\n    x: 1618894801000,\n    y: 1351.55,\n  },\n  {\n    x: 1618902456000,\n    y: 1351.57,\n  },\n  {\n    x: 1618905686000,\n    y: 1351.6,\n  },\n  {\n    x: 1618905691000,\n    y: 1351.61,\n  },\n  {\n    x: 1618905706000,\n    y: 1351.62,\n  },\n  {\n    x: 1618905756000,\n    y: 1351.63,\n  },\n  {\n    x: 1618905811000,\n    y: 1351.64,\n  },\n  {\n    x: 1618906001000,\n    y: 1351.65,\n  },\n  {\n    x: 1618906096000,\n    y: 1351.66,\n  },\n  {\n    x: 1618906206000,\n    y: 1351.67,\n  },\n  {\n    x: 1618906316000,\n    y: 1351.68,\n  },\n  {\n    x: 1618906371000,\n    y: 1351.69,\n  },\n  {\n    x: 1618906441000,\n    y: 1351.7,\n  },\n  {\n    x: 1618906501000,\n    y: 1351.71,\n  },\n  {\n    x: 1618906511000,\n    y: 1351.72,\n  },\n  {\n    x: 1618906621000,\n    y: 1351.73,\n  },\n  {\n    x: 1618906656000,\n    y: 1351.74,\n  },\n  {\n    x: 1618906691000,\n    y: 1351.75,\n  },\n  {\n    x: 1618906741000,\n    y: 1351.76,\n  },\n  {\n    x: 1618906801000,\n    y: 1351.77,\n  },\n  {\n    x: 1618906826000,\n    y: 1351.78,\n  },\n  {\n    x: 1618906831000,\n    y: 1351.79,\n  },\n  {\n    x: 1618906851000,\n    y: 1351.8,\n  },\n  {\n    x: 1618906906000,\n    y: 1351.81,\n  },\n  {\n    x: 1618906951000,\n    y: 1351.82,\n  },\n  {\n    x: 1618906996000,\n    y: 1351.83,\n  },\n  {\n    x: 1618907046000,\n    y: 1351.84,\n  },\n  {\n    x: 1618907071000,\n    y: 1351.85,\n  },\n  {\n    x: 1618907116000,\n    y: 1351.86,\n  },\n  {\n    x: 1618907136000,\n    y: 1351.87,\n  },\n  {\n    x: 1618907146000,\n    y: 1351.88,\n  },\n  {\n    x: 1618907166000,\n    y: 1351.89,\n  },\n  {\n    x: 1618907191000,\n    y: 1351.9,\n  },\n  {\n    x: 1618907196000,\n    y: 1351.91,\n  },\n  {\n    x: 1618907206000,\n    y: 1351.92,\n  },\n  {\n    x: 1618907221000,\n    y: 1351.93,\n  },\n  {\n    x: 1618907236000,\n    y: 1351.94,\n  },\n  {\n    x: 1618907241000,\n    y: 1351.96,\n  },\n  {\n    x: 1618907251000,\n    y: 1351.97,\n  },\n  {\n    x: 1618907271000,\n    y: 1351.98,\n  },\n  {\n    x: 1618907276000,\n    y: 1351.99,\n  },\n  {\n    x: 1618907291000,\n    y: 1352,\n  },\n  {\n    x: 1618907306000,\n    y: 1352.01,\n  },\n  {\n    x: 1618907316000,\n    y: 1352.02,\n  },\n  {\n    x: 1618907321000,\n    y: 1352.03,\n  },\n  {\n    x: 1618907331000,\n    y: 1352.04,\n  },\n  {\n    x: 1618907336000,\n    y: 1352.05,\n  },\n  {\n    x: 1618907351000,\n    y: 1352.06,\n  },\n  {\n    x: 1618907366000,\n    y: 1352.07,\n  },\n  {\n    x: 1618907376000,\n    y: 1352.08,\n  },\n  {\n    x: 1618907386000,\n    y: 1352.09,\n  },\n  {\n    x: 1618907396000,\n    y: 1352.1,\n  },\n  {\n    x: 1618907406000,\n    y: 1352.11,\n  },\n  {\n    x: 1618907416000,\n    y: 1352.12,\n  },\n  {\n    x: 1618907431000,\n    y: 1352.13,\n  },\n  {\n    x: 1618907441000,\n    y: 1352.14,\n  },\n  {\n    x: 1618907456000,\n    y: 1352.15,\n  },\n  {\n    x: 1618907466000,\n    y: 1352.16,\n  },\n  {\n    x: 1618907486000,\n    y: 1352.17,\n  },\n  {\n    x: 1618907501000,\n    y: 1352.18,\n  },\n  {\n    x: 1618907511000,\n    y: 1352.19,\n  },\n  {\n    x: 1618907526000,\n    y: 1352.2,\n  },\n  {\n    x: 1618907541000,\n    y: 1352.21,\n  },\n  {\n    x: 1618907551000,\n    y: 1352.22,\n  },\n  {\n    x: 1618907566000,\n    y: 1352.23,\n  },\n  {\n    x: 1618907586000,\n    y: 1352.24,\n  },\n  {\n    x: 1618907591000,\n    y: 1352.25,\n  },\n  {\n    x: 1618907606000,\n    y: 1352.26,\n  },\n  {\n    x: 1618907626000,\n    y: 1352.27,\n  },\n  {\n    x: 1618907641000,\n    y: 1352.28,\n  },\n  {\n    x: 1618907646000,\n    y: 1352.29,\n  },\n  {\n    x: 1618907656000,\n    y: 1352.3,\n  },\n  {\n    x: 1618907666000,\n    y: 1352.31,\n  },\n  {\n    x: 1618907686000,\n    y: 1352.32,\n  },\n  {\n    x: 1618907721000,\n    y: 1352.33,\n  },\n  {\n    x: 1618907731000,\n    y: 1352.34,\n  },\n  {\n    x: 1618907736000,\n    y: 1352.35,\n  },\n  {\n    x: 1618907751000,\n    y: 1352.36,\n  },\n  {\n    x: 1618907776000,\n    y: 1352.37,\n  },\n  {\n    x: 1618907786000,\n    y: 1352.38,\n  },\n  {\n    x: 1618907791000,\n    y: 1352.39,\n  },\n  {\n    x: 1618907796000,\n    y: 1352.4,\n  },\n  {\n    x: 1618907801000,\n    y: 1352.41,\n  },\n  {\n    x: 1618907811000,\n    y: 1352.42,\n  },\n  {\n    x: 1618907826000,\n    y: 1352.43,\n  },\n  {\n    x: 1618907846000,\n    y: 1352.44,\n  },\n  {\n    x: 1618907856000,\n    y: 1352.45,\n  },\n  {\n    x: 1618907881000,\n    y: 1352.46,\n  },\n  {\n    x: 1618907891000,\n    y: 1352.47,\n  },\n  {\n    x: 1618907906000,\n    y: 1352.48,\n  },\n  {\n    x: 1618907921000,\n    y: 1352.49,\n  },\n  {\n    x: 1618907936000,\n    y: 1352.5,\n  },\n  {\n    x: 1618907956000,\n    y: 1352.51,\n  },\n  {\n    x: 1618907961000,\n    y: 1352.53,\n  },\n  {\n    x: 1618907966000,\n    y: 1352.54,\n  },\n  {\n    x: 1618907976000,\n    y: 1352.55,\n  },\n  {\n    x: 1618907986000,\n    y: 1352.56,\n  },\n  {\n    x: 1618908001000,\n    y: 1352.57,\n  },\n  {\n    x: 1618908026000,\n    y: 1352.58,\n  },\n  {\n    x: 1618908031000,\n    y: 1352.59,\n  },\n  {\n    x: 1618908041000,\n    y: 1352.6,\n  },\n  {\n    x: 1618908051000,\n    y: 1352.61,\n  },\n  {\n    x: 1618908061000,\n    y: 1352.62,\n  },\n  {\n    x: 1618908081000,\n    y: 1352.63,\n  },\n  {\n    x: 1618908096000,\n    y: 1352.64,\n  },\n  {\n    x: 1618908111000,\n    y: 1352.65,\n  },\n  {\n    x: 1618908121000,\n    y: 1352.66,\n  },\n  {\n    x: 1618908126000,\n    y: 1352.67,\n  },\n  {\n    x: 1618908136000,\n    y: 1352.68,\n  },\n  {\n    x: 1618908151000,\n    y: 1352.69,\n  },\n  {\n    x: 1618908171000,\n    y: 1352.7,\n  },\n  {\n    x: 1618908176000,\n    y: 1352.71,\n  },\n  {\n    x: 1618908186000,\n    y: 1352.72,\n  },\n  {\n    x: 1618908196000,\n    y: 1352.73,\n  },\n  {\n    x: 1618908206000,\n    y: 1352.74,\n  },\n  {\n    x: 1618908216000,\n    y: 1352.75,\n  },\n  {\n    x: 1618908231000,\n    y: 1352.76,\n  },\n  {\n    x: 1618908241000,\n    y: 1352.77,\n  },\n  {\n    x: 1618908261000,\n    y: 1352.78,\n  },\n  {\n    x: 1618908276000,\n    y: 1352.79,\n  },\n  {\n    x: 1618908281000,\n    y: 1352.8,\n  },\n  {\n    x: 1618908291000,\n    y: 1352.81,\n  },\n  {\n    x: 1618908306000,\n    y: 1352.82,\n  },\n  {\n    x: 1618908326000,\n    y: 1352.83,\n  },\n  {\n    x: 1618908336000,\n    y: 1352.84,\n  },\n  {\n    x: 1618908346000,\n    y: 1352.85,\n  },\n  {\n    x: 1618908366000,\n    y: 1352.87,\n  },\n  {\n    x: 1618908381000,\n    y: 1352.88,\n  },\n  {\n    x: 1618908396000,\n    y: 1352.89,\n  },\n  {\n    x: 1618908406000,\n    y: 1352.9,\n  },\n  {\n    x: 1618908411000,\n    y: 1352.91,\n  },\n  {\n    x: 1618908421000,\n    y: 1352.92,\n  },\n  {\n    x: 1618908441000,\n    y: 1352.93,\n  },\n  {\n    x: 1618908451000,\n    y: 1352.94,\n  },\n  {\n    x: 1618908456000,\n    y: 1352.95,\n  },\n  {\n    x: 1618908476000,\n    y: 1352.96,\n  },\n  {\n    x: 1618908491000,\n    y: 1352.97,\n  },\n  {\n    x: 1618908496000,\n    y: 1352.98,\n  },\n  {\n    x: 1618908506000,\n    y: 1352.99,\n  },\n  {\n    x: 1618908516000,\n    y: 1353,\n  },\n  {\n    x: 1618908521000,\n    y: 1353.01,\n  },\n  {\n    x: 1618908526000,\n    y: 1353.02,\n  },\n  {\n    x: 1618908541000,\n    y: 1353.03,\n  },\n  {\n    x: 1618908551000,\n    y: 1353.04,\n  },\n  {\n    x: 1618908576000,\n    y: 1353.05,\n  },\n  {\n    x: 1618908581000,\n    y: 1353.06,\n  },\n  {\n    x: 1618908601000,\n    y: 1353.07,\n  },\n  {\n    x: 1618908616000,\n    y: 1353.08,\n  },\n  {\n    x: 1618908626000,\n    y: 1353.09,\n  },\n  {\n    x: 1618908646000,\n    y: 1353.1,\n  },\n  {\n    x: 1618908661000,\n    y: 1353.11,\n  },\n  {\n    x: 1618908671000,\n    y: 1353.12,\n  },\n  {\n    x: 1618908681000,\n    y: 1353.13,\n  },\n  {\n    x: 1618908686000,\n    y: 1353.14,\n  },\n  {\n    x: 1618908696000,\n    y: 1353.15,\n  },\n  {\n    x: 1618908701000,\n    y: 1353.16,\n  },\n  {\n    x: 1618908721000,\n    y: 1353.17,\n  },\n  {\n    x: 1618908736000,\n    y: 1353.18,\n  },\n  {\n    x: 1618908756000,\n    y: 1353.19,\n  },\n  {\n    x: 1618908761000,\n    y: 1353.2,\n  },\n  {\n    x: 1618908766000,\n    y: 1353.21,\n  },\n  {\n    x: 1618908771000,\n    y: 1353.22,\n  },\n  {\n    x: 1618908781000,\n    y: 1353.23,\n  },\n  {\n    x: 1618908791000,\n    y: 1353.24,\n  },\n  {\n    x: 1618908801000,\n    y: 1353.25,\n  },\n  {\n    x: 1618908816000,\n    y: 1353.26,\n  },\n  {\n    x: 1618908826000,\n    y: 1353.27,\n  },\n  {\n    x: 1618908841000,\n    y: 1353.28,\n  },\n  {\n    x: 1618908856000,\n    y: 1353.29,\n  },\n  {\n    x: 1618908871000,\n    y: 1353.3,\n  },\n  {\n    x: 1618908881000,\n    y: 1353.31,\n  },\n  {\n    x: 1618908886000,\n    y: 1353.32,\n  },\n  {\n    x: 1618908896000,\n    y: 1353.33,\n  },\n  {\n    x: 1618908906000,\n    y: 1353.34,\n  },\n  {\n    x: 1618908911000,\n    y: 1353.35,\n  },\n  {\n    x: 1618908926000,\n    y: 1353.36,\n  },\n  {\n    x: 1618908946000,\n    y: 1353.37,\n  },\n  {\n    x: 1618908961000,\n    y: 1353.38,\n  },\n  {\n    x: 1618908976000,\n    y: 1353.39,\n  },\n  {\n    x: 1618908991000,\n    y: 1353.4,\n  },\n  {\n    x: 1618909001000,\n    y: 1353.41,\n  },\n  {\n    x: 1618909021000,\n    y: 1353.42,\n  },\n  {\n    x: 1618909031000,\n    y: 1353.43,\n  },\n  {\n    x: 1618909046000,\n    y: 1353.44,\n  },\n  {\n    x: 1618909061000,\n    y: 1353.45,\n  },\n  {\n    x: 1618909071000,\n    y: 1353.46,\n  },\n  {\n    x: 1618909081000,\n    y: 1353.47,\n  },\n  {\n    x: 1618909086000,\n    y: 1353.48,\n  },\n  {\n    x: 1618909096000,\n    y: 1353.49,\n  },\n  {\n    x: 1618909106000,\n    y: 1353.5,\n  },\n  {\n    x: 1618909116000,\n    y: 1353.51,\n  },\n  {\n    x: 1618909131000,\n    y: 1353.52,\n  },\n  {\n    x: 1618909141000,\n    y: 1353.53,\n  },\n  {\n    x: 1618909151000,\n    y: 1353.54,\n  },\n  {\n    x: 1618909156000,\n    y: 1353.55,\n  },\n  {\n    x: 1618909161000,\n    y: 1353.56,\n  },\n  {\n    x: 1618909181000,\n    y: 1353.57,\n  },\n  {\n    x: 1618909196000,\n    y: 1353.58,\n  },\n  {\n    x: 1618909206000,\n    y: 1353.59,\n  },\n  {\n    x: 1618909211000,\n    y: 1353.6,\n  },\n  {\n    x: 1618909221000,\n    y: 1353.61,\n  },\n  {\n    x: 1618909226000,\n    y: 1353.62,\n  },\n  {\n    x: 1618909236000,\n    y: 1353.63,\n  },\n  {\n    x: 1618909246000,\n    y: 1353.64,\n  },\n  {\n    x: 1618909256000,\n    y: 1353.65,\n  },\n  {\n    x: 1618909261000,\n    y: 1353.66,\n  },\n  {\n    x: 1618909271000,\n    y: 1353.67,\n  },\n  {\n    x: 1618909291000,\n    y: 1353.68,\n  },\n  {\n    x: 1618909311000,\n    y: 1353.69,\n  },\n  {\n    x: 1618909321000,\n    y: 1353.71,\n  },\n  {\n    x: 1618909331000,\n    y: 1353.72,\n  },\n  {\n    x: 1618909336000,\n    y: 1353.73,\n  },\n  {\n    x: 1618909341000,\n    y: 1353.74,\n  },\n  {\n    x: 1618909346000,\n    y: 1353.75,\n  },\n  {\n    x: 1618909351000,\n    y: 1353.76,\n  },\n  {\n    x: 1618909356000,\n    y: 1353.77,\n  },\n  {\n    x: 1618909371000,\n    y: 1353.78,\n  },\n  {\n    x: 1618909376000,\n    y: 1353.79,\n  },\n  {\n    x: 1618909381000,\n    y: 1353.8,\n  },\n  {\n    x: 1618909386000,\n    y: 1353.81,\n  },\n  {\n    x: 1618909396000,\n    y: 1353.82,\n  },\n  {\n    x: 1618909401000,\n    y: 1353.83,\n  },\n  {\n    x: 1618909406000,\n    y: 1353.84,\n  },\n  {\n    x: 1618909416000,\n    y: 1353.85,\n  },\n  {\n    x: 1618909431000,\n    y: 1353.86,\n  },\n  {\n    x: 1618909441000,\n    y: 1353.87,\n  },\n  {\n    x: 1618909446000,\n    y: 1353.89,\n  },\n  {\n    x: 1618909451000,\n    y: 1353.9,\n  },\n  {\n    x: 1618909461000,\n    y: 1353.91,\n  },\n  {\n    x: 1618909476000,\n    y: 1353.92,\n  },\n  {\n    x: 1618909481000,\n    y: 1353.93,\n  },\n  {\n    x: 1618909486000,\n    y: 1353.94,\n  },\n  {\n    x: 1618909496000,\n    y: 1353.95,\n  },\n  {\n    x: 1618909531000,\n    y: 1353.96,\n  },\n  {\n    x: 1618909536000,\n    y: 1353.97,\n  },\n  {\n    x: 1618909546000,\n    y: 1353.98,\n  },\n  {\n    x: 1618909566000,\n    y: 1354,\n  },\n  {\n    x: 1618909571000,\n    y: 1354.01,\n  },\n  {\n    x: 1618909581000,\n    y: 1354.03,\n  },\n  {\n    x: 1618909586000,\n    y: 1354.04,\n  },\n  {\n    x: 1618909591000,\n    y: 1354.05,\n  },\n  {\n    x: 1618909596000,\n    y: 1354.07,\n  },\n  {\n    x: 1618909611000,\n    y: 1354.08,\n  },\n  {\n    x: 1618909621000,\n    y: 1354.09,\n  },\n  {\n    x: 1618909626000,\n    y: 1354.1,\n  },\n  {\n    x: 1618909641000,\n    y: 1354.11,\n  },\n  {\n    x: 1618909651000,\n    y: 1354.12,\n  },\n  {\n    x: 1618909656000,\n    y: 1354.13,\n  },\n  {\n    x: 1618909661000,\n    y: 1354.14,\n  },\n  {\n    x: 1618909671000,\n    y: 1354.15,\n  },\n  {\n    x: 1618909681000,\n    y: 1354.16,\n  },\n  {\n    x: 1618909691000,\n    y: 1354.17,\n  },\n  {\n    x: 1618909701000,\n    y: 1354.18,\n  },\n  {\n    x: 1618909711000,\n    y: 1354.19,\n  },\n  {\n    x: 1618909726000,\n    y: 1354.2,\n  },\n  {\n    x: 1618909731000,\n    y: 1354.21,\n  },\n  {\n    x: 1618909741000,\n    y: 1354.22,\n  },\n  {\n    x: 1618909756000,\n    y: 1354.23,\n  },\n  {\n    x: 1618909766000,\n    y: 1354.24,\n  },\n  {\n    x: 1618909776000,\n    y: 1354.25,\n  },\n  {\n    x: 1618909786000,\n    y: 1354.26,\n  },\n  {\n    x: 1618909811000,\n    y: 1354.27,\n  },\n  {\n    x: 1618909826000,\n    y: 1354.28,\n  },\n  {\n    x: 1618909841000,\n    y: 1354.29,\n  },\n  {\n    x: 1618909846000,\n    y: 1354.3,\n  },\n  {\n    x: 1618909861000,\n    y: 1354.31,\n  },\n  {\n    x: 1618909866000,\n    y: 1354.32,\n  },\n  {\n    x: 1618909891000,\n    y: 1354.33,\n  },\n  {\n    x: 1618909896000,\n    y: 1354.34,\n  },\n  {\n    x: 1618909906000,\n    y: 1354.35,\n  },\n  {\n    x: 1618909926000,\n    y: 1354.36,\n  },\n  {\n    x: 1618909936000,\n    y: 1354.37,\n  },\n  {\n    x: 1618909951000,\n    y: 1354.38,\n  },\n  {\n    x: 1618909976000,\n    y: 1354.39,\n  },\n  {\n    x: 1618909981000,\n    y: 1354.4,\n  },\n  {\n    x: 1618909986000,\n    y: 1354.41,\n  },\n  {\n    x: 1618910006000,\n    y: 1354.42,\n  },\n  {\n    x: 1618910016000,\n    y: 1354.43,\n  },\n  {\n    x: 1618910021000,\n    y: 1354.44,\n  },\n  {\n    x: 1618910036000,\n    y: 1354.45,\n  },\n  {\n    x: 1618910051000,\n    y: 1354.46,\n  },\n  {\n    x: 1618910056000,\n    y: 1354.47,\n  },\n  {\n    x: 1618910071000,\n    y: 1354.48,\n  },\n  {\n    x: 1618910096000,\n    y: 1354.49,\n  },\n  {\n    x: 1618910111000,\n    y: 1354.5,\n  },\n  {\n    x: 1618910121000,\n    y: 1354.51,\n  },\n  {\n    x: 1618910131000,\n    y: 1354.52,\n  },\n  {\n    x: 1618910141000,\n    y: 1354.53,\n  },\n  {\n    x: 1618910171000,\n    y: 1354.54,\n  },\n  {\n    x: 1618910176000,\n    y: 1354.55,\n  },\n  {\n    x: 1618910191000,\n    y: 1354.56,\n  },\n  {\n    x: 1618910211000,\n    y: 1354.57,\n  },\n  {\n    x: 1618910231000,\n    y: 1354.58,\n  },\n  {\n    x: 1618910241000,\n    y: 1354.59,\n  },\n  {\n    x: 1618910251000,\n    y: 1354.6,\n  },\n  {\n    x: 1618910266000,\n    y: 1354.61,\n  },\n  {\n    x: 1618910276000,\n    y: 1354.62,\n  },\n  {\n    x: 1618910291000,\n    y: 1354.63,\n  },\n  {\n    x: 1618910306000,\n    y: 1354.64,\n  },\n  {\n    x: 1618910316000,\n    y: 1354.65,\n  },\n  {\n    x: 1618910326000,\n    y: 1354.66,\n  },\n  {\n    x: 1618910341000,\n    y: 1354.67,\n  },\n  {\n    x: 1618910351000,\n    y: 1354.68,\n  },\n  {\n    x: 1618910366000,\n    y: 1354.69,\n  },\n  {\n    x: 1618910386000,\n    y: 1354.7,\n  },\n  {\n    x: 1618910401000,\n    y: 1354.71,\n  },\n  {\n    x: 1618910406000,\n    y: 1354.72,\n  },\n  {\n    x: 1618910416000,\n    y: 1354.73,\n  },\n  {\n    x: 1618910446000,\n    y: 1354.74,\n  },\n  {\n    x: 1618910451000,\n    y: 1354.75,\n  },\n  {\n    x: 1618910461000,\n    y: 1354.76,\n  },\n  {\n    x: 1618910471000,\n    y: 1354.77,\n  },\n  {\n    x: 1618910486000,\n    y: 1354.78,\n  },\n  {\n    x: 1618910496000,\n    y: 1354.79,\n  },\n  {\n    x: 1618910536000,\n    y: 1354.8,\n  },\n  {\n    x: 1618910541000,\n    y: 1354.81,\n  },\n  {\n    x: 1618910546000,\n    y: 1354.82,\n  },\n  {\n    x: 1618910561000,\n    y: 1354.83,\n  },\n  {\n    x: 1618910566000,\n    y: 1354.84,\n  },\n  {\n    x: 1618910576000,\n    y: 1354.85,\n  },\n  {\n    x: 1618910581000,\n    y: 1354.86,\n  },\n  {\n    x: 1618910591000,\n    y: 1354.87,\n  },\n  {\n    x: 1618910601000,\n    y: 1354.88,\n  },\n  {\n    x: 1618910616000,\n    y: 1354.89,\n  },\n  {\n    x: 1618910626000,\n    y: 1354.9,\n  },\n  {\n    x: 1618910636000,\n    y: 1354.91,\n  },\n  {\n    x: 1618910646000,\n    y: 1354.92,\n  },\n  {\n    x: 1618910661000,\n    y: 1354.93,\n  },\n  {\n    x: 1618910671000,\n    y: 1354.94,\n  },\n  {\n    x: 1618910681000,\n    y: 1354.95,\n  },\n  {\n    x: 1618910691000,\n    y: 1354.96,\n  },\n  {\n    x: 1618910696000,\n    y: 1354.97,\n  },\n  {\n    x: 1618910711000,\n    y: 1354.98,\n  },\n  {\n    x: 1618910731000,\n    y: 1354.99,\n  },\n  {\n    x: 1618910741000,\n    y: 1355,\n  },\n  {\n    x: 1618910751000,\n    y: 1355.01,\n  },\n  {\n    x: 1618910761000,\n    y: 1355.02,\n  },\n  {\n    x: 1618910766000,\n    y: 1355.03,\n  },\n  {\n    x: 1618910776000,\n    y: 1355.04,\n  },\n  {\n    x: 1618910781000,\n    y: 1355.05,\n  },\n  {\n    x: 1618910791000,\n    y: 1355.06,\n  },\n  {\n    x: 1618910796000,\n    y: 1355.07,\n  },\n  {\n    x: 1618910806000,\n    y: 1355.08,\n  },\n  {\n    x: 1618910816000,\n    y: 1355.09,\n  },\n  {\n    x: 1618910821000,\n    y: 1355.1,\n  },\n  {\n    x: 1618910836000,\n    y: 1355.11,\n  },\n  {\n    x: 1618910846000,\n    y: 1355.12,\n  },\n  {\n    x: 1618910856000,\n    y: 1355.13,\n  },\n  {\n    x: 1618910866000,\n    y: 1355.14,\n  },\n  {\n    x: 1618910871000,\n    y: 1355.15,\n  },\n  {\n    x: 1618910896000,\n    y: 1355.16,\n  },\n  {\n    x: 1618910901000,\n    y: 1355.17,\n  },\n  {\n    x: 1618910906000,\n    y: 1355.18,\n  },\n  {\n    x: 1618910916000,\n    y: 1355.19,\n  },\n  {\n    x: 1618910926000,\n    y: 1355.2,\n  },\n  {\n    x: 1618910936000,\n    y: 1355.21,\n  },\n  {\n    x: 1618910951000,\n    y: 1355.22,\n  },\n  {\n    x: 1618910956000,\n    y: 1355.23,\n  },\n  {\n    x: 1618910961000,\n    y: 1355.24,\n  },\n  {\n    x: 1618910966000,\n    y: 1355.25,\n  },\n  {\n    x: 1618910971000,\n    y: 1355.26,\n  },\n  {\n    x: 1618910976000,\n    y: 1355.28,\n  },\n  {\n    x: 1618910986000,\n    y: 1355.29,\n  },\n  {\n    x: 1618911026000,\n    y: 1355.3,\n  },\n  {\n    x: 1618911036000,\n    y: 1355.31,\n  },\n  {\n    x: 1618911041000,\n    y: 1355.32,\n  },\n  {\n    x: 1618911071000,\n    y: 1355.34,\n  },\n  {\n    x: 1618911076000,\n    y: 1355.36,\n  },\n  {\n    x: 1618911081000,\n    y: 1355.37,\n  },\n  {\n    x: 1618911086000,\n    y: 1355.38,\n  },\n  {\n    x: 1618911091000,\n    y: 1355.39,\n  },\n  {\n    x: 1618911106000,\n    y: 1355.4,\n  },\n  {\n    x: 1618911116000,\n    y: 1355.41,\n  },\n  {\n    x: 1618911126000,\n    y: 1355.42,\n  },\n  {\n    x: 1618911131000,\n    y: 1355.43,\n  },\n  {\n    x: 1618911176000,\n    y: 1355.45,\n  },\n  {\n    x: 1618911181000,\n    y: 1355.47,\n  },\n  {\n    x: 1618911186000,\n    y: 1355.48,\n  },\n  {\n    x: 1618911191000,\n    y: 1355.5,\n  },\n  {\n    x: 1618911196000,\n    y: 1355.51,\n  },\n  {\n    x: 1618911221000,\n    y: 1355.52,\n  },\n  {\n    x: 1618911236000,\n    y: 1355.53,\n  },\n  {\n    x: 1618911251000,\n    y: 1355.55,\n  },\n  {\n    x: 1618911261000,\n    y: 1355.57,\n  },\n  {\n    x: 1618981891000,\n    y: 1357.36,\n  },\n  {\n    x: 1618981896000,\n    y: 1359.05,\n  },\n  {\n    x: 1618981901000,\n    y: 1361.93,\n  },\n  {\n    x: 1618981906000,\n    y: 1363.48,\n  },\n  {\n    x: 1618981911000,\n    y: 1363.83,\n  },\n  {\n    x: 1618981916000,\n    y: 1363.86,\n  },\n  {\n    x: 1618982186000,\n    y: 1364.59,\n  },\n  {\n    x: 1618982191000,\n    y: 1366.98,\n  },\n  {\n    x: 1618982196000,\n    y: 1370.75,\n  },\n  {\n    x: 1618982201000,\n    y: 1372.26,\n  },\n  {\n    x: 1618982621000,\n    y: 1373.34,\n  },\n  {\n    x: 1618982626000,\n    y: 1373.92,\n  },\n  {\n    x: 1618982631000,\n    y: 1374.42,\n  },\n  {\n    x: 1618982686000,\n    y: 1374.5,\n  },\n  {\n    x: 1618984021000,\n    y: 1374.71,\n  },\n  {\n    x: 1618984026000,\n    y: 1374.78,\n  },\n  {\n    x: 1618984081000,\n    y: 1375.06,\n  },\n  {\n    x: 1618984086000,\n    y: 1375.37,\n  },\n  {\n    x: 1618984091000,\n    y: 1375.43,\n  },\n  {\n    x: 1618986071000,\n    y: 1375.44,\n  },\n  {\n    x: 1618986076000,\n    y: 1375.61,\n  },\n  {\n    x: 1618986081000,\n    y: 1375.83,\n  },\n  {\n    x: 1618986086000,\n    y: 1375.99,\n  },\n  {\n    x: 1618986091000,\n    y: 1376.05,\n  },\n  {\n    x: 1618989311000,\n    y: 1376.28,\n  },\n  {\n    x: 1618989316000,\n    y: 1376.38,\n  },\n  {\n    x: 1618989321000,\n    y: 1376.59,\n  },\n  {\n    x: 1618989371000,\n    y: 1376.61,\n  },\n  {\n    x: 1618989376000,\n    y: 1376.68,\n  },\n  {\n    x: 1618989381000,\n    y: 1376.79,\n  },\n  {\n    x: 1618989386000,\n    y: 1376.85,\n  },\n  {\n    x: 1618989391000,\n    y: 1376.88,\n  },\n  {\n    x: 1618989396000,\n    y: 1376.97,\n  },\n  {\n    x: 1618989401000,\n    y: 1377.05,\n  },\n  {\n    x: 1618989406000,\n    y: 1377.14,\n  },\n  {\n    x: 1618989411000,\n    y: 1377.19,\n  },\n  {\n    x: 1618989416000,\n    y: 1377.23,\n  },\n  {\n    x: 1618989441000,\n    y: 1377.6,\n  },\n  {\n    x: 1618989446000,\n    y: 1377.61,\n  },\n  {\n    x: 1618989451000,\n    y: 1377.64,\n  },\n  {\n    x: 1618989456000,\n    y: 1377.66,\n  },\n  {\n    x: 1618989461000,\n    y: 1377.68,\n  },\n  {\n    x: 1618989751000,\n    y: 1377.69,\n  },\n  {\n    x: 1619069551000,\n    y: 1378.26,\n  },\n  {\n    x: 1619069556000,\n    y: 1380.28,\n  },\n  {\n    x: 1619069561000,\n    y: 1382.71,\n  },\n  {\n    x: 1619069566000,\n    y: 1384.62,\n  },\n  {\n    x: 1619069571000,\n    y: 1384.77,\n  },\n  {\n    x: 1619070851000,\n    y: 1385.12,\n  },\n  {\n    x: 1619070856000,\n    y: 1385.35,\n  },\n  {\n    x: 1619070861000,\n    y: 1385.66,\n  },\n  {\n    x: 1619070866000,\n    y: 1385.83,\n  },\n  {\n    x: 1619070871000,\n    y: 1385.86,\n  },\n  {\n    x: 1619070896000,\n    y: 1385.9,\n  },\n  {\n    x: 1619070901000,\n    y: 1386.01,\n  },\n  {\n    x: 1619070906000,\n    y: 1386.24,\n  },\n  {\n    x: 1619070911000,\n    y: 1386.36,\n  },\n  {\n    x: 1619070936000,\n    y: 1386.38,\n  },\n  {\n    x: 1619070941000,\n    y: 1386.44,\n  },\n  {\n    x: 1619070981000,\n    y: 1386.52,\n  },\n  {\n    x: 1619071021000,\n    y: 1386.57,\n  },\n  {\n    x: 1619071026000,\n    y: 1386.6,\n  },\n  {\n    x: 1619071031000,\n    y: 1386.7,\n  },\n  {\n    x: 1619071036000,\n    y: 1386.93,\n  },\n  {\n    x: 1619071041000,\n    y: 1386.99,\n  },\n  {\n    x: 1619071156000,\n    y: 1387.09,\n  },\n  {\n    x: 1619071161000,\n    y: 1387.21,\n  },\n  {\n    x: 1619071166000,\n    y: 1387.28,\n  },\n  {\n    x: 1619072757000,\n    y: 1387.36,\n  },\n  {\n    x: 1619072762000,\n    y: 1387.46,\n  },\n  {\n    x: 1619072767000,\n    y: 1387.53,\n  },\n  {\n    x: 1619072772000,\n    y: 1387.56,\n  },\n  {\n    x: 1619072962000,\n    y: 1387.68,\n  },\n  {\n    x: 1619072967000,\n    y: 1387.81,\n  },\n  {\n    x: 1619072972000,\n    y: 1388.02,\n  },\n  {\n    x: 1619072987000,\n    y: 1388.12,\n  },\n  {\n    x: 1619072992000,\n    y: 1388.22,\n  },\n  {\n    x: 1619072997000,\n    y: 1388.31,\n  },\n  {\n    x: 1619073002000,\n    y: 1388.46,\n  },\n  {\n    x: 1619073007000,\n    y: 1388.56,\n  },\n  {\n    x: 1619073012000,\n    y: 1388.7,\n  },\n  {\n    x: 1619073017000,\n    y: 1388.78,\n  },\n  {\n    x: 1619073022000,\n    y: 1388.88,\n  },\n  {\n    x: 1619073027000,\n    y: 1388.97,\n  },\n  {\n    x: 1619073032000,\n    y: 1389.11,\n  },\n  {\n    x: 1619073037000,\n    y: 1389.18,\n  },\n  {\n    x: 1619073047000,\n    y: 1389.35,\n  },\n  {\n    x: 1619073052000,\n    y: 1389.38,\n  },\n  {\n    x: 1619073057000,\n    y: 1389.4,\n  },\n  {\n    x: 1619073062000,\n    y: 1389.55,\n  },\n  {\n    x: 1619073067000,\n    y: 1389.7,\n  },\n  {\n    x: 1619073072000,\n    y: 1389.77,\n  },\n  {\n    x: 1619073077000,\n    y: 1389.89,\n  },\n  {\n    x: 1619073092000,\n    y: 1389.9,\n  },\n  {\n    x: 1619073097000,\n    y: 1390.01,\n  },\n  {\n    x: 1619073102000,\n    y: 1390.11,\n  },\n  {\n    x: 1619073107000,\n    y: 1390.29,\n  },\n  {\n    x: 1619073112000,\n    y: 1390.45,\n  },\n  {\n    x: 1619073117000,\n    y: 1390.47,\n  },\n  {\n    x: 1619073122000,\n    y: 1390.53,\n  },\n  {\n    x: 1619073127000,\n    y: 1390.68,\n  },\n  {\n    x: 1619073132000,\n    y: 1390.87,\n  },\n  {\n    x: 1619073137000,\n    y: 1391.05,\n  },\n  {\n    x: 1619073152000,\n    y: 1391.13,\n  },\n  {\n    x: 1619073157000,\n    y: 1391.31,\n  },\n  {\n    x: 1619073162000,\n    y: 1391.5,\n  },\n  {\n    x: 1619073167000,\n    y: 1391.65,\n  },\n  {\n    x: 1619073172000,\n    y: 1391.67,\n  },\n  {\n    x: 1619073177000,\n    y: 1391.87,\n  },\n  {\n    x: 1619073182000,\n    y: 1392.01,\n  },\n  {\n    x: 1619073207000,\n    y: 1392.16,\n  },\n  {\n    x: 1619073212000,\n    y: 1392.31,\n  },\n  {\n    x: 1619073217000,\n    y: 1392.5,\n  },\n  {\n    x: 1619073222000,\n    y: 1392.64,\n  },\n  {\n    x: 1619073227000,\n    y: 1392.84,\n  },\n  {\n    x: 1619073232000,\n    y: 1393.04,\n  },\n  {\n    x: 1619073237000,\n    y: 1393.2,\n  },\n  {\n    x: 1619073242000,\n    y: 1393.22,\n  },\n  {\n    x: 1619073247000,\n    y: 1393.44,\n  },\n  {\n    x: 1619073252000,\n    y: 1393.63,\n  },\n  {\n    x: 1619073257000,\n    y: 1393.76,\n  },\n  {\n    x: 1619073262000,\n    y: 1393.95,\n  },\n  {\n    x: 1619073267000,\n    y: 1394.1,\n  },\n  {\n    x: 1619073272000,\n    y: 1394.2,\n  },\n  {\n    x: 1619073277000,\n    y: 1394.32,\n  },\n  {\n    x: 1619073282000,\n    y: 1394.47,\n  },\n  {\n    x: 1619073287000,\n    y: 1394.55,\n  },\n  {\n    x: 1619073292000,\n    y: 1394.64,\n  },\n  {\n    x: 1619073297000,\n    y: 1394.68,\n  },\n  {\n    x: 1619073302000,\n    y: 1394.77,\n  },\n  {\n    x: 1619073307000,\n    y: 1394.88,\n  },\n  {\n    x: 1619073312000,\n    y: 1394.97,\n  },\n  {\n    x: 1619073322000,\n    y: 1395.01,\n  },\n  {\n    x: 1619073327000,\n    y: 1395.08,\n  },\n  {\n    x: 1619073332000,\n    y: 1395.19,\n  },\n  {\n    x: 1619073337000,\n    y: 1395.33,\n  },\n  {\n    x: 1619073352000,\n    y: 1395.35,\n  },\n  {\n    x: 1619073357000,\n    y: 1395.4,\n  },\n  {\n    x: 1619073362000,\n    y: 1395.46,\n  },\n  {\n    x: 1619073367000,\n    y: 1395.52,\n  },\n  {\n    x: 1619073372000,\n    y: 1395.56,\n  },\n  {\n    x: 1619073377000,\n    y: 1395.59,\n  },\n  {\n    x: 1619073382000,\n    y: 1395.68,\n  },\n  {\n    x: 1619073387000,\n    y: 1395.72,\n  },\n  {\n    x: 1619073392000,\n    y: 1395.8,\n  },\n  {\n    x: 1619073482000,\n    y: 1395.84,\n  },\n  {\n    x: 1619073537000,\n    y: 1395.88,\n  },\n  {\n    x: 1619073542000,\n    y: 1395.89,\n  },\n  {\n    x: 1619073562000,\n    y: 1395.96,\n  },\n  {\n    x: 1619073567000,\n    y: 1396,\n  },\n  {\n    x: 1619073572000,\n    y: 1396.08,\n  },\n  {\n    x: 1619073577000,\n    y: 1396.17,\n  },\n  {\n    x: 1619073582000,\n    y: 1396.2,\n  },\n  {\n    x: 1619073587000,\n    y: 1396.27,\n  },\n  {\n    x: 1619073592000,\n    y: 1396.31,\n  },\n  {\n    x: 1619073597000,\n    y: 1396.36,\n  },\n  {\n    x: 1619073602000,\n    y: 1396.4,\n  },\n  {\n    x: 1619073657000,\n    y: 1396.43,\n  },\n  {\n    x: 1619073667000,\n    y: 1396.46,\n  },\n  {\n    x: 1619073672000,\n    y: 1396.49,\n  },\n  {\n    x: 1619073677000,\n    y: 1396.52,\n  },\n  {\n    x: 1619073682000,\n    y: 1396.56,\n  },\n  {\n    x: 1619073687000,\n    y: 1396.6,\n  },\n]"
            },
            {
                "name": "prependZero",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(input: number, length: number) =>\n  ('0'.repeat(length) + input).slice(-length)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "radioButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/radio/Radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [RadioModule, FormsModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-radio [(ngModel)]=\"aaa\">\n      <teta-radio-button [value]=\"1\">1</teta-radio-button>\n      <teta-radio-button [value]=\"2\">2</teta-radio-button>\n      <teta-radio-button [value]=\"3\" [disabled]=\"true\">4</teta-radio-button>\n    </teta-radio>\n  </div>`,\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
<<<<<<< Updated upstream
=======
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
>>>>>>> Stashed changes
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ProgressBarModule, FormsModule],\n    entryComponents: [],\n  },\n  props: {\n    min: number('min', 0),\n    max: number('max', 100),\n    value: number('value', 50),\n    step: number('step', 0),\n  },\n  template: `<div class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\n              <teta-progress-bar [min]=\"min\" [max]=\"max\" [step]=\"step\" [(ngModel)]=\"value\"></teta-progress-bar>\n            </div>`,\n})"
            },
            {
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toggle/Toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ToggleModule, IconModule, FormsModule],\n  },\n  props: {\n    text: text('text', 'Remember me'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n  },\n  template: `<teta-toggle [tetaIconSprite]=\"'assets/icons.svg'\"\n              [ngModel]=\"value\"\n              (ngModelChange)=\"setValue($event)\">\n              {{text}}\n            </teta-toggle>`,\n})"
            },
            {
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [LoaderModule]\n  },\n  props: {\n    show: boolean('show', true)\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\" [tetaLoader]=\"show\">\n                \n              </div>`,\n})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "simplePropertyGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [PropertyGridModule, IconModule],\n    entryComponents: [],\n  },\n  props: {\n    item: item(),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\"\n                  class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\n              <teta-property-grid [dataItem]=\"item\"\n                          [dict]=\"dict\"\n                          [columns]=\"columns\">\n              </teta-property-grid>\n            </div>`,\n})"
            },
            {
                "name": "singleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: 'user',\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    virtual: boolean('virtual', false),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 200px;\"\n                  [options]=\"options\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [textRef]=\"'name'\"\n                  [virtual]=\"virtual\"\n                  [valueRef]=\"'id'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\"\n                  [disabled]=\"false\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n      <ng-template tetaSelectValue let-value>\n        {{value?.name}}\n      </ng-template>\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
            },
            {
                "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ProgressBarComponent),\n  multi: true,\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/switch/switch/switch.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SwitchComponent),\n  multi: true,\n}"
            },
            {
                "name": "switchSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SwitchModule, IconModule, FormsModule],\n  },\n  props: {\n    model: 'item 1',\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'grey'),\n    values: ['item 1', 'item 2', 'item 3'],\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<teta-switch [tetaIconSprite]=\"'assets/icons.svg'\"\n                          [ngModel]=\"model\"\n                          (ngModelChange)=\"log('switch', $event)\">\n  <teta-switch-button *ngFor=\"let val of values\" [value]=\"val\">\n    <teta-icon [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon> {{val}}\n  </teta-switch-button>\n</teta-switch>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TimePartControlComponent),\n  multi: true,\n}"
            },
            {
                "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n}"
            },
            {
                "name": "treeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Тетакомовское м-р (4)',\n    icon: 'layer',\n    children: [\n      {\n        name: 'Скважины для тестирования',\n        icon: 'folder',\n        children: [\n          {\n            name: 'Тестовая скважина №1',\n            icon: 'well',\n            children: [],\n          },\n          {\n            name: 'Стресс-тест',\n            icon: 'well',\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test only (1)',\n    icon: 'layer',\n    children: [\n      {\n        name: 'Group (1)',\n        icon: 'folder',\n        children: [\n          {\n            name: 'well',\n            icon: 'well',\n            children: [\n              {\n                name: 'ГИС',\n                icon: 'map',\n                children: [],\n              },\n              {\n                name: 'Конструкция',\n                icon: 'tubes',\n                children: [],\n              },\n              {\n                name: 'D1',\n                icon: 'angle',\n                children: [],\n              },\n              {\n                name: 'Дизайн №1 copy',\n                icon: 'angle',\n                children: [\n                  {\n                    name: 'Зоны продуктивности',\n                    children: [],\n                  },\n                  {\n                    name: 'План закачки',\n                    children: [],\n                  },\n                  {\n                    name: 'Опции',\n                    children: [],\n                  },\n                  {\n                    name: 'Результаты',\n                    children: [],\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n]"
            },
            {
                "name": "treeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tree/Tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{\n  name: 'Тетакомовское м-р (4)',\n  icon: 'layers',\n  children: [\n    {\n      name: 'Скважины для тестирования',\n      icon: 'folder',\n      children: [\n        {\n          name: 'Тестовая скважина №1',\n          icon: 'well',\n          children: []\n        }, {\n          name: 'Стресс-тест',\n          icon: 'well',\n          children: []\n        }\n      ]\n    }\n  ]\n}, {\n  name: 'Test only (1)',\n  icon: 'layers',\n  children: [\n    {\n      name: 'Group (1)',\n      icon: 'folder',\n      children: [\n        {\n          name: 'well',\n          icon: 'well',\n          children: [{\n            name: 'ГИС',\n            icon: 'map',\n            children: []\n          }, {\n            name: 'Конструкция',\n            icon: 'tubes',\n            children: []\n          }, {\n            name: 'D1',\n            icon: 'angle',\n            children: []\n          }, {\n            name: 'Дизайн №1 copy',\n            icon: 'angle',\n            children: [{\n              name: 'Зоны продуктивности',\n              children: []\n            }, {\n              name: 'План закачки',\n              children: []\n            }, {\n              name: 'Опции',\n              children: []\n            }, {\n              name: 'Результаты',\n              children: []\n            }]\n          }]\n        }\n      ]\n    }\n  ]\n}]"
            },
            {
                "name": "vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DelimiterModule, ButtonModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <button teta-button [palette]=\"'primary'\">\n      <teta-icon [name]=\"'settings'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'add'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'delete'\"></teta-icon>\n    </button>\n  </div>`,\n})"
            },
            {
                "name": "vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ResizePanelModule],\n  },\n  props: {\n    maxSize: number('maxSize', 500, {\n      min: 300,\n      max: 450,\n      range: true,\n      step: 10,\n    }),\n    minSize: number('minSize', 50, {\n      min: 50,\n      max: 150,\n      range: true,\n      step: 10,\n    }),\n    grabPosition: select('grabPosition', ['top', 'bottom'], 'top'),\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <div class=\"column bg-white-50\"\n                      style=\"width: 500px; height: 500px;\">\n                  <div class=\"row_6 bg-primary-5\">\n                    I will surrender\n                  </div>\n                  <teta-resize-panel\n                        [maxSize]=\"maxSize\"\n                        [minSize]=\"minSize\"\n                        [direction]=\"'horizontal'\"\n                        [grabPosition]=\"grabPosition\"\n                        class=\"row_6 bg-red-5\">\n                    I will resize\n                  </teta-resize-panel>\n                </div>\n              </div>`,\n})"
            },
            {
                "name": "virtualTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TableModule, IconModule],\n    entryComponents: [\n      DefaultHeadCellComponent,\n      StringCellComponent,\n      DateCellComponent,\n      NumericCellComponent,\n      ListCellComponent,\n      StringFilterComponent,\n      ListFilterComponent,\n      NumericFilterComponent,\n      PopupContentComponent,\n      DateFilterComponent,\n    ],\n    providers: [TableService],\n  },\n  props: {\n    data: getData(1000),\n    editType: select(\n      'editType',\n      {\n        row: EditType.row,\n        cell: EditType.cell,\n      },\n      EditType.cell\n    ),\n    selectType: select(\n      'selectType',\n      {\n        none: SelectType.none,\n        multiple: SelectType.multiple,\n        single: SelectType.single,\n      },\n      SelectType.multiple\n    ),\n    editEvent: select(\n      'editEvent',\n      {\n        focus: EditEvent.focus,\n        click: EditEvent.click,\n        doubleClick: EditEvent.doubleClick,\n      },\n      EditEvent.focus\n    ),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 1200px; height: 600px;\">\n              <teta-table [data]=\"data\"\n                          [cookieName]=\"'table-stories'\"\n                          [columns]=\"columns\"\n                          [dict]=\"dict\"\n                          [editType]=\"editType\"\n                          [editEvent]=\"editEvent\"\n                          [selectType]=\"selectType\"\n                          [virtual]=\"true\"\n                          (bodyLeft)=\"log('bodyLeft', $event)\"\n                          (cellClick)=\"log('cellClick', $event)\"\n                          (cellDoubleClick)=\"log('cellDoubleClick', $event)\"\n                          (cellEditEnd)=\"log('cellEditEnd', $event)\"\n                          (cellEditStart)=\"log('cellEditStart', $event)\"\n                          (cellFocus)=\"log('cellFocus', $event)\"\n                          (cellKeyUp)=\"log('cellKeyUp', $event)\"\n                          (rowEditEnd)=\"log('rowEditEnd', $event)\"\n                          (rowEditStart)=\"log('rowEditStart', $event)\"\n                          (rowLeft)=\"log('rowLeft', $event)\"\n                          (selectedRowsChange)=\"log('selectedRowsChange', $event)\"\n                          (stateChange)=\"log('stateChange', $event)\"\n                          (valueChange)=\"log('valueChange', $event)\"\n                          (activeRowChange)=\"log('activeRowChange', $event)\"></teta-table>\n            </div>`,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AnnotationTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/components/src/component/chart/model/annotation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AutoCloseIgnoreCase",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"esc\" | \"enter\" | \"inside\" | \"outside\"",
                "file": "projects/components/src/common/contract/auto-close-ignore-case.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ButtonOrNullOrUndefined",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RadioButtonComponent | undefined | null",
                "file": "projects/components/src/component/radio/radio/radio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ButtonViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"outline\" | \"ghost\"",
                "file": "projects/components/src/component/button/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ChartSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/components/src/component/chart/core/chart.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Ctor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/components/src/common/contract/constructor-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "AggregationType",
                "childs": [
                    {
                        "name": "none",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "avg",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "min",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/aggregation-type.enum.ts"
            },
            {
                "name": "Align",
                "childs": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "center",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fitWidth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minWidth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/align.enum.ts"
            },
            {
                "name": "AxisLocate",
                "childs": [
                    {
                        "name": "abscissa",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ordinatus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/chart/src/chart/model/enum/axis-locate.ts"
            },
            {
                "name": "AxisType",
                "childs": [
                    {
                        "name": "abscissa",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ordinatus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/axis-type.ts"
            },
            {
                "name": "DatePickerMode",
                "childs": [
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "month",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "year",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts"
            },
            {
                "name": "DispatchType",
                "childs": [
                    {
                        "name": "moveLine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "moveLine"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/dispatch-type.ts"
            },
            {
                "name": "EditEvent",
                "childs": [
                    {
                        "name": "click",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "doubleClick",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/edit-event.enum.ts"
            },
            {
                "name": "EditType",
                "childs": [
                    {
                        "name": "cell",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "row",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/edit-type.enum.ts"
            },
            {
                "name": "FilterType",
                "childs": [
                    {
                        "name": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/filter-type.enum.ts"
            },
            {
                "name": "LegendType",
                "childs": [
                    {
                        "name": "swatches",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gradient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/legend-type.ts"
            },
            {
                "name": "ListFilterType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Excluded",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/list-filter-type.enum.ts"
            },
            {
                "name": "ModalCloseReason",
                "childs": [
                    {
                        "name": "resolve",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "exit",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "backdrop",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "esc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/modal/model/modal-close-reason.enum.ts"
            },
            {
                "name": "Scale",
                "childs": [
                    {
                        "name": "time",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "time"
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "category",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "category"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/scale.ts"
            },
            {
                "name": "ScaleType",
                "childs": [
                    {
                        "name": "linear",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "log",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pow",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sqrt",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/scale-type.ts"
            },
            {
                "name": "SelectType",
                "childs": [
                    {
                        "name": "none",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "single",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/select-type.enum.ts"
            },
            {
                "name": "SeriesType",
                "childs": [
                    {
                        "name": "area",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "line",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pie",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scatter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spline",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contour",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/series-type.ts"
            },
            {
                "name": "SidebarPosition",
                "childs": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/sidebar/sidebar-position.enum.ts"
            },
            {
                "name": "StringFilterType",
                "childs": [
                    {
                        "name": "Equals",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "StartsWith",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "EndsWith",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "Contains",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/string-filter-type.enum.ts"
            },
            {
                "name": "TetaSize",
                "childs": [
                    {
                        "name": "XS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "S",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "M",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "L",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "XL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/teta-size.enum.ts"
            },
            {
                "name": "VerticalAlign",
                "childs": [
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "center",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/vertical-align.enum.ts"
            },
            {
                "name": "ZoomType",
                "childs": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "xy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/zoom-type.ts"
            }
        ],
        "groupedVariables": {
            "projects/components/src/component/modal/Modal.stories.ts": [
                {
                    "name": "alert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: AlertSampleComponent,\n})"
                },
                {
                    "name": "fromComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: ModalFromComponentComponent,\n  props: {\n    name: text('name', 'Название'),\n    description: text('description', 'Описание объекта'),\n  },\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ModalSamplesModule],\n  },\n  component: ModalFromTemplateComponent,\n  props: {\n    name: text('name', 'Название'),\n    description: text('description', 'Описание объекта'),\n  },\n})"
                }
            ],
            "projects/components/src/component/chart/model/annotation.ts": [
                {
                    "name": "annotationMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/model/annotation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[\n  annotationBadge,\n  annotationLabel,\n  annotationCallout,\n  annotationCalloutCircle,\n  annotationCalloutCurve,\n  annotationCalloutElbow,\n  annotationCalloutRect,\n  annotationCustomType,\n  annotationXYThreshold,\n] as const"
                }
            ],
            "projects/components/src/component/file-upload/File.stories.ts": [
                {
                    "name": "area",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/file-upload/File.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [FileUploadModule, IconModule]\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\n    <teta-file-upload-area style=\"height: 250px; width: 300px;\">\n      <div class=\"column column_auto font-body-3\">\n        <div class=\"row align-center justify-content-around\">\n          <svg class=\"icon__image fill-text-30\" style=\"width: 40px\">\n            <use [attr.xlink:href]=\"'#pdf'\"></use>\n          </svg>\n        </div>\n        <div class=\"text-align-center\">\n          Перетащите файлы в формате .xls, .las или .csv сюда или <span class=\"color-primary-30\">загрузите</span>\n        </div>\n      </div>\n    </teta-file-upload-area>\n  </div>`\n})"
                }
            ],
            "projects/components/src/component/sidebar/Sidebar.stories.ts": [
                {
                    "name": "basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SidebarModule, IconModule, ButtonModule]\n  },\n  props: {\n    backdrop: boolean('backdrop', false),\n    position: SidebarPosition,\n    open1: false,\n    open2: false,\n    open3: false,\n    open4: false\n  },\n  template: `<div class=\"padding-14 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.left\" [open]=\"open1\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.right\" [open]=\"open2\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.top\" [open]=\"open3\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.bottom\" [open]=\"open4\" [className]=\"'bg-primary-30'\">\n      <div class=\"font-title-1\">Sidebar</div>\n      <div>Sidebar content</div>\n    </teta-sidebar>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open1=!open1;open2=open3=open4=false;\">\n      <teta-icon [name]=\"'arrowLeft'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open2=!open2;open1=open3=open4=false;\">\n      <teta-icon [name]=\"'arrowRight'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open3=!open3;open2=open1=open4=false;\">\n      <teta-icon [name]=\"'arrowUp'\"></teta-icon>\n    </button>\n    <button teta-button [palette]=\"'primary'\" (click)=\"open4=!open4;open2=open3=open1=false;\">\n      <teta-icon [name]=\"'arrowDown'\"></teta-icon>\n    </button>\n  </div>`\n})"
                }
            ],
            "projects/components/src/component/accordion/Accordion.stories.ts": [
                {
                    "name": "basicAccordion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/accordion/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [AccordionModule, IconModule]\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3 bg-panel-50\">\n      <teta-accordion class=\"bg-white-50\">\n        <teta-accordion-item>\n          <teta-accordion-head>\n            Heading 1\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 1</div>\n          </ng-template>\n        </teta-accordion-item>\n        <teta-accordion-item [disabled]=\"true\">\n          <teta-accordion-head>\n            Heading 2 (disabled)\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 2</div>\n          </ng-template>\n        </teta-accordion-item>\n        <teta-accordion-item>\n          <teta-accordion-head>\n            Heading 3\n          </teta-accordion-head>\n          <ng-template tetaAccordionContent>\n            <div class=\"padding-v-3 padding-h-5\">I am the content 3</div>\n          </ng-template>\n        </teta-accordion-item>\n      </teta-accordion>\n    </div>`,\n})"
                }
            ],
<<<<<<< Updated upstream
=======
            "projects/chart/src/chart/Chart.stories.ts": [
                {
                    "name": "basicChart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ChartModule],\n  },\n  props: {\n    config,\n  },\n  template: `<div class=\"font-body-3 padding-3 bg-background-0\" style=\"width: auto; height: 300px;\">\n      <teta-chart [config]=\"config\" class=\"bg-background-50 border border-text-50\"></teta-chart>\n    </div>`,\n})"
                },
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "defaultValue": "{\n  name: '123',\n  xAxis: [\n    {\n      type: AxisType.number,\n      visible: true,\n    },\n  ],\n  yAxis: [\n    {\n      type: AxisType.number,\n      visible: true,\n    },\n  ],\n  series: [\n    {\n      type: SeriesType.line,\n      data: points1,\n      name: 'Series 1',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'red',\n    },\n    {\n      type: SeriesType.line,\n      data: points2,\n      name: 'Series 2',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'blue',\n    },\n  ],\n}"
                }
            ],
>>>>>>> Stashed changes
            "projects/components/src/directive/context-menu/ContextMenu.stories.ts": [
                {
                    "name": "basicContextMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ContextMenuModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.left\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n  },\n  template: `<button teta-button\n                     [tetaIconSprite]=\"'assets/icons.svg'\"\n                     [palette]=\"'primary'\"\n                     [tetaContextMenu]=\"menu\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [className]=\"'one'\">\n              <teta-icon [palette]=\"'background'\" [name]=\"'settings'\"></teta-icon>\n              Right click on me\n            </button>\n            <ng-template #menu let-data=\"data\">\n              <div class=\"list shadow-1\" style=\"width: 200px\">\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'addCircle'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Add\n                </div>\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'closeBig'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Delete\n                </div>\n                <div class=\"list-item list-item_interactive\">\n                  <teta-icon [name]=\"'copy'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Clone\n                </div>\n              </div>\n            </ng-template>`,\n})"
                }
            ],
            "projects/components/src/component/input/Input.stories.ts": [
                {
                    "name": "basicInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [\n      IconModule,\n      InputModule,\n      FormsModule,\n      SelectModule,\n      RadioModule,\n      DatePickerModule,\n      ToggleModule,\n      CheckboxModule,\n    ],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\n  <div class=\"form-container\">\n    <div class=\"form-row\">\n      <teta-input [label]=\"'text-field'\">\n        <teta-text-field [leftIconName]=\"'user'\" [placeholder]=\"'placeholder'\"></teta-text-field>\n      </teta-input>\n      <teta-input [label]=\"'text-field disabled'\">\n        <teta-text-field [leftIconName]=\"'user'\" [disabled]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\n      </teta-input>\n      <teta-input [label]=\"'text-field invalid'\">\n        <teta-text-field [leftIconName]=\"'user'\" [invalid]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\n          Has errors\n        </div>\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'input'\">\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\n      </teta-input>\n      <teta-input [label]=\"'input disabled'\">\n        <input class=\"input\" disabled [placeholder]=\"'placeholder'\" />\n      </teta-input>\n      <teta-input [label]=\"'input invalid'\">\n        <input class=\"input\" [class.input_invalid]=\"true\" [placeholder]=\"'placeholder'\" />\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\n          Has errors\n        </div>\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'input required'\" [required]=\"true\">\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\n      </teta-input>\n    </div>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'Select'\">\n        <teta-select></teta-select>\n      </teta-input>\n      <teta-input [label]=\"'Select disabled'\">\n        <teta-select [disabled]=\"true\"></teta-select>\n      </teta-input>\n      <teta-input [label]=\"'Select invalid'\">\n        <teta-select [invalid]=\"true\"></teta-select>\n      </teta-input>\n    </div>\n    <teta-input [label]=\"'Selection'\">\n      <teta-radio>\n        <teta-radio-button>Option 1</teta-radio-button>\n        <teta-radio-button>Option 2</teta-radio-button>\n        <teta-radio-button [disabled]=\"true\">Option 3</teta-radio-button>\n      </teta-radio>\n    </teta-input>\n    <teta-toggle>Off / On</teta-toggle>\n    <teta-toggle [disabled]=\"true\">Off / On</teta-toggle>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'Date'\">\n        <teta-date-picker></teta-date-picker>\n      </teta-input>\n      <teta-input [label]=\"'Date disabled'\">\n        <teta-date-picker [disabled]=\"true\"></teta-date-picker>\n      </teta-input>\n      <teta-input [label]=\"'Date invalid'\">\n        <teta-date-picker [invalid]=\"true\"></teta-date-picker>\n      </teta-input>\n    </div>\n    <teta-checkbox [binary]=\"true\">Check Me, babe</teta-checkbox>\n    <teta-checkbox [binary]=\"true\" [disabled]=\"true\">I am disabled</teta-checkbox>\n    <div class=\"form-row\">\n      <teta-input [label]=\"'textarea'\">\n        <textarea class=\"textarea\" [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n      <teta-input [label]=\"'textarea disabled'\">\n        <textarea class=\"textarea\" disabled [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n      <teta-input [label]=\"'textarea invalid'\">\n        <textarea class=\"textarea textarea_invalid\" [placeholder]=\"'textarea'\"></textarea>\n      </teta-input>\n    </div>\n  </div>\n</div>`,\n})"
                }
            ],
            "projects/components/src/component/list/List.stories.ts": [
                {
                    "name": "basicList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/list/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-10\">\n<div class=\"list shadow-1\" style=\"width: 200px\">\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n  </div>\n  <div class=\"list-item\">\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n  </div>\n</div>\n</div>`,\n})"
                },
                {
                    "name": "interactiveList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/list/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule],\n  },\n  template: `<div class=\"padding-10\">\n<div class=\"list shadow-1\" style=\"width: 200px\">\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n  </div>\n  <div class=\"list-item list-item_interactive\">\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n  </div>\n</div>\n</div>`,\n})"
                }
            ],
            "projects/components/src/component/tabs/Tabs.stories.ts": [
                {
                    "name": "basicTab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tabs/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TabsModule, IconModule]\n  },\n  props: {},\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-3\" style=\"width 100px; height 800px;\">\n    <teta-tabs>\n      <teta-tab>\n        <ng-template tetaTabTitle>\n          <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>Результат\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_accent\">\n            <div class=\"container\">\n             1111\n            </div>\n          </div>\n        </ng-template>\n      </teta-tab>\n      <teta-tab>\n        <ng-template tetaTabTitle>\n          Код\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_code\">\n           CODE\n          </div>\n        </ng-template>\n      </teta-tab>\n      <teta-tab [disabled]=\"true\">\n        <ng-template tetaTabTitle>\n          Disabled\n        </ng-template>\n        <ng-template tetaTabContent>\n          <div class=\"area area_code\">\n           Disabled\n          </div>\n        </ng-template>\n      </teta-tab>\n    </teta-tabs>\n  </div>`,\n})"
                }
            ],
            "projects/components/src/component/table/Table.stories.ts": [
                {
                    "name": "basicTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TableModule, IconModule],\n    entryComponents: [\n      DefaultHeadCellComponent,\n      StringCellComponent,\n      DateCellComponent,\n      NumericCellComponent,\n      ListCellComponent,\n      StringFilterComponent,\n      ListFilterComponent,\n      NumericFilterComponent,\n      PopupContentComponent,\n      DateFilterComponent,\n    ],\n    providers: [TableService],\n  },\n  props: {\n    data: getData(15),\n    editType: select(\n      'editType',\n      {\n        row: EditType.row,\n        cell: EditType.cell,\n      },\n      EditType.cell\n    ),\n    selectType: select(\n      'selectType',\n      {\n        none: SelectType.none,\n        multiple: SelectType.multiple,\n        single: SelectType.single,\n      },\n      SelectType.multiple\n    ),\n    editEvent: select(\n      'editEvent',\n      {\n        focus: EditEvent.focus,\n        click: EditEvent.click,\n        doubleClick: EditEvent.doubleClick,\n      },\n      EditEvent.focus\n    ),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 1200px; height: 600px;\">\n              <div [tetaIconSprite]=\"'assets/color-icons.svg'\"></div>\n              <teta-table [data]=\"data\"\n                          [cookieName]=\"'table-stories'\"\n                          [columns]=\"columns\"\n                          [dict]=\"dict\"\n                          [editType]=\"editType\"\n                          [editEvent]=\"editEvent\"\n                          [selectType]=\"selectType\"\n                          (bodyLeft)=\"log('bodyLeft', $event)\"\n                          (cellClick)=\"log('cellClick', $event)\"\n                          (cellDoubleClick)=\"log('cellDoubleClick', $event)\"\n                          (cellEditEnd)=\"log('cellEditEnd', $event)\"\n                          (cellEditStart)=\"log('cellEditStart', $event)\"\n                          (cellFocus)=\"log('cellFocus', $event)\"\n                          (cellKeyUp)=\"log('cellKeyUp', $event)\"\n                          (rowEditEnd)=\"log('rowEditEnd', $event)\"\n                          (rowEditStart)=\"log('rowEditStart', $event)\"\n                          (rowLeft)=\"log('rowLeft', $event)\"\n                          (selectedRowsChange)=\"log('selectedRowsChange', $event)\"\n                          (stateChange)=\"log('stateChange', $event)\"\n                          (valueChange)=\"log('valueChange', $event)\"\n                          (activeRowChange)=\"log('activeRowChange', $event)\"></teta-table>\n            </div>`,\n})"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  new TableColumn({\n    name: 'name',\n    flex: 1,\n    locked: true,\n    filterType: FilterType.string,\n  }),\n  new TableColumn({\n    name: 'date',\n    locked: true,\n    filterType: FilterType.date,\n  }),\n  new TableColumn({\n    name: 'long',\n    locked: true,\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'value',\n    locked: true,\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'summary',\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'ram',\n    caption: 'RAM',\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'location',\n    columns: [\n      new TableColumn({\n        name: 'city',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'state',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'address',\n        flex: 2,\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'zip',\n        filterType: FilterType.string,\n      }),\n    ],\n  }),\n]"
                },
                {
                    "name": "dict",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ram: [\n    { id: 8, name: 8 },\n    { id: 16, name: 16 },\n    { id: 32, name: 32 },\n    { id: 64, name: 64 },\n    { id: 128, name: 128 },\n  ],\n  long: getLong(),\n}"
                },
                {
                    "name": "getData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(size) => {\n  const res = [];\n  for (let i = 0; i < size; i++) {\n    res.push({\n      name: `${faker.name.firstName()} ${faker.name.lastName()}`,\n      date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\n      long: faker.helpers.randomize([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n      value: faker.datatype.number({ min: 0, max: 100 }),\n      summary: faker.datatype.number({ min: 0, max: 100000 }),\n      ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\n      address: faker.address.streetAddress(),\n      state: faker.address.state(),\n      city: faker.address.city(),\n      zip: faker.address.zipCode(),\n    });\n  }\n  return res;\n}"
                },
                {
                    "name": "getLong",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  const res = [];\n  for (let i = 0; i <= 10; i++) {\n    res.push({\n      id: i,\n      name: `${faker.address.city()} ${faker.address.country()} ${faker.address.state()} ${faker.address.zipCode()}`,\n    });\n  }\n  return res;\n}"
                },
                {
                    "name": "virtualTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TableModule, IconModule],\n    entryComponents: [\n      DefaultHeadCellComponent,\n      StringCellComponent,\n      DateCellComponent,\n      NumericCellComponent,\n      ListCellComponent,\n      StringFilterComponent,\n      ListFilterComponent,\n      NumericFilterComponent,\n      PopupContentComponent,\n      DateFilterComponent,\n    ],\n    providers: [TableService],\n  },\n  props: {\n    data: getData(1000),\n    editType: select(\n      'editType',\n      {\n        row: EditType.row,\n        cell: EditType.cell,\n      },\n      EditType.cell\n    ),\n    selectType: select(\n      'selectType',\n      {\n        none: SelectType.none,\n        multiple: SelectType.multiple,\n        single: SelectType.single,\n      },\n      SelectType.multiple\n    ),\n    editEvent: select(\n      'editEvent',\n      {\n        focus: EditEvent.focus,\n        click: EditEvent.click,\n        doubleClick: EditEvent.doubleClick,\n      },\n      EditEvent.focus\n    ),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 1200px; height: 600px;\">\n              <teta-table [data]=\"data\"\n                          [cookieName]=\"'table-stories'\"\n                          [columns]=\"columns\"\n                          [dict]=\"dict\"\n                          [editType]=\"editType\"\n                          [editEvent]=\"editEvent\"\n                          [selectType]=\"selectType\"\n                          [virtual]=\"true\"\n                          (bodyLeft)=\"log('bodyLeft', $event)\"\n                          (cellClick)=\"log('cellClick', $event)\"\n                          (cellDoubleClick)=\"log('cellDoubleClick', $event)\"\n                          (cellEditEnd)=\"log('cellEditEnd', $event)\"\n                          (cellEditStart)=\"log('cellEditStart', $event)\"\n                          (cellFocus)=\"log('cellFocus', $event)\"\n                          (cellKeyUp)=\"log('cellKeyUp', $event)\"\n                          (rowEditEnd)=\"log('rowEditEnd', $event)\"\n                          (rowEditStart)=\"log('rowEditStart', $event)\"\n                          (rowLeft)=\"log('rowLeft', $event)\"\n                          (selectedRowsChange)=\"log('selectedRowsChange', $event)\"\n                          (stateChange)=\"log('stateChange', $event)\"\n                          (valueChange)=\"log('valueChange', $event)\"\n                          (activeRowChange)=\"log('activeRowChange', $event)\"></teta-table>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/component/toolbar/Toolbar.stories.ts": [
                {
                    "name": "basicToolbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ToolbarModule, ButtonModule, IconModule],\n  },\n  props: {\n    data: treeData,\n  },\n  template: `<teta-toolbar [tetaIconSprite]=\"'assets/icons.svg'\" [palette]=\"'primary'\">\n  <button teta-button [palette]=\"'primary'\" [square]=\"true\">\n    <teta-icon [name]=\"'moreVertical'\"></teta-icon>\n  </button>\n  <span class=\"margin-left-2\">Скважины</span>\n</teta-toolbar>`,\n})"
                },
                {
                    "name": "treeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Тетакомовское м-р (4)',\n    icon: 'layer',\n    children: [\n      {\n        name: 'Скважины для тестирования',\n        icon: 'folder',\n        children: [\n          {\n            name: 'Тестовая скважина №1',\n            icon: 'well',\n            children: [],\n          },\n          {\n            name: 'Стресс-тест',\n            icon: 'well',\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test only (1)',\n    icon: 'layer',\n    children: [\n      {\n        name: 'Group (1)',\n        icon: 'folder',\n        children: [\n          {\n            name: 'well',\n            icon: 'well',\n            children: [\n              {\n                name: 'ГИС',\n                icon: 'map',\n                children: [],\n              },\n              {\n                name: 'Конструкция',\n                icon: 'tubes',\n                children: [],\n              },\n              {\n                name: 'D1',\n                icon: 'angle',\n                children: [],\n              },\n              {\n                name: 'Дизайн №1 copy',\n                icon: 'angle',\n                children: [\n                  {\n                    name: 'Зоны продуктивности',\n                    children: [],\n                  },\n                  {\n                    name: 'План закачки',\n                    children: [],\n                  },\n                  {\n                    name: 'Опции',\n                    children: [],\n                  },\n                  {\n                    name: 'Результаты',\n                    children: [],\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n]"
                }
            ],
            "projects/components/src/component/tree/Tree.stories.ts": [
                {
                    "name": "basicTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tree/Tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TreeModule, TetaTemplateModule, IconModule, BrowserAnimationsModule]\n  },\n  props: {\n    data: treeData\n  },\n  template: `<teta-tree [tetaIconSprite]=\"'assets/icons.svg'\" style=\"width: 400px;\" [data]=\"data\">\n  <ng-template tetaTemplate let-item>\n    <teta-icon [name]=\"item.icon\" class=\"fill-text-30 margin-right-2\"></teta-icon> {{item.name}}\n  </ng-template>\n</teta-tree>`,\n})"
                },
                {
                    "name": "treeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tree/Tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{\n  name: 'Тетакомовское м-р (4)',\n  icon: 'layers',\n  children: [\n    {\n      name: 'Скважины для тестирования',\n      icon: 'folder',\n      children: [\n        {\n          name: 'Тестовая скважина №1',\n          icon: 'well',\n          children: []\n        }, {\n          name: 'Стресс-тест',\n          icon: 'well',\n          children: []\n        }\n      ]\n    }\n  ]\n}, {\n  name: 'Test only (1)',\n  icon: 'layers',\n  children: [\n    {\n      name: 'Group (1)',\n      icon: 'folder',\n      children: [\n        {\n          name: 'well',\n          icon: 'well',\n          children: [{\n            name: 'ГИС',\n            icon: 'map',\n            children: []\n          }, {\n            name: 'Конструкция',\n            icon: 'tubes',\n            children: []\n          }, {\n            name: 'D1',\n            icon: 'angle',\n            children: []\n          }, {\n            name: 'Дизайн №1 copy',\n            icon: 'angle',\n            children: [{\n              name: 'Зоны продуктивности',\n              children: []\n            }, {\n              name: 'План закачки',\n              children: []\n            }, {\n              name: 'Опции',\n              children: []\n            }, {\n              name: 'Результаты',\n              children: []\n            }]\n          }]\n        }\n      ]\n    }\n  ]\n}]"
                }
            ],
            "projects/components/src/component/checkbox/Checkbox.stories.ts": [
                {
                    "name": "binary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [CheckboxModule, IconModule, FormsModule],\n  },\n  props: {\n    type: select('type', ['binary', 'list'], 'binary'),\n    allowUndefined: boolean('allowUndefined', false),\n    text: text('text', 'Remember me'),\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n  },\n  template: `<teta-checkbox [tetaIconSprite]=\"'assets/icons.svg'\"\n                            [palette]=\"palette\"\n                            [ngModel]=\"value\"\n                            (ngModelChange)=\"setValue($event)\"\n                            [binary]=\"true\">\n              {{text}}\n            </teta-checkbox>`,\n})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [CheckboxModule, IconModule, FormsModule],\n  },\n  props: {\n    type: select('type', ['binary', 'list'], 'binary'),\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n    values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    result: [],\n    selectAll: (value: boolean, result: number[], values: number[]) => {\n      result = [];\n      if (value) {\n        result.push(...values);\n      }\n      return result;\n    },\n    allSelected: (result: number[], values: number[]) => {\n      if (!result || result?.length < 1) {\n        return false;\n      }\n      if (values.every((_) => result.indexOf(_) >= 0)) {\n        return true;\n      }\n      return undefined;\n    },\n  },\n  template: `\n<div style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-4\" [tetaIconSprite]=\"'assets/icons.svg'\">\n  <teta-checkbox  [ngModel]=\"allSelected(result, values)\"\n                  [palette]=\"palette\"\n                  (ngModelChange)=\"result = selectAll($event, result, values)\"\n                  [allowNull]=\"true\"\n                  [binary]=\"true\">Выбрать все</teta-checkbox>\n</div>\n<div *ngFor=\"let num of values\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n  <teta-checkbox [palette]=\"palette\" [ngModel]=\"result\" (ngModelChange)=\"result = $event;setValue($event)\" [value]=\"num\">\n    Option {{num}}\n  </teta-checkbox>\n</div>`,\n})"
                }
            ],
            "projects/components/src/component/button/Button.stories.ts": [
                {
                    "name": "buttons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ButtonModule, IconModule],\n  },\n  props: {\n    palettes: ['primary', 'text', 'red', 'yellow', 'green'],\n    text: text('text', 'Push me'),\n    leftIcon: boolean('leftIcon', true),\n    rightIcon: boolean('rightIcon', true),\n    disabled: boolean('disabled', false),\n  },\n  template: `<div class=\"row\" [tetaIconSprite]=\"'assets/icons.svg'\"  style=\"grid-gap: 12px\">\n  <div *ngFor=\"let palette of palettes\" class=\"column\" style=\"grid-gap: 8px\">\n    <div class=\"font-body-3\">\n      Default\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Only Icon\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [square]=\"true\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Outline\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'outline'\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n    <div class=\"font-body-3\">\n      Ghost\n    </div>\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'ghost'\">\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\n      {{text}}\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\n    </button>\n  </div>\n</div>`,\n})"
                }
            ],
            "projects/components/src/component/table/contract/cell-components-map.ts": [
                {
                    "name": "cellComponentsMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<FilterType, Type<any>>",
                    "defaultValue": "new Map<\n  FilterType,\n  Type<any>\n>()\n  .set(FilterType.number, NumericCellComponent)\n  .set(FilterType.date, DateCellComponent)\n  .set(FilterType.list, ListCellComponent)\n  .set(FilterType.string, StringCellComponent)\n  .set(FilterType.boolean, BooleanCellComponent)\n  .set(FilterType.custom, StringCellComponent)"
                },
                {
                    "name": "getCellComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(column: TableColumn): Type<any> =>\n  cellComponentsMap.has(column.filterType)\n    ? cellComponentsMap.get(column.filterType)\n    : StringCellComponent"
                }
            ],
            "projects/components/src/component/checkbox/checkbox/checkbox.component.ts": [
                {
                    "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts": [
                {
                    "name": "classTypeLegendMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<SeriesType, string>()\n  .set(SeriesType.line, 'line')\n  .set(SeriesType.spline, 'line')"
                }
            ],
            "projects/components/src/component/icon/Icon.stories.ts": [
                {
                    "name": "coloredIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule]\n  },\n  props: {\n    palette: select('palette', ['primary', 'text', 'red', 'white', 'yellow', 'green'], 'primary'),\n    icons: coloredIconsList,\n  },\n  template: `<div [tetaIconSprite]=\"'assets/color-icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\n                <span class=\"padding-left-4\">{{icon}}</span>\n              </div>\n            </div>`,\n})"
                },
                {
                    "name": "icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [IconModule]\n  },\n  props: {\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\n    icons: iconsList,\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\n                <span class=\"padding-left-4\">{{icon}}</span>\n              </div>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/component/icon/icons-list.ts": [
                {
                    "name": "coloredIconsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/icons-list.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'gisColor',\n  'gisInnerColor',\n  'gisSimpleColor',\n  'grpAddColor',\n  'grpColor',\n  'handbagAddColor',\n  'handbagColor',\n  'improveColor',\n  'lineColor',\n  'lineDashedColor',\n  'lineGradientColor',\n  'liquidAddColor',\n  'liquidSystemColor',\n  'lithotypeColor',\n  'mapColor',\n  'nktColor',\n  'opzAddColor',\n  'opzColor',\n  'sortDownColor',\n  'sortUpColor',\n  'sumAddColor',\n  'sumColor',\n  'wellAddColor',\n  'wellColor',\n  'wellConstructionColor',\n  'addColor',\n  'areasColor',\n  'barChart',\n  'barChart',\n  'calcColor',\n  'calendarColor',\n  'chartLineColor',\n  'chartLineDashed',\n  'chartLineGradientColor',\n  'clusterColor',\n  'coinColor',\n  'deleteColor',\n  'documentColor',\n  'favorite',\n  'filterColor',\n  'filterSortDownColor',\n  'filterSortUpColor',\n  'folderAddColor',\n  'folderColor',\n  'geomechColor',\n]"
                },
                {
                    "name": "iconsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/icons-list.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'add',\n  'addArea',\n  'addCircle',\n  'addComment',\n  'arrowDown',\n  'arrowDownKey',\n  'arrowDownSmall',\n  'arrowLeft',\n  'arrowLeftKey',\n  'arrowLeftSmall',\n  'arrowRight',\n  'arrowRightKey',\n  'arrowRightSmall',\n  'arrowUp',\n  'arrowUpDownSmall',\n  'arrowUpKey',\n  'arrowUpSmall',\n  'autoSize',\n  'autoSizeAll',\n  'backspace',\n  'bullet',\n  'calc',\n  'calendar',\n  'camera',\n  'chart',\n  'checkCircle',\n  'clock',\n  'clockChange',\n  'closeBig',\n  'closeCircle',\n  'comment',\n  'copy',\n  'copySelected',\n  'cut',\n  'dash',\n  'delete',\n  'deleteSelected',\n  'document',\n  'documentAnalyze',\n  'dots',\n  'download',\n  'drop',\n  'edit',\n  'end',\n  'eye',\n  'fader',\n  'filter',\n  'filterSortDown',\n  'filterSortUp',\n  'flag',\n  'folder',\n  'fullScreen',\n  'gantt',\n  'gisMonochrome',\n  'handbag',\n  'info',\n  'isoline',\n  'lamp',\n  'layers',\n  'layersLines',\n  'link',\n  'list',\n  'lock',\n  'map',\n  'measurement',\n  'menu',\n  'minus',\n  'monitoringDepth',\n  'monitoringTime',\n  'moreHorizontal',\n  'moreVertical',\n  'multiCopy',\n  'newTemplate',\n  'noSignal',\n  'paste',\n  'pause',\n  'pc',\n  'pdf',\n  'pieChart',\n  'pin',\n  'play',\n  'playBackRight',\n  'playForwardRight',\n  'print',\n  'question',\n  'redo',\n  'rewBack',\n  'rewForward',\n  'ring',\n  'save',\n  'search',\n  'settings',\n  'signal',\n  'square',\n  'star',\n  'start',\n  'stop',\n  'sum',\n  'table',\n  'tabletGraph',\n  'templateDownload',\n  'templateSettings',\n  'templateUpload',\n  'tick',\n  'timeOut',\n  'tree',\n  'treeTurn',\n  'undo',\n  'unpin',\n  'update',\n  'upload',\n  'user',\n  'warning',\n  'well',\n  'wrench',\n  'xls',\n  'xyz',\n  'horizontal',\n  'vertical',\n  'srt',\n  'nolteAnalysis',\n  'miniFrac',\n  'hornerAnalysis',\n]"
                }
            ],
            "projects/components/src/component/property-grid/PropertyGrid.stories.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  new TableColumn({\n    name: 'name',\n    flex: 1,\n    locked: true,\n    filterType: FilterType.string,\n  }),\n  new TableColumn({\n    name: 'date',\n    locked: true,\n    filterType: FilterType.date,\n  }),\n  new TableColumn({\n    name: 'value',\n    locked: true,\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'summary',\n    filterType: FilterType.number,\n  }),\n  new TableColumn({\n    name: 'ram',\n    caption: 'RAM',\n    filterType: FilterType.list,\n  }),\n  new TableColumn({\n    name: 'location',\n    columns: [\n      new TableColumn({\n        name: 'city',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'state',\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'address',\n        flex: 2,\n        filterType: FilterType.string,\n      }),\n      new TableColumn({\n        name: 'zip',\n        filterType: FilterType.string,\n      }),\n    ],\n  }),\n]"
                },
                {
                    "name": "dict",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  filterOptions: [\n    { id: 8, name: 8 },\n    { id: 16, name: 16 },\n    { id: 32, name: 32 },\n    { id: 64, name: 64 },\n    { id: 128, name: 128 },\n  ],\n}"
                },
                {
                    "name": "item",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  name: `${faker.name.firstName()} ${faker.name.lastName()}`,\n  date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\n  value: faker.datatype.number({ min: 0, max: 100 }),\n  summary: faker.datatype.number({ min: 0, max: 100000 }),\n  ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\n  address: faker.address.streetAddress(),\n  state: faker.address.state(),\n  city: faker.address.city(),\n  zip: faker.address.zipCode(),\n})"
                },
                {
                    "name": "simplePropertyGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [PropertyGridModule, IconModule],\n    entryComponents: [],\n  },\n  props: {\n    item: item(),\n    columns,\n    dict,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\"\n                  class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\n              <teta-property-grid [dataItem]=\"item\"\n                          [dict]=\"dict\"\n                          [columns]=\"columns\">\n              </teta-property-grid>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/component/chart/Chart.stories.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "defaultValue": "new ChartOptions({\n  name: '123',\n  zoom: { enable: true },\n  xAxis: [\n    new AxisOptions({\n      type: 'time',\n    }),\n  ],\n  yAxis: [new AxisOptions()],\n  series: [\n    new Series<BasePoint>({\n      type: SeriesType.line,\n      data: points1,\n      name: 'Serie 1',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'red',\n    }),\n    new Series<BasePoint>({\n      type: SeriesType.line,\n      data: points2,\n      name: 'Serie 2',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      color: 'steelblue',\n    }),\n  ],\n})"
                },
                {
                    "name": "line",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ChartModule],\n  },\n  props: {\n    config,\n  },\n  template: `<div style=\"height: 100vh\"><teta-chart [config]=\"config\"></teta-chart></div>`,\n})"
                }
            ],
            "projects/chart/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
<<<<<<< Updated upstream
=======
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
>>>>>>> Stashed changes
            "projects/components/src/component/date-picker/date-picker/date-picker.component.ts": [
                {
                    "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DatePickerComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/date-picker/DatePicker.stories.ts": [
                {
                    "name": "datePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: new Date(),\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-date-picker>`,\n})"
                },
                {
                    "name": "dateTimePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: null,\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [showTime]=\"true\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-date-picker>`,\n})"
                }
            ],
            "projects/components/src/component/date-picker/day-select/day-select.component.ts": [
                {
                    "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DaySelectComponent),\n  multi: true,\n}"
                }
            ],
<<<<<<< Updated upstream
=======
            "projects/chart/src/chart/default/default-chart-config.ts": [
                {
                    "name": "defaultChartConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/default/default-chart-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "defaultValue": "{\n  series: [],\n  xAxis: [{\n    visible: true\n  }],\n  yAxis: [{\n    visible: true\n  }],\n  gridLines: true\n}"
                }
            ],
>>>>>>> Stashed changes
            "projects/components/src/component/chart/drawer/default-drawer-mapping.ts": [
                {
                    "name": "defaultDrawerMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<SeriesType, IDrawer<BasePoint>>()\n  .set(SeriesType.area, new AreaDrawer())\n  .set(SeriesType.bar, new BarDrawer())\n  .set(SeriesType.line, new LineDrawer())\n  .set(SeriesType.pie, new PieDrawer())\n  .set(SeriesType.scatter, new ScatterDrawer())\n  .set(SeriesType.spline, new SplineDrawer())\n  .set(SeriesType.contour, new ContourDrawer())"
                }
            ],
            "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts": [
                {
                    "name": "defaultLegendDrawerMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<LegendType, ILegendDrawer>()\n  .set(LegendType.swatches, new SwatchDrawer())\n  .set(LegendType.gradient, new GradientDrawer())"
                }
            ],
            "projects/components/src/directive/drag-sort/DragSort.stories.ts": [
                {
                    "name": "dragSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DragSortModule],\n  },\n  props: {\n    items: [\n      {\n        id: 0,\n        name: 0,\n      },\n      {\n        id: 1,\n        name: 1,\n      },\n      {\n        id: 2,\n        name: 2,\n      },\n      {\n        id: 3,\n        name: 3,\n      },\n    ],\n    update: (event: DragSortEvent<any>, list: any[]) => {\n      return ArrayUtil.moveItem(list, event.previousIndex, event.newIndex);\n    },\n  },\n  template: `<div tetaDragSortContainer\n                  (dragSorted)=\"items = update($event, items)\"\n                  [dragSortList]=\"items\"\n                  class=\"padding-10 margin-10 row row_auto border border-text-5\">\n              <div [tetaDragSortItem]=\"item\"\n                    *ngFor=\"let item of items\"\n                    class=\"padding-4 border border-text-10\">\n                {{item.name}}\n              </div>\n            </div>\n            <div tetaDragSortContainer\n                  (dragSorted)=\"items = update($event, items)\"\n                  [dragSortList]=\"items\"\n                  class=\"padding-10 margin-10 column row_auto border border-text-5\">\n              <div [tetaDragSortItem]=\"item\"\n                    [dragSortDirection]=\"'vertical'\"\n                    *ngFor=\"let item of items\"\n                    class=\"padding-4 border border-text-10\">\n                {{item.name}}\n              </div>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/component/dropdown/Dropdown.stories.ts": [
                {
                    "name": "dropdownComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DropdownModule, ButtonModule, IconModule]\n  },\n  props: {\n    align: select('align', {\n      left: Align.left,\n      right: Align.right,\n      center: Align.center,\n      auto: Align.auto\n    }, Align.left),\n    verticalAlign: [\n      VerticalAlign.bottom,\n      VerticalAlign.top,\n      VerticalAlign.center,\n      VerticalAlign.auto],\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob('autoCloseIgnore', {\n      esc: 'esc',\n      enter: 'enter',\n      inside: 'inside',\n      outside: 'outside'\n    }, ['inside'], {\n      display: 'check',\n    })\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-dropdown *ngFor=\"let valign of verticalAlign\"\n                    [align]=\"align\"\n                    [verticalAlign]=\"valign\"\n                    [autoClose]=\"autoClose\"\n                    [autoCloseIgnore]=\"autoCloseIgnore\">\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\n        Click to open\n      </button>\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n        </div>\n        <div class=\"list-item\">\n          <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n        </div>\n      </div>\n    </teta-dropdown>\n  </div>`\n})"
                },
                {
                    "name": "dropdownDirective",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DropdownModule, ButtonModule, IconModule]\n  },\n  props: {\n    align: select('align', {\n      left: Align.left,\n      right: Align.right,\n      center: Align.center,\n      auto: Align.auto\n    }, Align.left),\n    verticalAlign: [\n      VerticalAlign.bottom,\n      VerticalAlign.top,\n      VerticalAlign.center,\n      VerticalAlign.auto],\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob('autoCloseIgnore', {\n      esc: 'esc',\n      enter: 'enter',\n      inside: 'inside',\n      outside: 'outside'\n    }, ['inside'], {\n      display: 'check',\n    })\n  },\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <div tetaDropdown\n          class=\"margin-right-4\"\n          *ngFor=\"let valign of verticalAlign\"\n          [align]=\"align\"\n          [verticalAlign]=\"valign\"\n          [autoClose]=\"autoClose\"\n          [autoCloseIgnore]=\"autoCloseIgnore\">\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\n      Click to open\n      </button>\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\n        <ng-container *ngFor=\"let i of [1,2,3]\">\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\n          </div>\n          <div class=\"list-item\">\n            <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>`\n})"
                }
            ],
            "projects/components/src/component/filter/contarct/filter-component-map.ts": [
                {
                    "name": "filterComponentsMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<FilterType, Type<any>>",
                    "defaultValue": "new Map<\n  FilterType,\n  Type<any>\n>()\n  .set(FilterType.number, NumericFilterComponent)\n  .set(FilterType.date, DateFilterComponent)\n  .set(FilterType.list, ListFilterComponent)\n  .set(FilterType.string, StringFilterComponent)\n  .set(FilterType.boolean, BooleanFilterComponent)\n  .set(FilterType.custom, StringFilterComponent)"
                },
                {
                    "name": "getFilterComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item: FilterItem): Type<any> =>\n  filterComponentsMap.has(item.filterType)\n    ? filterComponentsMap.get(item.filterType)\n    : StringFilterComponent"
                }
            ],
            "projects/components/src/pipe/util/number-helper.ts": [
                {
                    "name": "formatNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  value: any,\n  decimalLength: number,\n  chunkDelimiter: string,\n  decimalDelimiter: string,\n  chunkLength: number\n) => {\n  const abs = Math.abs(value);\n  if (0 < abs && 1 > abs) {\n    const firstDigitIndex = Math.floor(Math.abs(Math.log10(abs)));\n    decimalLength += firstDigitIndex;\n  }\n  const precision = Math.min(getPrecision(value), Math.floor(decimalLength));\n  const result =\n    '\\\\d(?=(\\\\d{' + chunkLength + '})+' + (precision > 0 ? '\\\\D' : '$') + ')';\n  const num = value.toFixed(precision);\n  return (decimalDelimiter ? num.replace('.', decimalDelimiter) : num).replace(\n    new RegExp(result, 'g'),\n    '$&' + chunkDelimiter\n  );\n}"
                },
                {
                    "name": "getPrecision",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: number) => {\n  if (!isFinite(a)) {\n    return 0;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(a * e) / e !== a) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}"
                },
                {
                    "name": "prependZero",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(input: number, length: number) =>\n  ('0'.repeat(length) + input).slice(-length)"
                }
            ],
            "projects/components/src/directive/hint/Hint.stories.ts": [
                {
                    "name": "fromString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/hint/Hint.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [HintModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n    delay: number('delay', 0, {\n      max: 5000,\n      min: 0,\n      range: true,\n      step: 100,\n    }),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n              <button teta-button\n                     [palette]=\"'primary'\"\n                     [tetaHint]=\"'You can get it now, right?'\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [delay]=\"delay\"\n                     [className]=\"'one'\">\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                Hover me\n              </button>\n            </div>`,\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/hint/Hint.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [HintModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    test: 'AAAAA',\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n    delay: number('delay', 0, {\n      max: 5000,\n      min: 0,\n      range: true,\n      step: 100,\n    }),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n              <ng-template #hint>\n                <div>{{test}}</div>\n              </ng-template>\n              <button teta-button\n                     [palette]=\"'primary'\"\n                     [tetaHint]=\"hint\"\n                     [align]=\"align\"\n                     [verticalAlign]=\"verticalAlign\"\n                     [delay]=\"delay\"\n                     [className]=\"'one'\">\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                Hover me\n              </button>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/directive/tooltip/Tooltip.stories.ts": [
                {
                    "name": "fromString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TooltipModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n                <button teta-button\n                         [palette]=\"'primary'\"\n                         [tetaTooltip]=\"'You can get it now, right?'\"\n                         [align]=\"align\"\n                         [verticalAlign]=\"verticalAlign\"\n                         [className]=\"'one'\">\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                  Click me\n                </button>\n              </div>`,\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [TooltipModule, ButtonModule, IconModule],\n    entryComponents: [PopupContentComponent],\n  },\n  props: {\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n      },\n      Align.center\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.top\n    ),\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\n                <ng-template #hint>\n                  From template\n                </ng-template>\n                <button teta-button\n                         [palette]=\"'primary'\"\n                         [tetaTooltip]=\"hint\"\n                         [align]=\"align\"\n                         [verticalAlign]=\"verticalAlign\"\n                         [className]=\"'one'\">\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\n                  Click me\n                </button>\n              </div>`,\n})"
                }
            ],
            "projects/components/src/component/select/Select.stories.ts": [
                {
                    "name": "getOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(size) => {\n  const res = [];\n  for (let i = 0; i < size; i++) {\n    res.push({\n      id: i,\n      name: faker.address.city(),\n    });\n  }\n  return res;\n}"
                },
                {
                    "name": "multipleCustom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: select('icon', iconsList, null),\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 300px;\"\n                  [options]=\"options\"\n                  [multiple]=\"true\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [valueRef]=\"'id'\"\n                  [textRef]=\"'name'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n      <ng-template tetaSelectValue let-value>\n      <div class=\"row row_auto overflow-hidden\">\n        <div *ngFor=\"let item of value\" class=\"color-red-50\">\n          {{item?.name}},\n        </div>\n      </div>\n      </ng-template>\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
                },
                {
                    "name": "multipleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: select('icon', iconsList, null),\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 300px;\"\n                  [options]=\"options\"\n                  [multiple]=\"true\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [valueRef]=\"'id'\"\n                  [textRef]=\"'name'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n<!--      <ng-template tetaSelectValue let-value>-->\n<!--        {{value?.name}}-->\n<!--      </ng-template>-->\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
                },
                {
                    "name": "singleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SelectModule, IconModule, FormsModule],\n  },\n  props: {\n    icon: 'user',\n    options: getOptions(10),\n    align: select(\n      'align',\n      {\n        left: Align.left,\n        right: Align.right,\n        center: Align.center,\n        auto: Align.auto,\n        fitWidth: Align.fitWidth,\n      },\n      Align.fitWidth\n    ),\n    verticalAlign: select(\n      'verticalAlign',\n      {\n        bottom: VerticalAlign.bottom,\n        top: VerticalAlign.top,\n        center: VerticalAlign.center,\n        auto: VerticalAlign.auto,\n      },\n      VerticalAlign.bottom\n    ),\n    autoClose: boolean('autoClose', true),\n    virtual: boolean('virtual', false),\n    autoCloseIgnore: optionsKnob(\n      'autoCloseIgnore',\n      {\n        esc: 'esc',\n        enter: 'enter',\n        inside: 'inside',\n        outside: 'outside',\n      },\n      ['inside'],\n      {\n        display: 'check',\n      }\n    ),\n    selected: null,\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-select  style=\"width: 200px;\"\n                  [options]=\"options\"\n                  [icon]=\"icon\"\n                  [align]=\"align\"\n                  [verticalAlign]=\"verticalAlign\"\n                  [ngModel]=\"selected\"\n                  (ngModelChange)=\"selected = $event\"\n                  [searchRef]=\"'name'\"\n                  [textRef]=\"'name'\"\n                  [virtual]=\"virtual\"\n                  [valueRef]=\"'id'\"\n                  [autoClose]=\"autoClose\"\n                  [autoCloseIgnore]=\"autoCloseIgnore\"\n                  [disabled]=\"false\">\n      <ng-template tetaSelectOption let-option>\n        {{option.name}}\n      </ng-template>\n      <ng-template tetaSelectValue let-value>\n        {{value?.name}}\n      </ng-template>\n    </teta-select>\n    <div class=\"margin-top-3\">\n      value: {{selected | json}}\n    </div>\n  </div>`,\n})"
                }
            ],
            "projects/components/src/component/delimiter/Delimiter.stories.ts": [
                {
                    "name": "horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DelimiterModule, ButtonModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <button teta-button [palette]=\"'primary'\">\n      <teta-icon [name]=\"'settings'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'add'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'delete'\"></teta-icon>\n    </button>\n  </div>`,\n})"
                },
                {
                    "name": "vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DelimiterModule, ButtonModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <button teta-button [palette]=\"'primary'\">\n      <teta-icon [name]=\"'settings'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'add'\"></teta-icon>\n    </button>\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\n      <teta-icon [name]=\"'delete'\"></teta-icon>\n    </button>\n  </div>`,\n})"
                }
            ],
            "projects/components/src/component/resize-panel/Resize.stories.ts": [
                {
                    "name": "horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ResizePanelModule],\n  },\n  props: {\n    maxSize: number('maxSize', 500, {\n      min: 300,\n      max: 450,\n      range: true,\n      step: 10,\n    }),\n    minSize: number('minSize', 50, {\n      min: 50,\n      max: 150,\n      range: true,\n      step: 10,\n    }),\n    grabPosition: select('grabPosition', ['left', 'right'], 'left'),\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <div class=\"row bg-white-50\"\n                      style=\"width: 500px; height: 500px;\">\n                  <div class=\"column_6 bg-primary-5\">\n                    I will surrender\n                  </div>\n                  <teta-resize-panel\n                        [maxSize]=\"maxSize\"\n                        [minSize]=\"minSize\"\n                        [direction]=\"'vertical'\"\n                        [grabPosition]=\"grabPosition\"\n                        class=\"column_6 bg-red-5\">\n                    I will resize\n                  </teta-resize-panel>\n                </div>\n              </div>`,\n})"
                },
                {
                    "name": "vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ResizePanelModule],\n  },\n  props: {\n    maxSize: number('maxSize', 500, {\n      min: 300,\n      max: 450,\n      range: true,\n      step: 10,\n    }),\n    minSize: number('minSize', 50, {\n      min: 50,\n      max: 150,\n      range: true,\n      step: 10,\n    }),\n    grabPosition: select('grabPosition', ['top', 'bottom'], 'top'),\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <div class=\"column bg-white-50\"\n                      style=\"width: 500px; height: 500px;\">\n                  <div class=\"row_6 bg-primary-5\">\n                    I will surrender\n                  </div>\n                  <teta-resize-panel\n                        [maxSize]=\"maxSize\"\n                        [minSize]=\"minSize\"\n                        [direction]=\"'horizontal'\"\n                        [grabPosition]=\"grabPosition\"\n                        class=\"row_6 bg-red-5\">\n                    I will resize\n                  </teta-resize-panel>\n                </div>\n              </div>`,\n})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/components/src/component/message/Message.stories.ts": [
                {
                    "name": "messageSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/message/Message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [MessageSamplesModule]\n  },\n  template: `<teta-message-sample></teta-message-sample>`,\n})"
                }
            ],
            "projects/components/src/component/date-picker/month-picker/month-picker.component.ts": [
                {
                    "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MonthPickerComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/date-picker/MonthPicker.stories.ts": [
                {
                    "name": "monthPicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [DatePickerModule, IconModule, FormsModule],\n  },\n  props: {\n    date: new Date(),\n    log: (name, value) => {\n      action(name)(value);\n    },\n    getDate: (num) => new Date(num),\n  },\n  template: `<teta-month-picker [tetaIconSprite]=\"'assets/icons.svg'\"\n                                [ngModel]=\"date\"\n                                (ngModelChange)=\"log('date', $event)\"></teta-month-picker>`,\n})"
                }
            ],
            "projects/components/src/component/tabs/tab/tab.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tabs/tab/tab.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/directive/only-number/OnlyNumber.stories.ts": [
                {
                    "name": "onlyNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [OnlyNumberModule, FormsModule],\n  },\n  props: {\n    data: 123,\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\n                <input tetaOnlyNumber\n                        class=\"input\"\n                        [ngModel]=\"data\"\n                        (ngModelChange)=\"data=$event;log('tetaOnlyNumber', $event)\"/>\n                <div>{{data}}</div>\n              </div>`,\n})"
                }
            ],
            "projects/components/src/component/pager/Pager.stories.ts": [
                {
                    "name": "pagerSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/pager/Pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [PagerModule, IconModule]\n  },\n  template: `<teta-pager [tetaIconSprite]=\"'assets/icons.svg'\"></teta-pager>`,\n})"
                }
            ],
            "projects/components/src/component/expand-panel/ExpandPanel.stories.ts": [
                {
                    "name": "panel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ExpandPanelModule],\n  },\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\n    <teta-expand-panel></teta-expand-panel>\n  </div>`,\n})"
                }
            ],
            "projects/components/src/component/chart/chart-data.ts": [
                {
                    "name": "points1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/chart-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    x: 1619169153454,\n    y: 0,\n  },\n  {\n    x: 1619268153454,\n    y: 40,\n  },\n  {\n    x: 1619286153454,\n    y: 40,\n  },\n  {\n    x: 1619289969454,\n    y: 40,\n  },\n  {\n    x: 1619308689454,\n    y: 170,\n  },\n  {\n    x: 1619319705454,\n    y: 170,\n  },\n  {\n    x: 1619321505454,\n    y: 170,\n  },\n  {\n    x: 1619326289854,\n    y: 170,\n  },\n  {\n    x: 1619328575854,\n    y: 170,\n  },\n  {\n    x: 1619394095854,\n    y: 625,\n  },\n  {\n    x: 1619419169854,\n    y: 625,\n  },\n  {\n    x: 1619443124693,\n    y: 625,\n  },\n  {\n    x: 1619462996693,\n    y: 625,\n  },\n  {\n    x: 1619465300693,\n    y: 625,\n  },\n  {\n    x: 1619467100693,\n    y: 625,\n  },\n  {\n    x: 1619476532693,\n    y: 625,\n  },\n  {\n    x: 1619481338693,\n    y: 625,\n  },\n  {\n    x: 1619486144693,\n    y: 625,\n  },\n  {\n    x: 1619495576693,\n    y: 625,\n  },\n  {\n    x: 1619499176693,\n    y: 625,\n  },\n  {\n    x: 1619500976693,\n    y: 625,\n  },\n  {\n    x: 1619510408693,\n    y: 625,\n  },\n  {\n    x: 1619512208693,\n    y: 625,\n  },\n  {\n    x: 1619515088693,\n    y: 625,\n  },\n  {\n    x: 1619529488693,\n    y: 625,\n  },\n  {\n    x: 1619543888693,\n    y: 625,\n  },\n  {\n    x: 1619556920693,\n    y: 625,\n  },\n  {\n    x: 1619560520693,\n    y: 625,\n  },\n  {\n    x: 1619562320693,\n    y: 625,\n  },\n  {\n    x: 1619570960693,\n    y: 625,\n  },\n  {\n    x: 1619581760693,\n    y: 625,\n  },\n  {\n    x: 1619594360693,\n    y: 625,\n  },\n  {\n    x: 1619597960693,\n    y: 625,\n  },\n  {\n    x: 1619633744693,\n    y: 625,\n  },\n  {\n    x: 1619637560693,\n    y: 625,\n  },\n  {\n    x: 1619641160693,\n    y: 625,\n  },\n  {\n    x: 1619649296693,\n    y: 625,\n  },\n  {\n    x: 1619706896693,\n    y: 625,\n  },\n  {\n    x: 1619836496693,\n    y: 625,\n  },\n  {\n    x: 1619843142293,\n    y: 625,\n  },\n  {\n    x: 1619861142293,\n    y: 625,\n  },\n  {\n    x: 1619862942293,\n    y: 625,\n  },\n  {\n    x: 1619872050293,\n    y: 625,\n  },\n  {\n    x: 1619878170293,\n    y: 625,\n  },\n  {\n    x: 1619891130293,\n    y: 625,\n  },\n  {\n    x: 1619896062293,\n    y: 625,\n  },\n  {\n    x: 1619977659893,\n    y: 965,\n  },\n  {\n    x: 1619998179893,\n    y: 965,\n  },\n  {\n    x: 1620016503893,\n    y: 965,\n  },\n  {\n    x: 1620042405893,\n    y: 965,\n  },\n  {\n    x: 1620222405893,\n    y: 1115,\n  },\n  {\n    x: 1620233043893,\n    y: 1115,\n  },\n  {\n    x: 1620245049893,\n    y: 1115,\n  },\n  {\n    x: 1620253491893,\n    y: 1115,\n  },\n  {\n    x: 1620257559893,\n    y: 1115,\n  },\n  {\n    x: 1620259359893,\n    y: 1115,\n  },\n  {\n    x: 1620277521893,\n    y: 1115,\n  },\n  {\n    x: 1620279321893,\n    y: 1115,\n  },\n  {\n    x: 1620281571893,\n    y: 1115,\n  },\n  {\n    x: 1620282291893,\n    y: 1115,\n  },\n  {\n    x: 1620296691893,\n    y: 1115,\n  },\n  {\n    x: 1620314691893,\n    y: 1115,\n  },\n  {\n    x: 1620317661893,\n    y: 1115,\n  },\n  {\n    x: 1620318381893,\n    y: 1115,\n  },\n  {\n    x: 1620320181893,\n    y: 1115,\n  },\n  {\n    x: 1620340143893,\n    y: 1115,\n  },\n  {\n    x: 1620345543893,\n    y: 1115,\n  },\n  {\n    x: 1620346083893,\n    y: 1115,\n  },\n  {\n    x: 1620510003893,\n    y: 1798,\n  },\n  {\n    x: 1620547674861,\n    y: 1798,\n  },\n  {\n    x: 1620577339377,\n    y: 1798,\n  },\n  {\n    x: 1620624661377,\n    y: 1798,\n  },\n  {\n    x: 1620743221377,\n    y: 2292,\n  },\n  {\n    x: 1620767892345,\n    y: 2292,\n  },\n  {\n    x: 1620783002022,\n    y: 2292,\n  },\n  {\n    x: 1620827498022,\n    y: 2292,\n  },\n  {\n    x: 1620832406934,\n    y: 2292,\n  },\n  {\n    x: 1620834206934,\n    y: 2292,\n  },\n  {\n    x: 1620870112737,\n    y: 2292,\n  },\n  {\n    x: 1620875021649,\n    y: 2292,\n  },\n  {\n    x: 1620876821649,\n    y: 2292,\n  },\n  {\n    x: 1620912176488,\n    y: 2292,\n  },\n  {\n    x: 1620924795843,\n    y: 2292,\n  },\n  {\n    x: 1620926595843,\n    y: 2292,\n  },\n  {\n    x: 1620940995843,\n    y: 2292,\n  },\n  {\n    x: 1620953775843,\n    y: 2292,\n  },\n  {\n    x: 1621117359843,\n    y: 2292,\n  },\n  {\n    x: 1621128159843,\n    y: 2292,\n  },\n  {\n    x: 1621133559843,\n    y: 2292,\n  },\n  {\n    x: 1621135359843,\n    y: 2292,\n  },\n  {\n    x: 1621170355172,\n    y: 2292,\n  },\n  {\n    x: 1621175893185,\n    y: 2292,\n  },\n  {\n    x: 1621177693185,\n    y: 2292,\n  },\n  {\n    x: 1621213045185,\n    y: 2292,\n  },\n  {\n    x: 1621221445185,\n    y: 2292,\n  },\n  {\n    x: 1621223245185,\n    y: 2292,\n  },\n  {\n    x: 1621234045185,\n    y: 2292,\n  },\n  {\n    x: 1621235125185,\n    y: 2292,\n  },\n  {\n    x: 1621245325185,\n    y: 2292,\n  },\n  {\n    x: 1621332870640,\n    y: 2292,\n  },\n  {\n    x: 1621334776066,\n    y: 2292,\n  },\n  {\n    x: 1621339254466,\n    y: 2292,\n  },\n  {\n    x: 1621353013666,\n    y: 2292,\n  },\n  {\n    x: 1621410613666,\n    y: 2292,\n  },\n  {\n    x: 1623114330638,\n    y: 2292,\n  },\n  {\n    x: 1623157530638,\n    y: 2292,\n  },\n  {\n    x: 1623175530638,\n    y: 2292,\n  },\n  {\n    x: 1623177330638,\n    y: 2292,\n  },\n  {\n    x: 1623253831799,\n    y: 2292,\n  },\n  {\n    x: 1623260653799,\n    y: 2292,\n  },\n  {\n    x: 1623266371114,\n    y: 2292,\n  },\n  {\n    x: 1623288223114,\n    y: 2292,\n  },\n  {\n    x: 1623306943114,\n    y: 2292,\n  },\n  {\n    x: 1623371023114,\n    y: 2470,\n  },\n  {\n    x: 1623377485049,\n    y: 2470,\n  },\n  {\n    x: 1623392414081,\n    y: 2470,\n  },\n  {\n    x: 1623398156016,\n    y: 2470,\n  },\n  {\n    x: 1623409205789,\n    y: 2470,\n  },\n  {\n    x: 1623411005789,\n    y: 2470,\n  },\n  {\n    x: 1623446425144,\n    y: 2470,\n  },\n  {\n    x: 1623460825144,\n    y: 2470,\n  },\n  {\n    x: 1623489625144,\n    y: 2470,\n  },\n  {\n    x: 1623525044499,\n    y: 2470,\n  },\n  {\n    x: 1623547488370,\n    y: 2470,\n  },\n  {\n    x: 1623606888370,\n    y: 2800,\n  },\n  {\n    x: 1623611053531,\n    y: 2800,\n  },\n  {\n    x: 1623626130950,\n    y: 2800,\n  },\n  {\n    x: 1623629576111,\n    y: 2800,\n  },\n  {\n    x: 1623638576111,\n    y: 2800,\n  },\n  {\n    x: 1623640376111,\n    y: 2800,\n  },\n  {\n    x: 1623657746735,\n    y: 2800,\n  },\n  {\n    x: 1623665133195,\n    y: 2800,\n  },\n  {\n    x: 1623666933195,\n    y: 2800,\n  },\n  {\n    x: 1623769533195,\n    y: 3370,\n  },\n  {\n    x: 1623786840292,\n    y: 3370,\n  },\n  {\n    x: 1623811246744,\n    y: 3370,\n  },\n  {\n    x: 1623827833841,\n    y: 3370,\n  },\n  {\n    x: 1623833965487,\n    y: 3370,\n  },\n  {\n    x: 1623835765487,\n    y: 3370,\n  },\n  {\n    x: 1623864987401,\n    y: 3370,\n  },\n  {\n    x: 1623873807401,\n    y: 3370,\n  },\n  {\n    x: 1623875607401,\n    y: 3370,\n  },\n  {\n    x: 1623921939401,\n    y: 3370,\n  },\n  {\n    x: 1623939939401,\n    y: 3370,\n  },\n  {\n    x: 1623941739401,\n    y: 3370,\n  },\n  {\n    x: 1623954963401,\n    y: 3370,\n  },\n  {\n    x: 1624010025401,\n    y: 3370,\n  },\n  {\n    x: 1624027521401,\n    y: 3370,\n  },\n  {\n    x: 1624034478401,\n    y: 3370,\n  },\n  {\n    x: 1624050191401,\n    y: 3370,\n  },\n  {\n    x: 1624062755401,\n    y: 3370,\n  },\n  {\n    x: 1624075193401,\n    y: 3370,\n  },\n  {\n    x: 1624087205401,\n    y: 3370,\n  },\n  {\n    x: 1624090805401,\n    y: 3370,\n  },\n  {\n    x: 1624142681401,\n    y: 3370,\n  },\n  {\n    x: 1624171481401,\n    y: 3370,\n  },\n  {\n    x: 1624196681401,\n    y: 3370,\n  },\n  {\n    x: 1624218641401,\n    y: 3370,\n  },\n  {\n    x: 1624229801401,\n    y: 3370,\n  },\n]"
                },
                {
                    "name": "points2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/chart-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    x: 1618206576000,\n    y: 1257,\n  },\n  {\n    x: 1618242001000,\n    y: 1257.17,\n  },\n  {\n    x: 1618242006000,\n    y: 1257.48,\n  },\n  {\n    x: 1618242011000,\n    y: 1257.49,\n  },\n  {\n    x: 1618329491000,\n    y: 1257.5,\n  },\n  {\n    x: 1618329501000,\n    y: 1257.51,\n  },\n  {\n    x: 1618329511000,\n    y: 1257.52,\n  },\n  {\n    x: 1618329516000,\n    y: 1257.53,\n  },\n  {\n    x: 1618329521000,\n    y: 1257.54,\n  },\n  {\n    x: 1618329536000,\n    y: 1257.56,\n  },\n  {\n    x: 1618329546000,\n    y: 1257.57,\n  },\n  {\n    x: 1618329556000,\n    y: 1257.58,\n  },\n  {\n    x: 1618329566000,\n    y: 1257.59,\n  },\n  {\n    x: 1618329571000,\n    y: 1257.6,\n  },\n  {\n    x: 1618329576000,\n    y: 1257.61,\n  },\n  {\n    x: 1618329591000,\n    y: 1257.62,\n  },\n  {\n    x: 1618329596000,\n    y: 1257.63,\n  },\n  {\n    x: 1618329606000,\n    y: 1257.64,\n  },\n  {\n    x: 1618329616000,\n    y: 1257.65,\n  },\n  {\n    x: 1618329621000,\n    y: 1257.66,\n  },\n  {\n    x: 1618329631000,\n    y: 1257.67,\n  },\n  {\n    x: 1618329636000,\n    y: 1257.68,\n  },\n  {\n    x: 1618329666000,\n    y: 1257.7,\n  },\n  {\n    x: 1618329676000,\n    y: 1257.71,\n  },\n  {\n    x: 1618329681000,\n    y: 1257.72,\n  },\n  {\n    x: 1618329686000,\n    y: 1257.74,\n  },\n  {\n    x: 1618329701000,\n    y: 1257.75,\n  },\n  {\n    x: 1618329716000,\n    y: 1257.76,\n  },\n  {\n    x: 1618329751000,\n    y: 1257.78,\n  },\n  {\n    x: 1618329766000,\n    y: 1257.82,\n  },\n  {\n    x: 1618329776000,\n    y: 1257.83,\n  },\n  {\n    x: 1618329781000,\n    y: 1257.84,\n  },\n  {\n    x: 1618329786000,\n    y: 1257.85,\n  },\n  {\n    x: 1618329791000,\n    y: 1257.86,\n  },\n  {\n    x: 1618329796000,\n    y: 1257.87,\n  },\n  {\n    x: 1618329801000,\n    y: 1257.88,\n  },\n  {\n    x: 1618329811000,\n    y: 1257.89,\n  },\n  {\n    x: 1618329816000,\n    y: 1257.9,\n  },\n  {\n    x: 1618329836000,\n    y: 1257.91,\n  },\n  {\n    x: 1618329841000,\n    y: 1257.92,\n  },\n  {\n    x: 1618329856000,\n    y: 1257.93,\n  },\n  {\n    x: 1618329861000,\n    y: 1257.94,\n  },\n  {\n    x: 1618329876000,\n    y: 1257.95,\n  },\n  {\n    x: 1618329896000,\n    y: 1257.96,\n  },\n  {\n    x: 1618329906000,\n    y: 1257.97,\n  },\n  {\n    x: 1618329931000,\n    y: 1257.98,\n  },\n  {\n    x: 1618329936000,\n    y: 1258,\n  },\n  {\n    x: 1618329976000,\n    y: 1258.02,\n  },\n  {\n    x: 1618330011000,\n    y: 1258.03,\n  },\n  {\n    x: 1618330051000,\n    y: 1258.04,\n  },\n  {\n    x: 1618330061000,\n    y: 1258.05,\n  },\n  {\n    x: 1618330081000,\n    y: 1258.06,\n  },\n  {\n    x: 1618330106000,\n    y: 1258.07,\n  },\n  {\n    x: 1618330126000,\n    y: 1258.08,\n  },\n  {\n    x: 1618330146000,\n    y: 1258.1,\n  },\n  {\n    x: 1618330161000,\n    y: 1258.11,\n  },\n  {\n    x: 1618330166000,\n    y: 1258.12,\n  },\n  {\n    x: 1618330186000,\n    y: 1258.13,\n  },\n  {\n    x: 1618330191000,\n    y: 1258.14,\n  },\n  {\n    x: 1618330206000,\n    y: 1258.16,\n  },\n  {\n    x: 1618330221000,\n    y: 1258.17,\n  },\n  {\n    x: 1618330251000,\n    y: 1258.18,\n  },\n  {\n    x: 1618330261000,\n    y: 1258.19,\n  },\n  {\n    x: 1618330276000,\n    y: 1258.2,\n  },\n  {\n    x: 1618330291000,\n    y: 1258.21,\n  },\n  {\n    x: 1618330296000,\n    y: 1258.22,\n  },\n  {\n    x: 1618330316000,\n    y: 1258.23,\n  },\n  {\n    x: 1618330321000,\n    y: 1258.24,\n  },\n  {\n    x: 1618330346000,\n    y: 1258.25,\n  },\n  {\n    x: 1618330356000,\n    y: 1258.27,\n  },\n  {\n    x: 1618330381000,\n    y: 1258.28,\n  },\n  {\n    x: 1618330391000,\n    y: 1258.29,\n  },\n  {\n    x: 1618330411000,\n    y: 1258.3,\n  },\n  {\n    x: 1618330416000,\n    y: 1258.31,\n  },\n  {\n    x: 1618330431000,\n    y: 1258.32,\n  },\n  {\n    x: 1618330441000,\n    y: 1258.34,\n  },\n  {\n    x: 1618330451000,\n    y: 1258.35,\n  },\n  {\n    x: 1618330471000,\n    y: 1258.36,\n  },\n  {\n    x: 1618330486000,\n    y: 1258.37,\n  },\n  {\n    x: 1618330501000,\n    y: 1258.38,\n  },\n  {\n    x: 1618330511000,\n    y: 1258.39,\n  },\n  {\n    x: 1618330516000,\n    y: 1258.41,\n  },\n  {\n    x: 1618330526000,\n    y: 1258.42,\n  },\n  {\n    x: 1618330546000,\n    y: 1258.43,\n  },\n  {\n    x: 1618330571000,\n    y: 1258.44,\n  },\n  {\n    x: 1618330586000,\n    y: 1258.45,\n  },\n  {\n    x: 1618330601000,\n    y: 1258.46,\n  },\n  {\n    x: 1618330611000,\n    y: 1258.48,\n  },\n  {\n    x: 1618330641000,\n    y: 1258.5,\n  },\n  {\n    x: 1618330661000,\n    y: 1258.51,\n  },\n  {\n    x: 1618330676000,\n    y: 1258.52,\n  },\n  {\n    x: 1618330691000,\n    y: 1258.53,\n  },\n  {\n    x: 1618330696000,\n    y: 1258.54,\n  },\n  {\n    x: 1618330721000,\n    y: 1258.55,\n  },\n  {\n    x: 1618330746000,\n    y: 1258.58,\n  },\n  {\n    x: 1618330751000,\n    y: 1258.59,\n  },\n  {\n    x: 1618330761000,\n    y: 1258.6,\n  },\n  {\n    x: 1618330776000,\n    y: 1258.61,\n  },\n  {\n    x: 1618330786000,\n    y: 1258.62,\n  },\n  {\n    x: 1618330801000,\n    y: 1258.63,\n  },\n  {\n    x: 1618330831000,\n    y: 1258.65,\n  },\n  {\n    x: 1618330841000,\n    y: 1258.66,\n  },\n  {\n    x: 1618330856000,\n    y: 1258.67,\n  },\n  {\n    x: 1618330876000,\n    y: 1258.7,\n  },\n  {\n    x: 1618330906000,\n    y: 1258.71,\n  },\n  {\n    x: 1618330921000,\n    y: 1258.72,\n  },\n  {\n    x: 1618330926000,\n    y: 1258.74,\n  },\n  {\n    x: 1618330936000,\n    y: 1258.75,\n  },\n  {\n    x: 1618330941000,\n    y: 1258.77,\n  },\n  {\n    x: 1618330971000,\n    y: 1258.78,\n  },\n  {\n    x: 1618330981000,\n    y: 1258.79,\n  },\n  {\n    x: 1618330991000,\n    y: 1258.8,\n  },\n  {\n    x: 1618330996000,\n    y: 1258.84,\n  },\n  {\n    x: 1618331011000,\n    y: 1258.85,\n  },\n  {\n    x: 1618331026000,\n    y: 1258.86,\n  },\n  {\n    x: 1618331041000,\n    y: 1258.87,\n  },\n  {\n    x: 1618331051000,\n    y: 1258.89,\n  },\n  {\n    x: 1618331056000,\n    y: 1258.9,\n  },\n  {\n    x: 1618331066000,\n    y: 1258.91,\n  },\n  {\n    x: 1618331081000,\n    y: 1258.92,\n  },\n  {\n    x: 1618331096000,\n    y: 1258.94,\n  },\n  {\n    x: 1618331106000,\n    y: 1258.96,\n  },\n  {\n    x: 1618331116000,\n    y: 1258.97,\n  },\n  {\n    x: 1618331126000,\n    y: 1258.98,\n  },\n  {\n    x: 1618331131000,\n    y: 1259,\n  },\n  {\n    x: 1618331136000,\n    y: 1259.02,\n  },\n  {\n    x: 1618331191000,\n    y: 1259.03,\n  },\n  {\n    x: 1618331196000,\n    y: 1259.05,\n  },\n  {\n    x: 1618331206000,\n    y: 1259.07,\n  },\n  {\n    x: 1618331241000,\n    y: 1259.09,\n  },\n  {\n    x: 1618331251000,\n    y: 1259.1,\n  },\n  {\n    x: 1618331266000,\n    y: 1259.11,\n  },\n  {\n    x: 1618331276000,\n    y: 1259.12,\n  },\n  {\n    x: 1618331306000,\n    y: 1259.13,\n  },\n  {\n    x: 1618331311000,\n    y: 1259.14,\n  },\n  {\n    x: 1618331331000,\n    y: 1259.16,\n  },\n  {\n    x: 1618331341000,\n    y: 1259.17,\n  },\n  {\n    x: 1618331346000,\n    y: 1259.19,\n  },\n  {\n    x: 1618331366000,\n    y: 1259.2,\n  },\n  {\n    x: 1618331381000,\n    y: 1259.21,\n  },\n  {\n    x: 1618331396000,\n    y: 1259.22,\n  },\n  {\n    x: 1618331401000,\n    y: 1259.23,\n  },\n  {\n    x: 1618331421000,\n    y: 1259.24,\n  },\n  {\n    x: 1618331426000,\n    y: 1259.25,\n  },\n  {\n    x: 1618331446000,\n    y: 1259.27,\n  },\n  {\n    x: 1618331466000,\n    y: 1259.28,\n  },\n  {\n    x: 1618331486000,\n    y: 1259.3,\n  },\n  {\n    x: 1618331511000,\n    y: 1259.32,\n  },\n  {\n    x: 1618331521000,\n    y: 1259.33,\n  },\n  {\n    x: 1618331526000,\n    y: 1259.34,\n  },\n  {\n    x: 1618331551000,\n    y: 1259.35,\n  },\n  {\n    x: 1618331561000,\n    y: 1259.36,\n  },\n  {\n    x: 1618331566000,\n    y: 1259.38,\n  },\n  {\n    x: 1618331586000,\n    y: 1259.4,\n  },\n  {\n    x: 1618331601000,\n    y: 1259.41,\n  },\n  {\n    x: 1618331606000,\n    y: 1259.42,\n  },\n  {\n    x: 1618331616000,\n    y: 1259.43,\n  },\n  {\n    x: 1618331631000,\n    y: 1259.44,\n  },\n  {\n    x: 1618331636000,\n    y: 1259.45,\n  },\n  {\n    x: 1618331651000,\n    y: 1259.46,\n  },\n  {\n    x: 1618331671000,\n    y: 1259.48,\n  },\n  {\n    x: 1618331676000,\n    y: 1259.5,\n  },\n  {\n    x: 1618331701000,\n    y: 1259.51,\n  },\n  {\n    x: 1618331716000,\n    y: 1259.52,\n  },\n  {\n    x: 1618331721000,\n    y: 1259.53,\n  },\n  {\n    x: 1618331726000,\n    y: 1259.54,\n  },\n  {\n    x: 1618331731000,\n    y: 1259.55,\n  },\n  {\n    x: 1618331751000,\n    y: 1259.56,\n  },\n  {\n    x: 1618331756000,\n    y: 1259.57,\n  },\n  {\n    x: 1618331761000,\n    y: 1259.58,\n  },\n  {\n    x: 1618331781000,\n    y: 1259.59,\n  },\n  {\n    x: 1618331796000,\n    y: 1259.61,\n  },\n  {\n    x: 1618331806000,\n    y: 1259.62,\n  },\n  {\n    x: 1618331816000,\n    y: 1259.63,\n  },\n  {\n    x: 1618331826000,\n    y: 1259.64,\n  },\n  {\n    x: 1618331836000,\n    y: 1259.65,\n  },\n  {\n    x: 1618331841000,\n    y: 1259.66,\n  },\n  {\n    x: 1618331851000,\n    y: 1259.67,\n  },\n  {\n    x: 1618331856000,\n    y: 1259.68,\n  },\n  {\n    x: 1618331866000,\n    y: 1259.69,\n  },\n  {\n    x: 1618331891000,\n    y: 1259.7,\n  },\n  {\n    x: 1618331896000,\n    y: 1259.71,\n  },\n  {\n    x: 1618331901000,\n    y: 1259.72,\n  },\n  {\n    x: 1618331911000,\n    y: 1259.74,\n  },\n  {\n    x: 1618331926000,\n    y: 1259.75,\n  },\n  {\n    x: 1618331936000,\n    y: 1259.77,\n  },\n  {\n    x: 1618331941000,\n    y: 1259.78,\n  },\n  {\n    x: 1618331951000,\n    y: 1259.8,\n  },\n  {\n    x: 1618331976000,\n    y: 1259.81,\n  },\n  {\n    x: 1618331991000,\n    y: 1259.82,\n  },\n  {\n    x: 1618332001000,\n    y: 1259.84,\n  },\n  {\n    x: 1618332011000,\n    y: 1259.85,\n  },\n  {\n    x: 1618332016000,\n    y: 1259.86,\n  },\n  {\n    x: 1618332026000,\n    y: 1259.87,\n  },\n  {\n    x: 1618332036000,\n    y: 1259.88,\n  },\n  {\n    x: 1618332056000,\n    y: 1259.89,\n  },\n  {\n    x: 1618332061000,\n    y: 1259.9,\n  },\n  {\n    x: 1618332076000,\n    y: 1259.91,\n  },\n  {\n    x: 1618332091000,\n    y: 1259.92,\n  },\n  {\n    x: 1618332101000,\n    y: 1259.93,\n  },\n  {\n    x: 1618332141000,\n    y: 1259.95,\n  },\n  {\n    x: 1618332151000,\n    y: 1259.97,\n  },\n  {\n    x: 1618332161000,\n    y: 1259.98,\n  },\n  {\n    x: 1618332166000,\n    y: 1260,\n  },\n  {\n    x: 1618332181000,\n    y: 1260.01,\n  },\n  {\n    x: 1618332186000,\n    y: 1260.03,\n  },\n  {\n    x: 1618332191000,\n    y: 1260.04,\n  },\n  {\n    x: 1618332196000,\n    y: 1260.05,\n  },\n  {\n    x: 1618332226000,\n    y: 1260.06,\n  },\n  {\n    x: 1618332241000,\n    y: 1260.07,\n  },\n  {\n    x: 1618332251000,\n    y: 1260.08,\n  },\n  {\n    x: 1618332261000,\n    y: 1260.09,\n  },\n  {\n    x: 1618332276000,\n    y: 1260.1,\n  },\n  {\n    x: 1618332281000,\n    y: 1260.11,\n  },\n  {\n    x: 1618332296000,\n    y: 1260.13,\n  },\n  {\n    x: 1618332311000,\n    y: 1260.14,\n  },\n  {\n    x: 1618332316000,\n    y: 1260.15,\n  },\n  {\n    x: 1618332326000,\n    y: 1260.16,\n  },\n  {\n    x: 1618332336000,\n    y: 1260.18,\n  },\n  {\n    x: 1618332356000,\n    y: 1260.19,\n  },\n  {\n    x: 1618332361000,\n    y: 1260.2,\n  },\n  {\n    x: 1618332371000,\n    y: 1260.21,\n  },\n  {\n    x: 1618332376000,\n    y: 1260.22,\n  },\n  {\n    x: 1618332391000,\n    y: 1260.23,\n  },\n  {\n    x: 1618332396000,\n    y: 1260.24,\n  },\n  {\n    x: 1618332416000,\n    y: 1260.25,\n  },\n  {\n    x: 1618332421000,\n    y: 1260.26,\n  },\n  {\n    x: 1618332436000,\n    y: 1260.27,\n  },\n  {\n    x: 1618332441000,\n    y: 1260.29,\n  },\n  {\n    x: 1618332456000,\n    y: 1260.3,\n  },\n  {\n    x: 1618332486000,\n    y: 1260.31,\n  },\n  {\n    x: 1618332491000,\n    y: 1260.32,\n  },\n  {\n    x: 1618332501000,\n    y: 1260.33,\n  },\n  {\n    x: 1618332516000,\n    y: 1260.34,\n  },\n  {\n    x: 1618332531000,\n    y: 1260.35,\n  },\n  {\n    x: 1618332546000,\n    y: 1260.36,\n  },\n  {\n    x: 1618332556000,\n    y: 1260.37,\n  },\n  {\n    x: 1618332566000,\n    y: 1260.38,\n  },\n  {\n    x: 1618332571000,\n    y: 1260.39,\n  },\n  {\n    x: 1618332581000,\n    y: 1260.4,\n  },\n  {\n    x: 1618332596000,\n    y: 1260.41,\n  },\n  {\n    x: 1618332606000,\n    y: 1260.42,\n  },\n  {\n    x: 1618332636000,\n    y: 1260.43,\n  },\n  {\n    x: 1618332666000,\n    y: 1260.44,\n  },\n  {\n    x: 1618332671000,\n    y: 1260.45,\n  },\n  {\n    x: 1618332681000,\n    y: 1260.46,\n  },\n  {\n    x: 1618332686000,\n    y: 1260.47,\n  },\n  {\n    x: 1618332696000,\n    y: 1260.48,\n  },\n  {\n    x: 1618332716000,\n    y: 1260.5,\n  },\n  {\n    x: 1618332741000,\n    y: 1260.51,\n  },\n  {\n    x: 1618332751000,\n    y: 1260.53,\n  },\n  {\n    x: 1618332761000,\n    y: 1260.54,\n  },\n  {\n    x: 1618332771000,\n    y: 1260.55,\n  },\n  {\n    x: 1618332811000,\n    y: 1260.56,\n  },\n  {\n    x: 1618332871000,\n    y: 1260.57,\n  },\n  {\n    x: 1618332886000,\n    y: 1260.58,\n  },\n  {\n    x: 1618332896000,\n    y: 1260.59,\n  },\n  {\n    x: 1618332911000,\n    y: 1260.6,\n  },\n  {\n    x: 1618332916000,\n    y: 1260.62,\n  },\n  {\n    x: 1618332926000,\n    y: 1260.63,\n  },\n  {\n    x: 1618332931000,\n    y: 1260.64,\n  },\n  {\n    x: 1618332936000,\n    y: 1260.65,\n  },\n  {\n    x: 1618332951000,\n    y: 1260.66,\n  },\n  {\n    x: 1618332976000,\n    y: 1260.67,\n  },\n  {\n    x: 1618332986000,\n    y: 1260.68,\n  },\n  {\n    x: 1618332991000,\n    y: 1260.69,\n  },\n  {\n    x: 1618333016000,\n    y: 1260.7,\n  },\n  {\n    x: 1618333046000,\n    y: 1260.72,\n  },\n  {\n    x: 1618333056000,\n    y: 1260.73,\n  },\n  {\n    x: 1618333066000,\n    y: 1260.75,\n  },\n  {\n    x: 1618333106000,\n    y: 1260.76,\n  },\n  {\n    x: 1618333126000,\n    y: 1260.77,\n  },\n  {\n    x: 1618333136000,\n    y: 1260.78,\n  },\n  {\n    x: 1618333146000,\n    y: 1260.79,\n  },\n  {\n    x: 1618333166000,\n    y: 1260.8,\n  },\n  {\n    x: 1618333176000,\n    y: 1260.82,\n  },\n  {\n    x: 1618333186000,\n    y: 1260.83,\n  },\n  {\n    x: 1618333206000,\n    y: 1260.84,\n  },\n  {\n    x: 1618333231000,\n    y: 1260.85,\n  },\n  {\n    x: 1618333256000,\n    y: 1260.86,\n  },\n  {\n    x: 1618333271000,\n    y: 1260.87,\n  },\n  {\n    x: 1618333296000,\n    y: 1260.88,\n  },\n  {\n    x: 1618333306000,\n    y: 1260.89,\n  },\n  {\n    x: 1618333311000,\n    y: 1260.9,\n  },\n  {\n    x: 1618333316000,\n    y: 1260.91,\n  },\n  {\n    x: 1618333331000,\n    y: 1260.92,\n  },\n  {\n    x: 1618333341000,\n    y: 1260.93,\n  },\n  {\n    x: 1618333361000,\n    y: 1260.94,\n  },\n  {\n    x: 1618333386000,\n    y: 1260.95,\n  },\n  {\n    x: 1618333421000,\n    y: 1260.96,\n  },\n  {\n    x: 1618333436000,\n    y: 1260.97,\n  },\n  {\n    x: 1618333451000,\n    y: 1260.98,\n  },\n  {\n    x: 1618333456000,\n    y: 1260.99,\n  },\n  {\n    x: 1618333466000,\n    y: 1261,\n  },\n  {\n    x: 1618333471000,\n    y: 1261.01,\n  },\n  {\n    x: 1618333481000,\n    y: 1261.02,\n  },\n  {\n    x: 1618333486000,\n    y: 1261.03,\n  },\n  {\n    x: 1618333511000,\n    y: 1261.04,\n  },\n  {\n    x: 1618333516000,\n    y: 1261.24,\n  },\n  {\n    x: 1618333811000,\n    y: 1261.25,\n  },\n  {\n    x: 1618333851000,\n    y: 1261.26,\n  },\n  {\n    x: 1618333861000,\n    y: 1261.27,\n  },\n  {\n    x: 1618333866000,\n    y: 1261.28,\n  },\n  {\n    x: 1618333881000,\n    y: 1261.29,\n  },\n  {\n    x: 1618333891000,\n    y: 1261.3,\n  },\n  {\n    x: 1618333901000,\n    y: 1261.31,\n  },\n  {\n    x: 1618333926000,\n    y: 1261.32,\n  },\n  {\n    x: 1618333931000,\n    y: 1261.33,\n  },\n  {\n    x: 1618333941000,\n    y: 1261.34,\n  },\n  {\n    x: 1618333956000,\n    y: 1261.35,\n  },\n  {\n    x: 1618333966000,\n    y: 1261.36,\n  },\n  {\n    x: 1618333986000,\n    y: 1261.37,\n  },\n  {\n    x: 1618333991000,\n    y: 1261.38,\n  },\n  {\n    x: 1618334001000,\n    y: 1261.39,\n  },\n  {\n    x: 1618334011000,\n    y: 1261.4,\n  },\n  {\n    x: 1618334026000,\n    y: 1261.41,\n  },\n  {\n    x: 1618334036000,\n    y: 1261.42,\n  },\n  {\n    x: 1618334046000,\n    y: 1261.43,\n  },\n  {\n    x: 1618334051000,\n    y: 1261.44,\n  },\n  {\n    x: 1618334061000,\n    y: 1261.45,\n  },\n  {\n    x: 1618334076000,\n    y: 1261.46,\n  },\n  {\n    x: 1618334091000,\n    y: 1261.47,\n  },\n  {\n    x: 1618334106000,\n    y: 1261.48,\n  },\n  {\n    x: 1618334121000,\n    y: 1261.49,\n  },\n  {\n    x: 1618334126000,\n    y: 1261.5,\n  },\n  {\n    x: 1618334141000,\n    y: 1261.51,\n  },\n  {\n    x: 1618334156000,\n    y: 1261.52,\n  },\n  {\n    x: 1618334161000,\n    y: 1261.53,\n  },\n  {\n    x: 1618334171000,\n    y: 1261.54,\n  },\n  {\n    x: 1618334186000,\n    y: 1261.55,\n  },\n  {\n    x: 1618334196000,\n    y: 1261.56,\n  },\n  {\n    x: 1618334211000,\n    y: 1261.57,\n  },\n  {\n    x: 1618334221000,\n    y: 1261.58,\n  },\n  {\n    x: 1618334241000,\n    y: 1261.59,\n  },\n  {\n    x: 1618334251000,\n    y: 1261.6,\n  },\n  {\n    x: 1618334261000,\n    y: 1261.61,\n  },\n  {\n    x: 1618334271000,\n    y: 1261.62,\n  },\n  {\n    x: 1618334286000,\n    y: 1261.63,\n  },\n  {\n    x: 1618334291000,\n    y: 1261.64,\n  },\n  {\n    x: 1618334301000,\n    y: 1261.66,\n  },\n  {\n    x: 1618334321000,\n    y: 1261.67,\n  },\n  {\n    x: 1618334336000,\n    y: 1261.68,\n  },\n  {\n    x: 1618334346000,\n    y: 1261.69,\n  },\n  {\n    x: 1618334356000,\n    y: 1261.7,\n  },\n  {\n    x: 1618334401000,\n    y: 1261.71,\n  },\n  {\n    x: 1618334406000,\n    y: 1261.73,\n  },\n  {\n    x: 1618334411000,\n    y: 1261.74,\n  },\n  {\n    x: 1618334421000,\n    y: 1261.75,\n  },\n  {\n    x: 1618334431000,\n    y: 1261.76,\n  },\n  {\n    x: 1618334456000,\n    y: 1261.77,\n  },\n  {\n    x: 1618334476000,\n    y: 1261.78,\n  },\n  {\n    x: 1618334486000,\n    y: 1261.79,\n  },\n  {\n    x: 1618334496000,\n    y: 1261.8,\n  },\n  {\n    x: 1618334506000,\n    y: 1261.81,\n  },\n  {\n    x: 1618334526000,\n    y: 1261.82,\n  },\n  {\n    x: 1618334541000,\n    y: 1261.83,\n  },\n  {\n    x: 1618334556000,\n    y: 1261.84,\n  },\n  {\n    x: 1618334566000,\n    y: 1261.85,\n  },\n  {\n    x: 1618334581000,\n    y: 1261.86,\n  },\n  {\n    x: 1618334591000,\n    y: 1261.87,\n  },\n  {\n    x: 1618334601000,\n    y: 1261.88,\n  },\n  {\n    x: 1618334626000,\n    y: 1261.89,\n  },\n  {\n    x: 1618334646000,\n    y: 1261.9,\n  },\n  {\n    x: 1618334661000,\n    y: 1261.91,\n  },\n  {\n    x: 1618334671000,\n    y: 1261.92,\n  },\n  {\n    x: 1618334681000,\n    y: 1261.93,\n  },\n  {\n    x: 1618334706000,\n    y: 1261.94,\n  },\n  {\n    x: 1618334721000,\n    y: 1261.95,\n  },\n  {\n    x: 1618334746000,\n    y: 1261.96,\n  },\n  {\n    x: 1618334751000,\n    y: 1261.97,\n  },\n  {\n    x: 1618334776000,\n    y: 1261.98,\n  },\n  {\n    x: 1618334786000,\n    y: 1261.99,\n  },\n  {\n    x: 1618334806000,\n    y: 1262,\n  },\n  {\n    x: 1618334816000,\n    y: 1262.01,\n  },\n  {\n    x: 1618334821000,\n    y: 1262.02,\n  },\n  {\n    x: 1618334841000,\n    y: 1262.03,\n  },\n  {\n    x: 1618334856000,\n    y: 1262.04,\n  },\n  {\n    x: 1618334871000,\n    y: 1262.05,\n  },\n  {\n    x: 1618334881000,\n    y: 1262.06,\n  },\n  {\n    x: 1618334891000,\n    y: 1262.07,\n  },\n  {\n    x: 1618334916000,\n    y: 1262.08,\n  },\n  {\n    x: 1618334926000,\n    y: 1262.09,\n  },\n  {\n    x: 1618334941000,\n    y: 1262.1,\n  },\n  {\n    x: 1618334956000,\n    y: 1262.11,\n  },\n  {\n    x: 1618334961000,\n    y: 1262.12,\n  },\n  {\n    x: 1618334971000,\n    y: 1262.13,\n  },\n  {\n    x: 1618334981000,\n    y: 1262.14,\n  },\n  {\n    x: 1618334991000,\n    y: 1262.15,\n  },\n  {\n    x: 1618335001000,\n    y: 1262.16,\n  },\n  {\n    x: 1618335011000,\n    y: 1262.17,\n  },\n  {\n    x: 1618335036000,\n    y: 1262.18,\n  },\n  {\n    x: 1618335051000,\n    y: 1262.19,\n  },\n  {\n    x: 1618335061000,\n    y: 1262.2,\n  },\n  {\n    x: 1618335066000,\n    y: 1262.21,\n  },\n  {\n    x: 1618335076000,\n    y: 1262.22,\n  },\n  {\n    x: 1618335096000,\n    y: 1262.23,\n  },\n  {\n    x: 1618335111000,\n    y: 1262.24,\n  },\n  {\n    x: 1618335121000,\n    y: 1262.25,\n  },\n  {\n    x: 1618335131000,\n    y: 1262.26,\n  },\n  {\n    x: 1618335151000,\n    y: 1262.27,\n  },\n  {\n    x: 1618335166000,\n    y: 1262.28,\n  },\n  {\n    x: 1618335186000,\n    y: 1262.29,\n  },\n  {\n    x: 1618335196000,\n    y: 1262.3,\n  },\n  {\n    x: 1618335216000,\n    y: 1262.31,\n  },\n  {\n    x: 1618335226000,\n    y: 1262.32,\n  },\n  {\n    x: 1618335236000,\n    y: 1262.33,\n  },\n  {\n    x: 1618335251000,\n    y: 1262.34,\n  },\n  {\n    x: 1618335266000,\n    y: 1262.35,\n  },\n  {\n    x: 1618335281000,\n    y: 1262.36,\n  },\n  {\n    x: 1618335296000,\n    y: 1262.37,\n  },\n  {\n    x: 1618335311000,\n    y: 1262.38,\n  },\n  {\n    x: 1618335331000,\n    y: 1262.39,\n  },\n  {\n    x: 1618335341000,\n    y: 1262.4,\n  },\n  {\n    x: 1618335356000,\n    y: 1262.41,\n  },\n  {\n    x: 1618335376000,\n    y: 1262.42,\n  },\n  {\n    x: 1618335386000,\n    y: 1262.43,\n  },\n  {\n    x: 1618335396000,\n    y: 1262.44,\n  },\n  {\n    x: 1618335406000,\n    y: 1262.45,\n  },\n  {\n    x: 1618335421000,\n    y: 1262.46,\n  },\n  {\n    x: 1618335426000,\n    y: 1262.47,\n  },\n  {\n    x: 1618335441000,\n    y: 1262.48,\n  },\n  {\n    x: 1618335456000,\n    y: 1262.49,\n  },\n  {\n    x: 1618335466000,\n    y: 1262.5,\n  },\n  {\n    x: 1618335486000,\n    y: 1262.51,\n  },\n  {\n    x: 1618335501000,\n    y: 1262.52,\n  },\n  {\n    x: 1618335506000,\n    y: 1262.53,\n  },\n  {\n    x: 1618335511000,\n    y: 1262.54,\n  },\n  {\n    x: 1618335521000,\n    y: 1262.55,\n  },\n  {\n    x: 1618335531000,\n    y: 1262.56,\n  },\n  {\n    x: 1618335541000,\n    y: 1262.57,\n  },\n  {\n    x: 1618335551000,\n    y: 1262.58,\n  },\n  {\n    x: 1618335561000,\n    y: 1262.59,\n  },\n  {\n    x: 1618335581000,\n    y: 1262.6,\n  },\n  {\n    x: 1618335586000,\n    y: 1262.61,\n  },\n  {\n    x: 1618335596000,\n    y: 1262.62,\n  },\n  {\n    x: 1618335611000,\n    y: 1262.63,\n  },\n  {\n    x: 1618335621000,\n    y: 1262.64,\n  },\n  {\n    x: 1618335626000,\n    y: 1262.65,\n  },\n  {\n    x: 1618335636000,\n    y: 1262.66,\n  },\n  {\n    x: 1618335646000,\n    y: 1262.67,\n  },\n  {\n    x: 1618335661000,\n    y: 1262.68,\n  },\n  {\n    x: 1618335671000,\n    y: 1262.69,\n  },\n  {\n    x: 1618335681000,\n    y: 1262.7,\n  },\n  {\n    x: 1618335691000,\n    y: 1262.71,\n  },\n  {\n    x: 1618335701000,\n    y: 1262.72,\n  },\n  {\n    x: 1618335706000,\n    y: 1262.73,\n  },\n  {\n    x: 1618335721000,\n    y: 1262.74,\n  },\n  {\n    x: 1618335731000,\n    y: 1262.75,\n  },\n  {\n    x: 1618335741000,\n    y: 1262.76,\n  },\n  {\n    x: 1618335751000,\n    y: 1262.77,\n  },\n  {\n    x: 1618335761000,\n    y: 1262.78,\n  },\n  {\n    x: 1618335771000,\n    y: 1262.79,\n  },\n  {\n    x: 1618335781000,\n    y: 1262.8,\n  },\n  {\n    x: 1618335791000,\n    y: 1262.81,\n  },\n  {\n    x: 1618335801000,\n    y: 1262.82,\n  },\n  {\n    x: 1618335816000,\n    y: 1262.83,\n  },\n  {\n    x: 1618335831000,\n    y: 1262.84,\n  },\n  {\n    x: 1618335851000,\n    y: 1262.85,\n  },\n  {\n    x: 1618335856000,\n    y: 1262.86,\n  },\n  {\n    x: 1618335861000,\n    y: 1262.87,\n  },\n  {\n    x: 1618335871000,\n    y: 1262.88,\n  },\n  {\n    x: 1618335876000,\n    y: 1262.89,\n  },\n  {\n    x: 1618335886000,\n    y: 1262.9,\n  },\n  {\n    x: 1618335896000,\n    y: 1262.91,\n  },\n  {\n    x: 1618335906000,\n    y: 1262.92,\n  },\n  {\n    x: 1618335916000,\n    y: 1262.93,\n  },\n  {\n    x: 1618335931000,\n    y: 1262.94,\n  },\n  {\n    x: 1618335941000,\n    y: 1262.95,\n  },\n  {\n    x: 1618335951000,\n    y: 1262.96,\n  },\n  {\n    x: 1618335961000,\n    y: 1262.97,\n  },\n  {\n    x: 1618335966000,\n    y: 1262.98,\n  },\n  {\n    x: 1618335996000,\n    y: 1262.99,\n  },\n  {\n    x: 1618336001000,\n    y: 1263,\n  },\n  {\n    x: 1618336016000,\n    y: 1263.01,\n  },\n  {\n    x: 1618336021000,\n    y: 1263.02,\n  },\n  {\n    x: 1618336031000,\n    y: 1263.03,\n  },\n  {\n    x: 1618336041000,\n    y: 1263.04,\n  },\n  {\n    x: 1618336056000,\n    y: 1263.05,\n  },\n  {\n    x: 1618336076000,\n    y: 1263.06,\n  },\n  {\n    x: 1618336096000,\n    y: 1263.07,\n  },\n  {\n    x: 1618336106000,\n    y: 1263.08,\n  },\n  {\n    x: 1618336111000,\n    y: 1263.09,\n  },\n  {\n    x: 1618336116000,\n    y: 1263.1,\n  },\n  {\n    x: 1618336126000,\n    y: 1263.11,\n  },\n  {\n    x: 1618336141000,\n    y: 1263.12,\n  },\n  {\n    x: 1618336146000,\n    y: 1263.13,\n  },\n  {\n    x: 1618336156000,\n    y: 1263.14,\n  },\n  {\n    x: 1618336166000,\n    y: 1263.15,\n  },\n  {\n    x: 1618336191000,\n    y: 1263.16,\n  },\n  {\n    x: 1618336201000,\n    y: 1263.17,\n  },\n  {\n    x: 1618336211000,\n    y: 1263.18,\n  },\n  {\n    x: 1618336221000,\n    y: 1263.19,\n  },\n  {\n    x: 1618336226000,\n    y: 1263.2,\n  },\n  {\n    x: 1618336236000,\n    y: 1263.21,\n  },\n  {\n    x: 1618336251000,\n    y: 1263.22,\n  },\n  {\n    x: 1618336261000,\n    y: 1263.23,\n  },\n  {\n    x: 1618336271000,\n    y: 1263.24,\n  },\n  {\n    x: 1618336281000,\n    y: 1263.25,\n  },\n  {\n    x: 1618336291000,\n    y: 1263.26,\n  },\n  {\n    x: 1618336311000,\n    y: 1263.27,\n  },\n  {\n    x: 1618336326000,\n    y: 1263.28,\n  },\n  {\n    x: 1618336341000,\n    y: 1263.29,\n  },\n  {\n    x: 1618336346000,\n    y: 1263.3,\n  },\n  {\n    x: 1618336361000,\n    y: 1263.31,\n  },\n  {\n    x: 1618336366000,\n    y: 1263.32,\n  },\n  {\n    x: 1618336371000,\n    y: 1263.34,\n  },\n  {\n    x: 1618336381000,\n    y: 1263.35,\n  },\n  {\n    x: 1618336401000,\n    y: 1263.36,\n  },\n  {\n    x: 1618336416000,\n    y: 1263.37,\n  },\n  {\n    x: 1618336426000,\n    y: 1263.38,\n  },\n  {\n    x: 1618336436000,\n    y: 1263.39,\n  },\n  {\n    x: 1618336456000,\n    y: 1263.4,\n  },\n  {\n    x: 1618336466000,\n    y: 1263.41,\n  },\n  {\n    x: 1618336486000,\n    y: 1263.42,\n  },\n  {\n    x: 1618336501000,\n    y: 1263.43,\n  },\n  {\n    x: 1618336516000,\n    y: 1263.44,\n  },\n  {\n    x: 1618336536000,\n    y: 1263.45,\n  },\n  {\n    x: 1618336546000,\n    y: 1263.46,\n  },\n  {\n    x: 1618336556000,\n    y: 1263.47,\n  },\n  {\n    x: 1618336566000,\n    y: 1263.48,\n  },\n  {\n    x: 1618336576000,\n    y: 1263.49,\n  },\n  {\n    x: 1618336591000,\n    y: 1263.5,\n  },\n  {\n    x: 1618336601000,\n    y: 1263.51,\n  },\n  {\n    x: 1618336611000,\n    y: 1263.52,\n  },\n  {\n    x: 1618336626000,\n    y: 1263.53,\n  },\n  {\n    x: 1618336631000,\n    y: 1263.54,\n  },\n  {\n    x: 1618336641000,\n    y: 1263.55,\n  },\n  {\n    x: 1618336651000,\n    y: 1263.56,\n  },\n  {\n    x: 1618336656000,\n    y: 1263.57,\n  },\n  {\n    x: 1618336666000,\n    y: 1263.58,\n  },\n  {\n    x: 1618336681000,\n    y: 1263.59,\n  },\n  {\n    x: 1618336701000,\n    y: 1263.6,\n  },\n  {\n    x: 1618336711000,\n    y: 1263.61,\n  },\n  {\n    x: 1618336726000,\n    y: 1263.62,\n  },\n  {\n    x: 1618336746000,\n    y: 1263.63,\n  },\n  {\n    x: 1618336756000,\n    y: 1263.64,\n  },\n  {\n    x: 1618336761000,\n    y: 1263.65,\n  },\n  {\n    x: 1618336766000,\n    y: 1263.66,\n  },\n  {\n    x: 1618336776000,\n    y: 1263.67,\n  },\n  {\n    x: 1618336786000,\n    y: 1263.68,\n  },\n  {\n    x: 1618336791000,\n    y: 1263.69,\n  },\n  {\n    x: 1618336801000,\n    y: 1263.7,\n  },\n  {\n    x: 1618336811000,\n    y: 1263.71,\n  },\n  {\n    x: 1618336821000,\n    y: 1263.72,\n  },\n  {\n    x: 1618336831000,\n    y: 1263.73,\n  },\n  {\n    x: 1618336841000,\n    y: 1263.74,\n  },\n  {\n    x: 1618336856000,\n    y: 1263.75,\n  },\n  {\n    x: 1618336861000,\n    y: 1263.76,\n  },\n  {\n    x: 1618336881000,\n    y: 1263.77,\n  },\n  {\n    x: 1618336891000,\n    y: 1263.78,\n  },\n  {\n    x: 1618336916000,\n    y: 1263.79,\n  },\n  {\n    x: 1618336921000,\n    y: 1263.8,\n  },\n  {\n    x: 1618336936000,\n    y: 1263.81,\n  },\n  {\n    x: 1618336951000,\n    y: 1263.82,\n  },\n  {\n    x: 1618336976000,\n    y: 1263.83,\n  },\n  {\n    x: 1618336981000,\n    y: 1263.84,\n  },\n  {\n    x: 1618336991000,\n    y: 1263.85,\n  },\n  {\n    x: 1618336996000,\n    y: 1263.86,\n  },\n  {\n    x: 1618337006000,\n    y: 1263.87,\n  },\n  {\n    x: 1618337026000,\n    y: 1263.88,\n  },\n  {\n    x: 1618337036000,\n    y: 1263.89,\n  },\n  {\n    x: 1618337056000,\n    y: 1263.9,\n  },\n  {\n    x: 1618337061000,\n    y: 1263.91,\n  },\n  {\n    x: 1618337071000,\n    y: 1263.92,\n  },\n  {\n    x: 1618337081000,\n    y: 1263.93,\n  },\n  {\n    x: 1618337096000,\n    y: 1263.94,\n  },\n  {\n    x: 1618337111000,\n    y: 1263.95,\n  },\n  {\n    x: 1618337121000,\n    y: 1263.96,\n  },\n  {\n    x: 1618337131000,\n    y: 1263.97,\n  },\n  {\n    x: 1618337136000,\n    y: 1263.98,\n  },\n  {\n    x: 1618337141000,\n    y: 1263.99,\n  },\n  {\n    x: 1618337166000,\n    y: 1264,\n  },\n  {\n    x: 1618337261000,\n    y: 1264.01,\n  },\n  {\n    x: 1618337276000,\n    y: 1264.02,\n  },\n  {\n    x: 1618337286000,\n    y: 1264.03,\n  },\n  {\n    x: 1618337296000,\n    y: 1264.04,\n  },\n  {\n    x: 1618337306000,\n    y: 1264.05,\n  },\n  {\n    x: 1618337311000,\n    y: 1264.06,\n  },\n  {\n    x: 1618337336000,\n    y: 1264.07,\n  },\n  {\n    x: 1618337341000,\n    y: 1264.08,\n  },\n  {\n    x: 1618337346000,\n    y: 1264.09,\n  },\n  {\n    x: 1618337351000,\n    y: 1264.1,\n  },\n  {\n    x: 1618337356000,\n    y: 1264.12,\n  },\n  {\n    x: 1618337366000,\n    y: 1264.13,\n  },\n  {\n    x: 1618337376000,\n    y: 1264.14,\n  },\n  {\n    x: 1618337396000,\n    y: 1264.15,\n  },\n  {\n    x: 1618337406000,\n    y: 1264.16,\n  },\n  {\n    x: 1618337411000,\n    y: 1264.17,\n  },\n  {\n    x: 1618337421000,\n    y: 1264.18,\n  },\n  {\n    x: 1618337431000,\n    y: 1264.19,\n  },\n  {\n    x: 1618337446000,\n    y: 1264.2,\n  },\n  {\n    x: 1618337461000,\n    y: 1264.21,\n  },\n  {\n    x: 1618337466000,\n    y: 1264.22,\n  },\n  {\n    x: 1618337476000,\n    y: 1264.23,\n  },\n  {\n    x: 1618337496000,\n    y: 1264.24,\n  },\n  {\n    x: 1618337506000,\n    y: 1264.25,\n  },\n  {\n    x: 1618337511000,\n    y: 1264.26,\n  },\n  {\n    x: 1618337521000,\n    y: 1264.27,\n  },\n  {\n    x: 1618337531000,\n    y: 1264.28,\n  },\n  {\n    x: 1618337536000,\n    y: 1264.29,\n  },\n  {\n    x: 1618337541000,\n    y: 1264.3,\n  },\n  {\n    x: 1618337551000,\n    y: 1264.31,\n  },\n  {\n    x: 1618337556000,\n    y: 1264.32,\n  },\n  {\n    x: 1618337566000,\n    y: 1264.33,\n  },\n  {\n    x: 1618337571000,\n    y: 1264.34,\n  },\n  {\n    x: 1618337576000,\n    y: 1264.35,\n  },\n  {\n    x: 1618337591000,\n    y: 1264.36,\n  },\n  {\n    x: 1618337606000,\n    y: 1264.37,\n  },\n  {\n    x: 1618337611000,\n    y: 1264.38,\n  },\n  {\n    x: 1618337621000,\n    y: 1264.39,\n  },\n  {\n    x: 1618337636000,\n    y: 1264.4,\n  },\n  {\n    x: 1618337656000,\n    y: 1264.41,\n  },\n  {\n    x: 1618337661000,\n    y: 1264.42,\n  },\n  {\n    x: 1618337666000,\n    y: 1264.43,\n  },\n  {\n    x: 1618337676000,\n    y: 1264.44,\n  },\n  {\n    x: 1618337686000,\n    y: 1264.45,\n  },\n  {\n    x: 1618337696000,\n    y: 1264.46,\n  },\n  {\n    x: 1618337701000,\n    y: 1264.47,\n  },\n  {\n    x: 1618337711000,\n    y: 1264.48,\n  },\n  {\n    x: 1618337716000,\n    y: 1264.49,\n  },\n  {\n    x: 1618337731000,\n    y: 1264.5,\n  },\n  {\n    x: 1618337741000,\n    y: 1264.51,\n  },\n  {\n    x: 1618337761000,\n    y: 1264.52,\n  },\n  {\n    x: 1618337771000,\n    y: 1264.53,\n  },\n  {\n    x: 1618337776000,\n    y: 1264.54,\n  },\n  {\n    x: 1618337786000,\n    y: 1264.55,\n  },\n  {\n    x: 1618337796000,\n    y: 1264.56,\n  },\n  {\n    x: 1618337801000,\n    y: 1264.57,\n  },\n  {\n    x: 1618337811000,\n    y: 1264.58,\n  },\n  {\n    x: 1618337836000,\n    y: 1264.59,\n  },\n  {\n    x: 1618337841000,\n    y: 1264.6,\n  },\n  {\n    x: 1618337851000,\n    y: 1264.61,\n  },\n  {\n    x: 1618337856000,\n    y: 1264.62,\n  },\n  {\n    x: 1618337866000,\n    y: 1264.63,\n  },\n  {\n    x: 1618337871000,\n    y: 1264.64,\n  },\n  {\n    x: 1618337876000,\n    y: 1264.65,\n  },\n  {\n    x: 1618337886000,\n    y: 1264.66,\n  },\n  {\n    x: 1618337901000,\n    y: 1264.67,\n  },\n  {\n    x: 1618337916000,\n    y: 1264.68,\n  },\n  {\n    x: 1618337931000,\n    y: 1264.7,\n  },\n  {\n    x: 1618337941000,\n    y: 1264.71,\n  },\n  {\n    x: 1618337946000,\n    y: 1264.72,\n  },\n  {\n    x: 1618337951000,\n    y: 1264.73,\n  },\n  {\n    x: 1618337966000,\n    y: 1264.74,\n  },\n  {\n    x: 1618337976000,\n    y: 1264.75,\n  },\n  {\n    x: 1618337981000,\n    y: 1264.76,\n  },\n  {\n    x: 1618337991000,\n    y: 1264.77,\n  },\n  {\n    x: 1618338001000,\n    y: 1264.78,\n  },\n  {\n    x: 1618338016000,\n    y: 1264.79,\n  },\n  {\n    x: 1618338021000,\n    y: 1264.8,\n  },\n  {\n    x: 1618338051000,\n    y: 1264.82,\n  },\n  {\n    x: 1618338056000,\n    y: 1264.83,\n  },\n  {\n    x: 1618338061000,\n    y: 1264.84,\n  },\n  {\n    x: 1618338076000,\n    y: 1264.85,\n  },\n  {\n    x: 1618338086000,\n    y: 1264.86,\n  },\n  {\n    x: 1618338091000,\n    y: 1264.87,\n  },\n  {\n    x: 1618338101000,\n    y: 1264.88,\n  },\n  {\n    x: 1618338111000,\n    y: 1264.89,\n  },\n  {\n    x: 1618338131000,\n    y: 1264.9,\n  },\n  {\n    x: 1618338141000,\n    y: 1264.91,\n  },\n  {\n    x: 1618338151000,\n    y: 1264.92,\n  },\n  {\n    x: 1618338161000,\n    y: 1264.93,\n  },\n  {\n    x: 1618338166000,\n    y: 1264.94,\n  },\n  {\n    x: 1618338171000,\n    y: 1264.95,\n  },\n  {\n    x: 1618338186000,\n    y: 1264.96,\n  },\n  {\n    x: 1618338196000,\n    y: 1264.97,\n  },\n  {\n    x: 1618338201000,\n    y: 1264.98,\n  },\n  {\n    x: 1618338211000,\n    y: 1264.99,\n  },\n  {\n    x: 1618338221000,\n    y: 1265,\n  },\n  {\n    x: 1618338236000,\n    y: 1265.01,\n  },\n  {\n    x: 1618338246000,\n    y: 1265.02,\n  },\n  {\n    x: 1618338256000,\n    y: 1265.03,\n  },\n  {\n    x: 1618338266000,\n    y: 1265.04,\n  },\n  {\n    x: 1618338276000,\n    y: 1265.05,\n  },\n  {\n    x: 1618338281000,\n    y: 1265.06,\n  },\n  {\n    x: 1618338291000,\n    y: 1265.07,\n  },\n  {\n    x: 1618338296000,\n    y: 1265.08,\n  },\n  {\n    x: 1618338311000,\n    y: 1265.09,\n  },\n  {\n    x: 1618338331000,\n    y: 1265.1,\n  },\n  {\n    x: 1618338336000,\n    y: 1265.11,\n  },\n  {\n    x: 1618338346000,\n    y: 1265.12,\n  },\n  {\n    x: 1618338356000,\n    y: 1265.13,\n  },\n  {\n    x: 1618338361000,\n    y: 1265.14,\n  },\n  {\n    x: 1618338371000,\n    y: 1265.15,\n  },\n  {\n    x: 1618338376000,\n    y: 1265.16,\n  },\n  {\n    x: 1618338391000,\n    y: 1265.17,\n  },\n  {\n    x: 1618338401000,\n    y: 1265.18,\n  },\n  {\n    x: 1618338406000,\n    y: 1265.19,\n  },\n  {\n    x: 1618338416000,\n    y: 1265.2,\n  },\n  {\n    x: 1618338421000,\n    y: 1265.21,\n  },\n  {\n    x: 1618338431000,\n    y: 1265.22,\n  },\n  {\n    x: 1618338436000,\n    y: 1265.23,\n  },\n  {\n    x: 1618338446000,\n    y: 1265.24,\n  },\n  {\n    x: 1618338461000,\n    y: 1265.25,\n  },\n  {\n    x: 1618338476000,\n    y: 1265.26,\n  },\n  {\n    x: 1618338486000,\n    y: 1265.27,\n  },\n  {\n    x: 1618338491000,\n    y: 1265.28,\n  },\n  {\n    x: 1618338496000,\n    y: 1265.29,\n  },\n  {\n    x: 1618338506000,\n    y: 1265.3,\n  },\n  {\n    x: 1618338511000,\n    y: 1265.31,\n  },\n  {\n    x: 1618338516000,\n    y: 1265.32,\n  },\n  {\n    x: 1618338526000,\n    y: 1265.33,\n  },\n  {\n    x: 1618338531000,\n    y: 1265.34,\n  },\n  {\n    x: 1618338541000,\n    y: 1265.35,\n  },\n  {\n    x: 1618338546000,\n    y: 1265.36,\n  },\n  {\n    x: 1618338556000,\n    y: 1265.37,\n  },\n  {\n    x: 1618338561000,\n    y: 1265.38,\n  },\n  {\n    x: 1618338571000,\n    y: 1265.39,\n  },\n  {\n    x: 1618338576000,\n    y: 1265.4,\n  },\n  {\n    x: 1618338586000,\n    y: 1265.42,\n  },\n  {\n    x: 1618338591000,\n    y: 1265.43,\n  },\n  {\n    x: 1618338596000,\n    y: 1265.44,\n  },\n  {\n    x: 1618338601000,\n    y: 1265.45,\n  },\n  {\n    x: 1618338606000,\n    y: 1265.46,\n  },\n  {\n    x: 1618338611000,\n    y: 1265.47,\n  },\n  {\n    x: 1618338616000,\n    y: 1265.48,\n  },\n  {\n    x: 1618338621000,\n    y: 1265.49,\n  },\n  {\n    x: 1618338631000,\n    y: 1265.5,\n  },\n  {\n    x: 1618338636000,\n    y: 1265.51,\n  },\n  {\n    x: 1618338641000,\n    y: 1265.52,\n  },\n  {\n    x: 1618338646000,\n    y: 1265.54,\n  },\n  {\n    x: 1618338651000,\n    y: 1265.55,\n  },\n  {\n    x: 1618338656000,\n    y: 1265.58,\n  },\n  {\n    x: 1618338666000,\n    y: 1265.59,\n  },\n  {\n    x: 1618338671000,\n    y: 1265.6,\n  },\n  {\n    x: 1618338681000,\n    y: 1265.61,\n  },\n  {\n    x: 1618338691000,\n    y: 1265.62,\n  },\n  {\n    x: 1618338701000,\n    y: 1265.63,\n  },\n  {\n    x: 1618338706000,\n    y: 1265.64,\n  },\n  {\n    x: 1618338711000,\n    y: 1265.65,\n  },\n  {\n    x: 1618338716000,\n    y: 1265.66,\n  },\n  {\n    x: 1618338721000,\n    y: 1265.67,\n  },\n  {\n    x: 1618338726000,\n    y: 1265.68,\n  },\n  {\n    x: 1618338741000,\n    y: 1265.69,\n  },\n  {\n    x: 1618338746000,\n    y: 1265.7,\n  },\n  {\n    x: 1618338751000,\n    y: 1265.71,\n  },\n  {\n    x: 1618338761000,\n    y: 1265.72,\n  },\n  {\n    x: 1618338776000,\n    y: 1265.74,\n  },\n  {\n    x: 1618338786000,\n    y: 1265.75,\n  },\n  {\n    x: 1618338796000,\n    y: 1265.76,\n  },\n  {\n    x: 1618338801000,\n    y: 1265.77,\n  },\n  {\n    x: 1618338816000,\n    y: 1265.78,\n  },\n  {\n    x: 1618338831000,\n    y: 1265.79,\n  },\n  {\n    x: 1618338836000,\n    y: 1265.8,\n  },\n  {\n    x: 1618338846000,\n    y: 1265.81,\n  },\n  {\n    x: 1618338886000,\n    y: 1265.83,\n  },\n  {\n    x: 1618338891000,\n    y: 1265.85,\n  },\n  {\n    x: 1618338896000,\n    y: 1265.87,\n  },\n  {\n    x: 1618338901000,\n    y: 1265.89,\n  },\n  {\n    x: 1618338921000,\n    y: 1265.9,\n  },\n  {\n    x: 1618338926000,\n    y: 1265.91,\n  },\n  {\n    x: 1618338936000,\n    y: 1265.92,\n  },\n  {\n    x: 1618338941000,\n    y: 1265.93,\n  },\n  {\n    x: 1618338946000,\n    y: 1265.95,\n  },\n  {\n    x: 1618338961000,\n    y: 1265.96,\n  },\n  {\n    x: 1618338971000,\n    y: 1265.97,\n  },\n  {\n    x: 1618338976000,\n    y: 1265.98,\n  },\n  {\n    x: 1618338986000,\n    y: 1265.99,\n  },\n  {\n    x: 1618338991000,\n    y: 1266.01,\n  },\n  {\n    x: 1618339006000,\n    y: 1266.02,\n  },\n  {\n    x: 1618339011000,\n    y: 1266.03,\n  },\n  {\n    x: 1618339021000,\n    y: 1266.04,\n  },\n  {\n    x: 1618339036000,\n    y: 1266.05,\n  },\n  {\n    x: 1618339041000,\n    y: 1266.06,\n  },\n  {\n    x: 1618339051000,\n    y: 1266.07,\n  },\n  {\n    x: 1618339056000,\n    y: 1266.08,\n  },\n  {\n    x: 1618339061000,\n    y: 1266.09,\n  },\n  {\n    x: 1618339066000,\n    y: 1266.1,\n  },\n  {\n    x: 1618339071000,\n    y: 1266.11,\n  },\n  {\n    x: 1618339086000,\n    y: 1266.12,\n  },\n  {\n    x: 1618339096000,\n    y: 1266.13,\n  },\n  {\n    x: 1618339121000,\n    y: 1266.14,\n  },\n  {\n    x: 1618339141000,\n    y: 1266.15,\n  },\n  {\n    x: 1618339146000,\n    y: 1266.16,\n  },\n  {\n    x: 1618339156000,\n    y: 1266.17,\n  },\n  {\n    x: 1618339161000,\n    y: 1266.18,\n  },\n  {\n    x: 1618339166000,\n    y: 1266.19,\n  },\n  {\n    x: 1618339191000,\n    y: 1266.2,\n  },\n  {\n    x: 1618339211000,\n    y: 1266.21,\n  },\n  {\n    x: 1618339221000,\n    y: 1266.22,\n  },\n  {\n    x: 1618339231000,\n    y: 1266.23,\n  },\n  {\n    x: 1618339241000,\n    y: 1266.24,\n  },\n  {\n    x: 1618339256000,\n    y: 1266.25,\n  },\n  {\n    x: 1618339266000,\n    y: 1266.26,\n  },\n  {\n    x: 1618339286000,\n    y: 1266.27,\n  },\n  {\n    x: 1618339306000,\n    y: 1266.28,\n  },\n  {\n    x: 1618339316000,\n    y: 1266.29,\n  },\n  {\n    x: 1618339321000,\n    y: 1266.3,\n  },\n  {\n    x: 1618339336000,\n    y: 1266.31,\n  },\n  {\n    x: 1618339346000,\n    y: 1266.32,\n  },\n  {\n    x: 1618339356000,\n    y: 1266.33,\n  },\n  {\n    x: 1618339376000,\n    y: 1266.34,\n  },\n  {\n    x: 1618339386000,\n    y: 1266.35,\n  },\n  {\n    x: 1618339401000,\n    y: 1266.36,\n  },\n  {\n    x: 1618339421000,\n    y: 1266.37,\n  },\n  {\n    x: 1618339436000,\n    y: 1266.38,\n  },\n  {\n    x: 1618339451000,\n    y: 1266.39,\n  },\n  {\n    x: 1618339461000,\n    y: 1266.4,\n  },\n  {\n    x: 1618339476000,\n    y: 1266.41,\n  },\n  {\n    x: 1618339486000,\n    y: 1266.42,\n  },\n  {\n    x: 1618339496000,\n    y: 1266.43,\n  },\n  {\n    x: 1618339501000,\n    y: 1266.44,\n  },\n  {\n    x: 1618339511000,\n    y: 1266.45,\n  },\n  {\n    x: 1618339521000,\n    y: 1266.46,\n  },\n  {\n    x: 1618339531000,\n    y: 1266.47,\n  },\n  {\n    x: 1618339536000,\n    y: 1266.48,\n  },\n  {\n    x: 1618339546000,\n    y: 1266.49,\n  },\n  {\n    x: 1618339556000,\n    y: 1266.5,\n  },\n  {\n    x: 1618339561000,\n    y: 1266.51,\n  },\n  {\n    x: 1618339571000,\n    y: 1266.52,\n  },\n  {\n    x: 1618339581000,\n    y: 1266.53,\n  },\n  {\n    x: 1618339586000,\n    y: 1266.54,\n  },\n  {\n    x: 1618339596000,\n    y: 1266.55,\n  },\n  {\n    x: 1618339606000,\n    y: 1266.56,\n  },\n  {\n    x: 1618339616000,\n    y: 1266.57,\n  },\n  {\n    x: 1618339631000,\n    y: 1266.58,\n  },\n  {\n    x: 1618339646000,\n    y: 1266.59,\n  },\n  {\n    x: 1618339651000,\n    y: 1266.6,\n  },\n  {\n    x: 1618339656000,\n    y: 1266.61,\n  },\n  {\n    x: 1618339666000,\n    y: 1266.62,\n  },\n  {\n    x: 1618339681000,\n    y: 1266.63,\n  },\n  {\n    x: 1618339696000,\n    y: 1266.64,\n  },\n  {\n    x: 1618339726000,\n    y: 1266.65,\n  },\n  {\n    x: 1618339731000,\n    y: 1266.66,\n  },\n  {\n    x: 1618339736000,\n    y: 1266.67,\n  },\n  {\n    x: 1618339741000,\n    y: 1266.68,\n  },\n  {\n    x: 1618339746000,\n    y: 1266.69,\n  },\n  {\n    x: 1618339751000,\n    y: 1266.7,\n  },\n  {\n    x: 1618339766000,\n    y: 1266.71,\n  },\n  {\n    x: 1618339791000,\n    y: 1266.72,\n  },\n  {\n    x: 1618339806000,\n    y: 1266.73,\n  },\n  {\n    x: 1618339811000,\n    y: 1266.74,\n  },\n  {\n    x: 1618339816000,\n    y: 1266.75,\n  },\n  {\n    x: 1618339821000,\n    y: 1266.76,\n  },\n  {\n    x: 1618339826000,\n    y: 1266.77,\n  },\n  {\n    x: 1618339836000,\n    y: 1266.78,\n  },\n  {\n    x: 1618339846000,\n    y: 1266.79,\n  },\n  {\n    x: 1618339856000,\n    y: 1266.8,\n  },\n  {\n    x: 1618339866000,\n    y: 1266.81,\n  },\n  {\n    x: 1618339876000,\n    y: 1266.82,\n  },\n  {\n    x: 1618339886000,\n    y: 1266.83,\n  },\n  {\n    x: 1618339891000,\n    y: 1266.84,\n  },\n  {\n    x: 1618339896000,\n    y: 1266.85,\n  },\n  {\n    x: 1618339911000,\n    y: 1266.86,\n  },\n  {\n    x: 1618339916000,\n    y: 1266.87,\n  },\n  {\n    x: 1618339921000,\n    y: 1266.88,\n  },\n  {\n    x: 1618339926000,\n    y: 1266.89,\n  },\n  {\n    x: 1618339931000,\n    y: 1266.9,\n  },\n  {\n    x: 1618339941000,\n    y: 1266.91,\n  },\n  {\n    x: 1618339951000,\n    y: 1266.92,\n  },\n  {\n    x: 1618339966000,\n    y: 1266.93,\n  },\n  {\n    x: 1618339986000,\n    y: 1266.94,\n  },\n  {\n    x: 1618339991000,\n    y: 1266.95,\n  },\n  {\n    x: 1618340001000,\n    y: 1266.96,\n  },\n  {\n    x: 1618340006000,\n    y: 1266.97,\n  },\n  {\n    x: 1618340011000,\n    y: 1266.98,\n  },\n  {\n    x: 1618340016000,\n    y: 1266.99,\n  },\n  {\n    x: 1618340021000,\n    y: 1267,\n  },\n  {\n    x: 1618340031000,\n    y: 1267.01,\n  },\n  {\n    x: 1618340041000,\n    y: 1267.02,\n  },\n  {\n    x: 1618340051000,\n    y: 1267.03,\n  },\n  {\n    x: 1618341291000,\n    y: 1267.05,\n  },\n  {\n    x: 1618341296000,\n    y: 1267.09,\n  },\n  {\n    x: 1618341311000,\n    y: 1267.1,\n  },\n  {\n    x: 1618341306000,\n    y: 1267.11,\n  },\n  {\n    x: 1618341301000,\n    y: 1267.12,\n  },\n  {\n    x: 1618341421000,\n    y: 1267.13,\n  },\n  {\n    x: 1618341431000,\n    y: 1267.14,\n  },\n  {\n    x: 1618341451000,\n    y: 1267.15,\n  },\n  {\n    x: 1618341466000,\n    y: 1267.16,\n  },\n  {\n    x: 1618341481000,\n    y: 1267.17,\n  },\n  {\n    x: 1618341491000,\n    y: 1267.18,\n  },\n  {\n    x: 1618341511000,\n    y: 1267.19,\n  },\n  {\n    x: 1618341521000,\n    y: 1267.2,\n  },\n  {\n    x: 1618341531000,\n    y: 1267.21,\n  },\n  {\n    x: 1618341541000,\n    y: 1267.22,\n  },\n  {\n    x: 1618341546000,\n    y: 1267.23,\n  },\n  {\n    x: 1618341556000,\n    y: 1267.24,\n  },\n  {\n    x: 1618341586000,\n    y: 1267.25,\n  },\n  {\n    x: 1618341611000,\n    y: 1267.26,\n  },\n  {\n    x: 1618341626000,\n    y: 1267.27,\n  },\n  {\n    x: 1618341641000,\n    y: 1267.28,\n  },\n  {\n    x: 1618341646000,\n    y: 1267.29,\n  },\n  {\n    x: 1618341666000,\n    y: 1267.3,\n  },\n  {\n    x: 1618341686000,\n    y: 1267.31,\n  },\n  {\n    x: 1618341701000,\n    y: 1267.32,\n  },\n  {\n    x: 1618341711000,\n    y: 1267.33,\n  },\n  {\n    x: 1618341721000,\n    y: 1267.34,\n  },\n  {\n    x: 1618341736000,\n    y: 1267.35,\n  },\n  {\n    x: 1618341746000,\n    y: 1267.36,\n  },\n  {\n    x: 1618341756000,\n    y: 1267.37,\n  },\n  {\n    x: 1618341771000,\n    y: 1267.38,\n  },\n  {\n    x: 1618341791000,\n    y: 1267.39,\n  },\n  {\n    x: 1618341806000,\n    y: 1267.4,\n  },\n  {\n    x: 1618341811000,\n    y: 1267.41,\n  },\n  {\n    x: 1618341826000,\n    y: 1267.42,\n  },\n  {\n    x: 1618341846000,\n    y: 1267.43,\n  },\n  {\n    x: 1618341861000,\n    y: 1267.44,\n  },\n  {\n    x: 1618341881000,\n    y: 1267.45,\n  },\n  {\n    x: 1618341896000,\n    y: 1267.46,\n  },\n  {\n    x: 1618341906000,\n    y: 1267.47,\n  },\n  {\n    x: 1618341916000,\n    y: 1267.48,\n  },\n  {\n    x: 1618341931000,\n    y: 1267.49,\n  },\n  {\n    x: 1618341941000,\n    y: 1267.5,\n  },\n  {\n    x: 1618341961000,\n    y: 1267.51,\n  },\n  {\n    x: 1618341986000,\n    y: 1267.52,\n  },\n  {\n    x: 1618341996000,\n    y: 1267.53,\n  },\n  {\n    x: 1618342006000,\n    y: 1267.54,\n  },\n  {\n    x: 1618342016000,\n    y: 1267.55,\n  },\n  {\n    x: 1618342031000,\n    y: 1267.56,\n  },\n  {\n    x: 1618342061000,\n    y: 1267.57,\n  },\n  {\n    x: 1618342066000,\n    y: 1267.58,\n  },\n  {\n    x: 1618342081000,\n    y: 1267.59,\n  },\n  {\n    x: 1618342096000,\n    y: 1267.6,\n  },\n  {\n    x: 1618342101000,\n    y: 1267.61,\n  },\n  {\n    x: 1618342116000,\n    y: 1267.62,\n  },\n  {\n    x: 1618342126000,\n    y: 1267.63,\n  },\n  {\n    x: 1618342136000,\n    y: 1267.64,\n  },\n  {\n    x: 1618342151000,\n    y: 1267.65,\n  },\n  {\n    x: 1618342161000,\n    y: 1267.66,\n  },\n  {\n    x: 1618342176000,\n    y: 1267.67,\n  },\n  {\n    x: 1618342186000,\n    y: 1267.68,\n  },\n  {\n    x: 1618342211000,\n    y: 1267.69,\n  },\n  {\n    x: 1618342226000,\n    y: 1267.7,\n  },\n  {\n    x: 1618342241000,\n    y: 1267.71,\n  },\n  {\n    x: 1618342251000,\n    y: 1267.72,\n  },\n  {\n    x: 1618342266000,\n    y: 1267.73,\n  },\n  {\n    x: 1618342276000,\n    y: 1267.74,\n  },\n  {\n    x: 1618342291000,\n    y: 1267.75,\n  },\n  {\n    x: 1618342306000,\n    y: 1267.76,\n  },\n  {\n    x: 1618342316000,\n    y: 1267.77,\n  },\n  {\n    x: 1618342331000,\n    y: 1267.78,\n  },\n  {\n    x: 1618342346000,\n    y: 1267.79,\n  },\n  {\n    x: 1618342356000,\n    y: 1267.8,\n  },\n  {\n    x: 1618342371000,\n    y: 1267.81,\n  },\n  {\n    x: 1618342381000,\n    y: 1267.82,\n  },\n  {\n    x: 1618342391000,\n    y: 1267.83,\n  },\n  {\n    x: 1618342411000,\n    y: 1267.84,\n  },\n  {\n    x: 1618342421000,\n    y: 1267.85,\n  },\n  {\n    x: 1618342441000,\n    y: 1267.86,\n  },\n  {\n    x: 1618342466000,\n    y: 1267.87,\n  },\n  {\n    x: 1618342476000,\n    y: 1267.88,\n  },\n  {\n    x: 1618342496000,\n    y: 1267.89,\n  },\n  {\n    x: 1618342521000,\n    y: 1267.9,\n  },\n  {\n    x: 1618342531000,\n    y: 1267.91,\n  },\n  {\n    x: 1618342551000,\n    y: 1267.92,\n  },\n  {\n    x: 1618342566000,\n    y: 1267.93,\n  },\n  {\n    x: 1618342581000,\n    y: 1267.94,\n  },\n  {\n    x: 1618342596000,\n    y: 1267.95,\n  },\n  {\n    x: 1618342616000,\n    y: 1267.96,\n  },\n  {\n    x: 1618342631000,\n    y: 1267.97,\n  },\n  {\n    x: 1618342651000,\n    y: 1267.98,\n  },\n  {\n    x: 1618342656000,\n    y: 1267.99,\n  },\n  {\n    x: 1618342671000,\n    y: 1268,\n  },\n  {\n    x: 1618342681000,\n    y: 1268.01,\n  },\n  {\n    x: 1618342691000,\n    y: 1268.02,\n  },\n  {\n    x: 1618342716000,\n    y: 1268.03,\n  },\n  {\n    x: 1618342741000,\n    y: 1268.04,\n  },\n  {\n    x: 1618342756000,\n    y: 1268.05,\n  },\n  {\n    x: 1618342771000,\n    y: 1268.06,\n  },\n  {\n    x: 1618342781000,\n    y: 1268.07,\n  },\n  {\n    x: 1618342801000,\n    y: 1268.08,\n  },\n  {\n    x: 1618342821000,\n    y: 1268.09,\n  },\n  {\n    x: 1618342836000,\n    y: 1268.1,\n  },\n  {\n    x: 1618342851000,\n    y: 1268.11,\n  },\n  {\n    x: 1618342866000,\n    y: 1268.12,\n  },\n  {\n    x: 1618342876000,\n    y: 1268.13,\n  },\n  {\n    x: 1618342896000,\n    y: 1268.14,\n  },\n  {\n    x: 1618342906000,\n    y: 1268.15,\n  },\n  {\n    x: 1618342936000,\n    y: 1268.16,\n  },\n  {\n    x: 1618342956000,\n    y: 1268.17,\n  },\n  {\n    x: 1618342966000,\n    y: 1268.18,\n  },\n  {\n    x: 1618342986000,\n    y: 1268.19,\n  },\n  {\n    x: 1618343001000,\n    y: 1268.2,\n  },\n  {\n    x: 1618343016000,\n    y: 1268.21,\n  },\n  {\n    x: 1618343021000,\n    y: 1268.22,\n  },\n  {\n    x: 1618343041000,\n    y: 1268.23,\n  },\n  {\n    x: 1618343056000,\n    y: 1268.24,\n  },\n  {\n    x: 1618343066000,\n    y: 1268.25,\n  },\n  {\n    x: 1618343081000,\n    y: 1268.26,\n  },\n  {\n    x: 1618343096000,\n    y: 1268.27,\n  },\n  {\n    x: 1618343116000,\n    y: 1268.28,\n  },\n  {\n    x: 1618343136000,\n    y: 1268.29,\n  },\n  {\n    x: 1618343151000,\n    y: 1268.3,\n  },\n  {\n    x: 1618343161000,\n    y: 1268.31,\n  },\n  {\n    x: 1618343171000,\n    y: 1268.32,\n  },\n  {\n    x: 1618343186000,\n    y: 1268.33,\n  },\n  {\n    x: 1618343206000,\n    y: 1268.34,\n  },\n  {\n    x: 1618343216000,\n    y: 1268.35,\n  },\n  {\n    x: 1618343231000,\n    y: 1268.36,\n  },\n  {\n    x: 1618343241000,\n    y: 1268.37,\n  },\n  {\n    x: 1618343256000,\n    y: 1268.38,\n  },\n  {\n    x: 1618343271000,\n    y: 1268.39,\n  },\n  {\n    x: 1618343286000,\n    y: 1268.4,\n  },\n  {\n    x: 1618343306000,\n    y: 1268.41,\n  },\n  {\n    x: 1618343316000,\n    y: 1268.42,\n  },\n  {\n    x: 1618343331000,\n    y: 1268.43,\n  },\n  {\n    x: 1618343336000,\n    y: 1268.44,\n  },\n  {\n    x: 1618343346000,\n    y: 1268.45,\n  },\n  {\n    x: 1618343361000,\n    y: 1268.46,\n  },\n  {\n    x: 1618343401000,\n    y: 1268.47,\n  },\n  {\n    x: 1618343411000,\n    y: 1268.48,\n  },\n  {\n    x: 1618343426000,\n    y: 1268.49,\n  },\n  {\n    x: 1618343436000,\n    y: 1268.5,\n  },\n  {\n    x: 1618343451000,\n    y: 1268.51,\n  },\n  {\n    x: 1618343471000,\n    y: 1268.52,\n  },\n  {\n    x: 1618343486000,\n    y: 1268.53,\n  },\n  {\n    x: 1618343496000,\n    y: 1268.54,\n  },\n  {\n    x: 1618343506000,\n    y: 1268.55,\n  },\n  {\n    x: 1618343526000,\n    y: 1268.56,\n  },\n  {\n    x: 1618343546000,\n    y: 1268.57,\n  },\n  {\n    x: 1618343556000,\n    y: 1268.58,\n  },\n  {\n    x: 1618343576000,\n    y: 1268.59,\n  },\n  {\n    x: 1618343586000,\n    y: 1268.6,\n  },\n  {\n    x: 1618343596000,\n    y: 1268.61,\n  },\n  {\n    x: 1618343606000,\n    y: 1268.62,\n  },\n  {\n    x: 1618343616000,\n    y: 1268.63,\n  },\n  {\n    x: 1618343636000,\n    y: 1268.64,\n  },\n  {\n    x: 1618343651000,\n    y: 1268.65,\n  },\n  {\n    x: 1618343671000,\n    y: 1268.66,\n  },\n  {\n    x: 1618343676000,\n    y: 1268.67,\n  },\n  {\n    x: 1618343701000,\n    y: 1268.68,\n  },\n  {\n    x: 1618343706000,\n    y: 1268.69,\n  },\n  {\n    x: 1618343726000,\n    y: 1268.7,\n  },\n  {\n    x: 1618343741000,\n    y: 1268.71,\n  },\n  {\n    x: 1618343756000,\n    y: 1268.72,\n  },\n  {\n    x: 1618343776000,\n    y: 1268.73,\n  },\n  {\n    x: 1618343796000,\n    y: 1268.74,\n  },\n  {\n    x: 1618343816000,\n    y: 1268.76,\n  },\n  {\n    x: 1618343826000,\n    y: 1268.77,\n  },\n  {\n    x: 1618343836000,\n    y: 1268.78,\n  },\n  {\n    x: 1618343851000,\n    y: 1268.79,\n  },\n  {\n    x: 1618343871000,\n    y: 1268.8,\n  },\n  {\n    x: 1618343881000,\n    y: 1268.81,\n  },\n  {\n    x: 1618343896000,\n    y: 1268.82,\n  },\n  {\n    x: 1618343906000,\n    y: 1268.83,\n  },\n  {\n    x: 1618343916000,\n    y: 1268.84,\n  },\n  {\n    x: 1618343926000,\n    y: 1268.85,\n  },\n  {\n    x: 1618343946000,\n    y: 1268.86,\n  },\n  {\n    x: 1618343956000,\n    y: 1268.87,\n  },\n  {\n    x: 1618343976000,\n    y: 1268.88,\n  },\n  {\n    x: 1618343996000,\n    y: 1268.89,\n  },\n  {\n    x: 1618344021000,\n    y: 1268.9,\n  },\n  {\n    x: 1618344031000,\n    y: 1268.91,\n  },\n  {\n    x: 1618344056000,\n    y: 1268.92,\n  },\n  {\n    x: 1618344066000,\n    y: 1268.93,\n  },\n  {\n    x: 1618344071000,\n    y: 1268.94,\n  },\n  {\n    x: 1618344091000,\n    y: 1268.95,\n  },\n  {\n    x: 1618344101000,\n    y: 1268.96,\n  },\n  {\n    x: 1618344111000,\n    y: 1268.97,\n  },\n  {\n    x: 1618344126000,\n    y: 1268.98,\n  },\n  {\n    x: 1618344136000,\n    y: 1268.99,\n  },\n  {\n    x: 1618344146000,\n    y: 1269,\n  },\n  {\n    x: 1618344176000,\n    y: 1269.01,\n  },\n  {\n    x: 1618344181000,\n    y: 1269.02,\n  },\n  {\n    x: 1618344211000,\n    y: 1269.03,\n  },\n  {\n    x: 1618344216000,\n    y: 1269.04,\n  },\n  {\n    x: 1618344226000,\n    y: 1269.05,\n  },\n  {\n    x: 1618344231000,\n    y: 1269.06,\n  },\n  {\n    x: 1618344251000,\n    y: 1269.07,\n  },\n  {\n    x: 1618344271000,\n    y: 1269.08,\n  },\n  {\n    x: 1618344286000,\n    y: 1269.09,\n  },\n  {\n    x: 1618344306000,\n    y: 1269.1,\n  },\n  {\n    x: 1618344316000,\n    y: 1269.11,\n  },\n  {\n    x: 1618344326000,\n    y: 1269.12,\n  },\n  {\n    x: 1618344346000,\n    y: 1269.13,\n  },\n  {\n    x: 1618344366000,\n    y: 1269.14,\n  },\n  {\n    x: 1618344391000,\n    y: 1269.15,\n  },\n  {\n    x: 1618344406000,\n    y: 1269.16,\n  },\n  {\n    x: 1618344411000,\n    y: 1269.17,\n  },\n  {\n    x: 1618344426000,\n    y: 1269.18,\n  },\n  {\n    x: 1618344461000,\n    y: 1269.19,\n  },\n  {\n    x: 1618344476000,\n    y: 1269.2,\n  },\n  {\n    x: 1618344486000,\n    y: 1269.21,\n  },\n  {\n    x: 1618344491000,\n    y: 1269.22,\n  },\n  {\n    x: 1618344501000,\n    y: 1269.23,\n  },\n  {\n    x: 1618344511000,\n    y: 1269.24,\n  },\n  {\n    x: 1618344546000,\n    y: 1269.26,\n  },\n  {\n    x: 1618344556000,\n    y: 1269.27,\n  },\n  {\n    x: 1618344566000,\n    y: 1269.28,\n  },\n  {\n    x: 1618344571000,\n    y: 1269.29,\n  },\n  {\n    x: 1618344586000,\n    y: 1269.3,\n  },\n  {\n    x: 1618344596000,\n    y: 1269.31,\n  },\n  {\n    x: 1618344601000,\n    y: 1269.32,\n  },\n  {\n    x: 1618344616000,\n    y: 1269.33,\n  },\n  {\n    x: 1618344636000,\n    y: 1269.34,\n  },\n  {\n    x: 1618344646000,\n    y: 1269.35,\n  },\n  {\n    x: 1618344656000,\n    y: 1269.36,\n  },\n  {\n    x: 1618344666000,\n    y: 1269.37,\n  },\n  {\n    x: 1618344676000,\n    y: 1269.38,\n  },\n  {\n    x: 1618344686000,\n    y: 1269.39,\n  },\n  {\n    x: 1618344706000,\n    y: 1269.4,\n  },\n  {\n    x: 1618344716000,\n    y: 1269.41,\n  },\n  {\n    x: 1618344731000,\n    y: 1269.42,\n  },\n  {\n    x: 1618344736000,\n    y: 1269.43,\n  },\n  {\n    x: 1618344746000,\n    y: 1269.44,\n  },\n  {\n    x: 1618344756000,\n    y: 1269.45,\n  },\n  {\n    x: 1618344771000,\n    y: 1269.46,\n  },\n  {\n    x: 1618344781000,\n    y: 1269.47,\n  },\n  {\n    x: 1618344796000,\n    y: 1269.48,\n  },\n  {\n    x: 1618344806000,\n    y: 1269.49,\n  },\n  {\n    x: 1618344821000,\n    y: 1269.5,\n  },\n  {\n    x: 1618344836000,\n    y: 1269.51,\n  },\n  {\n    x: 1618345211000,\n    y: 1269.7,\n  },\n  {\n    x: 1618345406000,\n    y: 1269.85,\n  },\n  {\n    x: 1618346746000,\n    y: 1269.86,\n  },\n  {\n    x: 1618346756000,\n    y: 1269.87,\n  },\n  {\n    x: 1618346771000,\n    y: 1269.88,\n  },\n  {\n    x: 1618346786000,\n    y: 1269.89,\n  },\n  {\n    x: 1618346831000,\n    y: 1269.91,\n  },\n  {\n    x: 1618346841000,\n    y: 1269.92,\n  },\n  {\n    x: 1618346851000,\n    y: 1269.93,\n  },\n  {\n    x: 1618346881000,\n    y: 1269.94,\n  },\n  {\n    x: 1618346901000,\n    y: 1270.7,\n  },\n  {\n    x: 1618346916000,\n    y: 1270.71,\n  },\n  {\n    x: 1618346936000,\n    y: 1270.72,\n  },\n  {\n    x: 1618346956000,\n    y: 1270.73,\n  },\n  {\n    x: 1618346971000,\n    y: 1270.74,\n  },\n  {\n    x: 1618346981000,\n    y: 1270.75,\n  },\n  {\n    x: 1618347001000,\n    y: 1270.76,\n  },\n  {\n    x: 1618347026000,\n    y: 1270.77,\n  },\n  {\n    x: 1618347041000,\n    y: 1270.78,\n  },\n  {\n    x: 1618347051000,\n    y: 1270.79,\n  },\n  {\n    x: 1618347071000,\n    y: 1270.8,\n  },\n  {\n    x: 1618347096000,\n    y: 1270.81,\n  },\n  {\n    x: 1618347101000,\n    y: 1270.82,\n  },\n  {\n    x: 1618347121000,\n    y: 1270.83,\n  },\n  {\n    x: 1618347146000,\n    y: 1270.84,\n  },\n  {\n    x: 1618347161000,\n    y: 1270.86,\n  },\n  {\n    x: 1618347186000,\n    y: 1270.87,\n  },\n  {\n    x: 1618347216000,\n    y: 1270.88,\n  },\n  {\n    x: 1618347231000,\n    y: 1270.89,\n  },\n  {\n    x: 1618347241000,\n    y: 1270.9,\n  },\n  {\n    x: 1618347256000,\n    y: 1270.91,\n  },\n  {\n    x: 1618347271000,\n    y: 1270.92,\n  },\n  {\n    x: 1618347296000,\n    y: 1270.93,\n  },\n  {\n    x: 1618347321000,\n    y: 1270.94,\n  },\n  {\n    x: 1618347331000,\n    y: 1270.95,\n  },\n  {\n    x: 1618347341000,\n    y: 1270.96,\n  },\n  {\n    x: 1618347361000,\n    y: 1270.97,\n  },\n  {\n    x: 1618347376000,\n    y: 1270.98,\n  },\n  {\n    x: 1618347386000,\n    y: 1270.99,\n  },\n  {\n    x: 1618347396000,\n    y: 1271,\n  },\n  {\n    x: 1618347461000,\n    y: 1271.01,\n  },\n  {\n    x: 1618347481000,\n    y: 1271.02,\n  },\n  {\n    x: 1618347511000,\n    y: 1271.03,\n  },\n  {\n    x: 1618347531000,\n    y: 1271.04,\n  },\n  {\n    x: 1618347541000,\n    y: 1271.05,\n  },\n  {\n    x: 1618347551000,\n    y: 1271.06,\n  },\n  {\n    x: 1618347571000,\n    y: 1271.07,\n  },\n  {\n    x: 1618347596000,\n    y: 1271.08,\n  },\n  {\n    x: 1618347606000,\n    y: 1271.09,\n  },\n  {\n    x: 1618347626000,\n    y: 1271.1,\n  },\n  {\n    x: 1618347651000,\n    y: 1271.11,\n  },\n  {\n    x: 1618347666000,\n    y: 1271.12,\n  },\n  {\n    x: 1618347681000,\n    y: 1271.13,\n  },\n  {\n    x: 1618347701000,\n    y: 1271.14,\n  },\n  {\n    x: 1618347726000,\n    y: 1271.15,\n  },\n  {\n    x: 1618347736000,\n    y: 1271.16,\n  },\n  {\n    x: 1618347751000,\n    y: 1271.17,\n  },\n  {\n    x: 1618347776000,\n    y: 1271.18,\n  },\n  {\n    x: 1618347791000,\n    y: 1271.19,\n  },\n  {\n    x: 1618347816000,\n    y: 1271.2,\n  },\n  {\n    x: 1618347836000,\n    y: 1271.21,\n  },\n  {\n    x: 1618347851000,\n    y: 1271.22,\n  },\n  {\n    x: 1618347866000,\n    y: 1271.23,\n  },\n  {\n    x: 1618347881000,\n    y: 1271.24,\n  },\n  {\n    x: 1618347911000,\n    y: 1271.25,\n  },\n  {\n    x: 1618347926000,\n    y: 1271.26,\n  },\n  {\n    x: 1618347956000,\n    y: 1271.27,\n  },\n  {\n    x: 1618347981000,\n    y: 1271.28,\n  },\n  {\n    x: 1618347996000,\n    y: 1271.29,\n  },\n  {\n    x: 1618348021000,\n    y: 1271.3,\n  },\n  {\n    x: 1618348051000,\n    y: 1271.31,\n  },\n  {\n    x: 1618348071000,\n    y: 1271.32,\n  },\n  {\n    x: 1618348086000,\n    y: 1271.33,\n  },\n  {\n    x: 1618348111000,\n    y: 1271.34,\n  },\n  {\n    x: 1618348136000,\n    y: 1271.35,\n  },\n  {\n    x: 1618348161000,\n    y: 1271.36,\n  },\n  {\n    x: 1618348181000,\n    y: 1271.37,\n  },\n  {\n    x: 1618348196000,\n    y: 1271.38,\n  },\n  {\n    x: 1618348216000,\n    y: 1271.39,\n  },\n  {\n    x: 1618348236000,\n    y: 1271.4,\n  },\n  {\n    x: 1618348256000,\n    y: 1271.41,\n  },\n  {\n    x: 1618348271000,\n    y: 1271.42,\n  },\n  {\n    x: 1618348281000,\n    y: 1271.43,\n  },\n  {\n    x: 1618348291000,\n    y: 1271.44,\n  },\n  {\n    x: 1618348296000,\n    y: 1271.45,\n  },\n  {\n    x: 1618348326000,\n    y: 1271.46,\n  },\n  {\n    x: 1618348336000,\n    y: 1271.47,\n  },\n  {\n    x: 1618348351000,\n    y: 1271.48,\n  },\n  {\n    x: 1618348371000,\n    y: 1271.49,\n  },\n  {\n    x: 1618348381000,\n    y: 1271.5,\n  },\n  {\n    x: 1618348396000,\n    y: 1271.51,\n  },\n  {\n    x: 1618348406000,\n    y: 1271.52,\n  },\n  {\n    x: 1618348416000,\n    y: 1271.53,\n  },\n  {\n    x: 1618348426000,\n    y: 1271.54,\n  },\n  {\n    x: 1618348436000,\n    y: 1271.55,\n  },\n  {\n    x: 1618348456000,\n    y: 1271.56,\n  },\n  {\n    x: 1618348471000,\n    y: 1271.57,\n  },\n  {\n    x: 1618348486000,\n    y: 1271.58,\n  },\n  {\n    x: 1618348496000,\n    y: 1271.59,\n  },\n  {\n    x: 1618348521000,\n    y: 1271.6,\n  },\n  {\n    x: 1618348536000,\n    y: 1271.61,\n  },\n  {\n    x: 1618348546000,\n    y: 1271.62,\n  },\n  {\n    x: 1618348561000,\n    y: 1271.63,\n  },\n  {\n    x: 1618348571000,\n    y: 1271.64,\n  },\n  {\n    x: 1618348581000,\n    y: 1271.65,\n  },\n  {\n    x: 1618348596000,\n    y: 1271.66,\n  },\n  {\n    x: 1618348606000,\n    y: 1271.67,\n  },\n  {\n    x: 1618348621000,\n    y: 1271.68,\n  },\n  {\n    x: 1618348641000,\n    y: 1271.69,\n  },\n  {\n    x: 1618348656000,\n    y: 1271.7,\n  },\n  {\n    x: 1618348661000,\n    y: 1271.71,\n  },\n  {\n    x: 1618348671000,\n    y: 1271.72,\n  },\n  {\n    x: 1618348686000,\n    y: 1271.73,\n  },\n  {\n    x: 1618348696000,\n    y: 1271.74,\n  },\n  {\n    x: 1618348706000,\n    y: 1271.75,\n  },\n  {\n    x: 1618348716000,\n    y: 1271.76,\n  },\n  {\n    x: 1618348736000,\n    y: 1271.77,\n  },\n  {\n    x: 1618348751000,\n    y: 1271.78,\n  },\n  {\n    x: 1618348766000,\n    y: 1271.79,\n  },\n  {\n    x: 1618348771000,\n    y: 1271.8,\n  },\n  {\n    x: 1618348781000,\n    y: 1271.81,\n  },\n  {\n    x: 1618348796000,\n    y: 1271.82,\n  },\n  {\n    x: 1618348806000,\n    y: 1271.83,\n  },\n  {\n    x: 1618348816000,\n    y: 1271.84,\n  },\n  {\n    x: 1618348836000,\n    y: 1271.85,\n  },\n  {\n    x: 1618348841000,\n    y: 1271.86,\n  },\n  {\n    x: 1618348851000,\n    y: 1271.87,\n  },\n  {\n    x: 1618348866000,\n    y: 1271.88,\n  },\n  {\n    x: 1618348881000,\n    y: 1271.89,\n  },\n  {\n    x: 1618348901000,\n    y: 1271.9,\n  },\n  {\n    x: 1618348911000,\n    y: 1271.91,\n  },\n  {\n    x: 1618348921000,\n    y: 1271.92,\n  },\n  {\n    x: 1618348936000,\n    y: 1271.93,\n  },\n  {\n    x: 1618348941000,\n    y: 1271.94,\n  },\n  {\n    x: 1618348956000,\n    y: 1271.95,\n  },\n  {\n    x: 1618348971000,\n    y: 1271.96,\n  },\n  {\n    x: 1618348986000,\n    y: 1271.97,\n  },\n  {\n    x: 1618348991000,\n    y: 1271.98,\n  },\n  {\n    x: 1618349001000,\n    y: 1271.99,\n  },\n  {\n    x: 1618349011000,\n    y: 1272,\n  },\n  {\n    x: 1618349026000,\n    y: 1272.01,\n  },\n  {\n    x: 1618349041000,\n    y: 1272.02,\n  },\n  {\n    x: 1618349181000,\n    y: 1272.03,\n  },\n  {\n    x: 1618349196000,\n    y: 1272.04,\n  },\n  {\n    x: 1618349221000,\n    y: 1272.05,\n  },\n  {\n    x: 1618349236000,\n    y: 1272.06,\n  },\n  {\n    x: 1618349246000,\n    y: 1272.07,\n  },\n  {\n    x: 1618349256000,\n    y: 1272.08,\n  },\n  {\n    x: 1618349276000,\n    y: 1272.09,\n  },\n  {\n    x: 1618349291000,\n    y: 1272.1,\n  },\n  {\n    x: 1618349296000,\n    y: 1272.11,\n  },\n  {\n    x: 1618349306000,\n    y: 1272.12,\n  },\n  {\n    x: 1618349316000,\n    y: 1272.13,\n  },\n  {\n    x: 1618349331000,\n    y: 1272.14,\n  },\n  {\n    x: 1618349341000,\n    y: 1272.15,\n  },\n  {\n    x: 1618349346000,\n    y: 1272.16,\n  },\n  {\n    x: 1618349351000,\n    y: 1272.17,\n  },\n  {\n    x: 1618349366000,\n    y: 1272.18,\n  },\n  {\n    x: 1618349376000,\n    y: 1272.19,\n  },\n  {\n    x: 1618349391000,\n    y: 1272.2,\n  },\n  {\n    x: 1618349396000,\n    y: 1272.21,\n  },\n  {\n    x: 1618349401000,\n    y: 1272.22,\n  },\n  {\n    x: 1618349421000,\n    y: 1272.23,\n  },\n  {\n    x: 1618349436000,\n    y: 1272.24,\n  },\n  {\n    x: 1618349446000,\n    y: 1272.25,\n  },\n  {\n    x: 1618349461000,\n    y: 1272.26,\n  },\n  {\n    x: 1618349486000,\n    y: 1272.27,\n  },\n  {\n    x: 1618349521000,\n    y: 1272.28,\n  },\n  {\n    x: 1618349541000,\n    y: 1272.29,\n  },\n  {\n    x: 1618349561000,\n    y: 1272.3,\n  },\n  {\n    x: 1618349571000,\n    y: 1272.31,\n  },\n  {\n    x: 1618349576000,\n    y: 1272.32,\n  },\n  {\n    x: 1618349596000,\n    y: 1272.33,\n  },\n  {\n    x: 1618349626000,\n    y: 1272.34,\n  },\n  {\n    x: 1618349641000,\n    y: 1272.35,\n  },\n  {\n    x: 1618349656000,\n    y: 1272.36,\n  },\n  {\n    x: 1618349671000,\n    y: 1272.37,\n  },\n  {\n    x: 1618349691000,\n    y: 1272.38,\n  },\n  {\n    x: 1618349711000,\n    y: 1272.39,\n  },\n  {\n    x: 1618349716000,\n    y: 1272.4,\n  },\n  {\n    x: 1618349751000,\n    y: 1272.41,\n  },\n  {\n    x: 1618349766000,\n    y: 1272.42,\n  },\n  {\n    x: 1618349776000,\n    y: 1272.43,\n  },\n  {\n    x: 1618349791000,\n    y: 1272.44,\n  },\n  {\n    x: 1618349796000,\n    y: 1272.45,\n  },\n  {\n    x: 1618349811000,\n    y: 1272.46,\n  },\n  {\n    x: 1618349831000,\n    y: 1272.47,\n  },\n  {\n    x: 1618349846000,\n    y: 1272.48,\n  },\n  {\n    x: 1618349866000,\n    y: 1272.49,\n  },\n  {\n    x: 1618349881000,\n    y: 1272.5,\n  },\n  {\n    x: 1618349891000,\n    y: 1272.51,\n  },\n  {\n    x: 1618349921000,\n    y: 1272.52,\n  },\n  {\n    x: 1618349936000,\n    y: 1272.53,\n  },\n  {\n    x: 1618349941000,\n    y: 1272.54,\n  },\n  {\n    x: 1618349956000,\n    y: 1272.55,\n  },\n  {\n    x: 1618349981000,\n    y: 1272.56,\n  },\n  {\n    x: 1618350001000,\n    y: 1272.57,\n  },\n  {\n    x: 1618350006000,\n    y: 1272.58,\n  },\n  {\n    x: 1618350021000,\n    y: 1272.59,\n  },\n  {\n    x: 1618350036000,\n    y: 1272.6,\n  },\n  {\n    x: 1618350056000,\n    y: 1272.61,\n  },\n  {\n    x: 1618350066000,\n    y: 1272.62,\n  },\n  {\n    x: 1618350086000,\n    y: 1272.63,\n  },\n  {\n    x: 1618350101000,\n    y: 1272.64,\n  },\n  {\n    x: 1618350116000,\n    y: 1272.65,\n  },\n  {\n    x: 1618350126000,\n    y: 1272.66,\n  },\n  {\n    x: 1618350141000,\n    y: 1272.67,\n  },\n  {\n    x: 1618350161000,\n    y: 1272.68,\n  },\n  {\n    x: 1618350166000,\n    y: 1272.69,\n  },\n  {\n    x: 1618350186000,\n    y: 1272.7,\n  },\n  {\n    x: 1618350196000,\n    y: 1272.71,\n  },\n  {\n    x: 1618350216000,\n    y: 1272.72,\n  },\n  {\n    x: 1618350231000,\n    y: 1272.73,\n  },\n  {\n    x: 1618350246000,\n    y: 1272.74,\n  },\n  {\n    x: 1618350256000,\n    y: 1272.75,\n  },\n  {\n    x: 1618350271000,\n    y: 1272.76,\n  },\n  {\n    x: 1618350286000,\n    y: 1272.77,\n  },\n  {\n    x: 1618350311000,\n    y: 1272.78,\n  },\n  {\n    x: 1618350331000,\n    y: 1272.79,\n  },\n  {\n    x: 1618350341000,\n    y: 1272.8,\n  },\n  {\n    x: 1618350516000,\n    y: 1272.81,\n  },\n  {\n    x: 1618350526000,\n    y: 1272.82,\n  },\n  {\n    x: 1618350541000,\n    y: 1272.83,\n  },\n  {\n    x: 1618350561000,\n    y: 1272.84,\n  },\n  {\n    x: 1618350576000,\n    y: 1272.85,\n  },\n  {\n    x: 1618350586000,\n    y: 1272.86,\n  },\n  {\n    x: 1618350596000,\n    y: 1272.87,\n  },\n  {\n    x: 1618350621000,\n    y: 1272.88,\n  },\n  {\n    x: 1618350631000,\n    y: 1272.89,\n  },\n  {\n    x: 1618350646000,\n    y: 1272.9,\n  },\n  {\n    x: 1618350661000,\n    y: 1272.91,\n  },\n  {\n    x: 1618350676000,\n    y: 1272.92,\n  },\n  {\n    x: 1618350696000,\n    y: 1272.93,\n  },\n  {\n    x: 1618350706000,\n    y: 1272.94,\n  },\n  {\n    x: 1618350731000,\n    y: 1272.95,\n  },\n  {\n    x: 1618350746000,\n    y: 1272.96,\n  },\n  {\n    x: 1618350756000,\n    y: 1272.97,\n  },\n  {\n    x: 1618350766000,\n    y: 1272.98,\n  },\n  {\n    x: 1618350806000,\n    y: 1272.99,\n  },\n  {\n    x: 1618350816000,\n    y: 1273,\n  },\n  {\n    x: 1618350821000,\n    y: 1273.01,\n  },\n  {\n    x: 1618350841000,\n    y: 1273.02,\n  },\n  {\n    x: 1618350846000,\n    y: 1273.03,\n  },\n  {\n    x: 1618350851000,\n    y: 1273.04,\n  },\n  {\n    x: 1618350866000,\n    y: 1273.05,\n  },\n  {\n    x: 1618350876000,\n    y: 1273.06,\n  },\n  {\n    x: 1618350891000,\n    y: 1273.07,\n  },\n  {\n    x: 1618350906000,\n    y: 1273.08,\n  },\n  {\n    x: 1618350916000,\n    y: 1273.09,\n  },\n  {\n    x: 1618350931000,\n    y: 1273.1,\n  },\n  {\n    x: 1618350951000,\n    y: 1273.11,\n  },\n  {\n    x: 1618350966000,\n    y: 1273.12,\n  },\n  {\n    x: 1618350981000,\n    y: 1273.13,\n  },\n  {\n    x: 1618351011000,\n    y: 1273.14,\n  },\n  {\n    x: 1618351026000,\n    y: 1273.15,\n  },\n  {\n    x: 1618351046000,\n    y: 1273.16,\n  },\n  {\n    x: 1618351071000,\n    y: 1273.17,\n  },\n  {\n    x: 1618351091000,\n    y: 1273.18,\n  },\n  {\n    x: 1618351101000,\n    y: 1273.19,\n  },\n  {\n    x: 1618351111000,\n    y: 1273.2,\n  },\n  {\n    x: 1618351126000,\n    y: 1273.21,\n  },\n  {\n    x: 1618351151000,\n    y: 1273.22,\n  },\n  {\n    x: 1618351166000,\n    y: 1273.23,\n  },\n  {\n    x: 1618351181000,\n    y: 1273.24,\n  },\n  {\n    x: 1618351201000,\n    y: 1273.25,\n  },\n  {\n    x: 1618351211000,\n    y: 1273.26,\n  },\n  {\n    x: 1618351231000,\n    y: 1273.27,\n  },\n  {\n    x: 1618351261000,\n    y: 1273.28,\n  },\n  {\n    x: 1618351291000,\n    y: 1273.29,\n  },\n  {\n    x: 1618351306000,\n    y: 1273.3,\n  },\n  {\n    x: 1618351316000,\n    y: 1273.31,\n  },\n  {\n    x: 1618351326000,\n    y: 1273.32,\n  },\n  {\n    x: 1618351341000,\n    y: 1273.33,\n  },\n  {\n    x: 1618351361000,\n    y: 1273.34,\n  },\n  {\n    x: 1618351381000,\n    y: 1273.35,\n  },\n  {\n    x: 1618351396000,\n    y: 1273.36,\n  },\n  {\n    x: 1618351411000,\n    y: 1273.37,\n  },\n  {\n    x: 1618351426000,\n    y: 1273.38,\n  },\n  {\n    x: 1618351441000,\n    y: 1273.39,\n  },\n  {\n    x: 1618351461000,\n    y: 1273.4,\n  },\n  {\n    x: 1618351476000,\n    y: 1273.41,\n  },\n  {\n    x: 1618351486000,\n    y: 1273.42,\n  },\n  {\n    x: 1618351501000,\n    y: 1273.43,\n  },\n  {\n    x: 1618351511000,\n    y: 1273.44,\n  },\n  {\n    x: 1618351536000,\n    y: 1273.45,\n  },\n  {\n    x: 1618351566000,\n    y: 1273.46,\n  },\n  {\n    x: 1618351581000,\n    y: 1273.47,\n  },\n  {\n    x: 1618351596000,\n    y: 1273.48,\n  },\n  {\n    x: 1618351616000,\n    y: 1273.49,\n  },\n  {\n    x: 1618351636000,\n    y: 1273.5,\n  },\n  {\n    x: 1618351646000,\n    y: 1273.51,\n  },\n  {\n    x: 1618351656000,\n    y: 1273.52,\n  },\n  {\n    x: 1618351666000,\n    y: 1273.53,\n  },\n  {\n    x: 1618351681000,\n    y: 1273.54,\n  },\n  {\n    x: 1618351691000,\n    y: 1273.55,\n  },\n  {\n    x: 1618351701000,\n    y: 1273.56,\n  },\n  {\n    x: 1618351716000,\n    y: 1273.57,\n  },\n  {\n    x: 1618351726000,\n    y: 1273.58,\n  },\n  {\n    x: 1618351736000,\n    y: 1273.59,\n  },\n  {\n    x: 1618351751000,\n    y: 1273.6,\n  },\n  {\n    x: 1618351766000,\n    y: 1273.61,\n  },\n  {\n    x: 1618351786000,\n    y: 1273.62,\n  },\n  {\n    x: 1618351796000,\n    y: 1273.63,\n  },\n  {\n    x: 1618351806000,\n    y: 1273.64,\n  },\n  {\n    x: 1618351816000,\n    y: 1273.65,\n  },\n  {\n    x: 1618351836000,\n    y: 1273.66,\n  },\n  {\n    x: 1618351856000,\n    y: 1273.67,\n  },\n  {\n    x: 1618351866000,\n    y: 1273.68,\n  },\n  {\n    x: 1618351881000,\n    y: 1273.69,\n  },\n  {\n    x: 1618351891000,\n    y: 1273.7,\n  },\n  {\n    x: 1618351906000,\n    y: 1273.71,\n  },\n  {\n    x: 1618351916000,\n    y: 1273.72,\n  },\n  {\n    x: 1618351931000,\n    y: 1273.73,\n  },\n  {\n    x: 1618351951000,\n    y: 1273.74,\n  },\n  {\n    x: 1618351966000,\n    y: 1273.75,\n  },\n  {\n    x: 1618351981000,\n    y: 1273.76,\n  },\n  {\n    x: 1618351996000,\n    y: 1273.77,\n  },\n  {\n    x: 1618352016000,\n    y: 1273.78,\n  },\n  {\n    x: 1618352021000,\n    y: 1273.79,\n  },\n  {\n    x: 1618352036000,\n    y: 1273.8,\n  },\n  {\n    x: 1618352051000,\n    y: 1273.81,\n  },\n  {\n    x: 1618352061000,\n    y: 1273.82,\n  },\n  {\n    x: 1618352076000,\n    y: 1273.83,\n  },\n  {\n    x: 1618352091000,\n    y: 1273.84,\n  },\n  {\n    x: 1618352101000,\n    y: 1273.85,\n  },\n  {\n    x: 1618352111000,\n    y: 1273.86,\n  },\n  {\n    x: 1618352121000,\n    y: 1273.87,\n  },\n  {\n    x: 1618352136000,\n    y: 1273.88,\n  },\n  {\n    x: 1618352156000,\n    y: 1273.89,\n  },\n  {\n    x: 1618352171000,\n    y: 1273.9,\n  },\n  {\n    x: 1618352186000,\n    y: 1273.91,\n  },\n  {\n    x: 1618352201000,\n    y: 1273.92,\n  },\n  {\n    x: 1618352216000,\n    y: 1273.93,\n  },\n  {\n    x: 1618352231000,\n    y: 1273.94,\n  },\n  {\n    x: 1618352246000,\n    y: 1273.95,\n  },\n  {\n    x: 1618352256000,\n    y: 1273.96,\n  },\n  {\n    x: 1618352266000,\n    y: 1273.97,\n  },\n  {\n    x: 1618352276000,\n    y: 1273.98,\n  },\n  {\n    x: 1618352291000,\n    y: 1273.99,\n  },\n  {\n    x: 1618352306000,\n    y: 1274,\n  },\n  {\n    x: 1618352871000,\n    y: 1274.01,\n  },\n  {\n    x: 1618352876000,\n    y: 1274.02,\n  },\n  {\n    x: 1618352891000,\n    y: 1274.04,\n  },\n  {\n    x: 1618352896000,\n    y: 1274.06,\n  },\n  {\n    x: 1618352906000,\n    y: 1274.08,\n  },\n  {\n    x: 1618352926000,\n    y: 1274.09,\n  },\n  {\n    x: 1618352936000,\n    y: 1274.1,\n  },\n  {\n    x: 1618352941000,\n    y: 1274.11,\n  },\n  {\n    x: 1618352946000,\n    y: 1274.12,\n  },\n  {\n    x: 1618352966000,\n    y: 1274.13,\n  },\n  {\n    x: 1618352971000,\n    y: 1274.14,\n  },\n  {\n    x: 1618352976000,\n    y: 1274.15,\n  },\n  {\n    x: 1618352986000,\n    y: 1274.16,\n  },\n  {\n    x: 1618353006000,\n    y: 1274.17,\n  },\n  {\n    x: 1618353016000,\n    y: 1274.19,\n  },\n  {\n    x: 1618353036000,\n    y: 1274.2,\n  },\n  {\n    x: 1618353056000,\n    y: 1274.21,\n  },\n  {\n    x: 1618353061000,\n    y: 1274.22,\n  },\n  {\n    x: 1618353066000,\n    y: 1274.23,\n  },\n  {\n    x: 1618353091000,\n    y: 1274.24,\n  },\n  {\n    x: 1618353096000,\n    y: 1274.25,\n  },\n  {\n    x: 1618353111000,\n    y: 1274.26,\n  },\n  {\n    x: 1618353126000,\n    y: 1274.27,\n  },\n  {\n    x: 1618353131000,\n    y: 1274.28,\n  },\n  {\n    x: 1618353146000,\n    y: 1274.29,\n  },\n  {\n    x: 1618353156000,\n    y: 1274.3,\n  },\n  {\n    x: 1618353171000,\n    y: 1274.31,\n  },\n  {\n    x: 1618353186000,\n    y: 1274.32,\n  },\n  {\n    x: 1618353196000,\n    y: 1274.33,\n  },\n  {\n    x: 1618353211000,\n    y: 1274.34,\n  },\n  {\n    x: 1618353226000,\n    y: 1274.35,\n  },\n  {\n    x: 1618353241000,\n    y: 1274.36,\n  },\n  {\n    x: 1618353266000,\n    y: 1274.37,\n  },\n  {\n    x: 1618353276000,\n    y: 1274.38,\n  },\n  {\n    x: 1618353291000,\n    y: 1274.39,\n  },\n  {\n    x: 1618353301000,\n    y: 1274.4,\n  },\n  {\n    x: 1618353311000,\n    y: 1274.41,\n  },\n  {\n    x: 1618353326000,\n    y: 1274.42,\n  },\n  {\n    x: 1618353336000,\n    y: 1274.43,\n  },\n  {\n    x: 1618353346000,\n    y: 1274.44,\n  },\n  {\n    x: 1618353361000,\n    y: 1274.45,\n  },\n  {\n    x: 1618353376000,\n    y: 1274.46,\n  },\n  {\n    x: 1618353391000,\n    y: 1274.47,\n  },\n  {\n    x: 1618353401000,\n    y: 1274.48,\n  },\n  {\n    x: 1618353416000,\n    y: 1274.49,\n  },\n  {\n    x: 1618353436000,\n    y: 1274.5,\n  },\n  {\n    x: 1618353451000,\n    y: 1274.51,\n  },\n  {\n    x: 1618353466000,\n    y: 1274.52,\n  },\n  {\n    x: 1618353481000,\n    y: 1274.53,\n  },\n  {\n    x: 1618353491000,\n    y: 1274.54,\n  },\n  {\n    x: 1618353511000,\n    y: 1274.55,\n  },\n  {\n    x: 1618353521000,\n    y: 1274.56,\n  },\n  {\n    x: 1618353541000,\n    y: 1274.57,\n  },\n  {\n    x: 1618353561000,\n    y: 1274.58,\n  },\n  {\n    x: 1618353571000,\n    y: 1274.59,\n  },\n  {\n    x: 1618353581000,\n    y: 1274.6,\n  },\n  {\n    x: 1618353606000,\n    y: 1274.61,\n  },\n  {\n    x: 1618353616000,\n    y: 1274.62,\n  },\n  {\n    x: 1618353626000,\n    y: 1274.63,\n  },\n  {\n    x: 1618353641000,\n    y: 1274.64,\n  },\n  {\n    x: 1618353651000,\n    y: 1274.65,\n  },\n  {\n    x: 1618353666000,\n    y: 1274.66,\n  },\n  {\n    x: 1618353676000,\n    y: 1274.67,\n  },\n  {\n    x: 1618353696000,\n    y: 1274.68,\n  },\n  {\n    x: 1618353716000,\n    y: 1274.69,\n  },\n  {\n    x: 1618353721000,\n    y: 1274.7,\n  },\n  {\n    x: 1618353731000,\n    y: 1274.71,\n  },\n  {\n    x: 1618353741000,\n    y: 1274.72,\n  },\n  {\n    x: 1618353756000,\n    y: 1274.73,\n  },\n  {\n    x: 1618353771000,\n    y: 1274.74,\n  },\n  {\n    x: 1618353786000,\n    y: 1274.75,\n  },\n  {\n    x: 1618353796000,\n    y: 1274.76,\n  },\n  {\n    x: 1618353816000,\n    y: 1274.77,\n  },\n  {\n    x: 1618353836000,\n    y: 1274.78,\n  },\n  {\n    x: 1618353846000,\n    y: 1274.79,\n  },\n  {\n    x: 1618353856000,\n    y: 1274.95,\n  },\n  {\n    x: 1618354076000,\n    y: 1274.96,\n  },\n  {\n    x: 1618354091000,\n    y: 1274.97,\n  },\n  {\n    x: 1618354096000,\n    y: 1274.98,\n  },\n  {\n    x: 1618354106000,\n    y: 1274.99,\n  },\n  {\n    x: 1618354136000,\n    y: 1275,\n  },\n  {\n    x: 1618354141000,\n    y: 1275.01,\n  },\n  {\n    x: 1618354156000,\n    y: 1275.02,\n  },\n  {\n    x: 1618354166000,\n    y: 1275.03,\n  },\n  {\n    x: 1618354181000,\n    y: 1275.04,\n  },\n  {\n    x: 1618354191000,\n    y: 1275.05,\n  },\n  {\n    x: 1618354201000,\n    y: 1275.06,\n  },\n  {\n    x: 1618354216000,\n    y: 1275.07,\n  },\n  {\n    x: 1618354236000,\n    y: 1275.08,\n  },\n  {\n    x: 1618354251000,\n    y: 1275.09,\n  },\n  {\n    x: 1618354266000,\n    y: 1275.1,\n  },\n  {\n    x: 1618354281000,\n    y: 1275.11,\n  },\n  {\n    x: 1618354296000,\n    y: 1275.12,\n  },\n  {\n    x: 1618354311000,\n    y: 1275.13,\n  },\n  {\n    x: 1618354321000,\n    y: 1275.14,\n  },\n  {\n    x: 1618354341000,\n    y: 1275.15,\n  },\n  {\n    x: 1618354346000,\n    y: 1275.16,\n  },\n  {\n    x: 1618354356000,\n    y: 1275.17,\n  },\n  {\n    x: 1618354376000,\n    y: 1275.18,\n  },\n  {\n    x: 1618354396000,\n    y: 1275.19,\n  },\n  {\n    x: 1618354406000,\n    y: 1275.2,\n  },\n  {\n    x: 1618354411000,\n    y: 1275.21,\n  },\n  {\n    x: 1618354426000,\n    y: 1275.22,\n  },\n  {\n    x: 1618354446000,\n    y: 1275.23,\n  },\n  {\n    x: 1618354456000,\n    y: 1275.24,\n  },\n  {\n    x: 1618354471000,\n    y: 1275.25,\n  },\n  {\n    x: 1618354481000,\n    y: 1275.26,\n  },\n  {\n    x: 1618354486000,\n    y: 1275.27,\n  },\n  {\n    x: 1618354496000,\n    y: 1275.28,\n  },\n  {\n    x: 1618354511000,\n    y: 1275.29,\n  },\n  {\n    x: 1618354521000,\n    y: 1275.3,\n  },\n  {\n    x: 1618354541000,\n    y: 1275.31,\n  },\n  {\n    x: 1618354546000,\n    y: 1275.32,\n  },\n  {\n    x: 1618354561000,\n    y: 1275.33,\n  },\n  {\n    x: 1618354586000,\n    y: 1275.34,\n  },\n  {\n    x: 1618354596000,\n    y: 1275.35,\n  },\n  {\n    x: 1618354611000,\n    y: 1275.36,\n  },\n  {\n    x: 1618354621000,\n    y: 1275.37,\n  },\n  {\n    x: 1618354631000,\n    y: 1275.38,\n  },\n  {\n    x: 1618354641000,\n    y: 1275.39,\n  },\n  {\n    x: 1618354656000,\n    y: 1275.4,\n  },\n  {\n    x: 1618354661000,\n    y: 1275.41,\n  },\n  {\n    x: 1618354686000,\n    y: 1275.42,\n  },\n  {\n    x: 1618354706000,\n    y: 1275.43,\n  },\n  {\n    x: 1618354726000,\n    y: 1275.44,\n  },\n  {\n    x: 1618354746000,\n    y: 1275.45,\n  },\n  {\n    x: 1618354766000,\n    y: 1275.46,\n  },\n  {\n    x: 1618354776000,\n    y: 1275.47,\n  },\n  {\n    x: 1618354786000,\n    y: 1275.48,\n  },\n  {\n    x: 1618354801000,\n    y: 1275.49,\n  },\n  {\n    x: 1618354811000,\n    y: 1275.5,\n  },\n  {\n    x: 1618354816000,\n    y: 1275.51,\n  },\n  {\n    x: 1618354831000,\n    y: 1275.52,\n  },\n  {\n    x: 1618354836000,\n    y: 1275.53,\n  },\n  {\n    x: 1618354856000,\n    y: 1275.54,\n  },\n  {\n    x: 1618354871000,\n    y: 1275.55,\n  },\n  {\n    x: 1618354881000,\n    y: 1275.56,\n  },\n  {\n    x: 1618354896000,\n    y: 1275.57,\n  },\n  {\n    x: 1618354911000,\n    y: 1275.58,\n  },\n  {\n    x: 1618354916000,\n    y: 1275.59,\n  },\n  {\n    x: 1618354921000,\n    y: 1275.6,\n  },\n  {\n    x: 1618354931000,\n    y: 1275.61,\n  },\n  {\n    x: 1618354941000,\n    y: 1275.62,\n  },\n  {\n    x: 1618354956000,\n    y: 1275.63,\n  },\n  {\n    x: 1618354971000,\n    y: 1275.64,\n  },\n  {\n    x: 1618354986000,\n    y: 1275.65,\n  },\n  {\n    x: 1618354996000,\n    y: 1275.66,\n  },\n  {\n    x: 1618355006000,\n    y: 1275.67,\n  },\n  {\n    x: 1618355021000,\n    y: 1275.68,\n  },\n  {\n    x: 1618355031000,\n    y: 1275.69,\n  },\n  {\n    x: 1618355041000,\n    y: 1275.7,\n  },\n  {\n    x: 1618355051000,\n    y: 1275.71,\n  },\n  {\n    x: 1618355071000,\n    y: 1275.72,\n  },\n  {\n    x: 1618355086000,\n    y: 1275.73,\n  },\n  {\n    x: 1618355106000,\n    y: 1275.74,\n  },\n  {\n    x: 1618355116000,\n    y: 1275.75,\n  },\n  {\n    x: 1618355136000,\n    y: 1275.76,\n  },\n  {\n    x: 1618355141000,\n    y: 1275.77,\n  },\n  {\n    x: 1618355156000,\n    y: 1275.78,\n  },\n  {\n    x: 1618355166000,\n    y: 1275.79,\n  },\n  {\n    x: 1618355181000,\n    y: 1275.8,\n  },\n  {\n    x: 1618355186000,\n    y: 1275.81,\n  },\n  {\n    x: 1618355191000,\n    y: 1275.82,\n  },\n  {\n    x: 1618355206000,\n    y: 1275.83,\n  },\n  {\n    x: 1618355246000,\n    y: 1275.84,\n  },\n  {\n    x: 1618355261000,\n    y: 1275.85,\n  },\n  {\n    x: 1618355276000,\n    y: 1275.86,\n  },\n  {\n    x: 1618355281000,\n    y: 1275.87,\n  },\n  {\n    x: 1618355306000,\n    y: 1275.88,\n  },\n  {\n    x: 1618355336000,\n    y: 1275.89,\n  },\n  {\n    x: 1618355366000,\n    y: 1275.9,\n  },\n  {\n    x: 1618355386000,\n    y: 1275.91,\n  },\n  {\n    x: 1618355401000,\n    y: 1275.92,\n  },\n  {\n    x: 1618355426000,\n    y: 1275.93,\n  },\n  {\n    x: 1618355431000,\n    y: 1275.94,\n  },\n  {\n    x: 1618355446000,\n    y: 1275.95,\n  },\n  {\n    x: 1618355471000,\n    y: 1275.96,\n  },\n  {\n    x: 1618355491000,\n    y: 1275.97,\n  },\n  {\n    x: 1618355511000,\n    y: 1275.98,\n  },\n  {\n    x: 1618355541000,\n    y: 1275.99,\n  },\n  {\n    x: 1618355556000,\n    y: 1276,\n  },\n  {\n    x: 1618382941000,\n    y: 1276.13,\n  },\n  {\n    x: 1618382946000,\n    y: 1276.33,\n  },\n  {\n    x: 1618382951000,\n    y: 1276.39,\n  },\n  {\n    x: 1618382956000,\n    y: 1276.48,\n  },\n  {\n    x: 1618382961000,\n    y: 1276.59,\n  },\n  {\n    x: 1618382966000,\n    y: 1276.62,\n  },\n  {\n    x: 1618382971000,\n    y: 1276.73,\n  },\n  {\n    x: 1618382976000,\n    y: 1276.95,\n  },\n  {\n    x: 1618382981000,\n    y: 1277.08,\n  },\n  {\n    x: 1618382986000,\n    y: 1277.16,\n  },\n  {\n    x: 1618448871000,\n    y: 1278.42,\n  },\n  {\n    x: 1618448876000,\n    y: 1280.19,\n  },\n  {\n    x: 1618448881000,\n    y: 1280.42,\n  },\n  {\n    x: 1618449101000,\n    y: 1281.88,\n  },\n  {\n    x: 1618449106000,\n    y: 1283.29,\n  },\n  {\n    x: 1618449111000,\n    y: 1285.17,\n  },\n  {\n    x: 1618449116000,\n    y: 1286.35,\n  },\n  {\n    x: 1618449121000,\n    y: 1288.77,\n  },\n  {\n    x: 1618449126000,\n    y: 1289.87,\n  },\n  {\n    x: 1618449131000,\n    y: 1289.98,\n  },\n  {\n    x: 1618449136000,\n    y: 1290.08,\n  },\n  {\n    x: 1618449376000,\n    y: 1290.31,\n  },\n  {\n    x: 1618449381000,\n    y: 1290.68,\n  },\n  {\n    x: 1618449386000,\n    y: 1291.09,\n  },\n  {\n    x: 1618449391000,\n    y: 1291.47,\n  },\n  {\n    x: 1618449396000,\n    y: 1291.86,\n  },\n  {\n    x: 1618449401000,\n    y: 1291.94,\n  },\n  {\n    x: 1618449406000,\n    y: 1292.03,\n  },\n  {\n    x: 1618449416000,\n    y: 1292.13,\n  },\n  {\n    x: 1618449421000,\n    y: 1292.5,\n  },\n  {\n    x: 1618449426000,\n    y: 1292.8,\n  },\n  {\n    x: 1618449431000,\n    y: 1293.11,\n  },\n  {\n    x: 1618449436000,\n    y: 1293.26,\n  },\n  {\n    x: 1618449441000,\n    y: 1293.49,\n  },\n  {\n    x: 1618449446000,\n    y: 1293.75,\n  },\n  {\n    x: 1618449451000,\n    y: 1293.94,\n  },\n  {\n    x: 1618449456000,\n    y: 1294.14,\n  },\n  {\n    x: 1618449461000,\n    y: 1294.36,\n  },\n  {\n    x: 1618449466000,\n    y: 1294.59,\n  },\n  {\n    x: 1618449471000,\n    y: 1294.77,\n  },\n  {\n    x: 1618449476000,\n    y: 1295.02,\n  },\n  {\n    x: 1618449481000,\n    y: 1295.16,\n  },\n  {\n    x: 1618449486000,\n    y: 1295.35,\n  },\n  {\n    x: 1618449491000,\n    y: 1295.46,\n  },\n  {\n    x: 1618449496000,\n    y: 1295.49,\n  },\n  {\n    x: 1618449501000,\n    y: 1295.65,\n  },\n  {\n    x: 1618449506000,\n    y: 1295.82,\n  },\n  {\n    x: 1618449511000,\n    y: 1295.96,\n  },\n  {\n    x: 1618449516000,\n    y: 1296.22,\n  },\n  {\n    x: 1618449521000,\n    y: 1296.23,\n  },\n  {\n    x: 1618449531000,\n    y: 1296.27,\n  },\n  {\n    x: 1618449536000,\n    y: 1296.33,\n  },\n  {\n    x: 1618449541000,\n    y: 1296.55,\n  },\n  {\n    x: 1618449546000,\n    y: 1296.75,\n  },\n  {\n    x: 1618449551000,\n    y: 1296.87,\n  },\n  {\n    x: 1618449556000,\n    y: 1297.11,\n  },\n  {\n    x: 1618449561000,\n    y: 1297.29,\n  },\n  {\n    x: 1618449566000,\n    y: 1297.53,\n  },\n  {\n    x: 1618449571000,\n    y: 1297.65,\n  },\n  {\n    x: 1618449576000,\n    y: 1297.79,\n  },\n  {\n    x: 1618449581000,\n    y: 1297.92,\n  },\n  {\n    x: 1618449586000,\n    y: 1298.11,\n  },\n  {\n    x: 1618449591000,\n    y: 1298.38,\n  },\n  {\n    x: 1618449596000,\n    y: 1298.54,\n  },\n  {\n    x: 1618449601000,\n    y: 1298.83,\n  },\n  {\n    x: 1618449606000,\n    y: 1299.05,\n  },\n  {\n    x: 1618449611000,\n    y: 1299.34,\n  },\n  {\n    x: 1618449616000,\n    y: 1299.54,\n  },\n  {\n    x: 1618449621000,\n    y: 1299.76,\n  },\n  {\n    x: 1618449626000,\n    y: 1299.97,\n  },\n  {\n    x: 1618449631000,\n    y: 1300.2,\n  },\n  {\n    x: 1618449636000,\n    y: 1300.23,\n  },\n  {\n    x: 1618449641000,\n    y: 1300.46,\n  },\n  {\n    x: 1618449646000,\n    y: 1300.6,\n  },\n  {\n    x: 1618449651000,\n    y: 1300.68,\n  },\n  {\n    x: 1618449656000,\n    y: 1300.7,\n  },\n  {\n    x: 1618449661000,\n    y: 1300.9,\n  },\n  {\n    x: 1618449666000,\n    y: 1301,\n  },\n  {\n    x: 1618449671000,\n    y: 1301.12,\n  },\n  {\n    x: 1618449676000,\n    y: 1301.23,\n  },\n  {\n    x: 1618449681000,\n    y: 1301.36,\n  },\n  {\n    x: 1618449686000,\n    y: 1301.46,\n  },\n  {\n    x: 1618449691000,\n    y: 1301.58,\n  },\n  {\n    x: 1618449696000,\n    y: 1301.7,\n  },\n  {\n    x: 1618449701000,\n    y: 1301.79,\n  },\n  {\n    x: 1618449706000,\n    y: 1301.87,\n  },\n  {\n    x: 1618449731000,\n    y: 1301.9,\n  },\n  {\n    x: 1618449761000,\n    y: 1301.96,\n  },\n  {\n    x: 1618560496000,\n    y: 1303.31,\n  },\n  {\n    x: 1618802366000,\n    y: 1304.9,\n  },\n  {\n    x: 1618802371000,\n    y: 1306.95,\n  },\n  {\n    x: 1618802376000,\n    y: 1309.52,\n  },\n  {\n    x: 1618802381000,\n    y: 1310.17,\n  },\n  {\n    x: 1618802491000,\n    y: 1311.35,\n  },\n  {\n    x: 1618802496000,\n    y: 1314.55,\n  },\n  {\n    x: 1618802501000,\n    y: 1316.6,\n  },\n  {\n    x: 1618802506000,\n    y: 1319.03,\n  },\n  {\n    x: 1618802511000,\n    y: 1321.19,\n  },\n  {\n    x: 1618802516000,\n    y: 1323.27,\n  },\n  {\n    x: 1618802521000,\n    y: 1325.33,\n  },\n  {\n    x: 1618802526000,\n    y: 1327.18,\n  },\n  {\n    x: 1618802531000,\n    y: 1328.55,\n  },\n  {\n    x: 1618802536000,\n    y: 1328.6,\n  },\n  {\n    x: 1618802866000,\n    y: 1329.5,\n  },\n  {\n    x: 1618802991000,\n    y: 1339,\n  },\n  {\n    x: 1618803826000,\n    y: 1339.2,\n  },\n  {\n    x: 1618803831000,\n    y: 1339.55,\n  },\n  {\n    x: 1618803836000,\n    y: 1339.85,\n  },\n  {\n    x: 1618803841000,\n    y: 1340.16,\n  },\n  {\n    x: 1618803846000,\n    y: 1340.43,\n  },\n  {\n    x: 1618803851000,\n    y: 1340.64,\n  },\n  {\n    x: 1618803856000,\n    y: 1340.87,\n  },\n  {\n    x: 1618803861000,\n    y: 1341.17,\n  },\n  {\n    x: 1618803866000,\n    y: 1341.43,\n  },\n  {\n    x: 1618803871000,\n    y: 1341.59,\n  },\n  {\n    x: 1618803876000,\n    y: 1341.98,\n  },\n  {\n    x: 1618803881000,\n    y: 1342.41,\n  },\n  {\n    x: 1618803886000,\n    y: 1342.67,\n  },\n  {\n    x: 1618803891000,\n    y: 1342.81,\n  },\n  {\n    x: 1618803896000,\n    y: 1342.92,\n  },\n  {\n    x: 1618803901000,\n    y: 1343.01,\n  },\n  {\n    x: 1618803906000,\n    y: 1343.05,\n  },\n  {\n    x: 1618805446000,\n    y: 1343.08,\n  },\n  {\n    x: 1618806236000,\n    y: 1351.4,\n  },\n  {\n    x: 1618831221000,\n    y: 1351.41,\n  },\n  {\n    x: 1618894766000,\n    y: 1351.53,\n  },\n  {\n    x: 1618894801000,\n    y: 1351.55,\n  },\n  {\n    x: 1618902456000,\n    y: 1351.57,\n  },\n  {\n    x: 1618905686000,\n    y: 1351.6,\n  },\n  {\n    x: 1618905691000,\n    y: 1351.61,\n  },\n  {\n    x: 1618905706000,\n    y: 1351.62,\n  },\n  {\n    x: 1618905756000,\n    y: 1351.63,\n  },\n  {\n    x: 1618905811000,\n    y: 1351.64,\n  },\n  {\n    x: 1618906001000,\n    y: 1351.65,\n  },\n  {\n    x: 1618906096000,\n    y: 1351.66,\n  },\n  {\n    x: 1618906206000,\n    y: 1351.67,\n  },\n  {\n    x: 1618906316000,\n    y: 1351.68,\n  },\n  {\n    x: 1618906371000,\n    y: 1351.69,\n  },\n  {\n    x: 1618906441000,\n    y: 1351.7,\n  },\n  {\n    x: 1618906501000,\n    y: 1351.71,\n  },\n  {\n    x: 1618906511000,\n    y: 1351.72,\n  },\n  {\n    x: 1618906621000,\n    y: 1351.73,\n  },\n  {\n    x: 1618906656000,\n    y: 1351.74,\n  },\n  {\n    x: 1618906691000,\n    y: 1351.75,\n  },\n  {\n    x: 1618906741000,\n    y: 1351.76,\n  },\n  {\n    x: 1618906801000,\n    y: 1351.77,\n  },\n  {\n    x: 1618906826000,\n    y: 1351.78,\n  },\n  {\n    x: 1618906831000,\n    y: 1351.79,\n  },\n  {\n    x: 1618906851000,\n    y: 1351.8,\n  },\n  {\n    x: 1618906906000,\n    y: 1351.81,\n  },\n  {\n    x: 1618906951000,\n    y: 1351.82,\n  },\n  {\n    x: 1618906996000,\n    y: 1351.83,\n  },\n  {\n    x: 1618907046000,\n    y: 1351.84,\n  },\n  {\n    x: 1618907071000,\n    y: 1351.85,\n  },\n  {\n    x: 1618907116000,\n    y: 1351.86,\n  },\n  {\n    x: 1618907136000,\n    y: 1351.87,\n  },\n  {\n    x: 1618907146000,\n    y: 1351.88,\n  },\n  {\n    x: 1618907166000,\n    y: 1351.89,\n  },\n  {\n    x: 1618907191000,\n    y: 1351.9,\n  },\n  {\n    x: 1618907196000,\n    y: 1351.91,\n  },\n  {\n    x: 1618907206000,\n    y: 1351.92,\n  },\n  {\n    x: 1618907221000,\n    y: 1351.93,\n  },\n  {\n    x: 1618907236000,\n    y: 1351.94,\n  },\n  {\n    x: 1618907241000,\n    y: 1351.96,\n  },\n  {\n    x: 1618907251000,\n    y: 1351.97,\n  },\n  {\n    x: 1618907271000,\n    y: 1351.98,\n  },\n  {\n    x: 1618907276000,\n    y: 1351.99,\n  },\n  {\n    x: 1618907291000,\n    y: 1352,\n  },\n  {\n    x: 1618907306000,\n    y: 1352.01,\n  },\n  {\n    x: 1618907316000,\n    y: 1352.02,\n  },\n  {\n    x: 1618907321000,\n    y: 1352.03,\n  },\n  {\n    x: 1618907331000,\n    y: 1352.04,\n  },\n  {\n    x: 1618907336000,\n    y: 1352.05,\n  },\n  {\n    x: 1618907351000,\n    y: 1352.06,\n  },\n  {\n    x: 1618907366000,\n    y: 1352.07,\n  },\n  {\n    x: 1618907376000,\n    y: 1352.08,\n  },\n  {\n    x: 1618907386000,\n    y: 1352.09,\n  },\n  {\n    x: 1618907396000,\n    y: 1352.1,\n  },\n  {\n    x: 1618907406000,\n    y: 1352.11,\n  },\n  {\n    x: 1618907416000,\n    y: 1352.12,\n  },\n  {\n    x: 1618907431000,\n    y: 1352.13,\n  },\n  {\n    x: 1618907441000,\n    y: 1352.14,\n  },\n  {\n    x: 1618907456000,\n    y: 1352.15,\n  },\n  {\n    x: 1618907466000,\n    y: 1352.16,\n  },\n  {\n    x: 1618907486000,\n    y: 1352.17,\n  },\n  {\n    x: 1618907501000,\n    y: 1352.18,\n  },\n  {\n    x: 1618907511000,\n    y: 1352.19,\n  },\n  {\n    x: 1618907526000,\n    y: 1352.2,\n  },\n  {\n    x: 1618907541000,\n    y: 1352.21,\n  },\n  {\n    x: 1618907551000,\n    y: 1352.22,\n  },\n  {\n    x: 1618907566000,\n    y: 1352.23,\n  },\n  {\n    x: 1618907586000,\n    y: 1352.24,\n  },\n  {\n    x: 1618907591000,\n    y: 1352.25,\n  },\n  {\n    x: 1618907606000,\n    y: 1352.26,\n  },\n  {\n    x: 1618907626000,\n    y: 1352.27,\n  },\n  {\n    x: 1618907641000,\n    y: 1352.28,\n  },\n  {\n    x: 1618907646000,\n    y: 1352.29,\n  },\n  {\n    x: 1618907656000,\n    y: 1352.3,\n  },\n  {\n    x: 1618907666000,\n    y: 1352.31,\n  },\n  {\n    x: 1618907686000,\n    y: 1352.32,\n  },\n  {\n    x: 1618907721000,\n    y: 1352.33,\n  },\n  {\n    x: 1618907731000,\n    y: 1352.34,\n  },\n  {\n    x: 1618907736000,\n    y: 1352.35,\n  },\n  {\n    x: 1618907751000,\n    y: 1352.36,\n  },\n  {\n    x: 1618907776000,\n    y: 1352.37,\n  },\n  {\n    x: 1618907786000,\n    y: 1352.38,\n  },\n  {\n    x: 1618907791000,\n    y: 1352.39,\n  },\n  {\n    x: 1618907796000,\n    y: 1352.4,\n  },\n  {\n    x: 1618907801000,\n    y: 1352.41,\n  },\n  {\n    x: 1618907811000,\n    y: 1352.42,\n  },\n  {\n    x: 1618907826000,\n    y: 1352.43,\n  },\n  {\n    x: 1618907846000,\n    y: 1352.44,\n  },\n  {\n    x: 1618907856000,\n    y: 1352.45,\n  },\n  {\n    x: 1618907881000,\n    y: 1352.46,\n  },\n  {\n    x: 1618907891000,\n    y: 1352.47,\n  },\n  {\n    x: 1618907906000,\n    y: 1352.48,\n  },\n  {\n    x: 1618907921000,\n    y: 1352.49,\n  },\n  {\n    x: 1618907936000,\n    y: 1352.5,\n  },\n  {\n    x: 1618907956000,\n    y: 1352.51,\n  },\n  {\n    x: 1618907961000,\n    y: 1352.53,\n  },\n  {\n    x: 1618907966000,\n    y: 1352.54,\n  },\n  {\n    x: 1618907976000,\n    y: 1352.55,\n  },\n  {\n    x: 1618907986000,\n    y: 1352.56,\n  },\n  {\n    x: 1618908001000,\n    y: 1352.57,\n  },\n  {\n    x: 1618908026000,\n    y: 1352.58,\n  },\n  {\n    x: 1618908031000,\n    y: 1352.59,\n  },\n  {\n    x: 1618908041000,\n    y: 1352.6,\n  },\n  {\n    x: 1618908051000,\n    y: 1352.61,\n  },\n  {\n    x: 1618908061000,\n    y: 1352.62,\n  },\n  {\n    x: 1618908081000,\n    y: 1352.63,\n  },\n  {\n    x: 1618908096000,\n    y: 1352.64,\n  },\n  {\n    x: 1618908111000,\n    y: 1352.65,\n  },\n  {\n    x: 1618908121000,\n    y: 1352.66,\n  },\n  {\n    x: 1618908126000,\n    y: 1352.67,\n  },\n  {\n    x: 1618908136000,\n    y: 1352.68,\n  },\n  {\n    x: 1618908151000,\n    y: 1352.69,\n  },\n  {\n    x: 1618908171000,\n    y: 1352.7,\n  },\n  {\n    x: 1618908176000,\n    y: 1352.71,\n  },\n  {\n    x: 1618908186000,\n    y: 1352.72,\n  },\n  {\n    x: 1618908196000,\n    y: 1352.73,\n  },\n  {\n    x: 1618908206000,\n    y: 1352.74,\n  },\n  {\n    x: 1618908216000,\n    y: 1352.75,\n  },\n  {\n    x: 1618908231000,\n    y: 1352.76,\n  },\n  {\n    x: 1618908241000,\n    y: 1352.77,\n  },\n  {\n    x: 1618908261000,\n    y: 1352.78,\n  },\n  {\n    x: 1618908276000,\n    y: 1352.79,\n  },\n  {\n    x: 1618908281000,\n    y: 1352.8,\n  },\n  {\n    x: 1618908291000,\n    y: 1352.81,\n  },\n  {\n    x: 1618908306000,\n    y: 1352.82,\n  },\n  {\n    x: 1618908326000,\n    y: 1352.83,\n  },\n  {\n    x: 1618908336000,\n    y: 1352.84,\n  },\n  {\n    x: 1618908346000,\n    y: 1352.85,\n  },\n  {\n    x: 1618908366000,\n    y: 1352.87,\n  },\n  {\n    x: 1618908381000,\n    y: 1352.88,\n  },\n  {\n    x: 1618908396000,\n    y: 1352.89,\n  },\n  {\n    x: 1618908406000,\n    y: 1352.9,\n  },\n  {\n    x: 1618908411000,\n    y: 1352.91,\n  },\n  {\n    x: 1618908421000,\n    y: 1352.92,\n  },\n  {\n    x: 1618908441000,\n    y: 1352.93,\n  },\n  {\n    x: 1618908451000,\n    y: 1352.94,\n  },\n  {\n    x: 1618908456000,\n    y: 1352.95,\n  },\n  {\n    x: 1618908476000,\n    y: 1352.96,\n  },\n  {\n    x: 1618908491000,\n    y: 1352.97,\n  },\n  {\n    x: 1618908496000,\n    y: 1352.98,\n  },\n  {\n    x: 1618908506000,\n    y: 1352.99,\n  },\n  {\n    x: 1618908516000,\n    y: 1353,\n  },\n  {\n    x: 1618908521000,\n    y: 1353.01,\n  },\n  {\n    x: 1618908526000,\n    y: 1353.02,\n  },\n  {\n    x: 1618908541000,\n    y: 1353.03,\n  },\n  {\n    x: 1618908551000,\n    y: 1353.04,\n  },\n  {\n    x: 1618908576000,\n    y: 1353.05,\n  },\n  {\n    x: 1618908581000,\n    y: 1353.06,\n  },\n  {\n    x: 1618908601000,\n    y: 1353.07,\n  },\n  {\n    x: 1618908616000,\n    y: 1353.08,\n  },\n  {\n    x: 1618908626000,\n    y: 1353.09,\n  },\n  {\n    x: 1618908646000,\n    y: 1353.1,\n  },\n  {\n    x: 1618908661000,\n    y: 1353.11,\n  },\n  {\n    x: 1618908671000,\n    y: 1353.12,\n  },\n  {\n    x: 1618908681000,\n    y: 1353.13,\n  },\n  {\n    x: 1618908686000,\n    y: 1353.14,\n  },\n  {\n    x: 1618908696000,\n    y: 1353.15,\n  },\n  {\n    x: 1618908701000,\n    y: 1353.16,\n  },\n  {\n    x: 1618908721000,\n    y: 1353.17,\n  },\n  {\n    x: 1618908736000,\n    y: 1353.18,\n  },\n  {\n    x: 1618908756000,\n    y: 1353.19,\n  },\n  {\n    x: 1618908761000,\n    y: 1353.2,\n  },\n  {\n    x: 1618908766000,\n    y: 1353.21,\n  },\n  {\n    x: 1618908771000,\n    y: 1353.22,\n  },\n  {\n    x: 1618908781000,\n    y: 1353.23,\n  },\n  {\n    x: 1618908791000,\n    y: 1353.24,\n  },\n  {\n    x: 1618908801000,\n    y: 1353.25,\n  },\n  {\n    x: 1618908816000,\n    y: 1353.26,\n  },\n  {\n    x: 1618908826000,\n    y: 1353.27,\n  },\n  {\n    x: 1618908841000,\n    y: 1353.28,\n  },\n  {\n    x: 1618908856000,\n    y: 1353.29,\n  },\n  {\n    x: 1618908871000,\n    y: 1353.3,\n  },\n  {\n    x: 1618908881000,\n    y: 1353.31,\n  },\n  {\n    x: 1618908886000,\n    y: 1353.32,\n  },\n  {\n    x: 1618908896000,\n    y: 1353.33,\n  },\n  {\n    x: 1618908906000,\n    y: 1353.34,\n  },\n  {\n    x: 1618908911000,\n    y: 1353.35,\n  },\n  {\n    x: 1618908926000,\n    y: 1353.36,\n  },\n  {\n    x: 1618908946000,\n    y: 1353.37,\n  },\n  {\n    x: 1618908961000,\n    y: 1353.38,\n  },\n  {\n    x: 1618908976000,\n    y: 1353.39,\n  },\n  {\n    x: 1618908991000,\n    y: 1353.4,\n  },\n  {\n    x: 1618909001000,\n    y: 1353.41,\n  },\n  {\n    x: 1618909021000,\n    y: 1353.42,\n  },\n  {\n    x: 1618909031000,\n    y: 1353.43,\n  },\n  {\n    x: 1618909046000,\n    y: 1353.44,\n  },\n  {\n    x: 1618909061000,\n    y: 1353.45,\n  },\n  {\n    x: 1618909071000,\n    y: 1353.46,\n  },\n  {\n    x: 1618909081000,\n    y: 1353.47,\n  },\n  {\n    x: 1618909086000,\n    y: 1353.48,\n  },\n  {\n    x: 1618909096000,\n    y: 1353.49,\n  },\n  {\n    x: 1618909106000,\n    y: 1353.5,\n  },\n  {\n    x: 1618909116000,\n    y: 1353.51,\n  },\n  {\n    x: 1618909131000,\n    y: 1353.52,\n  },\n  {\n    x: 1618909141000,\n    y: 1353.53,\n  },\n  {\n    x: 1618909151000,\n    y: 1353.54,\n  },\n  {\n    x: 1618909156000,\n    y: 1353.55,\n  },\n  {\n    x: 1618909161000,\n    y: 1353.56,\n  },\n  {\n    x: 1618909181000,\n    y: 1353.57,\n  },\n  {\n    x: 1618909196000,\n    y: 1353.58,\n  },\n  {\n    x: 1618909206000,\n    y: 1353.59,\n  },\n  {\n    x: 1618909211000,\n    y: 1353.6,\n  },\n  {\n    x: 1618909221000,\n    y: 1353.61,\n  },\n  {\n    x: 1618909226000,\n    y: 1353.62,\n  },\n  {\n    x: 1618909236000,\n    y: 1353.63,\n  },\n  {\n    x: 1618909246000,\n    y: 1353.64,\n  },\n  {\n    x: 1618909256000,\n    y: 1353.65,\n  },\n  {\n    x: 1618909261000,\n    y: 1353.66,\n  },\n  {\n    x: 1618909271000,\n    y: 1353.67,\n  },\n  {\n    x: 1618909291000,\n    y: 1353.68,\n  },\n  {\n    x: 1618909311000,\n    y: 1353.69,\n  },\n  {\n    x: 1618909321000,\n    y: 1353.71,\n  },\n  {\n    x: 1618909331000,\n    y: 1353.72,\n  },\n  {\n    x: 1618909336000,\n    y: 1353.73,\n  },\n  {\n    x: 1618909341000,\n    y: 1353.74,\n  },\n  {\n    x: 1618909346000,\n    y: 1353.75,\n  },\n  {\n    x: 1618909351000,\n    y: 1353.76,\n  },\n  {\n    x: 1618909356000,\n    y: 1353.77,\n  },\n  {\n    x: 1618909371000,\n    y: 1353.78,\n  },\n  {\n    x: 1618909376000,\n    y: 1353.79,\n  },\n  {\n    x: 1618909381000,\n    y: 1353.8,\n  },\n  {\n    x: 1618909386000,\n    y: 1353.81,\n  },\n  {\n    x: 1618909396000,\n    y: 1353.82,\n  },\n  {\n    x: 1618909401000,\n    y: 1353.83,\n  },\n  {\n    x: 1618909406000,\n    y: 1353.84,\n  },\n  {\n    x: 1618909416000,\n    y: 1353.85,\n  },\n  {\n    x: 1618909431000,\n    y: 1353.86,\n  },\n  {\n    x: 1618909441000,\n    y: 1353.87,\n  },\n  {\n    x: 1618909446000,\n    y: 1353.89,\n  },\n  {\n    x: 1618909451000,\n    y: 1353.9,\n  },\n  {\n    x: 1618909461000,\n    y: 1353.91,\n  },\n  {\n    x: 1618909476000,\n    y: 1353.92,\n  },\n  {\n    x: 1618909481000,\n    y: 1353.93,\n  },\n  {\n    x: 1618909486000,\n    y: 1353.94,\n  },\n  {\n    x: 1618909496000,\n    y: 1353.95,\n  },\n  {\n    x: 1618909531000,\n    y: 1353.96,\n  },\n  {\n    x: 1618909536000,\n    y: 1353.97,\n  },\n  {\n    x: 1618909546000,\n    y: 1353.98,\n  },\n  {\n    x: 1618909566000,\n    y: 1354,\n  },\n  {\n    x: 1618909571000,\n    y: 1354.01,\n  },\n  {\n    x: 1618909581000,\n    y: 1354.03,\n  },\n  {\n    x: 1618909586000,\n    y: 1354.04,\n  },\n  {\n    x: 1618909591000,\n    y: 1354.05,\n  },\n  {\n    x: 1618909596000,\n    y: 1354.07,\n  },\n  {\n    x: 1618909611000,\n    y: 1354.08,\n  },\n  {\n    x: 1618909621000,\n    y: 1354.09,\n  },\n  {\n    x: 1618909626000,\n    y: 1354.1,\n  },\n  {\n    x: 1618909641000,\n    y: 1354.11,\n  },\n  {\n    x: 1618909651000,\n    y: 1354.12,\n  },\n  {\n    x: 1618909656000,\n    y: 1354.13,\n  },\n  {\n    x: 1618909661000,\n    y: 1354.14,\n  },\n  {\n    x: 1618909671000,\n    y: 1354.15,\n  },\n  {\n    x: 1618909681000,\n    y: 1354.16,\n  },\n  {\n    x: 1618909691000,\n    y: 1354.17,\n  },\n  {\n    x: 1618909701000,\n    y: 1354.18,\n  },\n  {\n    x: 1618909711000,\n    y: 1354.19,\n  },\n  {\n    x: 1618909726000,\n    y: 1354.2,\n  },\n  {\n    x: 1618909731000,\n    y: 1354.21,\n  },\n  {\n    x: 1618909741000,\n    y: 1354.22,\n  },\n  {\n    x: 1618909756000,\n    y: 1354.23,\n  },\n  {\n    x: 1618909766000,\n    y: 1354.24,\n  },\n  {\n    x: 1618909776000,\n    y: 1354.25,\n  },\n  {\n    x: 1618909786000,\n    y: 1354.26,\n  },\n  {\n    x: 1618909811000,\n    y: 1354.27,\n  },\n  {\n    x: 1618909826000,\n    y: 1354.28,\n  },\n  {\n    x: 1618909841000,\n    y: 1354.29,\n  },\n  {\n    x: 1618909846000,\n    y: 1354.3,\n  },\n  {\n    x: 1618909861000,\n    y: 1354.31,\n  },\n  {\n    x: 1618909866000,\n    y: 1354.32,\n  },\n  {\n    x: 1618909891000,\n    y: 1354.33,\n  },\n  {\n    x: 1618909896000,\n    y: 1354.34,\n  },\n  {\n    x: 1618909906000,\n    y: 1354.35,\n  },\n  {\n    x: 1618909926000,\n    y: 1354.36,\n  },\n  {\n    x: 1618909936000,\n    y: 1354.37,\n  },\n  {\n    x: 1618909951000,\n    y: 1354.38,\n  },\n  {\n    x: 1618909976000,\n    y: 1354.39,\n  },\n  {\n    x: 1618909981000,\n    y: 1354.4,\n  },\n  {\n    x: 1618909986000,\n    y: 1354.41,\n  },\n  {\n    x: 1618910006000,\n    y: 1354.42,\n  },\n  {\n    x: 1618910016000,\n    y: 1354.43,\n  },\n  {\n    x: 1618910021000,\n    y: 1354.44,\n  },\n  {\n    x: 1618910036000,\n    y: 1354.45,\n  },\n  {\n    x: 1618910051000,\n    y: 1354.46,\n  },\n  {\n    x: 1618910056000,\n    y: 1354.47,\n  },\n  {\n    x: 1618910071000,\n    y: 1354.48,\n  },\n  {\n    x: 1618910096000,\n    y: 1354.49,\n  },\n  {\n    x: 1618910111000,\n    y: 1354.5,\n  },\n  {\n    x: 1618910121000,\n    y: 1354.51,\n  },\n  {\n    x: 1618910131000,\n    y: 1354.52,\n  },\n  {\n    x: 1618910141000,\n    y: 1354.53,\n  },\n  {\n    x: 1618910171000,\n    y: 1354.54,\n  },\n  {\n    x: 1618910176000,\n    y: 1354.55,\n  },\n  {\n    x: 1618910191000,\n    y: 1354.56,\n  },\n  {\n    x: 1618910211000,\n    y: 1354.57,\n  },\n  {\n    x: 1618910231000,\n    y: 1354.58,\n  },\n  {\n    x: 1618910241000,\n    y: 1354.59,\n  },\n  {\n    x: 1618910251000,\n    y: 1354.6,\n  },\n  {\n    x: 1618910266000,\n    y: 1354.61,\n  },\n  {\n    x: 1618910276000,\n    y: 1354.62,\n  },\n  {\n    x: 1618910291000,\n    y: 1354.63,\n  },\n  {\n    x: 1618910306000,\n    y: 1354.64,\n  },\n  {\n    x: 1618910316000,\n    y: 1354.65,\n  },\n  {\n    x: 1618910326000,\n    y: 1354.66,\n  },\n  {\n    x: 1618910341000,\n    y: 1354.67,\n  },\n  {\n    x: 1618910351000,\n    y: 1354.68,\n  },\n  {\n    x: 1618910366000,\n    y: 1354.69,\n  },\n  {\n    x: 1618910386000,\n    y: 1354.7,\n  },\n  {\n    x: 1618910401000,\n    y: 1354.71,\n  },\n  {\n    x: 1618910406000,\n    y: 1354.72,\n  },\n  {\n    x: 1618910416000,\n    y: 1354.73,\n  },\n  {\n    x: 1618910446000,\n    y: 1354.74,\n  },\n  {\n    x: 1618910451000,\n    y: 1354.75,\n  },\n  {\n    x: 1618910461000,\n    y: 1354.76,\n  },\n  {\n    x: 1618910471000,\n    y: 1354.77,\n  },\n  {\n    x: 1618910486000,\n    y: 1354.78,\n  },\n  {\n    x: 1618910496000,\n    y: 1354.79,\n  },\n  {\n    x: 1618910536000,\n    y: 1354.8,\n  },\n  {\n    x: 1618910541000,\n    y: 1354.81,\n  },\n  {\n    x: 1618910546000,\n    y: 1354.82,\n  },\n  {\n    x: 1618910561000,\n    y: 1354.83,\n  },\n  {\n    x: 1618910566000,\n    y: 1354.84,\n  },\n  {\n    x: 1618910576000,\n    y: 1354.85,\n  },\n  {\n    x: 1618910581000,\n    y: 1354.86,\n  },\n  {\n    x: 1618910591000,\n    y: 1354.87,\n  },\n  {\n    x: 1618910601000,\n    y: 1354.88,\n  },\n  {\n    x: 1618910616000,\n    y: 1354.89,\n  },\n  {\n    x: 1618910626000,\n    y: 1354.9,\n  },\n  {\n    x: 1618910636000,\n    y: 1354.91,\n  },\n  {\n    x: 1618910646000,\n    y: 1354.92,\n  },\n  {\n    x: 1618910661000,\n    y: 1354.93,\n  },\n  {\n    x: 1618910671000,\n    y: 1354.94,\n  },\n  {\n    x: 1618910681000,\n    y: 1354.95,\n  },\n  {\n    x: 1618910691000,\n    y: 1354.96,\n  },\n  {\n    x: 1618910696000,\n    y: 1354.97,\n  },\n  {\n    x: 1618910711000,\n    y: 1354.98,\n  },\n  {\n    x: 1618910731000,\n    y: 1354.99,\n  },\n  {\n    x: 1618910741000,\n    y: 1355,\n  },\n  {\n    x: 1618910751000,\n    y: 1355.01,\n  },\n  {\n    x: 1618910761000,\n    y: 1355.02,\n  },\n  {\n    x: 1618910766000,\n    y: 1355.03,\n  },\n  {\n    x: 1618910776000,\n    y: 1355.04,\n  },\n  {\n    x: 1618910781000,\n    y: 1355.05,\n  },\n  {\n    x: 1618910791000,\n    y: 1355.06,\n  },\n  {\n    x: 1618910796000,\n    y: 1355.07,\n  },\n  {\n    x: 1618910806000,\n    y: 1355.08,\n  },\n  {\n    x: 1618910816000,\n    y: 1355.09,\n  },\n  {\n    x: 1618910821000,\n    y: 1355.1,\n  },\n  {\n    x: 1618910836000,\n    y: 1355.11,\n  },\n  {\n    x: 1618910846000,\n    y: 1355.12,\n  },\n  {\n    x: 1618910856000,\n    y: 1355.13,\n  },\n  {\n    x: 1618910866000,\n    y: 1355.14,\n  },\n  {\n    x: 1618910871000,\n    y: 1355.15,\n  },\n  {\n    x: 1618910896000,\n    y: 1355.16,\n  },\n  {\n    x: 1618910901000,\n    y: 1355.17,\n  },\n  {\n    x: 1618910906000,\n    y: 1355.18,\n  },\n  {\n    x: 1618910916000,\n    y: 1355.19,\n  },\n  {\n    x: 1618910926000,\n    y: 1355.2,\n  },\n  {\n    x: 1618910936000,\n    y: 1355.21,\n  },\n  {\n    x: 1618910951000,\n    y: 1355.22,\n  },\n  {\n    x: 1618910956000,\n    y: 1355.23,\n  },\n  {\n    x: 1618910961000,\n    y: 1355.24,\n  },\n  {\n    x: 1618910966000,\n    y: 1355.25,\n  },\n  {\n    x: 1618910971000,\n    y: 1355.26,\n  },\n  {\n    x: 1618910976000,\n    y: 1355.28,\n  },\n  {\n    x: 1618910986000,\n    y: 1355.29,\n  },\n  {\n    x: 1618911026000,\n    y: 1355.3,\n  },\n  {\n    x: 1618911036000,\n    y: 1355.31,\n  },\n  {\n    x: 1618911041000,\n    y: 1355.32,\n  },\n  {\n    x: 1618911071000,\n    y: 1355.34,\n  },\n  {\n    x: 1618911076000,\n    y: 1355.36,\n  },\n  {\n    x: 1618911081000,\n    y: 1355.37,\n  },\n  {\n    x: 1618911086000,\n    y: 1355.38,\n  },\n  {\n    x: 1618911091000,\n    y: 1355.39,\n  },\n  {\n    x: 1618911106000,\n    y: 1355.4,\n  },\n  {\n    x: 1618911116000,\n    y: 1355.41,\n  },\n  {\n    x: 1618911126000,\n    y: 1355.42,\n  },\n  {\n    x: 1618911131000,\n    y: 1355.43,\n  },\n  {\n    x: 1618911176000,\n    y: 1355.45,\n  },\n  {\n    x: 1618911181000,\n    y: 1355.47,\n  },\n  {\n    x: 1618911186000,\n    y: 1355.48,\n  },\n  {\n    x: 1618911191000,\n    y: 1355.5,\n  },\n  {\n    x: 1618911196000,\n    y: 1355.51,\n  },\n  {\n    x: 1618911221000,\n    y: 1355.52,\n  },\n  {\n    x: 1618911236000,\n    y: 1355.53,\n  },\n  {\n    x: 1618911251000,\n    y: 1355.55,\n  },\n  {\n    x: 1618911261000,\n    y: 1355.57,\n  },\n  {\n    x: 1618981891000,\n    y: 1357.36,\n  },\n  {\n    x: 1618981896000,\n    y: 1359.05,\n  },\n  {\n    x: 1618981901000,\n    y: 1361.93,\n  },\n  {\n    x: 1618981906000,\n    y: 1363.48,\n  },\n  {\n    x: 1618981911000,\n    y: 1363.83,\n  },\n  {\n    x: 1618981916000,\n    y: 1363.86,\n  },\n  {\n    x: 1618982186000,\n    y: 1364.59,\n  },\n  {\n    x: 1618982191000,\n    y: 1366.98,\n  },\n  {\n    x: 1618982196000,\n    y: 1370.75,\n  },\n  {\n    x: 1618982201000,\n    y: 1372.26,\n  },\n  {\n    x: 1618982621000,\n    y: 1373.34,\n  },\n  {\n    x: 1618982626000,\n    y: 1373.92,\n  },\n  {\n    x: 1618982631000,\n    y: 1374.42,\n  },\n  {\n    x: 1618982686000,\n    y: 1374.5,\n  },\n  {\n    x: 1618984021000,\n    y: 1374.71,\n  },\n  {\n    x: 1618984026000,\n    y: 1374.78,\n  },\n  {\n    x: 1618984081000,\n    y: 1375.06,\n  },\n  {\n    x: 1618984086000,\n    y: 1375.37,\n  },\n  {\n    x: 1618984091000,\n    y: 1375.43,\n  },\n  {\n    x: 1618986071000,\n    y: 1375.44,\n  },\n  {\n    x: 1618986076000,\n    y: 1375.61,\n  },\n  {\n    x: 1618986081000,\n    y: 1375.83,\n  },\n  {\n    x: 1618986086000,\n    y: 1375.99,\n  },\n  {\n    x: 1618986091000,\n    y: 1376.05,\n  },\n  {\n    x: 1618989311000,\n    y: 1376.28,\n  },\n  {\n    x: 1618989316000,\n    y: 1376.38,\n  },\n  {\n    x: 1618989321000,\n    y: 1376.59,\n  },\n  {\n    x: 1618989371000,\n    y: 1376.61,\n  },\n  {\n    x: 1618989376000,\n    y: 1376.68,\n  },\n  {\n    x: 1618989381000,\n    y: 1376.79,\n  },\n  {\n    x: 1618989386000,\n    y: 1376.85,\n  },\n  {\n    x: 1618989391000,\n    y: 1376.88,\n  },\n  {\n    x: 1618989396000,\n    y: 1376.97,\n  },\n  {\n    x: 1618989401000,\n    y: 1377.05,\n  },\n  {\n    x: 1618989406000,\n    y: 1377.14,\n  },\n  {\n    x: 1618989411000,\n    y: 1377.19,\n  },\n  {\n    x: 1618989416000,\n    y: 1377.23,\n  },\n  {\n    x: 1618989441000,\n    y: 1377.6,\n  },\n  {\n    x: 1618989446000,\n    y: 1377.61,\n  },\n  {\n    x: 1618989451000,\n    y: 1377.64,\n  },\n  {\n    x: 1618989456000,\n    y: 1377.66,\n  },\n  {\n    x: 1618989461000,\n    y: 1377.68,\n  },\n  {\n    x: 1618989751000,\n    y: 1377.69,\n  },\n  {\n    x: 1619069551000,\n    y: 1378.26,\n  },\n  {\n    x: 1619069556000,\n    y: 1380.28,\n  },\n  {\n    x: 1619069561000,\n    y: 1382.71,\n  },\n  {\n    x: 1619069566000,\n    y: 1384.62,\n  },\n  {\n    x: 1619069571000,\n    y: 1384.77,\n  },\n  {\n    x: 1619070851000,\n    y: 1385.12,\n  },\n  {\n    x: 1619070856000,\n    y: 1385.35,\n  },\n  {\n    x: 1619070861000,\n    y: 1385.66,\n  },\n  {\n    x: 1619070866000,\n    y: 1385.83,\n  },\n  {\n    x: 1619070871000,\n    y: 1385.86,\n  },\n  {\n    x: 1619070896000,\n    y: 1385.9,\n  },\n  {\n    x: 1619070901000,\n    y: 1386.01,\n  },\n  {\n    x: 1619070906000,\n    y: 1386.24,\n  },\n  {\n    x: 1619070911000,\n    y: 1386.36,\n  },\n  {\n    x: 1619070936000,\n    y: 1386.38,\n  },\n  {\n    x: 1619070941000,\n    y: 1386.44,\n  },\n  {\n    x: 1619070981000,\n    y: 1386.52,\n  },\n  {\n    x: 1619071021000,\n    y: 1386.57,\n  },\n  {\n    x: 1619071026000,\n    y: 1386.6,\n  },\n  {\n    x: 1619071031000,\n    y: 1386.7,\n  },\n  {\n    x: 1619071036000,\n    y: 1386.93,\n  },\n  {\n    x: 1619071041000,\n    y: 1386.99,\n  },\n  {\n    x: 1619071156000,\n    y: 1387.09,\n  },\n  {\n    x: 1619071161000,\n    y: 1387.21,\n  },\n  {\n    x: 1619071166000,\n    y: 1387.28,\n  },\n  {\n    x: 1619072757000,\n    y: 1387.36,\n  },\n  {\n    x: 1619072762000,\n    y: 1387.46,\n  },\n  {\n    x: 1619072767000,\n    y: 1387.53,\n  },\n  {\n    x: 1619072772000,\n    y: 1387.56,\n  },\n  {\n    x: 1619072962000,\n    y: 1387.68,\n  },\n  {\n    x: 1619072967000,\n    y: 1387.81,\n  },\n  {\n    x: 1619072972000,\n    y: 1388.02,\n  },\n  {\n    x: 1619072987000,\n    y: 1388.12,\n  },\n  {\n    x: 1619072992000,\n    y: 1388.22,\n  },\n  {\n    x: 1619072997000,\n    y: 1388.31,\n  },\n  {\n    x: 1619073002000,\n    y: 1388.46,\n  },\n  {\n    x: 1619073007000,\n    y: 1388.56,\n  },\n  {\n    x: 1619073012000,\n    y: 1388.7,\n  },\n  {\n    x: 1619073017000,\n    y: 1388.78,\n  },\n  {\n    x: 1619073022000,\n    y: 1388.88,\n  },\n  {\n    x: 1619073027000,\n    y: 1388.97,\n  },\n  {\n    x: 1619073032000,\n    y: 1389.11,\n  },\n  {\n    x: 1619073037000,\n    y: 1389.18,\n  },\n  {\n    x: 1619073047000,\n    y: 1389.35,\n  },\n  {\n    x: 1619073052000,\n    y: 1389.38,\n  },\n  {\n    x: 1619073057000,\n    y: 1389.4,\n  },\n  {\n    x: 1619073062000,\n    y: 1389.55,\n  },\n  {\n    x: 1619073067000,\n    y: 1389.7,\n  },\n  {\n    x: 1619073072000,\n    y: 1389.77,\n  },\n  {\n    x: 1619073077000,\n    y: 1389.89,\n  },\n  {\n    x: 1619073092000,\n    y: 1389.9,\n  },\n  {\n    x: 1619073097000,\n    y: 1390.01,\n  },\n  {\n    x: 1619073102000,\n    y: 1390.11,\n  },\n  {\n    x: 1619073107000,\n    y: 1390.29,\n  },\n  {\n    x: 1619073112000,\n    y: 1390.45,\n  },\n  {\n    x: 1619073117000,\n    y: 1390.47,\n  },\n  {\n    x: 1619073122000,\n    y: 1390.53,\n  },\n  {\n    x: 1619073127000,\n    y: 1390.68,\n  },\n  {\n    x: 1619073132000,\n    y: 1390.87,\n  },\n  {\n    x: 1619073137000,\n    y: 1391.05,\n  },\n  {\n    x: 1619073152000,\n    y: 1391.13,\n  },\n  {\n    x: 1619073157000,\n    y: 1391.31,\n  },\n  {\n    x: 1619073162000,\n    y: 1391.5,\n  },\n  {\n    x: 1619073167000,\n    y: 1391.65,\n  },\n  {\n    x: 1619073172000,\n    y: 1391.67,\n  },\n  {\n    x: 1619073177000,\n    y: 1391.87,\n  },\n  {\n    x: 1619073182000,\n    y: 1392.01,\n  },\n  {\n    x: 1619073207000,\n    y: 1392.16,\n  },\n  {\n    x: 1619073212000,\n    y: 1392.31,\n  },\n  {\n    x: 1619073217000,\n    y: 1392.5,\n  },\n  {\n    x: 1619073222000,\n    y: 1392.64,\n  },\n  {\n    x: 1619073227000,\n    y: 1392.84,\n  },\n  {\n    x: 1619073232000,\n    y: 1393.04,\n  },\n  {\n    x: 1619073237000,\n    y: 1393.2,\n  },\n  {\n    x: 1619073242000,\n    y: 1393.22,\n  },\n  {\n    x: 1619073247000,\n    y: 1393.44,\n  },\n  {\n    x: 1619073252000,\n    y: 1393.63,\n  },\n  {\n    x: 1619073257000,\n    y: 1393.76,\n  },\n  {\n    x: 1619073262000,\n    y: 1393.95,\n  },\n  {\n    x: 1619073267000,\n    y: 1394.1,\n  },\n  {\n    x: 1619073272000,\n    y: 1394.2,\n  },\n  {\n    x: 1619073277000,\n    y: 1394.32,\n  },\n  {\n    x: 1619073282000,\n    y: 1394.47,\n  },\n  {\n    x: 1619073287000,\n    y: 1394.55,\n  },\n  {\n    x: 1619073292000,\n    y: 1394.64,\n  },\n  {\n    x: 1619073297000,\n    y: 1394.68,\n  },\n  {\n    x: 1619073302000,\n    y: 1394.77,\n  },\n  {\n    x: 1619073307000,\n    y: 1394.88,\n  },\n  {\n    x: 1619073312000,\n    y: 1394.97,\n  },\n  {\n    x: 1619073322000,\n    y: 1395.01,\n  },\n  {\n    x: 1619073327000,\n    y: 1395.08,\n  },\n  {\n    x: 1619073332000,\n    y: 1395.19,\n  },\n  {\n    x: 1619073337000,\n    y: 1395.33,\n  },\n  {\n    x: 1619073352000,\n    y: 1395.35,\n  },\n  {\n    x: 1619073357000,\n    y: 1395.4,\n  },\n  {\n    x: 1619073362000,\n    y: 1395.46,\n  },\n  {\n    x: 1619073367000,\n    y: 1395.52,\n  },\n  {\n    x: 1619073372000,\n    y: 1395.56,\n  },\n  {\n    x: 1619073377000,\n    y: 1395.59,\n  },\n  {\n    x: 1619073382000,\n    y: 1395.68,\n  },\n  {\n    x: 1619073387000,\n    y: 1395.72,\n  },\n  {\n    x: 1619073392000,\n    y: 1395.8,\n  },\n  {\n    x: 1619073482000,\n    y: 1395.84,\n  },\n  {\n    x: 1619073537000,\n    y: 1395.88,\n  },\n  {\n    x: 1619073542000,\n    y: 1395.89,\n  },\n  {\n    x: 1619073562000,\n    y: 1395.96,\n  },\n  {\n    x: 1619073567000,\n    y: 1396,\n  },\n  {\n    x: 1619073572000,\n    y: 1396.08,\n  },\n  {\n    x: 1619073577000,\n    y: 1396.17,\n  },\n  {\n    x: 1619073582000,\n    y: 1396.2,\n  },\n  {\n    x: 1619073587000,\n    y: 1396.27,\n  },\n  {\n    x: 1619073592000,\n    y: 1396.31,\n  },\n  {\n    x: 1619073597000,\n    y: 1396.36,\n  },\n  {\n    x: 1619073602000,\n    y: 1396.4,\n  },\n  {\n    x: 1619073657000,\n    y: 1396.43,\n  },\n  {\n    x: 1619073667000,\n    y: 1396.46,\n  },\n  {\n    x: 1619073672000,\n    y: 1396.49,\n  },\n  {\n    x: 1619073677000,\n    y: 1396.52,\n  },\n  {\n    x: 1619073682000,\n    y: 1396.56,\n  },\n  {\n    x: 1619073687000,\n    y: 1396.6,\n  },\n]"
                }
            ],
            "projects/components/src/component/radio/Radio.stories.ts": [
                {
                    "name": "radioButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/radio/Radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [RadioModule, FormsModule, IconModule],\n  },\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\n    <teta-radio [(ngModel)]=\"aaa\">\n      <teta-radio-button [value]=\"1\">1</teta-radio-button>\n      <teta-radio-button [value]=\"2\">2</teta-radio-button>\n      <teta-radio-button [value]=\"3\" [disabled]=\"true\">4</teta-radio-button>\n    </teta-radio>\n  </div>`,\n})"
                }
            ],
            "projects/components/src/component/progress-bar/ProgressBar.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ProgressBarModule, FormsModule],\n    entryComponents: [],\n  },\n  props: {\n    min: number('min', 0),\n    max: number('max', 100),\n    value: number('value', 50),\n    step: number('step', 0),\n  },\n  template: `<div class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\n              <teta-progress-bar [min]=\"min\" [max]=\"max\" [step]=\"step\" [(ngModel)]=\"value\"></teta-progress-bar>\n            </div>`,\n})"
                }
            ],
            "projects/components/src/component/toggle/Toggle.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toggle/Toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [ToggleModule, IconModule, FormsModule],\n  },\n  props: {\n    text: text('text', 'Remember me'),\n    value: false,\n    setValue: (value) => {\n      action('log')(value);\n    },\n  },\n  template: `<teta-toggle [tetaIconSprite]=\"'assets/icons.svg'\"\n              [ngModel]=\"value\"\n              (ngModelChange)=\"setValue($event)\">\n              {{text}}\n            </teta-toggle>`,\n})"
                }
            ],
            "projects/components/src/directive/loader/Loader.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [LoaderModule]\n  },\n  props: {\n    show: boolean('show', true)\n  },\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\" [tetaLoader]=\"show\">\n                \n              </div>`,\n})"
                }
            ],
            "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts": [
                {
                    "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ProgressBarComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/switch/switch/switch.component.ts": [
                {
                    "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/switch/switch/switch.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SwitchComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/switch/Switch.stories.ts": [
                {
                    "name": "switchSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: [SwitchModule, IconModule, FormsModule],\n  },\n  props: {\n    model: 'item 1',\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'grey'),\n    values: ['item 1', 'item 2', 'item 3'],\n    log: (name, value) => {\n      action(name)(value);\n    },\n  },\n  template: `<teta-switch [tetaIconSprite]=\"'assets/icons.svg'\"\n                          [ngModel]=\"model\"\n                          (ngModelChange)=\"log('switch', $event)\">\n  <teta-switch-button *ngFor=\"let val of values\" [value]=\"val\">\n    <teta-icon [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon> {{val}}\n  </teta-switch-button>\n</teta-switch>`,\n})"
                }
            ],
            "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts": [
                {
                    "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TimePartControlComponent),\n  multi: true,\n}"
                }
            ],
            "projects/components/src/component/toggle/toggle/toggle.component.ts": [
                {
                    "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/components/src/component/table/enum/aggregation-type.enum.ts": [
                {
                    "name": "AggregationType",
                    "childs": [
                        {
                            "name": "none",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "avg",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/aggregation-type.enum.ts"
                }
            ],
            "projects/components/src/common/enum/align.enum.ts": [
                {
                    "name": "Align",
                    "childs": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "center",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "auto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fitWidth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minWidth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/align.enum.ts"
                }
            ],
<<<<<<< Updated upstream
=======
            "projects/chart/src/chart/model/enum/axis-locate.ts": [
                {
                    "name": "AxisLocate",
                    "childs": [
                        {
                            "name": "abscissa",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ordinatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/chart/src/chart/model/enum/axis-locate.ts"
                }
            ],
            "projects/chart/src/chart/model/axis-type.ts": [
                {
                    "name": "AxisType",
                    "childs": [
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/chart/src/chart/model/axis-type.ts"
                }
            ],
>>>>>>> Stashed changes
            "projects/components/src/component/chart/model/enum/axis-type.ts": [
                {
                    "name": "AxisType",
                    "childs": [
                        {
                            "name": "abscissa",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ordinatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/axis-type.ts"
                }
            ],
            "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts": [
                {
                    "name": "DatePickerMode",
                    "childs": [
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/dispatch-type.ts": [
                {
                    "name": "DispatchType",
                    "childs": [
                        {
                            "name": "moveLine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "moveLine"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/dispatch-type.ts"
                }
            ],
            "projects/components/src/component/table/enum/edit-event.enum.ts": [
                {
                    "name": "EditEvent",
                    "childs": [
                        {
                            "name": "click",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "focus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "doubleClick",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/edit-event.enum.ts"
                }
            ],
            "projects/components/src/component/table/enum/edit-type.enum.ts": [
                {
                    "name": "EditType",
                    "childs": [
                        {
                            "name": "cell",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/edit-type.enum.ts"
                }
            ],
            "projects/components/src/component/filter/enum/filter-type.enum.ts": [
                {
                    "name": "FilterType",
                    "childs": [
                        {
                            "name": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/filter-type.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/legend-type.ts": [
                {
                    "name": "LegendType",
                    "childs": [
                        {
                            "name": "swatches",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gradient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/legend-type.ts"
                }
            ],
            "projects/components/src/component/filter/enum/list-filter-type.enum.ts": [
                {
                    "name": "ListFilterType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Excluded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/list-filter-type.enum.ts"
                }
            ],
            "projects/components/src/component/modal/model/modal-close-reason.enum.ts": [
                {
                    "name": "ModalCloseReason",
                    "childs": [
                        {
                            "name": "resolve",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "backdrop",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "esc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/modal/model/modal-close-reason.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/scale.ts": [
                {
                    "name": "Scale",
                    "childs": [
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "time"
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "category"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/scale.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/scale-type.ts": [
                {
                    "name": "ScaleType",
                    "childs": [
                        {
                            "name": "linear",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "log",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sqrt",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/scale-type.ts"
                }
            ],
            "projects/components/src/component/table/enum/select-type.enum.ts": [
                {
                    "name": "SelectType",
                    "childs": [
                        {
                            "name": "none",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "single",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/select-type.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/series-type.ts": [
                {
                    "name": "SeriesType",
                    "childs": [
                        {
                            "name": "area",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "line",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pie",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scatter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spline",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contour",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/series-type.ts"
                }
            ],
            "projects/components/src/component/sidebar/sidebar-position.enum.ts": [
                {
                    "name": "SidebarPosition",
                    "childs": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/sidebar/sidebar-position.enum.ts"
                }
            ],
            "projects/components/src/component/filter/enum/string-filter-type.enum.ts": [
                {
                    "name": "StringFilterType",
                    "childs": [
                        {
                            "name": "Equals",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "StartsWith",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "EndsWith",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "Contains",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/string-filter-type.enum.ts"
                }
            ],
            "projects/components/src/common/enum/teta-size.enum.ts": [
                {
                    "name": "TetaSize",
                    "childs": [
                        {
                            "name": "XS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "S",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "M",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "L",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "XL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/teta-size.enum.ts"
                }
            ],
            "projects/components/src/common/enum/vertical-align.enum.ts": [
                {
                    "name": "VerticalAlign",
                    "childs": [
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "center",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "auto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/vertical-align.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/zoom-type.ts": [
                {
                    "name": "ZoomType",
                    "childs": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "xy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/zoom-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/components/src/component/chart/model/annotation.ts": [
                {
                    "name": "AnnotationTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/components/src/component/chart/model/annotation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/components/src/common/contract/auto-close-ignore-case.ts": [
                {
                    "name": "AutoCloseIgnoreCase",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"esc\" | \"enter\" | \"inside\" | \"outside\"",
                    "file": "projects/components/src/common/contract/auto-close-ignore-case.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/radio/radio/radio.component.ts": [
                {
                    "name": "ButtonOrNullOrUndefined",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RadioButtonComponent | undefined | null",
                    "file": "projects/components/src/component/radio/radio/radio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/button/button/button.component.ts": [
                {
                    "name": "ButtonViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"outline\" | \"ghost\"",
                    "file": "projects/components/src/component/button/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/chart/core/chart.ts": [
                {
                    "name": "ChartSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/components/src/component/chart/core/chart.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/components/src/common/contract/constructor-type.ts": [
                {
                    "name": "Ctor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/components/src/common/contract/constructor-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
<<<<<<< Updated upstream
=======
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicChart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/axes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AxesService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/base/series-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/chart-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/gridlines/gridlines.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridlinesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/line-series/line-series.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineSeriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/plotband/plotband.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlotbandComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/plotline/plotline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlotlineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/series-host/series-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/x-axis/x-axis.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "XAxisComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/y-axis/y-axis.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YAxisComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/core/axis.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Axis",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "projects/chart/src/chart/core/scale.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Scale",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/default/default-chart-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/legend/legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/axis-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AxisOptions",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/base-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasePoint",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/i-chart-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/series.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/scale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScaleService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
>>>>>>> Stashed changes
                "filePath": "projects/components/src/common/contract/dynamic-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-dictionary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-id-name.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIdName",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-rect.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRect",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-tree-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITreeData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/teta-content-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TetaContentRef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/click.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClickService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/dynamic-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DynamicComponentService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/overlay-container.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OverlayContainerService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/array-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArrayUtil",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/dom-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DomUtil",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/position-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PositionUtil",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicAccordion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AccordionContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-head/accordion-head.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionHeadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-item/accordion-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/button/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/chart3d/chart3d.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Chart3dComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/base-3d-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Base3dPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/chart-3d-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Chart3dOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/series-3d.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series3d",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "line",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "points1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "points2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/core/axis-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Axis",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/core/chart.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TetaChart",
                "coveragePercent": 0,
                "coverageCount": "0/53",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/area-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AreaDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/bar-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BarDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/contour-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContourDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultDrawerMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/line-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LineDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/pie-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PieDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/scatter-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScatterDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/spline-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SplineDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultLegendDrawerMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/gradient-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GradientDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SwatchDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "classTypeLegendMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/annotation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Annotation",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/annotation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "annotationMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/axis-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AxisOptions",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/chart-bounds.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartBounds",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drag-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDragEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer-legend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILegendDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer-legend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LegendDrawOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-zoom-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IZoomEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/plot-band.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlotBand",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/plot-line.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlotLine",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/bar-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BarPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/base-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasePoint",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/contour-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContourPoint",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/scatter-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScatterPoint",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/series.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/tooltip-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TooltipOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "binary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 15,
                "coverageCount": "4/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "datePicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dateTimePicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthPicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DaySelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/date-period.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DatePeriod",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/day-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DayModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/picker-locale-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PickerLocaleModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-select/month-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/service/picker-locale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PickerLocaleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/service/picker-touch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PickerTouchService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimePartControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/util/date-picker-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DatePickerUtil",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/year-select/year-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YearSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/delimiter/delimiter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DelimiterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-base.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownBase",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-head.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownHeadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dynamic-component/popup-content/popup-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "panel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ExpandPanelContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel-head.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ExpandPanelHeadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel/expand-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/File.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "area",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/file-item/file-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/file-upload-area/file-upload-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/base/filter-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterBase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/base/filter-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/boolean-filter/boolean-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/boolean-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BooleanFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/date-filter-value.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateFilterValue",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/date-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterComponentsMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterItem",
                "coveragePercent": 87,
                "coverageCount": "14/16",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterState",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/i-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/list-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/numeric-filter-value.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumericFilterValue",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/numeric-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumericFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/sort-param.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortParam",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/string-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StringFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/date-filter/date-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/filter-host/filter-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/filter-panel/filter-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/list-filter/list-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/numeric-filter/numeric-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/string-filter/string-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coloredIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon-sprite.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IconSpriteDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icons-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coloredIconsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icons-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/form-group-title/form-group-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormGroupTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/text-field/text-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/list/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/list/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interactiveList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/Message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "messageSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message-host/message-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message-samples/message-sample/message-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageSampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/model/message.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "alert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-container/modal-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/alert-sample/alert-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertSampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-example/modal-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-from-component/modal-from-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFromComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-from-template/modal-from-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFromTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/current-modal.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CurrentModal",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/i-modal-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/i-modal-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalResult",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/modal/model/modal-instance.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalInstance",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pagerSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/model/pager-state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagerState",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/pager/pager/pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/util/pager-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagerUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/panel/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dict",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "item",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simplePropertyGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/date-item-default/date-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/list-item-default/list-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/numeric-item-default/numeric-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/string-item-default/string-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid-group/property-grid-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid-item/property-grid-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/Radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 17,
                "coverageCount": "6/35",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/resize-panel/resize-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResizePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleCustom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "singleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select-value.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectValueDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/sidebar/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "switchSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch-button/switch-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SwitchService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch/switch.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dict",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLong",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "virtualTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/base/cell-component-base.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/base/detail-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DetailComponentBase",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/table/base/group-row-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GroupRowComponentBase",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/table/base/head-cell-component-base.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/cell-host/cell-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/cell/cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/cell-components-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellComponentsMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/cell-components-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/column-reorder-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnReorderEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/column-resize-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnResizeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-coordinates.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellCoordinates",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-value.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/sort-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-column-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColumnStore",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-column.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColumn",
                "coveragePercent": 94,
                "coverageCount": "33/35",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-context-menu-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableContextMenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-row.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/boolean-cell/boolean-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/date-cell/date-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/date-time-cell/date-time-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateTimeCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/default-head-cell/default-head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultHeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/group-row/group-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupRowComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/table/default/list-cell/list-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/numeric-cell/numeric-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/string-cell/string-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell-dropdown/head-cell-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell-host/head-cell-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell/head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/selection-cell/selection-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/selection-head-cell/selection-head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionHeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/service/table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableService",
                "coveragePercent": 0,
                "coverageCount": "0/99",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-body/table-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-head-group/table-head-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeadGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-head/table-head.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/85",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/util/state-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateUtil",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/util/table-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableUtil",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab-title.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab/tab.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/tabs/tabs/tabs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITabChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/theme-switch/theme-switch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeSwitchService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/theme-switch/theme-switch/theme-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/Toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 10,
                "coverageCount": "2/19",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicToolbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "treeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/Tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/Tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "treeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree-item-toggle/tree-item-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeItemToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree-item/tree-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeItemComponent",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/click-outside/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicContextMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/context-menu/context-menu.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContextMenuDirective",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/disable-control/disable-control.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DisableControlDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dragSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-container.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragSortContainerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DragSortEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragSortItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/dynamic-content-base.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicContentBaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/highlight/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/Hint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/Hint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/hint.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HintDirective",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/loader/loader.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LoaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/no-autofill/no-autofill.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NoAutofillDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/only-number/only-number.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OnlyNumberDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/resize-drag/resize-drag.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResizeDragDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/teta-template/teta-template.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TetaTemplateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/number-pipe/number.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/prepend-zero/prepend-zero.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PrependZeroPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPrecision",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prependZero",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/util/date-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtil",
                "coveragePercent": 31,
                "coverageCount": "6/19",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/util/forms-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormsUtil",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/util/string-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StringUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}