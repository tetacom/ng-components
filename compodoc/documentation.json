{
    "pipes": [
        {
            "name": "NumberPipe",
            "id": "pipe-NumberPipe-ec47f621b902fd063d47fd6f0961924e",
            "file": "projects/components/src/pipe/number-pipe/number.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimalLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        },
                        {
                            "name": "chunkDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "decimalDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'.'"
                        },
                        {
                            "name": "chunkLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimalLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chunkDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimalDelimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'.'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chunkLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tetaNumber",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {formatNumber} from '../util/number-helper';\r\n\r\n@Pipe({\r\n  name: 'tetaNumber'\r\n})\r\nexport class NumberPipe implements PipeTransform {\r\n  transform(value: number,\r\n            decimalLength: number = 2,\r\n            chunkDelimiter: string = '',\r\n            decimalDelimiter: string = '.',\r\n            chunkLength: number = 3): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n    if (value !== value / 1) {\r\n      return value.toString();\r\n    }\r\n    value /= 1;\r\n    return formatNumber(value,\r\n      decimalLength,\r\n      chunkDelimiter,\r\n      decimalDelimiter,\r\n      chunkLength);\r\n  }\r\n}\r\n"
        },
        {
            "name": "PrependZeroPipe",
            "id": "pipe-PrependZeroPipe-481a7f3fb06130097dfd49a3077b671f",
            "file": "projects/components/src/pipe/prepend-zero/prepend-zero.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tetaPrependZero",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {prependZero} from '../util/number-helper';\r\n\r\n@Pipe({\r\n  name: 'tetaPrependZero'\r\n})\r\nexport class PrependZeroPipe implements PipeTransform {\r\n  transform(value: number, length: number): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n    value /= 1;\r\n    return prependZero(value, length);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AxisOptions",
            "id": "interface-AxisOptions-9ebc1687a094395e9293c338cb0350f8",
            "file": "projects/chart/src/chart/model/axis-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AxisType } from './axis-type';\r\n\r\nexport interface AxisOptions {\r\n  title?: string;\r\n  min?: number;\r\n  max?: number;\r\n  visible: boolean;\r\n  tickFormat?: (d: any) => string;\r\n  type?: AxisType;\r\n  zoom?: boolean;\r\n  inverted?: boolean;\r\n  negative?: boolean;\r\n  opposite?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "inverted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "negative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "opposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tickFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisType",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "BarPoint",
            "id": "interface-BarPoint-84714ed1efe70e16105b539cc46c5841",
            "file": "projects/components/src/component/chart/model/point/bar-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\r\n\r\nexport interface BarPoint extends BasePoint {\r\n  id: number;\r\n  label: string;\r\n  visible: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "Base3dPoint",
            "id": "interface-Base3dPoint-3161fec752cf43bfdf6e7d3d838a9175",
            "file": "projects/components/src/component/chart-3d/model/base-3d-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Base3dPoint {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "z",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "BasePoint",
            "id": "interface-BasePoint-d437aec9f558de61f154d2a2f105dd7b",
            "file": "projects/chart/src/chart/model/base-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasePoint {\r\n  x: number;\r\n  x1?: number;\r\n  y: number;\r\n  y1?: number;\r\n  color?: string | number;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "BasePoint",
            "id": "interface-BasePoint-d39098d44d08a37b9ba11a18e14c9947-1",
            "file": "projects/components/src/component/chart/model/point/base-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MarkerOptions } from './marker-options';\r\n\r\nexport interface BasePoint {\r\n  x: number;\r\n  x1?: number;\r\n  y: number;\r\n  y1?: number;\r\n  color?: string | number;\r\n  marker?: MarkerOptions;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "marker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MarkerOptions",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BasePoint-1"
        },
        {
            "name": "ContourPoint",
            "id": "interface-ContourPoint-910e50f66aedbb4faf24852b4e53fcb8",
            "file": "projects/components/src/component/chart/model/point/contour-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\r\n\r\nexport interface ContourPoint extends BasePoint {\r\n  value: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "DragSortEvent",
            "id": "interface-DragSortEvent-077f7b9c9ca862aeb683662735ac2d25",
            "file": "projects/components/src/directive/drag-sort/drag-sort-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DragSortEvent<T> {\r\n  previousIndex: number;\r\n  newIndex: number;\r\n  source: T;\r\n  target: T;\r\n  list: T[];\r\n}\r\n",
            "properties": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "newIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "previousIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IBuilder",
            "id": "interface-IBuilder-b7785f825532cea93713969a8bbc0bd0",
            "file": "projects/chart/src/chart/model/i-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBuilder<T, U> {\r\n  build(settings: T): U;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "settings",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "U",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ICellCoordinates",
            "id": "interface-ICellCoordinates-5e6631805fbb2f5293004c4cef7a7cb3",
            "file": "projects/components/src/component/table/contract/i-cell-coordinates.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TableRow} from './table-row';\r\nimport {TableColumn} from './table-column';\r\n\r\nexport interface ICellCoordinates<T> {\r\n  row: TableRow<T>;\r\n  column: TableColumn;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ICellEvent",
            "id": "interface-ICellEvent-6da096e2ce1322a1e8c48773aa9989ed",
            "file": "projects/components/src/component/table/contract/i-cell-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICellCoordinates } from './i-cell-coordinates';\r\n\r\nexport interface ICellEvent<T> extends ICellCoordinates<T> {\r\n  event: Event;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "ICellCoordinates"
        },
        {
            "name": "ICellValue",
            "id": "interface-ICellValue-47ac78b8f6ae65fb56be3d06b2dd2eb4",
            "file": "projects/components/src/component/table/contract/i-cell-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICellCoordinates } from './i-cell-coordinates';\r\n\r\nexport interface ICellValue<T> {\r\n  cell: ICellCoordinates<T>;\r\n  value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "cell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IChartConfig",
            "id": "interface-IChartConfig-d368f53041192a3c6a2e7c9cbe85f270",
            "file": "projects/chart/src/chart/model/i-chart-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\r\nimport { BasePoint } from './base-point';\r\nimport { AxisOptions } from './axis-options';\r\n\r\nexport interface IChartConfig {\r\n  name?: string;\r\n  series?: Series<BasePoint>[];\r\n  xAxis: AxisOptions[];\r\n  yAxis: AxisOptions[];\r\n  gridLines?: boolean;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "gridLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<BasePoint>[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "xAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "yAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDictionary",
            "id": "interface-IDictionary-a02a083f43fcbed34ee0f8539c4ae807",
            "file": "projects/components/src/common/contract/i-dictionary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDictionary<T> {\r\n  [key: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-a02a083f43fcbed34ee0f8539c4ae807",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "IDragEvent",
            "id": "interface-IDragEvent-550bf418007f173a918d20c7a45c6ba6",
            "file": "projects/components/src/component/chart/model/i-drag-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDragEvent<T> {\r\n  [key: string]: any;\r\n  event: DragEvent;\r\n  target: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DragEvent",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-550bf418007f173a918d20c7a45c6ba6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDrawer",
            "id": "interface-IDrawer-ff191f0381b7861b9864f7f78abb334a",
            "file": "projects/components/src/component/chart/model/i-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './point/base-point';\r\nimport { Series } from './series';\r\nimport * as d3 from 'd3';\r\nimport { ChartOptions } from './chart-options';\r\nimport { IDragEvent } from './i-drag-event';\r\n\r\nexport interface IDrawer<T extends BasePoint> {\r\n  dispatch?: d3.Dispatch<IDragEvent<Series<T>>>;\r\n\r\n  draw(\r\n    series: Series<T>,\r\n    drawContext:\r\n      | d3.Selection<SVGElement, unknown, null, undefined>\r\n      | d3.Selection<HTMLCanvasElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any,\r\n    options: ChartOptions\r\n  ): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "dispatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Dispatch<IDragEvent<Series<T>>>",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "drawContext",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "drawContext",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IFilter",
            "id": "interface-IFilter-0e115459c4d656ea280ca830346399ef",
            "file": "projects/components/src/component/filter/contarct/i-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFilter {\r\n  name: string;\r\n  field: string;\r\n  value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IIdName",
            "id": "interface-IIdName-487aa3eec563685e4e8449fc83479d90",
            "file": "projects/components/src/common/contract/i-id-name.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IIdName<T> {\r\n  [key: string]: any;\r\n  id: T;\r\n  name: string;\r\n  parentId?: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-487aa3eec563685e4e8449fc83479d90",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ILegendDrawer",
            "id": "interface-ILegendDrawer-a4a19a3bad0b665ea22b996ad4b8a767",
            "file": "projects/components/src/component/chart/model/i-drawer-legend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\r\nimport { BasePoint } from './point/base-point';\r\n\r\nexport interface LegendDrawOptions<T extends BasePoint> {\r\n  context: HTMLElement;\r\n  series: Series<T>[];\r\n  columns?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport interface ILegendDrawer {\r\n  draw(options: LegendDrawOptions<BasePoint>): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IModalConfig",
            "id": "interface-IModalConfig-9cff706eb3dc2e2e5668d3790c70508e",
            "file": "projects/components/src/component/modal/model/i-modal-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface IModalConfig {\r\n  backdrop?: boolean;\r\n  closeOnBackdropClick?: boolean;\r\n  resizable?: boolean;\r\n  draggable?: boolean;\r\n  class?: string[];\r\n  esc?: boolean;\r\n  beforeClose?: Observable<any>;\r\n  beforeOpen?: Observable<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "backdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "beforeClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "beforeOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "closeOnBackdropClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "esc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "resizable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IModalResult",
            "id": "interface-IModalResult-9caf0f00e82147524c35b108f907efd3",
            "file": "projects/components/src/component/modal/model/i-modal-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ModalCloseReason} from './modal-close-reason.enum';\r\n\r\nexport interface IModalResult {\r\n  /**\r\n   * Любые другие данные которые пользователь желает вернуть при закрытии окна\r\n   */\r\n  [key: string]: any;\r\n\r\n  /**\r\n   * Причина закрытия окна\r\n   */\r\n  reason: ModalCloseReason;\r\n}\r\n",
            "properties": [
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalCloseReason",
                    "optional": false,
                    "description": "<p>Причина закрытия окна</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nПричина закрытия окна\n"
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-9caf0f00e82147524c35b108f907efd3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЛюбые другие данные которые пользователь желает вернуть при закрытии окна\n",
                    "description": "<p>Любые другие данные которые пользователь желает вернуть при закрытии окна</p>\n"
                }
            ],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IPointer",
            "id": "interface-IPointer-da55fc5621233a310eead69c5dba16c2",
            "file": "projects/chart/src/chart/model/i-pointer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPointer {\r\n  event: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IRect",
            "id": "interface-IRect-050daab49eac9105bd82bc495bf4dac6",
            "file": "projects/components/src/common/contract/i-rect.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRect {\r\n  top?: number;\r\n  bottom?: number;\r\n  left?: number;\r\n  right?: number;\r\n  maxHeight?: number;\r\n  minWidth?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ITabChangeEvent",
            "id": "interface-ITabChangeEvent-b28d01d9e26121df85a1510f5b5abeca",
            "file": "projects/components/src/component/tabs/tabs/tabs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  AfterContentChecked,\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\nexport interface ITabChangeEvent {\r\n  activeId: string | null;\r\n  nextId: string;\r\n  preventDefault: () => void;\r\n}\r\n\r\n@Component({\r\n  selector: 'teta-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss'],\r\n})\r\nexport class TabsComponent implements AfterContentChecked {\r\n  @HostBinding('class.tabs') classTabs = true;\r\n  /**\r\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\r\n   */\r\n  @Input() activeId: string | null;\r\n\r\n  /**\r\n   * Whether the closed tabs should be hidden without destroying them\r\n   */\r\n  @Input() destroyOnHide = true;\r\n\r\n  /**\r\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\r\n   */\r\n  @Output() tabChange = new EventEmitter<ITabChangeEvent>();\r\n\r\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Selects the tab with the given id and shows its associated pane.\r\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n   */\r\n  select(tabId: string): void {\r\n    const selectedTab = this._getTabById(tabId);\r\n    if (\r\n      selectedTab &&\r\n      !selectedTab.disabled &&\r\n      this.activeId !== selectedTab.id\r\n    ) {\r\n      let defaultPrevented = false;\r\n\r\n      this.tabChange.emit({\r\n        activeId: this.activeId,\r\n        nextId: selectedTab.id,\r\n        preventDefault: () => {\r\n          defaultPrevented = true;\r\n        },\r\n      });\r\n\r\n      if (!defaultPrevented) {\r\n        this.activeId = selectedTab.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    const activeTab = this._getTabById(this.activeId);\r\n    this.activeId = activeTab\r\n      ? activeTab.id\r\n      : this.tabs.length\r\n      ? this.tabs.first.id\r\n      : null;\r\n  }\r\n\r\n  private _getTabById(id: string | null): TabComponent | null {\r\n    const tabsWithId: TabComponent[] = this.tabs.filter((tab) => tab.id === id);\r\n    return tabsWithId.length ? tabsWithId[0] : null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nextId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "preventDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ITreeData",
            "id": "interface-ITreeData-20f6a93c286af16d4f975c4a17f07c5f",
            "file": "projects/components/src/common/contract/i-tree-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITreeData {\r\n  children?: ITreeData[] | undefined | null;\r\n  [key: string]: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[] | undefined | null",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-20f6a93c286af16d4f975c4a17f07c5f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "IZoomEvent",
            "id": "interface-IZoomEvent-063363e45164ef78a414cd933ddd8f15",
            "file": "projects/components/src/component/chart/model/i-zoom-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ZoomType } from './enum/zoom-type';\r\nimport { D3ZoomEvent, ZoomTransform } from 'd3';\r\n\r\nexport interface IZoomEvent {\r\n  domain: [number, number];\r\n  zoomType: ZoomType;\r\n  zoomTransform?: ZoomTransform;\r\n  event?: D3ZoomEvent<any, any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "domain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "D3ZoomEvent<any | any>",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "zoomTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomTransform",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "zoomType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomType",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "LegendDrawOptions",
            "id": "interface-LegendDrawOptions-a4a19a3bad0b665ea22b996ad4b8a767",
            "file": "projects/components/src/component/chart/model/i-drawer-legend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Series } from './series';\r\nimport { BasePoint } from './point/base-point';\r\n\r\nexport interface LegendDrawOptions<T extends BasePoint> {\r\n  context: HTMLElement;\r\n  series: Series<T>[];\r\n  columns?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport interface ILegendDrawer {\r\n  draw(options: LegendDrawOptions<BasePoint>): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MarkerOptions",
            "id": "interface-MarkerOptions-9efe7de05d5040cf59e0ca83924ea7ed",
            "file": "projects/components/src/component/chart/model/point/marker-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DragPointType } from '../enum/drag-point-type';\r\n\r\nexport interface MarkerOptions {\r\n  draggable?: boolean;\r\n  dragType: DragPointType;\r\n  style?: {\r\n    radius?: number;\r\n    stroke?: string;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dragType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DragPointType",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ScatterPoint",
            "id": "interface-ScatterPoint-78f95db0c1bca64d8194a234c9d90043",
            "file": "projects/components/src/component/chart/model/point/scatter-point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\r\n\r\nexport interface ScatterPoint extends BasePoint {\r\n  radius: number;\r\n  value: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "BasePoint"
        },
        {
            "name": "Series",
            "id": "interface-Series-be7706db1b3756c4b7fed0b66b2cda1a",
            "file": "projects/chart/src/chart/model/series.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BasePoint } from './base-point';\r\nimport { SeriesType } from './series-type';\r\nimport { SeriesBaseComponent } from '../base/series-base.component';\r\n\r\nexport interface Series<T extends BasePoint> {\r\n  id?: number | string;\r\n  type: SeriesType;\r\n  data: T[];\r\n  name?: string;\r\n  xAxisIndex?: number;\r\n  yAxisIndex?: number;\r\n  component?: typeof SeriesBaseComponent;\r\n  strokeWidth?: number;\r\n  strokeDasharray?: string;\r\n  visible?: boolean;\r\n  color?: string;\r\n  showInLegend?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "showInLegend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "strokeDasharray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "xAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "yAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-5955822f7dbe798928ea0b876c5a3928",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AxesService",
            "id": "injectable-AxesService-fe29396b7cf6a25feb9c0e872024b67a",
            "file": "projects/chart/src/chart/axes.service.ts",
            "properties": [
                {
                    "name": "xAxis",
                    "defaultValue": "new Map<number, Axis>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "yAxis",
                    "defaultValue": "new Map<number, Axis>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { IChartConfig } from './model/i-chart-config';\r\nimport { AxisOrientation } from './model/enum/axis-orientation';\r\nimport { Axis } from './core/axis/axis';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AxesService {\r\n  public yAxis: Map<number, Axis> = new Map<number, Axis>();\r\n  public xAxis: Map<number, Axis> = new Map<number, Axis>();\r\n\r\n  constructor() {}\r\n\r\n  init(config: IChartConfig) {\r\n    config?.yAxis.forEach((_, index) => {\r\n      const axis = Axis.createAxis(AxisOrientation.y, config, index);\r\n\r\n      this.yAxis.set(index, axis);\r\n    });\r\n    config?.xAxis.forEach((_, index) => {\r\n      const axis = Axis.createAxis(AxisOrientation.x, config, index);\r\n\r\n      this.xAxis.set(index, axis);\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "ChartService",
            "id": "injectable-ChartService-6ddcd0973b4b5676e0f6b7eb89d9e588",
            "file": "projects/chart/src/chart/chart.service.ts",
            "properties": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pointerMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPointer>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pointerMove$",
                    "defaultValue": "new BehaviorSubject<IPointer>({ event: null })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DOMRect>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size$",
                    "defaultValue": "new Subject<DOMRect>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tooltips",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltips$",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPointerMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTooltip",
                    "args": [
                        {
                            "name": "tooltip",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltip",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { IChartConfig } from './model/i-chart-config';\r\nimport { AxesService } from './axes.service';\r\nimport { BehaviorSubject, map, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { ScaleService } from './scale.service';\r\nimport { IPointer } from './model/i-pointer';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ChartService {\r\n  public size: Observable<DOMRect>;\r\n  public pointerMove: Observable<IPointer>;\r\n  public tooltips: Observable<any>;\r\n\r\n  private _config: IChartConfig;\r\n  private size$ = new Subject<DOMRect>();\r\n  private pointerMove$ = new BehaviorSubject<IPointer>({ event: null });\r\n  private tooltips$ = new BehaviorSubject<any>([]);\r\n\r\n  constructor(\r\n    private axesService: AxesService,\r\n    private scaleService: ScaleService\r\n  ) {\r\n    this.size = this.size$.asObservable();\r\n    this.pointerMove = this.pointerMove$.asObservable();\r\n    this.tooltips = this.tooltips$.asObservable();\r\n\r\n    this.size\r\n      .pipe(\r\n        map((size) => {\r\n          this.scaleService.createScales(size);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public init(config: IChartConfig) {\r\n    this._config = config;\r\n    this.axesService.init(this._config);\r\n  }\r\n\r\n  public setSize(size: DOMRect) {\r\n    this.size$.next(size);\r\n  }\r\n\r\n  public setPointerMove(event: IPointer) {\r\n    this.pointerMove$.next({ event });\r\n  }\r\n\r\n  public setTooltip(tooltip: any) {\r\n    this.tooltips$.next(tooltip);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClickService",
            "id": "injectable-ClickService-b92d42aa8387b5dcf864a3b3aa6c38e9",
            "file": "projects/components/src/common/service/click.service.ts",
            "properties": [
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MouseEvent>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MouseEvent>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { fromEvent, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClickService {\r\n  click: Observable<MouseEvent>;\r\n  contextMenu: Observable<MouseEvent>;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any) {\r\n    this.click = fromEvent(this._document, 'click');\r\n    this.contextMenu = fromEvent(this._document, 'contextmenu');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-dace9b989901e63111d2b802993ef8d9",
            "file": "projects/components/src/component/modal/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "alert",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'"
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDialog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'"
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'"
                        },
                        {
                            "name": "showCancelButton",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IModalResult>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'common.ok'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonIcon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonPalette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'primary'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showCancelButton",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ModalService } from './modal.service';\r\nimport { Observable } from 'rxjs';\r\nimport { IModalResult } from './model/i-modal-result';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { map } from 'rxjs/operators';\r\nimport { ModalCloseReason } from './model/modal-close-reason.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DialogService {\r\n  constructor(private _modal: ModalService) {}\r\n\r\n  alert(message: string): void {\r\n    this.createDialog(message, 'common.ok', null, 'primary', false);\r\n  }\r\n\r\n  confirm(\r\n    message: string,\r\n    buttonText: string = 'common.ok',\r\n    buttonIcon: string = null,\r\n    buttonPalette: string = 'primary'\r\n  ): Observable<boolean> {\r\n    return this.createDialog(\r\n      message,\r\n      buttonText,\r\n      buttonIcon,\r\n      buttonPalette,\r\n      true\r\n    ).pipe(\r\n      map((result: IModalResult) => result.reason === ModalCloseReason.resolve)\r\n    );\r\n  }\r\n\r\n  private createDialog(\r\n    message: string,\r\n    buttonText: string = 'common.ok',\r\n    buttonIcon: string = null,\r\n    buttonPalette: string = 'primary',\r\n    showCancelButton: boolean = true\r\n  ): Observable<IModalResult> {\r\n    const dialog = this._modal.create(\r\n      DialogComponent,\r\n      {\r\n        message,\r\n        buttonText,\r\n        buttonIcon,\r\n        buttonPalette,\r\n        showCancelButton,\r\n      },\r\n      {\r\n        esc: true,\r\n        backdrop: true,\r\n      }\r\n    );\r\n    return dialog.onClose;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DynamicComponentService",
            "id": "injectable-DynamicComponentService-58c4a14cf6875ca99a9ae7f2a16cdc3c",
            "file": "projects/components/src/common/service/dynamic-component.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentRef",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentRef",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "TetaContentRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromComponent",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromString",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromTemplate",
                    "args": [
                        {
                            "name": "content",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TetaContentRef",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  Renderer2,\r\n  RendererFactory2,\r\n  TemplateRef,\r\n  Type,\r\n} from '@angular/core';\r\nimport { TetaContentRef } from '../contract/teta-content-ref';\r\nimport { DynamicData } from '../contract/dynamic-data';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DynamicComponentService {\r\n  private _renderer: Renderer2;\r\n\r\n  constructor(\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _rendererFactory: RendererFactory2,\r\n    private _appRef: ApplicationRef\r\n  ) {\r\n    this._renderer = this._rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  createComponent<T>(\r\n    component: Type<T>,\r\n    contentRef: TetaContentRef,\r\n    injector: Injector,\r\n    container: any\r\n  ): ComponentRef<T> {\r\n    const componentRef = this._componentFactoryResolver\r\n      .resolveComponentFactory(component)\r\n      .create(injector, contentRef.nodes);\r\n    this._appRef.attachView(componentRef.hostView);\r\n    container.appendChild(componentRef.location.nativeElement);\r\n    return componentRef;\r\n  }\r\n\r\n  createContent(\r\n    content: string | TemplateRef<any> | Type<any>,\r\n    injector: Injector,\r\n    context?: any\r\n  ): TetaContentRef {\r\n    if (content === null || content === undefined) {\r\n      throw new Error('Content is undefined');\r\n    }\r\n    if (typeof content === 'string') {\r\n      return this.fromString(content);\r\n    } else if (content instanceof TemplateRef) {\r\n      return this.fromTemplate(content, context);\r\n    } else {\r\n      return this.fromComponent(content, injector, context);\r\n    }\r\n  }\r\n\r\n  destroy<T>(\r\n    component: ComponentRef<T>,\r\n    content: TetaContentRef,\r\n    container: HTMLElement\r\n  ): void {\r\n    if (component) {\r\n      this._appRef.detachView(component.hostView);\r\n      component.destroy();\r\n    }\r\n    if (content && content.viewRef) {\r\n      content.viewRef.destroy();\r\n    }\r\n    content = null;\r\n  }\r\n\r\n  getContext(\r\n    content: string | TemplateRef<any> | Type<any>,\r\n    context: any\r\n  ): any {\r\n    if (content instanceof TemplateRef) {\r\n      return {\r\n        $implicit: context,\r\n        data: context,\r\n      };\r\n    }\r\n    return context;\r\n  }\r\n\r\n  getInjector(data: DynamicData, parent: Injector): Injector {\r\n    return Injector.create({\r\n      providers: [\r\n        {\r\n          provide: DynamicData,\r\n          useValue: data,\r\n        },\r\n      ],\r\n      parent,\r\n    });\r\n  }\r\n\r\n  private fromString(content: string): TetaContentRef {\r\n    return new TetaContentRef([[this._renderer.createText(`${content}`)]]);\r\n  }\r\n\r\n  private fromTemplate(\r\n    content: TemplateRef<any>,\r\n    context: any\r\n  ): TetaContentRef {\r\n    const viewRef = content.createEmbeddedView(context);\r\n    this._appRef.attachView(viewRef);\r\n    return new TetaContentRef([viewRef.rootNodes], viewRef);\r\n  }\r\n\r\n  private fromComponent(\r\n    content: any,\r\n    injector: Injector,\r\n    context: any\r\n  ): TetaContentRef {\r\n    const componentFactory =\r\n      this._componentFactoryResolver.resolveComponentFactory<any>(content);\r\n    const componentRef = componentFactory.create(injector);\r\n    for (const key in context) {\r\n      if (context.hasOwnProperty(key)) {\r\n        componentRef.instance[key] = context[key];\r\n      }\r\n    }\r\n    const componentNativeEl = componentRef.location.nativeElement;\r\n    this._appRef.attachView(componentRef.hostView);\r\n    return new TetaContentRef(\r\n      [[componentNativeEl]],\r\n      componentRef.hostView,\r\n      componentRef\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-e18d12b1911018863955d5902676881c",
            "file": "projects/components/src/component/icon/icon.service.ts",
            "properties": [
                {
                    "name": "_loaded",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "_pending",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addSprite",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cloneSVG",
                    "args": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SVGElement",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSVG",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SVGElement>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bypassInterceptors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "svgElementFromString",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SVGElement | never",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, Renderer2, RendererFactory2} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {HttpBackend, HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IconService {\r\n  private static _loaded: string[] = [];\r\n  private static _pending: string[] = [];\r\n  private _renderer: Renderer2;\r\n\r\n  constructor(@Inject(DOCUMENT) protected _document: any,\r\n              private _rendererFactory: RendererFactory2,\r\n              private _httpBackend: HttpBackend,\r\n              private _http: HttpClient) {\r\n    this._renderer = this._rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  addSprite(url: string, bypassInterceptors: boolean = true) {\r\n    if (IconService._loaded.indexOf(url) < 0 && IconService._pending.indexOf(url) < 0) {\r\n      IconService._pending.push(url);\r\n      this.getSVG(url, bypassInterceptors).subscribe(svg => {\r\n        IconService._pending = IconService._pending.filter(_ => _ !== url);\r\n        IconService._loaded.push(url);\r\n        this._renderer.insertBefore(this._document.body, svg, this._document.body.firstChild);\r\n      });\r\n    }\r\n  }\r\n\r\n  private getSVG(url: string, bypassInterceptors: boolean = true): Observable<SVGElement> {\r\n    const http = bypassInterceptors ? new HttpClient(this._httpBackend) : this._http;\r\n    return http.get(url, {responseType: 'text'})\r\n      .pipe(\r\n        map((svgText: string) => {\r\n          const svgEl = this.svgElementFromString(svgText);\r\n          return this.cloneSVG(svgEl);\r\n        })\r\n      );\r\n  }\r\n\r\n  private svgElementFromString(str: string): SVGElement | never {\r\n    const div = this._renderer.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n    if (!svg) {\r\n      throw new Error('No SVG found in loaded contents');\r\n    }\r\n    return svg;\r\n  }\r\n\r\n  private cloneSVG(svg: SVGElement): SVGElement {\r\n    return svg.cloneNode(true) as SVGElement;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-227965b5891fbf434a860a52943b7747",
            "file": "projects/components/src/component/message/message.service.ts",
            "properties": [
                {
                    "name": "_clear",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_message",
                    "defaultValue": "new Subject<Message>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Message>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMultiple",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearMessages",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {Message} from './model/message';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  message: Observable<Message>;\r\n  clear: Observable<string>;\r\n\r\n  private _message = new Subject<Message>();\r\n  private _clear = new Subject<string>();\r\n\r\n\r\n  constructor() {\r\n    this.message = this._message.asObservable();\r\n    this.clear = this._clear.asObservable();\r\n  }\r\n\r\n  add(message: Message) {\r\n    if (message) {\r\n      this._message.next(message);\r\n    }\r\n  }\r\n\r\n  addMultiple(messages: Message[]) {\r\n    if (messages && messages.length) {\r\n      messages.forEach((n) => {\r\n        this._message.next(n);\r\n      });\r\n    }\r\n  }\r\n\r\n  clearMessages(name: string) {\r\n    this._clear.next(name);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-2a8b4605c91f127856a6572cc9aaf966",
            "file": "projects/components/src/component/modal/modal.service.ts",
            "properties": [
                {
                    "name": "_container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_modalChanged",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_stack",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalInstance[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unregister",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "IModalConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalInstance",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IModalConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any> | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentModal",
                            "type": "CurrentModal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "DynamicData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "ModalInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Injector, TemplateRef, Type } from '@angular/core';\r\nimport { ModalInstance } from './model/modal-instance';\r\nimport { Subject } from 'rxjs';\r\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\r\nimport { ModalCloseReason } from './model/modal-close-reason.enum';\r\nimport { IModalConfig } from './model/i-modal-config';\r\nimport { CurrentModal } from './model/current-modal';\r\nimport { DynamicData } from '../../common/contract/dynamic-data';\r\nimport { ModalContainerComponent } from './modal-container/modal-container.component';\r\nimport { IModalResult } from './model/i-modal-result';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ModalService {\r\n  private _stack: ModalInstance[] = [];\r\n  private _modalChanged = new Subject<void>();\r\n  private readonly _container: any;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT)\r\n    private _document: any,\r\n    private _injector: Injector,\r\n    private _factory: DynamicComponentService\r\n  ) {\r\n    this._container = this._document.body;\r\n\r\n    this._modalChanged.subscribe(() => {\r\n      if (this._stack && this._stack.length > 0) {\r\n        this.focus(this._stack[this._stack.length - 1]);\r\n      }\r\n    });\r\n  }\r\n\r\n  closeAll(): void {\r\n    if (this._stack && this._stack.length > 0) {\r\n      this._stack.forEach((instance: ModalInstance) => {\r\n        instance.close({\r\n          reason: ModalCloseReason.exit,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  create(\r\n    content: string | TemplateRef<any> | Type<any>,\r\n    data?: any,\r\n    config?: IModalConfig,\r\n    injector?: Injector\r\n  ): ModalInstance {\r\n    if (content === null || content === undefined) {\r\n      throw new Error('Specify template or component to render');\r\n    }\r\n    if (config === null || config === undefined) {\r\n      config = Object.assign(\r\n        {\r\n          backdrop: true,\r\n          class: [],\r\n          esc: true,\r\n        },\r\n        config\r\n      );\r\n    }\r\n    if (injector === null || injector === undefined) {\r\n      injector = this._injector;\r\n    }\r\n    const currentModal = new CurrentModal();\r\n    const modalData = new DynamicData(data);\r\n\r\n    injector = this.getInjector(currentModal, modalData, injector);\r\n    const contentInstance = this._factory.createContent(\r\n      content,\r\n      injector,\r\n      this.getContext(content, modalData, currentModal)\r\n    );\r\n    const window = this._factory.createComponent(\r\n      ModalContainerComponent,\r\n      contentInstance,\r\n      injector,\r\n      this._container\r\n    );\r\n    window.instance.config = config;\r\n\r\n    const instance = new ModalInstance(window, contentInstance);\r\n    currentModal.close = instance.close;\r\n    this.register(instance);\r\n    return instance;\r\n  }\r\n\r\n  private getContext(\r\n    content: string | TemplateRef<any> | Type<any>,\r\n    context: any,\r\n    currentModal: CurrentModal\r\n  ): any {\r\n    if (content instanceof TemplateRef) {\r\n      return {\r\n        $implicit: {\r\n          modal: currentModal,\r\n          data: context,\r\n        },\r\n        modal: currentModal,\r\n        data: context,\r\n        close: (result: IModalResult): void => {\r\n          currentModal.close(result);\r\n        },\r\n      };\r\n    }\r\n    return context;\r\n  }\r\n\r\n  private getInjector(\r\n    currentModal: CurrentModal,\r\n    data: DynamicData,\r\n    parent: Injector\r\n  ): Injector {\r\n    return Injector.create({\r\n      providers: [\r\n        {\r\n          provide: CurrentModal,\r\n          useValue: currentModal,\r\n        },\r\n        {\r\n          provide: DynamicData,\r\n          useValue: data,\r\n        },\r\n      ],\r\n      parent,\r\n    });\r\n  }\r\n\r\n  private register(instance: ModalInstance): void {\r\n    this._stack.push(instance);\r\n    this._modalChanged.next();\r\n    instance.onClose.subscribe(() => this.unregister(instance));\r\n  }\r\n\r\n  private unregister = (instance: ModalInstance) => {\r\n    const index = this._stack.indexOf(instance);\r\n    if (index > -1) {\r\n      this._stack.splice(index, 1);\r\n      this._modalChanged.next();\r\n    }\r\n  };\r\n\r\n  private focus(instance: ModalInstance): void {\r\n    if (instance && instance.window && instance.window.location.nativeElement) {\r\n      setTimeout(() => {\r\n        instance.window.location.nativeElement.focus();\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_factory",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_factory",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OverlayContainerService",
            "id": "injectable-OverlayContainerService-9122c1adf71345ae67ab599f2256417f",
            "file": "projects/components/src/common/service/overlay-container.service.ts",
            "properties": [
                {
                    "name": "_container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_containerClass",
                    "defaultValue": "'overlay-container'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, OnDestroy} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OverlayContainerService implements OnDestroy {\r\n  private _containerClass = 'overlay-container';\r\n  private _container: HTMLElement;\r\n\r\n  constructor(@Inject(DOCUMENT) private document$: any) {\r\n  }\r\n\r\n  getContainer(): HTMLElement {\r\n    if (!this._container) {\r\n      this.createContainer();\r\n    }\r\n    return this._container;\r\n  }\r\n\r\n  private createContainer(): void {\r\n    const container = this.document$.createElement('div');\r\n    container.classList.add(this._containerClass);\r\n    this.document$.body.appendChild(container);\r\n    this._container = container;\r\n  }\r\n\r\n  private removeContainer(): void {\r\n    if (this._container && this._container.parentNode) {\r\n      this._container.parentNode.removeChild(this._container);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.removeContainer();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document$",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "document$",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PickerLocaleService",
            "id": "injectable-PickerLocaleService-e88c5b35504c42924fa7e90f06dde862",
            "file": "projects/components/src/component/date-picker/service/picker-locale.service.ts",
            "properties": [
                {
                    "name": "_defaults",
                    "defaultValue": "new PickerLocaleModel({\r\n    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n    monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'],\r\n    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    today: 'Today'\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "locale",
                    "defaultValue": "new BehaviorSubject<PickerLocaleModel>(this._defaults)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PickerLocaleModel>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setLocale",
                    "args": [
                        {
                            "name": "locale",
                            "type": "PickerLocaleModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locale",
                            "type": "PickerLocaleModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {PickerLocaleModel} from '../model/picker-locale-model';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PickerLocaleService {\r\n  private _defaults = new PickerLocaleModel({\r\n    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n    monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'],\r\n    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    today: 'Today'\r\n  });\r\n\r\n  public locale: BehaviorSubject<PickerLocaleModel> = new BehaviorSubject<PickerLocaleModel>(this._defaults);\r\n\r\n  public setLocale(locale: PickerLocaleModel) {\r\n    this.locale.next(locale);\r\n  }\r\n\r\n  constructor() {\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        },
        {
            "name": "PickerTouchService",
            "id": "injectable-PickerTouchService-36746dfa8e4a1e977ab3816bbab70f50",
            "file": "projects/components/src/component/date-picker/service/picker-touch.service.ts",
            "properties": [
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "step$",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<number>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "touchMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TouchEvent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "touchMove$",
                    "defaultValue": "new Subject<TouchEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<TouchEvent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "onTouchMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { bufferCount, tap, throttleTime } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PickerTouchService {\r\n  step: Observable<number>;\r\n\r\n  private touchMove: Observable<TouchEvent>;\r\n  private touchMove$: Subject<TouchEvent> = new Subject<TouchEvent>();\r\n  private step$: Subject<number> = new Subject<number>();\r\n\r\n  constructor() {\r\n    this.touchMove = this.touchMove$.asObservable();\r\n    this.step = this.step$.asObservable();\r\n\r\n    this.touchMove\r\n      .pipe(\r\n        throttleTime(25),\r\n        bufferCount(2),\r\n        tap((touches: [TouchEvent, TouchEvent]) => {\r\n          const [start, end] = touches.map((_) => _.changedTouches?.item(0));\r\n          const deltaY = start?.clientY - end?.clientY;\r\n          if (deltaY !== 0) {\r\n            const step = deltaY > 0 ? 1 : -1;\r\n            this.step$.next(step);\r\n          }\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  onTouchMove(event: TouchEvent) {\r\n    this.touchMove$.next(event);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "ScaleService",
            "id": "injectable-ScaleService-7defadba5aae3b59f5b9631f4b9b08f0",
            "file": "projects/chart/src/chart/scale.service.ts",
            "properties": [
                {
                    "name": "scaleMapping",
                    "defaultValue": "new Map<AxisType, any>()\r\n    .set(AxisType.number, d3.scaleLinear)\r\n    .set(AxisType.time, d3.scaleTime)\r\n    .set(AxisType.category, d3.scaleOrdinal)\r\n    .set(AxisType.log, d3.scaleLog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "xScales",
                    "defaultValue": "new Map<number | string, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | string | any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "yScales",
                    "defaultValue": "new Map<number | string, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | string | any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createScales",
                    "args": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScale",
                    "args": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { AxesService } from './axes.service';\r\nimport * as d3 from 'd3';\r\nimport { AxisType } from './model/axis-type';\r\nimport { Axis } from './core/axis/axis';\r\nimport { AxisOrientation } from './model/enum/axis-orientation';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScaleService {\r\n  public yScales: Map<number | string, any> = new Map<number | string, any>();\r\n  public xScales: Map<number | string, any> = new Map<number | string, any>();\r\n\r\n  private scaleMapping = new Map<AxisType, any>()\r\n    .set(AxisType.number, d3.scaleLinear)\r\n    .set(AxisType.time, d3.scaleTime)\r\n    .set(AxisType.category, d3.scaleOrdinal)\r\n    .set(AxisType.log, d3.scaleLog);\r\n\r\n  constructor(private axesService: AxesService) {}\r\n\r\n  public createScales(size: DOMRect) {\r\n    this.yScales.clear();\r\n    this.xScales.clear();\r\n\r\n    const topBound = [...this.axesService.xAxis.values()]\r\n      .filter((_) => _.options?.visible && _.options?.opposite)\r\n      .reduce((acc, cur) => acc + cur.selfSize, 0);\r\n\r\n    const bottomBound = [...this.axesService.xAxis.values()]\r\n      .filter((_) => _.options?.visible && _.options?.opposite !== true)\r\n      .reduce((acc, cur) => acc + cur.selfSize, 0);\r\n\r\n    this.axesService.yAxis.forEach((axis: Axis) => {\r\n      const scale = this.getScale(axis).range([\r\n        topBound,\r\n        size.height - bottomBound,\r\n      ]);\r\n\r\n      this.yScales.set(axis.index, scale);\r\n    });\r\n\r\n    const leftBound = [...this.axesService.yAxis.values()]\r\n      .filter((_) => _.options?.visible && _.options.opposite !== true)\r\n      .reduce((acc, cur) => acc + cur.selfSize, 0);\r\n\r\n    const rightBound = [...this.axesService.yAxis.values()]\r\n      .filter((_) => _.options?.visible && _.options.opposite)\r\n      .reduce((acc, cur) => acc + cur.selfSize, 0);\r\n\r\n    this.axesService.xAxis.forEach((axis: Axis) => {\r\n      const scale = this.getScale(axis).range([\r\n        leftBound,\r\n        size.width - rightBound,\r\n      ]);\r\n      this.xScales.set(axis.index, scale);\r\n    });\r\n  }\r\n\r\n  private getScale(axis: Axis) {\r\n    return this.scaleMapping\r\n      .get(axis.options?.type)()\r\n      .domain(\r\n        axis.orientation === AxisOrientation.y\r\n          ? [...axis.extremes].reverse()\r\n          : axis.extremes\r\n      );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SwitchService",
            "id": "injectable-SwitchService-f7ccdc3b752679e72852935189a5c4e1",
            "file": "projects/components/src/component/switch/switch.service.ts",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "value$",
                    "defaultValue": "new ReplaySubject<any>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {Observable, ReplaySubject} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SwitchService {\r\n  readonly value: Observable<any>;\r\n  private readonly value$: ReplaySubject<any> = new ReplaySubject<any>(1);\r\n\r\n  constructor() {\r\n    this.value = this.value$.asObservable();\r\n  }\r\n\r\n  setValue(value: any) {\r\n    this.value$.next(value);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TableService",
            "id": "injectable-TableService-88c8a937542eaf6f2f6b3d035fb397af",
            "file": "projects/components/src/component/table/service/table.service.ts",
            "properties": [
                {
                    "name": "_activeRow",
                    "defaultValue": "new BehaviorSubject<TableRow<T>>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "new BehaviorSubject<TableColumn[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columnsCookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentEditCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentEditRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dict",
                    "defaultValue": "new BehaviorSubject<IDictionary<IIdName<any>[]>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_displayData",
                    "defaultValue": "new BehaviorSubject<TableRow<T>[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dragSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editCellStart",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editCellStop",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editRowStart",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_editRowStop",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_filterClear",
                    "defaultValue": "new Subject<TableColumn>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_groupToggle",
                    "defaultValue": "new Subject<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenCookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_scrollIndex",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selectedRows",
                    "defaultValue": "new BehaviorSubject<TableRow<T>[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "new BehaviorSubject<FilterState>(new FilterState())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_stateChanged",
                    "defaultValue": "new Subject<FilterState>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valueChanged",
                    "defaultValue": "new Subject<ICellCoordinates<T> | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valueSet",
                    "defaultValue": "new Subject<ICellValue<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "cellEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "displayColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displayData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "editCellStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "editCellStop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "editEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditEvent",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "editRowStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "editRowStop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "editType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditType",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "filterClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "groupToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "initialColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialColumnsHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "rowEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "scrollIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableRow[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectType",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "stateChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "valueChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellCoordinates<T>>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "valueSet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ICellValue<T>>",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "allRowsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | null",
                    "typeParameters": [],
                    "line": 462,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autosizeAllColumns",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "autosizeColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "boolOrFuncCallback",
                    "args": [
                        {
                            "name": "variable",
                            "type": "boolean | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(args: M) => boolean",
                    "typeParameters": [
                        "M"
                    ],
                    "line": 518,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variable",
                            "type": "boolean | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 493,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearColumnsState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 485,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 458,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deselectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 441,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParent",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 529,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnByName",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRowByIndex",
                    "args": [
                        {
                            "name": "rowIndex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowIndex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTableElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 549,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 553,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lockPreviousColumns",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeColumn",
                    "args": [
                        {
                            "name": "event",
                            "type": "ColumnResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ColumnResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreColumnsState",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumnStore[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumnStore[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreDefaultColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreHiddenColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveColumnsState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveHiddenColumns",
                    "args": [
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 513,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 430,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRows",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 426,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumnAutoWidth",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "table",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 557,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "table",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCookieName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDict",
                    "args": [
                        {
                            "name": "dict",
                            "type": "IDictionary<IIdName[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dict",
                            "type": "IDictionary<IIdName[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisplayColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHiddenColumns",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 480,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "cellValue",
                            "type": "ICellValue<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellValue",
                            "type": "ICellValue<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditCell",
                    "args": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 403,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditRow",
                    "args": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 382,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cellCoordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleGroup",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 489,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {TableRow} from '../contract/table-row';\r\nimport {ICellCoordinates} from '../contract/i-cell-coordinates';\r\nimport {TableColumn} from '../contract/table-column';\r\nimport {FilterState} from '../../filter/contarct/filter-state';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {ColumnResizeEvent} from '../contract/column-resize-event';\r\nimport {ColumnReorderEvent} from '../contract/column-reorder-event';\r\nimport {SortEvent} from '../contract/sort-event';\r\nimport {ArrayUtil} from '../../../common/util/array-util';\r\nimport {StateUtil} from '../util/state-util';\r\nimport {SelectType} from '../enum/select-type.enum';\r\nimport {EditType} from '../enum/edit-type.enum';\r\nimport {EditEvent} from '../enum/edit-event.enum';\r\nimport {ListFilterType} from '../../filter/enum/list-filter-type.enum';\r\nimport {ListFilter} from '../../filter/contarct/list-filter';\r\nimport {FilterType} from '../../filter/enum/filter-type.enum';\r\nimport {NumericFilterValue} from '../../filter/contarct/numeric-filter-value';\r\nimport {NumericFilter} from '../../filter/contarct/numeric-filter';\r\nimport {StringFilter} from '../../filter/contarct/string-filter';\r\nimport {DateFilterValue} from '../../filter/contarct/date-filter-value';\r\nimport {DateFilter} from '../../filter/contarct/date-filter';\r\nimport {IDictionary} from '../../../common/contract/i-dictionary';\r\nimport {IIdName} from '../../../common/contract/i-id-name';\r\nimport {DateUtil} from '../../../util/date-util';\r\nimport hash from 'object-hash';\r\nimport {TableColumnStore} from '../contract/table-column-store';\r\nimport {ICellValue} from '../contract/i-cell-value';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TableService<T> {\r\n  columns: Observable<TableColumn[]>;\r\n  displayData: Observable<TableRow<T>[]>;\r\n  dict: Observable<IDictionary<IIdName<any>[]>>;\r\n  state: Observable<FilterState>;\r\n  selectType: SelectType;\r\n  editRowStart: Observable<ICellCoordinates<T>>;\r\n  editRowStop: Observable<ICellCoordinates<T>>;\r\n\r\n  editCellStart: Observable<ICellCoordinates<T>>;\r\n  editCellStop: Observable<ICellCoordinates<T>>;\r\n  valueChanged: Observable<ICellCoordinates<T>>;\r\n  valueSet: Observable<ICellValue<T>>;\r\n  stateChanged: Observable<FilterState>;\r\n  filterClear: Observable<TableColumn>;\r\n  groupToggle: Observable<TableRow<T>>;\r\n  selectedRows: Observable<TableRow<T>[]>;\r\n  activeRow: Observable<TableRow<T>>;\r\n  hiddenColumns: Observable<string[]>;\r\n  scrollIndex: Observable<number>;\r\n\r\n  editType: EditType;\r\n  editEvent: EditEvent;\r\n  rowEditable: boolean | ((row: TableRow<T>) => boolean);\r\n  cellEditable: boolean | ((row: ICellCoordinates<T>) => boolean);\r\n\r\n  get dragSource() {\r\n    return this._dragSource;\r\n  }\r\n\r\n  private initialColumnsHash: string;\r\n  private initialColumns: TableColumn[] = [];\r\n  private displayColumns: TableColumn[] = [];\r\n  private _columns: BehaviorSubject<TableColumn[]> = new BehaviorSubject<TableColumn[]>([]);\r\n  private initialData: TableRow<T>[] = [];\r\n  private _displayData: BehaviorSubject<TableRow<T>[]> = new BehaviorSubject<TableRow<T>[]>([]);\r\n  private _dict: BehaviorSubject<IDictionary<IIdName<any>[]>> =\r\n    new BehaviorSubject<IDictionary<IIdName<any>[]>>({});\r\n  private _state: BehaviorSubject<FilterState> =\r\n    new BehaviorSubject<FilterState>(new FilterState());\r\n  private _cookieName: string;\r\n  private _hiddenCookieName: string;\r\n  private _columnsCookieName: string;\r\n  private _editRowStart = new Subject<ICellCoordinates<T> | null>();\r\n  private _editRowStop = new Subject<ICellCoordinates<T> | null>();\r\n  private _editCellStart = new Subject<ICellCoordinates<T> | null>();\r\n  private _editCellStop = new Subject<ICellCoordinates<T> | null>();\r\n  private _valueChanged = new Subject<ICellCoordinates<T> | null>();\r\n  private _valueSet = new Subject<ICellValue<T>>();\r\n  private _stateChanged = new Subject<FilterState>();\r\n  private _filterClear = new Subject<TableColumn>();\r\n  private _dragSource: TableColumn;\r\n  private _groupToggle = new Subject<TableRow<T>>();\r\n  private _selectedRows = new BehaviorSubject<TableRow<T>[]>([]);\r\n  private _activeRow = new BehaviorSubject<TableRow<T>>(null);\r\n  private _hiddenColumns = new BehaviorSubject<string[]>([]);\r\n  private _scrollIndex = new Subject<number>();\r\n\r\n  private _currentEditRow: ICellCoordinates<T>;\r\n  private _currentEditCell: ICellCoordinates<T>;\r\n\r\n  constructor() {\r\n    this.columns = this._columns.asObservable();\r\n    this.displayData = this._displayData.asObservable();\r\n    this.dict = this._dict.asObservable();\r\n    this.state = this._state.asObservable();\r\n    this.editRowStart = this._editRowStart.asObservable();\r\n    this.editRowStop = this._editRowStop.asObservable();\r\n    this.editCellStart = this._editCellStart.asObservable();\r\n    this.editCellStop = this._editCellStop.asObservable();\r\n    this.valueChanged = this._valueChanged.asObservable();\r\n    this.valueSet = this._valueSet.asObservable();\r\n    this.stateChanged = this._stateChanged.asObservable();\r\n    this.filterClear = this._filterClear.asObservable();\r\n    this.groupToggle = this._groupToggle.asObservable();\r\n    this.selectedRows = this._selectedRows.asObservable();\r\n    this.activeRow = this._activeRow.asObservable();\r\n    this.hiddenColumns = this._hiddenColumns.asObservable();\r\n    this.scrollIndex = this._scrollIndex.asObservable();\r\n  }\r\n\r\n  setData(data: T[]): void {\r\n    this.initialData = data?.map((_) => new TableRow<T>(_));\r\n    this._displayData.next(this.initialData);\r\n  }\r\n\r\n  setDict(dict: IDictionary<IIdName<any>[]>): void {\r\n    this._dict.next(dict);\r\n  }\r\n\r\n  setColumns(columns: TableColumn[]): void {\r\n    this.initialColumns = columns ? columns.map((_) => new TableColumn(_)) : [];\r\n    console.log(hash);\r\n    this.initialColumnsHash = hash(this.initialColumns, {\r\n      algorithm: 'sha1',\r\n      ignoreUnknown: true\r\n    });\r\n    const restored = this.restoreColumns();\r\n\r\n    if (restored) {\r\n      this.setDisplayColumns(restored);\r\n    } else {\r\n      this.setDisplayColumns(this.initialColumns);\r\n    }\r\n  }\r\n\r\n  restoreDefaultColumns() {\r\n    this.setDisplayColumns(this.initialColumns);\r\n    this.clearColumnsState();\r\n  }\r\n\r\n  updateColumns(columns: TableColumn[]): void {\r\n    this.setDisplayColumns(columns);\r\n    this.saveColumnsState();\r\n  }\r\n\r\n  saveColumnsState() {\r\n    if (this._cookieName) {\r\n      localStorage.setItem(\r\n        this._columnsCookieName,\r\n        JSON.stringify({\r\n          hash: this.initialColumnsHash,\r\n          columns: this.displayColumns.map((_) => new TableColumnStore(_)),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  clearColumnsState() {\r\n    localStorage.removeItem(this._columnsCookieName);\r\n  }\r\n\r\n  setDisplayColumns(columns: TableColumn[]): void {\r\n    this.displayColumns = columns ? columns.map((_) => new TableColumn(_)) : [];\r\n    this._columns.next(this.displayColumns);\r\n  }\r\n\r\n  restoreColumns() {\r\n    const savedColumns = JSON.parse(\r\n      localStorage.getItem(this._columnsCookieName)\r\n    );\r\n    if (savedColumns && savedColumns.hash === this.initialColumnsHash) {\r\n      return this.restoreColumnsState(savedColumns.columns);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  restoreColumnsState(columns: TableColumnStore[]) {\r\n    return columns.map((column: TableColumnStore) => {\r\n      const found = ArrayUtil.findRecursive(\r\n        this.initialColumns,\r\n        (item) => item.name === column.name,\r\n        'columns'\r\n      );\r\n      const resultColumn = new TableColumn(found);\r\n      resultColumn.width = column.width;\r\n      resultColumn.flex = column.flex;\r\n      resultColumn.locked = column.locked;\r\n      if (column.columns?.length > 0) {\r\n        resultColumn.columns = this.restoreColumnsState(column.columns);\r\n      }\r\n      return resultColumn;\r\n    });\r\n  }\r\n\r\n  setState(state: FilterState): void {\r\n    state.save(this._cookieName);\r\n    this._state.next(state);\r\n  }\r\n\r\n  setCookieName(name: string): void {\r\n    this._cookieName = name;\r\n    this._hiddenCookieName = `${this._cookieName}_hidden_columns`;\r\n    this._columnsCookieName = `${this._cookieName}_columns`;\r\n  }\r\n\r\n  restoreState(): void {\r\n    let state: FilterState;\r\n    if (this._cookieName?.length > 0 && FilterState.restore(this._cookieName)) {\r\n      let newState = Object.assign(\r\n        this._state.value,\r\n        FilterState.restore(this._cookieName)\r\n      );\r\n      newState = DateUtil.convertDateStringsToDates(newState);\r\n      state = new FilterState(newState);\r\n    } else {\r\n      state = new FilterState();\r\n    }\r\n    this.setState(state);\r\n  }\r\n\r\n  saveHiddenColumns(hiddenColumns: string[]): void {\r\n    localStorage.setItem(this._hiddenCookieName, JSON.stringify(hiddenColumns));\r\n  }\r\n\r\n  restoreHiddenColumns(): void {\r\n    const hiddenColumns = localStorage.getItem(this._hiddenCookieName) || '[]';\r\n    this._hiddenColumns.next(JSON.parse(hiddenColumns));\r\n  }\r\n\r\n  sort(sortEvent: SortEvent): void {\r\n    if (sortEvent.column.sortable) {\r\n      this.setState(StateUtil.sortColumn(sortEvent, this._state.value));\r\n    }\r\n  }\r\n\r\n  clearSort(column: TableColumn): void {\r\n    this.setState(StateUtil.clearSort(column, this._state.value));\r\n  }\r\n\r\n  clearAllSort(): void {\r\n    this.setState(StateUtil.clearAllSort(this._state.value));\r\n  }\r\n\r\n  clearFilter(column: TableColumn) {\r\n    const state = this._state.value;\r\n    if (column !== null && column !== undefined && column.filterable) {\r\n      switch (column.filterType) {\r\n        case FilterType.date:\r\n          state.addDateFilter(\r\n            new DateFilter({\r\n              name: column.name,\r\n              field: column.filterField,\r\n              value: new DateFilterValue(),\r\n            })\r\n          );\r\n          break;\r\n        case FilterType.string:\r\n          state.addStringFilter(\r\n            new StringFilter({\r\n              name: column.name,\r\n              field: column.filterField,\r\n              value: '',\r\n            })\r\n          );\r\n          break;\r\n        case FilterType.number:\r\n          state.addNumericFilter(\r\n            new NumericFilter({\r\n              name: column.name,\r\n              field: column.filterField,\r\n              value: new NumericFilterValue(),\r\n            })\r\n          );\r\n          break;\r\n        case FilterType.list:\r\n          state.addListFilter(\r\n            new ListFilter({\r\n              name: column.name,\r\n              field: column.filterField,\r\n              value: [],\r\n              type: ListFilterType.None,\r\n            })\r\n          );\r\n          break;\r\n      }\r\n      this.setState(new FilterState(state));\r\n    }\r\n  }\r\n\r\n  clearAllFilters() {\r\n    const state = this._state.value;\r\n    state.stringFilters = [];\r\n    state.listFilters = [];\r\n    state.numericFilters = [];\r\n    state.dateFilters = [];\r\n    this.setState(new FilterState(state));\r\n  }\r\n\r\n  pinColumn(column: TableColumn): void {\r\n    this.displayColumns.forEach((col: TableColumn) => {\r\n      if (col.name === column.name) {\r\n        col.locked = !col.locked;\r\n      }\r\n    });\r\n    this.updateColumns(this.displayColumns);\r\n  }\r\n\r\n  dragStart(column: TableColumn): void {\r\n    this._dragSource = column;\r\n  }\r\n\r\n  lockPreviousColumns(column: TableColumn, element: HTMLElement) {\r\n    const flat = ArrayUtil.flatten(this.displayColumns, 'columns', true).sort(\r\n      (a, b) => Number(b.locked) - Number(a.locked)\r\n    );\r\n    const index = flat.indexOf(column);\r\n    const previous = flat.slice(0, index).filter((_) => _.flex > 0);\r\n    if (previous?.length > 0) {\r\n      const tableElement = this.getTableElement(element);\r\n      previous.forEach((item: TableColumn) => {\r\n        const itemCol = tableElement.querySelector(\r\n          `teta-head-cell[data-column=${item.name}]`\r\n        ) as HTMLElement;\r\n        if (itemCol) {\r\n          item.flex = 0;\r\n          item.width = itemCol.clientWidth;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  resizeColumn(event: ColumnResizeEvent) {\r\n    if (event.column !== null && event.column !== undefined) {\r\n      event.column.width = event.newWidth < 50 ? 50 : event.newWidth;\r\n      event.column.flex = 0;\r\n    }\r\n    this._columns.next(this.displayColumns);\r\n    this.saveColumnsState();\r\n  }\r\n\r\n  autosizeColumn(column: TableColumn, target: HTMLElement) {\r\n    const tableElement = this.getTableElement(target);\r\n    this.setColumnAutoWidth(column, tableElement as HTMLElement);\r\n    this._columns.next(this.displayColumns);\r\n    this.saveColumnsState();\r\n  }\r\n\r\n  autosizeAllColumns(target: HTMLElement) {\r\n    const tableElement = this.getTableElement(target);\r\n    const flat = ArrayUtil.flatten(this.displayColumns, 'columns', true);\r\n    flat.forEach((col) =>\r\n      this.setColumnAutoWidth(col, tableElement as HTMLElement)\r\n    );\r\n    this._columns.next(this.displayColumns);\r\n    this.saveColumnsState();\r\n  }\r\n\r\n  reorderColumn(column: TableColumn, insertBefore: boolean): void {\r\n    const event = new ColumnReorderEvent(this._dragSource, column);\r\n    if (event.source !== event.target) {\r\n      const sourceParent = this.findParent(event.source, this.displayColumns);\r\n      const targetParent = this.findParent(event.target, this.displayColumns);\r\n\r\n      if (sourceParent && targetParent) {\r\n        const sourceIndex = sourceParent.indexOf(event.source);\r\n        sourceParent.splice(sourceIndex, 1);\r\n        let targetIndex = targetParent.indexOf(event.target);\r\n        if (!insertBefore) {\r\n          targetIndex = targetIndex + 1;\r\n        }\r\n        targetParent.splice(targetIndex, 0, event.source);\r\n        event.source.locked = event.target.locked;\r\n\r\n        this.updateColumns(this.displayColumns);\r\n      }\r\n    }\r\n  }\r\n\r\n  startEditRow(cellCoordinates: ICellCoordinates<T>): void {\r\n    if (this._currentEditRow?.row !== cellCoordinates?.row) {\r\n      if (this._currentEditRow != null) {\r\n        this._editRowStop.next(this._currentEditRow);\r\n      }\r\n      if (cellCoordinates === null) {\r\n        this._editRowStart.next(cellCoordinates);\r\n        this._currentEditRow = cellCoordinates;\r\n      } else {\r\n        if (\r\n          this.boolOrFuncCallback<TableRow<T>>(this.rowEditable)(\r\n            cellCoordinates.row\r\n          )\r\n        ) {\r\n          this._editRowStart.next(cellCoordinates);\r\n          this._currentEditRow = cellCoordinates;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  startEditCell(cellCoordinates: ICellCoordinates<T>): void {\r\n    if (\r\n      this._currentEditCell?.column.name !== cellCoordinates?.column.name ||\r\n      this._currentEditCell?.row !== cellCoordinates?.row\r\n    ) {\r\n      if (this._currentEditCell != null) {\r\n        this._editCellStop.next(this._currentEditCell);\r\n      }\r\n      if (\r\n        this.boolOrFuncCallback<ICellCoordinates<T>>(this.cellEditable)(\r\n          cellCoordinates\r\n        )\r\n      ) {\r\n        this._editCellStart.next(cellCoordinates);\r\n        this._currentEditCell = cellCoordinates;\r\n      }\r\n    }\r\n  }\r\n\r\n  setActiveRow(row: TableRow<T>): void {\r\n    this._activeRow.next(row);\r\n  }\r\n\r\n  selectRows(rows: TableRow<T>[]): void {\r\n    this._selectedRows.next(rows);\r\n  }\r\n\r\n  selectRow(row: TableRow<T>): void {\r\n    if (this.selectType === SelectType.none) {\r\n      return;\r\n    }\r\n    if (this.selectType === SelectType.single) {\r\n      this._selectedRows.next([row]);\r\n    } else {\r\n      this._selectedRows.next([...this._selectedRows.value, row]);\r\n    }\r\n  }\r\n\r\n  deselectRow(row: TableRow<T>): void {\r\n    if (this.selectType === SelectType.none) {\r\n      return;\r\n    }\r\n    if (this.selectType === SelectType.single) {\r\n      this._selectedRows.next([]);\r\n    } else {\r\n      this._selectedRows.next(\r\n        this._selectedRows.value.filter((_) => _ !== row)\r\n      );\r\n    }\r\n  }\r\n\r\n  selectAll() {\r\n    this._selectedRows.next(this._displayData.value);\r\n  }\r\n\r\n  deselectAll() {\r\n    this._selectedRows.next([]);\r\n  }\r\n\r\n  allRowsSelected(): boolean | null {\r\n    if (\r\n      this._displayData.value?.length &&\r\n      this._selectedRows.value?.length &&\r\n      this._displayData.value.every(\r\n        (_) => this._selectedRows.value.indexOf(_) >= 0\r\n      )\r\n    ) {\r\n      return true;\r\n    } else if (\r\n      this._selectedRows.value == null ||\r\n      this._selectedRows.value.length === 0\r\n    ) {\r\n      return false;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setHiddenColumns(value: string[]) {\r\n    this.saveHiddenColumns(value);\r\n    this._hiddenColumns.next(value);\r\n  }\r\n\r\n  columnIsHidden(column: TableColumn) {\r\n    return this._hiddenColumns.value.indexOf(column.name) >= 0;\r\n  }\r\n\r\n  toggleGroup(row: TableRow<T>): void {\r\n    this._groupToggle.next(row);\r\n  }\r\n\r\n  changeValue(coordinates: ICellCoordinates<T>): void {\r\n    this._valueChanged.next(coordinates);\r\n  }\r\n\r\n  setValue(cellValue: ICellValue<T>): void {\r\n    this._valueSet.next(cellValue);\r\n  }\r\n\r\n  getRowByIndex(rowIndex: string) {\r\n    return this._displayData.value[parseInt(rowIndex, 10)];\r\n  }\r\n\r\n  getColumnByName(columnName: string) {\r\n    return ArrayUtil.findRecursive(\r\n      this.displayColumns,\r\n      (iterableNode) => columnName === iterableNode.name,\r\n      'columns'\r\n    );\r\n  }\r\n\r\n  scrollToIndex(index: number) {\r\n    this._scrollIndex.next(null);\r\n    this._scrollIndex.next(index);\r\n  }\r\n\r\n  boolOrFuncCallback<M>(variable: boolean | ((row: M) => boolean)) {\r\n    return (args: M) => {\r\n      if (typeof variable === 'boolean') {\r\n        return variable;\r\n      } else if (this.isFunction(variable)) {\r\n        return (variable as (row: M) => boolean)(args);\r\n      }\r\n      return true;\r\n    };\r\n  }\r\n\r\n  private findParent(\r\n    column: TableColumn,\r\n    columns: TableColumn[]\r\n  ): TableColumn[] | null {\r\n    const found = columns.find((x) => x.name === column.name);\r\n    if (found !== null && found !== undefined) {\r\n      return columns;\r\n    }\r\n    for (let i = 0, l = columns.length; i < l; i++) {\r\n      const col = columns[i];\r\n      if (col.columns && col.columns.length) {\r\n        const result = this.findParent(column, col.columns);\r\n        if (result !== null && result !== undefined) {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private getTableElement(element: HTMLElement) {\r\n    return element.closest('teta-table');\r\n  }\r\n\r\n  private isFunction(obj: any) {\r\n    return !!(obj && obj?.constructor && obj?.call && obj?.apply);\r\n  }\r\n\r\n  private setColumnAutoWidth(column: TableColumn, table: HTMLElement) {\r\n    const cells = table.querySelectorAll(\r\n      `teta-cell[data-column=${column.name}] .cell-text`\r\n    );\r\n    let maxWidth = 0;\r\n    cells.forEach((cell) => {\r\n      if (cell.scrollWidth > maxWidth) {\r\n        maxWidth = cell.scrollWidth;\r\n      }\r\n    });\r\n    column.flex = 0;\r\n    column.width = maxWidth + 20;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 92
            },
            "accessors": {
                "dragSource": {
                    "name": "dragSource",
                    "getSignature": {
                        "name": "dragSource",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ThemeSwitchService",
            "id": "injectable-ThemeSwitchService-e41d828fea7dca9bd4c9b8b2d2eab238",
            "file": "projects/components/src/component/theme-switch/theme-switch.service.ts",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "theme$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "restoreTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTheme",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ThemeSwitchService {\r\n  theme: Observable<boolean>;\r\n  private theme$: BehaviorSubject<boolean>;\r\n\r\n  constructor() {\r\n    const value = this.restoreTheme();\r\n    this.theme$ = new BehaviorSubject<boolean>(value);\r\n    this.theme = this.theme$.asObservable();\r\n  }\r\n\r\n  switchTheme() {\r\n    const value = !this.theme$.value;\r\n    this.saveTheme(value);\r\n    this.theme$.next(value);\r\n  }\r\n\r\n  saveTheme(value: boolean) {\r\n    localStorage.setItem('theme', value.toString());\r\n  }\r\n\r\n  restoreTheme(): boolean {\r\n    const theme = localStorage.getItem('theme');\r\n    if (theme) {\r\n      return JSON.parse(theme);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TreeService",
            "id": "injectable-TreeService-2395da04f40ec0de4dbfbc74d2c746fe",
            "file": "projects/components/src/component/tree/tree.service.ts",
            "properties": [
                {
                    "name": "_openItems",
                    "defaultValue": "new BehaviorSubject<\r\n    ITreeData[]\r\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ITreeData[]>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareItems",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITreeData[]>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "addOrRemove",
                    "args": [
                        {
                            "name": "needle",
                            "type": "G",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "G[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "G[]",
                    "typeParameters": [
                        "G"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "needle",
                            "type": "G",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "G[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ITreeData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ITreeData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOpenItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ITreeData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ITreeData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ITreeData } from '../../common/contract/i-tree-data';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TreeService {\r\n  openItems: Observable<ITreeData[]>;\r\n  private _openItems: BehaviorSubject<ITreeData[]> = new BehaviorSubject<\r\n    ITreeData[]\r\n  >([]);\r\n\r\n  constructor() {\r\n    this.openItems = this._openItems.asObservable();\r\n  }\r\n\r\n  compareItems: (item: ITreeData) => any = (item: ITreeData) => item;\r\n\r\n  openItem(item: ITreeData) {\r\n    const newValue = this.addOrRemove(item, this._openItems.value);\r\n    this.setOpenItems(newValue);\r\n  }\r\n\r\n  setOpenItems(items: ITreeData[]) {\r\n    this._openItems.next(items);\r\n  }\r\n\r\n  private addOrRemove<G>(needle: G, list: G[]): G[] {\r\n    const found = list?.find(\r\n      (x) => this.compareItems(x) === this.compareItems(needle)\r\n    );\r\n    if (found) {\r\n      return list.filter(\r\n        (x) => this.compareItems(x) !== this.compareItems(needle)\r\n      );\r\n    } else {\r\n      return [...list, needle];\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Annotation",
            "id": "class-Annotation-c3addf1c1012358e34451fefcf0e3bc2",
            "file": "projects/components/src/component/chart/model/annotation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  annotationBadge,\r\n  annotationCallout,\r\n  annotationCalloutCircle,\r\n  annotationCalloutCurve,\r\n  annotationCalloutElbow,\r\n  annotationCalloutRect,\r\n  annotationCustomType,\r\n  annotationLabel,\r\n  annotationXYThreshold,\r\n} from 'd3-svg-annotation';\r\nimport { BasePoint } from './point/base-point';\r\n\r\nconst annotationMap = [\r\n  annotationBadge,\r\n  annotationLabel,\r\n  annotationCallout,\r\n  annotationCalloutCircle,\r\n  annotationCalloutCurve,\r\n  annotationCalloutElbow,\r\n  annotationCalloutRect,\r\n  annotationCustomType,\r\n  annotationXYThreshold,\r\n] as const;\r\n\r\ntype AnnotationTypes = typeof annotationMap[number];\r\n\r\nexport class Annotation {\r\n  point: BasePoint;\r\n  yAxisIndex: number;\r\n  xAxisIndex: number;\r\n  type?: AnnotationTypes;\r\n  enabled?: boolean;\r\n  fillColor?: string;\r\n  borderWidth?: number;\r\n  borderColor?: string;\r\n  dx?: number;\r\n  dy?: number;\r\n  className?: string;\r\n  connector?: {\r\n    end: string;\r\n  };\r\n  note?: {\r\n    label?: string;\r\n    title?: string;\r\n    bgPadding?: {\r\n      top?: number;\r\n      right?: number;\r\n      bottom?: number;\r\n      left?: number;\r\n    };\r\n    bgRadius?: boolean;\r\n  };\r\n\r\n  constructor(options?: {\r\n    point: BasePoint;\r\n    type?: AnnotationTypes;\r\n    yAxisIndex: number;\r\n    xAxisIndex: number;\r\n    enabled?: boolean;\r\n    fillColor?: string;\r\n    borderWidth?: number;\r\n    borderColor?: string;\r\n    dx?: number;\r\n    dy?: number;\r\n    className?: string;\r\n    connector?: {\r\n      end: string;\r\n    };\r\n    note?: {\r\n      label?: string;\r\n      title?: string;\r\n      bgPadding?: {\r\n        top?: number;\r\n        right?: number;\r\n        bottom?: number;\r\n        left?: number;\r\n      };\r\n      bgRadius?: boolean;\r\n    };\r\n  }) {\r\n    this.point = options?.point;\r\n    this.yAxisIndex = options?.yAxisIndex;\r\n    this.xAxisIndex = options?.xAxisIndex;\r\n    this.type = options?.type || annotationLabel;\r\n    this.enabled = options?.enabled;\r\n    this.className = options?.className;\r\n    this.fillColor = options?.fillColor;\r\n    this.borderColor = options?.borderColor;\r\n    this.borderWidth = options?.borderWidth;\r\n    this.note = options?.note;\r\n    this.connector = options?.connector;\r\n    this.dx = options?.dx;\r\n    this.dy = options?.dy;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "borderWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "dy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fillColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "point",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BasePoint",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnnotationTypes",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "xAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "yAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AreaDrawer",
            "id": "class-AreaDrawer-d3c3ff9f31c260fb87523f1dd6a47a5e",
            "file": "projects/components/src/component/chart/drawer/area-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\n\r\nexport class AreaDrawer implements IDrawer<BasePoint> {\r\n  draw(\r\n    series: Series<BasePoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any\r\n  ): void {\r\n    const points = series.data;\r\n\r\n    const path = d3\r\n      .area()\r\n      .x1((d: any) => (d.x1 != null ? scaleX(d.x1) : scaleX(0)))\r\n      .x0((d: any) => scaleX(d.x))\r\n      .y((d: any) => scaleY(d.y));\r\n\r\n    context\r\n      .append('path')\r\n      .attr('transform', `translate(${0}, 0)`)\r\n      .attr('fill', series.color)\r\n      .attr('stroke', series.color)\r\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\r\n      .datum(points)\r\n      .attr('d', path as any);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "ArrayUtil",
            "id": "class-ArrayUtil-9a8ebde1856e7defd62e99ed4773932c",
            "file": "projects/components/src/common/util/array-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ArrayUtil {\r\n  public static asArray<T>(value: T | T[]): T[] {\r\n    if (value === null || value === undefined) {\r\n      return [];\r\n    }\r\n    if (value instanceof Array) {\r\n      return value;\r\n    }\r\n    return [value];\r\n  }\r\n\r\n  public static flatten(\r\n    data: any[],\r\n    children?: string | ((item: any) => any[]),\r\n    onlyLeafs?: boolean\r\n  ): any[] {\r\n    const result: any[] = [];\r\n    data.forEach((child) => {\r\n      let childItems: any[];\r\n      if (children) {\r\n        if (typeof children === 'string') {\r\n          childItems = child[children];\r\n        }\r\n        if (typeof children === 'function') {\r\n          childItems = children(child);\r\n        }\r\n      } else {\r\n        childItems = child.children;\r\n      }\r\n      if (\r\n        childItems !== null &&\r\n        childItems !== undefined &&\r\n        childItems.length > 0\r\n      ) {\r\n        if (!onlyLeafs) {\r\n          result.push(child);\r\n        }\r\n        result.push(...ArrayUtil.flatten(childItems, children, onlyLeafs));\r\n      } else {\r\n        result.push(child);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static findRecursive(\r\n    tree: any[],\r\n    comparer: (iterableNode: any) => boolean,\r\n    children: string = 'children'\r\n  ): any {\r\n    const found = tree.find((x) => comparer(x));\r\n    if (found !== null && found !== undefined) {\r\n      return found;\r\n    }\r\n    for (let i = 0, l = tree.length; i < l; i++) {\r\n      const item = tree[i];\r\n      if (item[children] && item[children].length) {\r\n        const res = ArrayUtil.findRecursive(item[children], comparer);\r\n        if (res !== null && res !== undefined) {\r\n          return res;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static filterRecursive(\r\n    array: any[],\r\n    filter: (item: any) => boolean,\r\n    children: string = 'children',\r\n    keepChildren: boolean = true\r\n  ): any {\r\n    const result = [];\r\n    if (array && array.length) {\r\n      for (const item of array) {\r\n        const resultItem = Object.assign({}, item);\r\n        if (filter(resultItem)) {\r\n          result.push(resultItem);\r\n          if (!keepChildren) {\r\n            resultItem[children] = [];\r\n            break;\r\n          }\r\n        } else if (item[children] && item[children].length > 0) {\r\n          resultItem[children] = [];\r\n          const found = ArrayUtil.filterRecursive(\r\n            item[children],\r\n            filter,\r\n            children,\r\n            keepChildren\r\n          );\r\n          if (found?.length > 0) {\r\n            resultItem[children] = found;\r\n            result.push(resultItem);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static distinct<T>(array: T[], comparator: (item: T) => any): T[] {\r\n    const result: T[] = [];\r\n    if (array && array.length) {\r\n      for (const item of array) {\r\n        const found = result.find((_) => comparator(_) === comparator(item));\r\n        if (!found) {\r\n          result.push(item);\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static findParents(tree: any[], item: any) {\r\n    if (tree.indexOf(item) >= 0) {\r\n      return tree;\r\n    }\r\n    if (Array.isArray(tree)) {\r\n      for (const treeNode of tree) {\r\n        const childResult = this.findParents(treeNode.children, item);\r\n        if (Array.isArray(childResult)) {\r\n          return [treeNode].concat(childResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static moveItem(list: any[], sourceIndex, targetIndex) {\r\n    const res = [...list];\r\n    const item = list[sourceIndex];\r\n    if (targetIndex > sourceIndex) {\r\n      res.splice(targetIndex, 0, item);\r\n      res.splice(sourceIndex, 1);\r\n    } else {\r\n      res.splice(sourceIndex, 1);\r\n      res.splice(targetIndex, 0, item);\r\n    }\r\n    return res;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "asArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "distinct",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparator",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterRecursive",
                    "args": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        },
                        {
                            "name": "keepChildren",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keepChildren",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParents",
                    "args": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRecursive",
                    "args": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparer",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "iterableNode",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparer",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "iterableNode",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flatten",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "children",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "onlyLeafs",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onlyLeafs",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItem",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sourceIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sourceIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Axis",
            "id": "class-Axis-e29b3d537243d4607eed4ec785a185ff",
            "file": "projects/components/src/component/chart/core/axis-creator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\r\nimport { AxisType } from '../model/enum/axis-type';\r\nimport { Series } from '../model/series';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { ChartOptions } from '../model/chart-options';\r\n\r\nexport class Axis {\r\n  public static offsetFactor = 22;\r\n  public readonly width: number;\r\n\r\n  private _type: AxisType;\r\n  private _chartOptions: ChartOptions;\r\n  private _extents: [number, number] = [0, 0];\r\n  private _index: number;\r\n  private _height: number;\r\n  private _offset: number;\r\n  private _ticks: any;\r\n\r\n  constructor(options: {\r\n    type: AxisType;\r\n    index: number;\r\n    chartOptions: ChartOptions;\r\n    height?: number;\r\n  }) {\r\n    this._type = options?.type;\r\n    this._index = options?.index || 0;\r\n    this._chartOptions = options?.chartOptions;\r\n    this._height = options?.height;\r\n\r\n    if (this._chartOptions == null) {\r\n      throw new Error(`No chartOptions for axis ${AxisType[this._type]}`);\r\n    }\r\n\r\n    this.createExtents();\r\n    this.width = this.calculateAxisWidth();\r\n  }\r\n\r\n  get index() {\r\n    return this._index;\r\n  }\r\n\r\n  get options() {\r\n    return this._type === AxisType.abscissa\r\n      ? this._chartOptions.xAxis[this.index]\r\n      : this._chartOptions.yAxis[this.index];\r\n  }\r\n\r\n  get extent(): [number, number] {\r\n    return this._extents;\r\n  }\r\n\r\n  get type(): AxisType {\r\n    return this._type;\r\n  }\r\n\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  get ticks() {\r\n    return this._ticks;\r\n  }\r\n\r\n  setOffset(offset: number) {\r\n    this._offset = offset;\r\n  }\r\n\r\n  private calculateAxisWidth(): number {\r\n    if (this.type === AxisType.abscissa) {\r\n      return 0;\r\n    }\r\n\r\n    const y = d3\r\n      .scaleLinear()\r\n      .domain([this.extent[0], this.extent[1]])\r\n      .range([0, this._height])\r\n      .nice();\r\n\r\n    const body = d3\r\n      .select('body')\r\n      .append('svg')\r\n      .attr('class', 'calculate-offset')\r\n      .style('position', 'absolute')\r\n      .style('left', '-9999px');\r\n    const axis = d3.axisRight(y).tickValues(this.ticks);\r\n    const element = body.append('g').attr('class', 'font-caption').call(axis);\r\n\r\n    const bBox = element.node().getBBox();\r\n\r\n    d3.selectAll('.calculate-offset').remove();\r\n\r\n    return bBox.width;\r\n  }\r\n\r\n  private createExtents() {\r\n    const hasMin = this.options?.min != null;\r\n    const hasMax = this.options?.max != null;\r\n\r\n    if (!hasMin || !hasMax) {\r\n      const filtered = this._chartOptions?.series?.filter(\r\n        (serie: Series<BasePoint>) =>\r\n          this._index ===\r\n          serie[this._type === AxisType.abscissa ? 'xAxisIndex' : 'yAxisIndex']\r\n      );\r\n\r\n      const raw = filtered.map((series: Series<BasePoint>) =>\r\n        d3.extent(series?.data, (point: BasePoint) =>\r\n          this._type === AxisType.abscissa ? point.x : point.y\r\n        )\r\n      );\r\n\r\n      const merged = [].concat(...(raw ?? []));\r\n\r\n      const abs = (num) => Math.abs(num);\r\n\r\n      this._extents = this.options.negative\r\n        ? [-Math.abs(d3.max(merged.map(abs))), d3.max(merged.map(abs))]\r\n        : [d3.min(merged), d3.max(merged)];\r\n    }\r\n\r\n    if (hasMin) {\r\n      this._extents[0] = this.options?.min;\r\n    }\r\n\r\n    if (hasMax) {\r\n      this._extents[1] = this.options?.max;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_extents",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_ticks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetFactor",
                    "defaultValue": "22",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateAxisWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createExtents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setOffset",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "index": {
                    "name": "index",
                    "getSignature": {
                        "name": "index",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "extent": {
                    "name": "extent",
                    "getSignature": {
                        "name": "extent",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "AxisType",
                        "line": 52
                    }
                },
                "offset": {
                    "name": "offset",
                    "getSignature": {
                        "name": "offset",
                        "type": "number",
                        "returnType": "number",
                        "line": 56
                    }
                },
                "ticks": {
                    "name": "ticks",
                    "getSignature": {
                        "name": "ticks",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Axis",
            "id": "class-Axis-f2aac1bfabd5adbcf47278dcf5a45903-1",
            "file": "projects/chart/src/chart/core/axis/axis.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IChartConfig } from '../../model/i-chart-config';\r\nimport { AxisOrientation } from '../../model/enum/axis-orientation';\r\nimport { Series } from '../../model/series';\r\nimport { BasePoint } from '../../model/base-point';\r\nimport * as d3 from 'd3';\r\nimport { AxisOptions } from '../../model/axis-options';\r\nimport { AxisSizeBuilder, ExtremesBuilder } from './builders/public-api';\r\nimport { AxisType } from '../../model/axis-type';\r\n\r\nexport class Axis {\r\n  private chartConfig: IChartConfig;\r\n  private _orientation: AxisOrientation;\r\n  private _index: number | string;\r\n  private _extremes: [number, number] = [0, 0];\r\n  private _selfSize: number;\r\n  private _ticksValues: number[];\r\n\r\n  private defaultFormatters = new Map<AxisType, any>()\r\n    .set(AxisType.number, d3.format(',.2r'))\r\n    .set(AxisType.time, d3.timeFormat('%B %d, %Y'))\r\n    .set(AxisType.log, d3.format(',.2r'));\r\n\r\n  constructor(config: IChartConfig) {\r\n    this.chartConfig = config;\r\n  }\r\n\r\n  /**\r\n   * Factory for creating x,y axes\r\n   * @param {AxisOrientation} orientation\r\n   * Axis type\r\n   * @param {IChartConfig} config\r\n   * Chart config\r\n   * @param {number} index\r\n   * Index axis\r\n   * @return {Axis}\r\n   * New generated axis\r\n   */\r\n  public static createAxis(\r\n    orientation: AxisOrientation,\r\n    config: IChartConfig,\r\n    index: number\r\n  ): Axis {\r\n    const axis = new Axis(config);\r\n    axis.setLocate(orientation);\r\n    axis.setIndex(index);\r\n    axis.setExtremes();\r\n    axis.setTicksValues();\r\n    axis.setSelfSize();\r\n\r\n    return axis;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {orientation} orientation\r\n   * Set locate axis x or y\r\n   */\r\n  private setLocate(orientation: AxisOrientation): void {\r\n    this._orientation = orientation;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number | string} index\r\n   * Index axis\r\n   */\r\n  private setIndex(index: number | string): void {\r\n    this._index = index;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Series<BasePoint>>}\r\n   * Linked series\r\n   */\r\n  public linkedSeries(): Array<Series<BasePoint>> {\r\n    const linkedFilter = (serie: Series<BasePoint>) =>\r\n      serie[\r\n        this._orientation === AxisOrientation.y ? 'yAxisIndex' : 'xAxisIndex'\r\n      ] === this._index;\r\n\r\n    return this.chartConfig?.series.filter(linkedFilter);\r\n  }\r\n\r\n  private setExtremes(): void {\r\n    const builder = new ExtremesBuilder();\r\n    this._extremes = builder.build(this);\r\n\r\n    this._extremes = d3.nice(this._extremes[0], this._extremes[1], 10);\r\n  }\r\n\r\n  private setSelfSize(): void {\r\n    const builder = new AxisSizeBuilder();\r\n    this._selfSize = builder.build(this);\r\n  }\r\n\r\n  private setTicksValues(): void {\r\n    const ticks = this.generateTicks(this._extremes);\r\n    this._ticksValues = ticks;\r\n  }\r\n\r\n  get extremes(): Array<number> {\r\n    return this._extremes;\r\n  }\r\n\r\n  get orientation(): AxisOrientation {\r\n    return this._orientation;\r\n  }\r\n\r\n  get selfSize(): number {\r\n    return this._selfSize;\r\n  }\r\n\r\n  get tickValues(): number[] {\r\n    return this._ticksValues;\r\n  }\r\n\r\n  get index() {\r\n    return this._index;\r\n  }\r\n\r\n  get options(): AxisOptions {\r\n    return this.orientation === AxisOrientation.x\r\n      ? this.chartConfig.xAxis[this.index]\r\n      : this.chartConfig.yAxis[this.index];\r\n  }\r\n\r\n  public defaultFormatter() {\r\n    return this.defaultFormatters.get(this.options.type);\r\n  }\r\n\r\n  private generateTicks(extremes: number[]) {\r\n    const [min, max] = extremes;\r\n\r\n    const tickCount = 10;\r\n    const tickStep = (max - min) / tickCount;\r\n\r\n    const ticks = d3\r\n      .range(min, max + tickStep, tickStep)\r\n      .filter((step) => step <= max);\r\n\r\n    return ticks;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IChartConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_extremes",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOrientation",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selfSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_ticksValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "chartConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "defaultFormatters",
                    "defaultValue": "new Map<AxisType, any>()\r\n    .set(AxisType.number, d3.format(',.2r'))\r\n    .set(AxisType.time, d3.timeFormat('%B %d, %Y'))\r\n    .set(AxisType.log, d3.format(',.2r'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAxis",
                    "args": [
                        {
                            "name": "orientation",
                            "type": "AxisOrientation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Axis",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFactory for creating x,y axes\nAxis type\nChart config\nIndex axis\nNew generated axis\n",
                    "description": "<p>Factory for creating x,y axes\nAxis type\nChart config\nIndex axis\nNew generated axis</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1046,
                                "end": 1057,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "orientation"
                            },
                            "type": "AxisOrientation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1022,
                                "end": 1027,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Axis type</p>\n",
                            "typeExpression": {
                                "pos": 1028,
                                "end": 1045,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1029,
                                    "end": 1044,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 1029,
                                        "end": 1044,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "AxisOrientation"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1102,
                                "end": 1108,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "IChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1081,
                                "end": 1086,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Chart config</p>\n",
                            "typeExpression": {
                                "pos": 1087,
                                "end": 1101,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1088,
                                    "end": 1100,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 1088,
                                        "end": 1100,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "IChartConfig"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1150,
                                "end": 1155,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1135,
                                "end": 1140,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index axis</p>\n",
                            "typeExpression": {
                                "pos": 1141,
                                "end": 1149,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1142,
                                    "end": 1148,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 145
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1180,
                                "end": 1186,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>New generated axis</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "defaultFormatter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateTicks",
                    "args": [
                        {
                            "name": "extremes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "extremes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "linkedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<Series<BasePoint>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLinked series\n",
                    "description": "<p>Linked series</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1916,
                                "end": 1922,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>Linked series</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "setExtremes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nIndex axis\n",
                    "description": "<p>Index axis</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1787,
                                "end": 1792,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1763,
                                "end": 1768,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index axis</p>\n",
                            "typeExpression": {
                                "pos": 1769,
                                "end": 1786,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1770,
                                    "end": 1785,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 185,
                                    "types": [
                                        {
                                            "pos": 1770,
                                            "end": 1776,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 145
                                        },
                                        {
                                            "pos": 1778,
                                            "end": 1785,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 148
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "setLocate",
                    "args": [
                        {
                            "name": "orientation",
                            "type": "AxisOrientation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nSet locate axis x or y\n",
                    "description": "<p>Set locate axis x or y</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1591,
                                "end": 1602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "orientation"
                            },
                            "type": "AxisOrientation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1571,
                                "end": 1576,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Set locate axis x or y</p>\n",
                            "typeExpression": {
                                "pos": 1577,
                                "end": 1590,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 304,
                                "type": {
                                    "pos": 1578,
                                    "end": 1589,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 176,
                                    "typeName": {
                                        "pos": 1578,
                                        "end": 1589,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "orientation"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "setSelfSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setTicksValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "extremes": {
                    "name": "extremes",
                    "getSignature": {
                        "name": "extremes",
                        "type": "",
                        "returnType": "Array<number>",
                        "line": 101
                    }
                },
                "orientation": {
                    "name": "orientation",
                    "getSignature": {
                        "name": "orientation",
                        "type": "",
                        "returnType": "AxisOrientation",
                        "line": 105
                    }
                },
                "selfSize": {
                    "name": "selfSize",
                    "getSignature": {
                        "name": "selfSize",
                        "type": "number",
                        "returnType": "number",
                        "line": 109
                    }
                },
                "tickValues": {
                    "name": "tickValues",
                    "getSignature": {
                        "name": "tickValues",
                        "type": "[]",
                        "returnType": "number[]",
                        "line": 113
                    }
                },
                "index": {
                    "name": "index",
                    "getSignature": {
                        "name": "index",
                        "type": "",
                        "returnType": "",
                        "line": 117
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "AxisOptions",
                        "line": 121
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Axis-1"
        },
        {
            "name": "AxisOptions",
            "id": "class-AxisOptions-a912537ea37136a6640ac910706ae2df",
            "file": "projects/components/src/component/chart/model/axis-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PlotLine } from './plot-line';\r\nimport { PlotBand } from './plot-band';\r\nimport { ScaleType } from './enum/scale-type';\r\n\r\nexport class AxisOptions {\r\n  title: string;\r\n  min: number;\r\n  max: number;\r\n  visible: boolean;\r\n  tickFormat: (d: any) => string;\r\n  transform: string;\r\n  type: 'time' | 'number' | 'category';\r\n  zoom?: boolean;\r\n  scaleOptions: {\r\n    type?: ScaleType;\r\n    base?: number;\r\n  };\r\n  inverted?: boolean;\r\n  negative?: boolean;\r\n  opposite?: boolean;\r\n  niceTicks = true;\r\n  plotLines: PlotLine[];\r\n  plotBands: PlotBand[];\r\n\r\n  constructor(options?: {\r\n    title?: string;\r\n    min?: number;\r\n    max?: number;\r\n    visible?: boolean;\r\n    tickFormat?: (d: any) => string;\r\n    transform?: string;\r\n    type?: 'time' | 'number' | 'category';\r\n    zoom?: boolean;\r\n    scaleOptions?: {\r\n      type?: ScaleType;\r\n      base?: number;\r\n    };\r\n    inverted?: boolean;\r\n    negative?: boolean;\r\n    opposite?: boolean;\r\n    niceTicks?: boolean;\r\n    plotLines?: PlotLine[];\r\n    plotBands?: PlotBand[];\r\n  }) {\r\n    this.title = options?.title;\r\n    this.min = options?.min;\r\n    this.max = options?.max;\r\n    this.visible = options?.visible ?? true;\r\n    this.tickFormat = options?.tickFormat;\r\n    this.transform = options?.transform;\r\n    this.zoom = options?.zoom;\r\n    this.type = options?.type ?? 'number';\r\n    this.scaleOptions = {\r\n      type: ScaleType.linear,\r\n      base: 10,\r\n      ...options?.scaleOptions,\r\n    };\r\n    this.inverted = options?.inverted;\r\n    this.negative = options?.negative;\r\n    this.opposite = options?.opposite;\r\n    this.niceTicks = options?.niceTicks == null ? true : options.niceTicks;\r\n    this.plotLines = options?.plotLines || [];\r\n    this.plotBands = options?.plotBands || [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "inverted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "negative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "niceTicks",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "opposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "plotBands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlotBand[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "plotLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlotLine[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "scaleOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tickFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"time\" | \"number\" | \"category\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AxisSizeBuilder",
            "id": "class-AxisSizeBuilder-d846c70ae9bca681e89df440e9eebf15",
            "file": "projects/chart/src/chart/core/axis/builders/axis-size-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Axis } from '../axis';\r\nimport { AxisOrientation } from '../../../model/enum/axis-orientation';\r\nimport { maxIndex } from 'd3-array';\r\nimport { getTextWidth } from '../../utils/public-api';\r\nimport { IBuilder } from '../../../model/i-builder';\r\n\r\nexport class AxisSizeBuilder implements IBuilder<Axis, number> {\r\n  private titlePadding = 8;\r\n  private basePadding = 16;\r\n  private backupRatio = 0.58;\r\n\r\n  build(settings: Axis): number {\r\n    let finalPadding = this.basePadding;\r\n\r\n    if (settings.orientation === AxisOrientation.y) {\r\n      const formatter = settings.defaultFormatter();\r\n\r\n      finalPadding += settings.options.title ? this.titlePadding : 0;\r\n\r\n      const maxElementLengthIndex = maxIndex(\r\n        settings.tickValues,\r\n        (_) => formatter(_).length\r\n      );\r\n\r\n      finalPadding += getTextWidth(\r\n        formatter(settings.tickValues[maxElementLengthIndex]),\r\n        this.backupRatio\r\n      );\r\n    }\r\n\r\n    if (settings.orientation === AxisOrientation.x) {\r\n      finalPadding += finalPadding + 20;\r\n    }\r\n\r\n    return finalPadding;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "backupRatio",
                    "defaultValue": "0.58",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "basePadding",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "titlePadding",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "settings",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IBuilder"
            ]
        },
        {
            "name": "BarDrawer",
            "id": "class-BarDrawer-8c15928b06bf587fa580bef08981405e",
            "file": "projects/components/src/component/chart/drawer/bar-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\nimport { BarPoint } from '../model/point/bar-point';\r\n\r\nexport class BarDrawer implements IDrawer<BasePoint> {\r\n  draw(\r\n    series: Series<BarPoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any\r\n  ): void {\r\n    const points = series.data.filter((_) => _.visible);\r\n\r\n    const barScale = d3\r\n      .scaleBand<number>()\r\n      .domain(d3.range(points.length))\r\n      .range(scaleX.range())\r\n      .paddingInner(0.2)\r\n      .paddingOuter(0.2);\r\n\r\n    const u = context.selectAll('rect').data(points) as any;\r\n\r\n    u.enter()\r\n      .append('rect')\r\n      .merge(u as any)\r\n      .attr('x', (d: BasePoint, i) => barScale(i))\r\n      .attr('y', (d: BasePoint) => scaleY(d.y))\r\n      .attr('width', barScale.bandwidth())\r\n      .attr('height', (d: BasePoint) => Math.abs(scaleY(0) - scaleY(d.y)))\r\n      .attr('fill', (d: BasePoint) => d.color);\r\n\r\n    u.exit().remove();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "BooleanFilter",
            "id": "class-BooleanFilter-86c0e44a55a09f0e685ef4727bf88fff",
            "file": "projects/components/src/component/filter/contarct/boolean-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterBase } from '../base/filter-base';\r\n\r\nexport class BooleanFilter extends FilterBase {\r\n  override value: boolean;\r\n\r\n  constructor(options?: { value?: boolean; field: string; name: string }) {\r\n    super(options);\r\n    if (options) {\r\n      this.value = options.value;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Chart3dOptions",
            "id": "class-Chart3dOptions-401a07ba688f4ccea46b4d93877fdd0a",
            "file": "projects/components/src/component/chart-3d/model/chart-3d-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base3dPoint } from './base-3d-point';\r\nimport { Series3d } from './series-3d';\r\n\r\nexport class Chart3dOptions {\r\n  axes?: {\r\n    max?: number;\r\n  };\r\n\r\n  series: Series3d<Base3dPoint>[];\r\n\r\n  constructor(options?: Chart3dOptions) {\r\n    this.axes = { ...options?.axes };\r\n    this.series = options?.series || [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "Chart3dOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "Chart3dOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "axes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series3d<Base3dPoint>[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartBounds",
            "id": "class-ChartBounds-46f91ca18f399972ca55b7604d1574b1",
            "file": "projects/components/src/component/chart/model/chart-bounds.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartBounds {\r\n  top = 35;\r\n  right = 50;\r\n  bottom = 50;\r\n  left = 35;\r\n\r\n  constructor(options?: {\r\n    top?: number;\r\n    right?: number;\r\n    bottom?: number;\r\n    left: number;\r\n  }) {\r\n    this.top = options?.top || this.top;\r\n    this.right = options?.right || this.right;\r\n    this.bottom = options?.bottom || this.bottom;\r\n    this.left = options?.left || this.left;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bottom",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "left",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "right",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "top",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartOptions",
            "id": "class-ChartOptions-0f25a110bafc4b72b8fdc36666ed7681",
            "file": "projects/components/src/component/chart/model/chart-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AxisOptions } from './axis-options';\r\nimport { Series } from './series';\r\nimport { BasePoint } from './point/base-point';\r\nimport { TooltipOptions } from './tooltip-options';\r\nimport { ChartBounds } from './chart-bounds';\r\nimport { LegendType } from './enum/legend-type';\r\nimport { ZoomType } from './enum/zoom-type';\r\nimport { ZoomTransform } from 'd3';\r\nimport { Annotation } from './annotation';\r\n\r\nexport class ChartOptions {\r\n  name: string;\r\n  series?: Series<BasePoint>[];\r\n  legend?: {\r\n    type?: LegendType;\r\n    visible?: boolean;\r\n  };\r\n  zoom?: {\r\n    enable?: boolean;\r\n    zoomType?: ZoomType;\r\n    zoomTransform?: ZoomTransform;\r\n  };\r\n  tooltip?: TooltipOptions;\r\n  xAxis: AxisOptions[];\r\n  yAxis: AxisOptions[];\r\n  gridLines?: boolean;\r\n  width?: number;\r\n  height?: number;\r\n  bounds = new ChartBounds();\r\n  annotations?: Annotation[];\r\n\r\n  constructor(options?: {\r\n    name?: string;\r\n    series?: Series<BasePoint>[];\r\n    zoom?: {\r\n      enable?: boolean;\r\n      zoomType?: ZoomType;\r\n      zoomTransform?: ZoomTransform;\r\n    };\r\n    tooltip?: TooltipOptions;\r\n    xAxis: AxisOptions[];\r\n    yAxis: AxisOptions[];\r\n    gridLines?: boolean;\r\n    width?: number;\r\n    height?: number;\r\n    legend?: {\r\n      type?: LegendType;\r\n      visible?: boolean;\r\n    };\r\n    bounds?: ChartBounds;\r\n    annotations?: Annotation[];\r\n  }) {\r\n    this.name = options?.name;\r\n    this.zoom = {\r\n      enable: false,\r\n      zoomType: ZoomType.x,\r\n      ...options?.zoom,\r\n    };\r\n    this.series = options?.series?.map((series, idx) => ({\r\n      ...series,\r\n      id: idx,\r\n    }));\r\n    this.zoom = { enable: false, zoomType: ZoomType.x, ...options?.zoom };\r\n    this.series = options?.series?.map((series, idx) => new Series(series));\r\n    this.tooltip = new TooltipOptions({ ...options?.tooltip });\r\n    this.xAxis = options?.xAxis?.map((_) => new AxisOptions(_));\r\n    this.yAxis = options?.yAxis?.map((_) => new AxisOptions(_));\r\n    this.gridLines = options?.gridLines == null ? true : options.gridLines;\r\n    this.width = options?.width;\r\n    this.height = options?.height;\r\n    this.legend = {\r\n      visible: true,\r\n      type: LegendType.swatches,\r\n      ...options?.legend,\r\n    };\r\n    this.bounds = { ...this.bounds, ...options?.bounds };\r\n    this.annotations = options?.annotations;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "annotations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Annotation[]",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bounds",
                    "defaultValue": "new ChartBounds()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "gridLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series<BasePoint>[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipOptions",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "xAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "yAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AxisOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnReorderEvent",
            "id": "class-ColumnReorderEvent-8be5af83bc69db6f6c11696ec8adb002",
            "file": "projects/components/src/component/table/contract/column-reorder-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from './table-column';\r\n\r\nexport class ColumnReorderEvent {\r\n  source: TableColumn;\r\n  target: TableColumn;\r\n\r\n  constructor(source: TableColumn, target: TableColumn) {\r\n    this.source = source;\r\n    this.target = target;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "source",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnResizeEvent",
            "id": "class-ColumnResizeEvent-a949827b116955b565370a47378bc67f",
            "file": "projects/components/src/component/table/contract/column-resize-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TableColumn } from './table-column';\r\n\r\nexport class ColumnResizeEvent {\r\n  column: TableColumn;\r\n  newWidth: number;\r\n\r\n  constructor(column: TableColumn, newWidth: number) {\r\n    this.column = column;\r\n    this.newWidth = newWidth;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "newWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContourDrawer",
            "id": "class-ContourDrawer-f3029a5f95ff05092f44bcbd4feec20f",
            "file": "projects/components/src/component/chart/drawer/contour-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\nimport { tricontour } from 'd3-tricontour';\r\nimport { ContourPoint } from '../model/point/contour-point';\r\n\r\nexport class ContourDrawer implements IDrawer<ContourPoint> {\r\n  draw(\r\n    series: Series<ContourPoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any\r\n  ): void {\r\n    const points = series.data;\r\n\r\n    const tricontourFn = tricontour()\r\n      .x((d) => scaleX(d.x))\r\n      .y((d) => scaleY(d.y))\r\n      .value((d) => d.value)\r\n      .thresholds(30);\r\n\r\n    let contours = tricontourFn(points);\r\n\r\n    const geoFn = d3.geoPath();\r\n\r\n    const color = series?.colorScale.domain(\r\n      d3.extent(contours, (d: ContourPoint) => d.value) as any\r\n    );\r\n\r\n    contours = contours.map((_) => ({\r\n      ..._,\r\n      color: color(_.value),\r\n    }));\r\n\r\n    const u = context.selectAll('path').data(contours) as any;\r\n\r\n    u.enter()\r\n      .append('path')\r\n      .merge(u as any)\r\n      .attr('d', (_: any) => geoFn(_))\r\n      .attr('stroke', 'rgba(255, 255,255,0.5)')\r\n      .attr('stroke-width', 0.5)\r\n      .attr('fill', (_: ContourPoint) => _.color);\r\n\r\n    u.exit().remove();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<ContourPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<ContourPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "CurrentModal",
            "id": "class-CurrentModal-ee82faec08eb094d423b8509d7915565",
            "file": "projects/components/src/component/modal/model/current-modal.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IModalResult} from './i-modal-result';\r\n\r\nexport class CurrentModal {\r\n  close: (result?: IModalResult) => void;\r\n}\r\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateFilter",
            "id": "class-DateFilter-6f30ee0557fc420204d45f194d48431b",
            "file": "projects/components/src/component/filter/contarct/date-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\r\nimport {DateFilterValue} from './date-filter-value';\r\n\r\nexport class DateFilter extends FilterBase {\r\n  override value: DateFilterValue;\r\n\r\n  constructor(options?: {\r\n    value?: DateFilterValue;\r\n    field: string;\r\n    name: string;\r\n  }) {\r\n    super(options);\r\n    if (options) {\r\n      this.value = new DateFilterValue(options.value);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilterValue",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateFilterValue",
            "id": "class-DateFilterValue-70cd72f0b4e70ea7c52d27aa7df85793",
            "file": "projects/components/src/component/filter/contarct/date-filter-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateFilterValue {\r\n  /**\r\n   * Значение должно быть меньше чем\r\n   */\r\n  lessThan: Date | undefined | null;\r\n  /**\r\n   * Значение должно быть больше чем\r\n   */\r\n  greaterThan: Date | undefined | null;\r\n\r\n  constructor(options?: {\r\n    lessThan?: Date | undefined | null;\r\n    greaterThan?: Date | undefined | null;\r\n  }) {\r\n    if (options) {\r\n      this.lessThan = (typeof options.lessThan === 'string') ? new Date(options.lessThan) : options.lessThan;\r\n      this.greaterThan = (typeof options.greaterThan === 'string') ? new Date(options.greaterThan) : options.greaterThan;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "greaterThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined | null",
                    "optional": false,
                    "description": "<p>Значение должно быть больше чем</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nЗначение должно быть больше чем\n"
                },
                {
                    "name": "lessThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined | null",
                    "optional": false,
                    "description": "<p>Значение должно быть меньше чем</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nЗначение должно быть меньше чем\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DatePeriod",
            "id": "class-DatePeriod-669f262d6c34bf815599cddb4b28f773",
            "file": "projects/components/src/component/date-picker/model/date-period.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DatePeriod {\r\n  start: Date;\r\n  end: Date;\r\n\r\n  constructor(start: Date, end: Date) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DatePickerUtil",
            "id": "class-DatePickerUtil-64276f2cd9d24a4d31fbf2debb86e6f6",
            "file": "projects/components/src/component/date-picker/util/date-picker-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DatePeriod } from '../model/date-period';\r\nimport { DayModel } from '../model/day-model';\r\n\r\nexport class DatePickerUtil {\r\n  static getFirstDay(\r\n    month: number,\r\n    year: number,\r\n    firstDayOfWeek: number\r\n  ): Date {\r\n    const lastDay = new Date(year, month, 0);\r\n    const lastDayIndex =\r\n      lastDay.getDay() >= firstDayOfWeek\r\n        ? lastDay.getDay() - firstDayOfWeek\r\n        : lastDay.getDay() + 7 - firstDayOfWeek;\r\n    return new Date(year, month - 1, lastDay.getDate() - lastDayIndex);\r\n  }\r\n\r\n  static getPickerDays(\r\n    date: Date,\r\n    firstDayOfWeek: number,\r\n    minDate: Date,\r\n    maxDate: Date,\r\n    disabledDates: Date[],\r\n    disabledDays: number[],\r\n    disabledPeriods: DatePeriod[]\r\n  ): DayModel[] {\r\n    const days = [];\r\n    const firstDay = DatePickerUtil.getFirstDay(\r\n      date.getMonth(),\r\n      date.getFullYear(),\r\n      firstDayOfWeek\r\n    );\r\n    for (let i = 0; i < 6 * 7; i++) {\r\n      const dat = new Date(firstDay);\r\n      dat.setDate(dat.getDate() + i);\r\n      days.push(\r\n        new DayModel({\r\n          date: dat,\r\n          disabled: DatePickerUtil.isDateInvalid(\r\n            dat,\r\n            minDate,\r\n            maxDate,\r\n            disabledDates,\r\n            disabledDays,\r\n            disabledPeriods\r\n          ),\r\n          today: DatePickerUtil.isToday(dat),\r\n          isCurrentMonth: dat.getMonth() === date.getMonth(),\r\n          selected:\r\n            dat.getFullYear() === date.getFullYear() &&\r\n            dat.getMonth() === date.getMonth() &&\r\n            dat.getDate() === date.getDate(),\r\n          weekend: dat.getDay() === 0 || dat.getDay() === 6,\r\n        })\r\n      );\r\n    }\r\n    return days;\r\n  }\r\n\r\n  static isDateInvalid(\r\n    dat: Date,\r\n    minDate: Date,\r\n    maxDate: Date,\r\n    disabledDates: Date[],\r\n    disabledDays: number[],\r\n    disabledPeriods: DatePeriod[]\r\n  ): boolean {\r\n    return (\r\n      DatePickerUtil.isDayDisabled(dat, disabledDays) ||\r\n      DatePickerUtil.isDateDisabled(dat, disabledDates) ||\r\n      DatePickerUtil.isDateInDisabledPeriod(dat, disabledPeriods) ||\r\n      DatePickerUtil.isMaxInvalid(dat, maxDate) ||\r\n      DatePickerUtil.isMinInvalid(dat, minDate)\r\n    );\r\n  }\r\n\r\n  static isDayDisabled(dat: Date, disabledDays: number[]): boolean {\r\n    if (\r\n      dat === null ||\r\n      dat === undefined ||\r\n      disabledDays === null ||\r\n      disabledDays === undefined ||\r\n      disabledDays.length < 1\r\n    ) {\r\n      return false;\r\n    }\r\n    return disabledDays.indexOf(dat.getDay()) >= 0;\r\n  }\r\n\r\n  static isMinInvalid(dat: Date, minDate: Date): boolean {\r\n    if (\r\n      dat === null ||\r\n      dat === undefined ||\r\n      minDate === null ||\r\n      minDate === undefined\r\n    ) {\r\n      return false;\r\n    }\r\n    return minDate.getTime() > dat.getTime();\r\n  }\r\n\r\n  static isMaxInvalid(dat: Date, maxDate: Date): boolean {\r\n    if (\r\n      dat === null ||\r\n      dat === undefined ||\r\n      maxDate === null ||\r\n      maxDate === undefined\r\n    ) {\r\n      return false;\r\n    }\r\n    return maxDate.getTime() < dat.getTime();\r\n  }\r\n\r\n  static isDateInDisabledPeriod(\r\n    dat: Date,\r\n    disabledPeriods: DatePeriod[]\r\n  ): boolean {\r\n    if (\r\n      dat === null ||\r\n      dat === undefined ||\r\n      disabledPeriods === null ||\r\n      disabledPeriods === undefined ||\r\n      disabledPeriods.length < 1\r\n    ) {\r\n      return false;\r\n    }\r\n    return disabledPeriods.some(\r\n      (d: DatePeriod) =>\r\n        d !== null &&\r\n        d !== undefined &&\r\n        d.start !== null &&\r\n        d.start !== undefined &&\r\n        d.end !== null &&\r\n        d.end !== undefined &&\r\n        d.start.getTime() <= dat.getTime() &&\r\n        d.end.getTime() >= dat.getTime()\r\n    );\r\n  }\r\n\r\n  static isDateDisabled(dat: Date, disabledDates: Date[]): boolean {\r\n    if (\r\n      disabledDates === null ||\r\n      disabledDates === undefined ||\r\n      disabledDates.length < 1 ||\r\n      dat === null ||\r\n      dat === undefined\r\n    ) {\r\n      return false;\r\n    }\r\n    return disabledDates.some(\r\n      (d: Date) =>\r\n        d !== null &&\r\n        d !== undefined &&\r\n        d.getFullYear() === dat.getFullYear() &&\r\n        d.getMonth() === dat.getMonth() &&\r\n        d.getDate() === dat.getDate()\r\n    );\r\n  }\r\n\r\n  static isToday(dat: Date): boolean {\r\n    if (dat === null || dat === undefined) {\r\n      return false;\r\n    }\r\n    const today = new Date();\r\n    return (\r\n      dat.getFullYear() === today.getFullYear() &&\r\n      dat.getMonth() === today.getMonth() &&\r\n      dat.getDate() === today.getDate()\r\n    );\r\n  }\r\n\r\n  static scrollMonth(delta: number, date: Date) {\r\n    const res = new Date(date);\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n    if (delta > 0) {\r\n      if (month === 11) {\r\n        month = 0;\r\n        year++;\r\n      } else {\r\n        month++;\r\n      }\r\n    } else {\r\n      if (month === 0) {\r\n        month = 11;\r\n        year--;\r\n      } else {\r\n        month--;\r\n      }\r\n    }\r\n    res.setFullYear(year, month);\r\n    return res;\r\n  }\r\n\r\n  static scrollYear(delta: number, date: Date) {\r\n    const res = new Date(date);\r\n    let year = date.getFullYear();\r\n    if (delta > 0) {\r\n      year++;\r\n    } else {\r\n      year--;\r\n    }\r\n    res.setFullYear(year);\r\n    return res;\r\n  }\r\n\r\n  // static isSelected(date: Date, selectedDate: Date): boolean {\r\n  //   if (date === null || date === undefined || selectedDate === null || selectedDate === undefined) {\r\n  //     return false;\r\n  //   }\r\n  //   return date.getFullYear() === selectedDate.getFullYear()\r\n  //     && date.getMonth() === selectedDate.getMonth()\r\n  //     && date.getDate() === selectedDate.getDate();\r\n  // }\r\n\r\n  // static nextMonth(date: Date): Date {\r\n  //   const dt = new Date(date);\r\n  //   dt.setMonth(dt.getMonth() + 1);\r\n  //   return dt;\r\n  // }\r\n\r\n  // static prevMonth(date: Date): Date {\r\n  //   const dt = new Date(date);\r\n  //   dt.setMonth(dt.getMonth() - 1);\r\n  //   return dt;\r\n  // }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getFirstDay",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPickerDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DayModel[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstDayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateDisabled",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateInDisabledPeriod",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDates",
                            "type": "Date[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledPeriods",
                            "type": "DatePeriod[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDayDisabled",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabledDays",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMaxInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinInvalid",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isToday",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollMonth",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollYear",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateUtil",
            "id": "class-DateUtil-156292db967d759ddd57acfa67f21a27",
            "file": "projects/components/src/util/date-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateUtil {\r\n  /**\r\n   * Вычесть n-дней\r\n   */\r\n\r\n  public static subtractDays(date: Date, days = 0): Date | null {\r\n    if (date && date instanceof Date) {\r\n      const dt = new Date(date.getTime());\r\n\r\n      dt.setDate(dt.getDate() - days);\r\n      return dt;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Добавить n-дней\r\n   */\r\n\r\n  public static addDays(date: Date, days = 0): Date | null {\r\n    if (date && date instanceof Date) {\r\n      const dt = new Date(date.getTime());\r\n\r\n      dt.setDate(dt.getDate() + days);\r\n      return dt;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Получить дату из строки\r\n   */\r\n  public static parseString(dat: string): Date | null {\r\n    if (!dat || dat.length < 1) {\r\n      return null;\r\n    }\r\n\r\n    const parts = dat.split(' ');\r\n    const dtPart = parts[0].split('.');\r\n    const tPart = parts[1]?.split(':') ?? ['0', '0', '0'];\r\n    const parsedDate = new Date(\r\n      parseInt(dtPart[2], 10),\r\n      parseInt(dtPart[1], 10) - 1,\r\n      parseInt(dtPart[0], 10),\r\n      parseInt(tPart[0], 10),\r\n      parseInt(tPart[1], 10),\r\n      parseInt(tPart[2], 10)\r\n    );\r\n    if (isNaN(parsedDate.getTime())) {\r\n      return null;\r\n    }\r\n    return parsedDate;\r\n  }\r\n\r\n  /**\r\n   * Привести дату к строке\r\n   */\r\n  public static toString(dat: Date): string {\r\n    if (!dat || !(dat instanceof Date)) {\r\n      return '';\r\n    }\r\n    const month = dat.getMonth() + 1;\r\n    const monthString = month < 10 ? '0' + month.toString() : month.toString();\r\n    return `${dat.getDate().toString()}.${monthString}.${dat\r\n      .getFullYear()\r\n      .toString()} ${dat.getHours()}:${dat.getMinutes()}:${dat.getSeconds()}`;\r\n  }\r\n\r\n  /**\r\n   * Подготовка даты к отправке на сервер, чтобы небыло смещения часов\r\n   */\r\n  public static convertUTC2DateLocal(date?: Date): Date | null {\r\n    if (date && date instanceof Date) {\r\n      const timezoneOffsetMs: number =\r\n        new Date(\r\n          date.getFullYear(),\r\n          date.getMonth(),\r\n          date.getDate()\r\n        ).getTimezoneOffset() * 60000;\r\n      return new Date(date.getTime() - timezoneOffsetMs);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Подготовка даты к отправке на сервер, чтобы небыло смещения часов\r\n   */\r\n  public static convertDateLocal2UTC(date?: Date): Date | null {\r\n    if (date && date instanceof Date) {\r\n      const timezoneOffsetMs: number =\r\n        new Date(\r\n          date.getFullYear(),\r\n          date.getMonth(),\r\n          date.getDate()\r\n        ).getTimezoneOffset() * 60000;\r\n      return date == null ? null : new Date(date.getTime() + timezoneOffsetMs);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static convertDateStringsToDates(input: any): any {\r\n    const regexIso8601 =\r\n      /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/i;\r\n    if (typeof input === 'string' && regexIso8601.test(input)) {\r\n      return DateUtil.convertStringToLocalDate(input);\r\n    }\r\n    if (typeof input !== 'object' || !input) {\r\n      return input;\r\n    }\r\n    let res: any | any[];\r\n    if (input instanceof Array) {\r\n      res = [];\r\n    } else {\r\n      res = {};\r\n    }\r\n    return DateUtil.fillConvertDateStringsToDates(res, input);\r\n  }\r\n\r\n  public static convertDates(input: any | any[]): any | any[] {\r\n    if (typeof input !== 'object' || !input) {\r\n      return input;\r\n    }\r\n    if (input instanceof Date) {\r\n      return DateUtil.convertUTC2DateLocal(input);\r\n    }\r\n    let res: any | any[];\r\n    if (input instanceof Array) {\r\n      res = [];\r\n    } else {\r\n      res = {};\r\n    }\r\n    return DateUtil.fillConvertDates(res, input);\r\n  }\r\n\r\n  public static getMonthDaysCount(date: Date): number {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\r\n  }\r\n\r\n  // Возвращает список месяцев между двумя датами\r\n  public static getRangeOfMonths(start: Date, end: Date): Date[] {\r\n    if (start > end || !start || !end) {\r\n      return null;\r\n    }\r\n    const resDates: Date[] = [];\r\n    let i = 0;\r\n    let dateTmp = new Date(start.getFullYear(), start.getMonth() + i, 1);\r\n    while (end >= dateTmp) {\r\n      resDates.push(dateTmp);\r\n      i++;\r\n      dateTmp = new Date(start.getFullYear(), start.getMonth() + i, 1);\r\n    }\r\n    return resDates;\r\n  }\r\n\r\n  public static truncateToMonth(date: Date): Date {\r\n    const res = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0);\r\n    return res;\r\n  }\r\n\r\n  public static truncateToDay(date: Date): Date {\r\n    const res = new Date(\r\n      date.getFullYear(),\r\n      date.getMonth(),\r\n      date.getDate(),\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    return res;\r\n  }\r\n\r\n  public static truncateToHour(date: Date): Date {\r\n    const res = new Date(\r\n      date.getFullYear(),\r\n      date.getMonth(),\r\n      date.getDate(),\r\n      date.getHours(),\r\n      0,\r\n      0\r\n    );\r\n    return res;\r\n  }\r\n\r\n  public static toISOString(date: number): string {\r\n    return (\r\n      new Date(date - new Date().getTimezoneOffset() * 60000)\r\n        .toISOString()\r\n        .slice(0, -5) + 'Z'\r\n    );\r\n  }\r\n\r\n  public static isValidDate(date: any): boolean {\r\n    return date instanceof Date && !isNaN(date.getTime());\r\n  }\r\n\r\n  private static fillConvertDates(result: any, input: any): any {\r\n    for (const key in input) {\r\n      if (!input.hasOwnProperty || !input.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n      if (input.hasOwnProperty(key)) {\r\n        let value = input[key];\r\n        if (value instanceof Date) {\r\n          if (value !== null && value !== undefined) {\r\n            value = DateUtil.convertUTC2DateLocal(value);\r\n          }\r\n          result[key] = value;\r\n        } else if (typeof value === 'object') {\r\n          result[key] = DateUtil.convertDates(value);\r\n        } else {\r\n          result[key] = value;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static fillConvertDateStringsToDates(result: any, input: any): any {\r\n    const regexIso8601 =\r\n      /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z?)?$/i;\r\n    for (const key in input) {\r\n      if (!input.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n      const value = input[key];\r\n      if (typeof value === 'string' && regexIso8601.test(value)) {\r\n        result[key] = DateUtil.convertStringToLocalDate(value);\r\n      } else if (typeof value === 'object') {\r\n        result[key] = DateUtil.convertDateStringsToDates(value);\r\n      } else {\r\n        result[key] = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static convertStringToLocalDate(dateString: string): Date | null {\r\n    const milliseconds = Date.parse(dateString);\r\n    if (!isNaN(milliseconds)) {\r\n      const dt = new Date(milliseconds);\r\n      return DateUtil.convertDateLocal2UTC(dt);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "addDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nДобавить n-дней\n",
                    "description": "<p>Добавить n-дней</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateLocal2UTC",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПодготовка даты к отправке на сервер, чтобы небыло смещения часов\n",
                    "description": "<p>Подготовка даты к отправке на сервер, чтобы небыло смещения часов</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDates",
                    "args": [
                        {
                            "name": "input",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | []",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateStringsToDates",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertStringToLocalDate",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertUTC2DateLocal",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПодготовка даты к отправке на сервер, чтобы небыло смещения часов\n",
                    "description": "<p>Подготовка даты к отправке на сервер, чтобы небыло смещения часов</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillConvertDates",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillConvertDateStringsToDates",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthDaysCount",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRangeOfMonths",
                    "args": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date[]",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseString",
                    "args": [
                        {
                            "name": "dat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучить дату из строки\n",
                    "description": "<p>Получить дату из строки</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtractDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nВычесть n-дней\n",
                    "description": "<p>Вычесть n-дней</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toISOString",
                    "args": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПривести дату к строке\n",
                    "description": "<p>Привести дату к строке</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dat",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToHour",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateToMonth",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DayModel",
            "id": "class-DayModel-56151a715a79e65e4d62ff2fa7455d93",
            "file": "projects/components/src/component/date-picker/model/day-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DayModel {\r\n  disabled: boolean;\r\n  isCurrentMonth: boolean;\r\n  today: boolean;\r\n  selected: boolean;\r\n  date: Date;\r\n  weekend: boolean;\r\n\r\n  public constructor(options?: {\r\n    disabled?: boolean;\r\n    isCurrentMonth?: boolean;\r\n    today?: boolean;\r\n    selected?: boolean;\r\n    date: Date;\r\n    weekend?: boolean;\r\n  }) {\r\n    if (options) {\r\n      this.disabled = options.disabled;\r\n      this.isCurrentMonth = options.isCurrentMonth;\r\n      this.today = options.today;\r\n      this.selected = options.selected;\r\n      this.date = options.date;\r\n      this.weekend = options.weekend;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isCurrentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "weekend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DetailComponentBase",
            "id": "class-DetailComponentBase-cf779170d9de04720cf5d00261590720",
            "file": "projects/components/src/component/table/base/detail-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableRow} from '../contract/table-row';\r\nimport {TableColumn} from '../contract/table-column';\r\n\r\nexport abstract class DetailComponentBase<T> {\r\n  /**\r\n   * The row details are displayed for\r\n   */\r\n  abstract row: TableRow<T>;\r\n  /**\r\n   * displayed columns\r\n   */\r\n  abstract columns: TableColumn[];\r\n}\r\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DomUtil",
            "id": "class-DomUtil-35bce0b99ac8e8c731acf284f56f776f",
            "file": "projects/components/src/common/util/dom-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DomUtil {\r\n  public static clickedInside(target: HTMLElement, event: MouseEvent): boolean {\r\n    return event.composedPath().indexOf(target) >= 0;\r\n  }\r\n\r\n  public static findTransformedParent(node: HTMLElement) {\r\n    while (node !== null && node.tagName !== 'BODY') {\r\n      const style = getComputedStyle(node);\r\n      if (style.transform !== 'none') {\r\n        return node;\r\n      }\r\n      node = node.parentNode as HTMLElement;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clickedInside",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findTransformedParent",
                    "args": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicData",
            "id": "class-DynamicData-0ad959c33f62493af924ab7894ce0cc2",
            "file": "projects/components/src/common/contract/dynamic-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DynamicData {\r\n  [key: string]: any;\r\n\r\n  constructor(value: { [key: string]: any }) {\r\n    for (const key in value) {\r\n      if (value.hasOwnProperty(key)) {\r\n        this[key] = value[key];\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-0ad959c33f62493af924ab7894ce0cc2",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtremesBuilder",
            "id": "class-ExtremesBuilder-e4bd7992bc1a4aa8815476a844a05e06",
            "file": "projects/chart/src/chart/core/axis/builders/extremes-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IBuilder } from '../../../model/i-builder';\r\nimport { Axis } from '../axis';\r\nimport { BasePoint } from '../../../model/base-point';\r\nimport { AxisOrientation } from '../../../model/enum/axis-orientation';\r\n\r\nimport * as d3 from 'd3';\r\nimport { AxisType } from '../../../model/axis-type';\r\n\r\nexport class ExtremesBuilder implements IBuilder<Axis, [number, number]> {\r\n  private extentAccessorMap = new Map<\r\n    AxisOrientation,\r\n    (point: BasePoint) => number\r\n  >()\r\n    .set(AxisOrientation.x, (_) => _.x)\r\n    .set(AxisOrientation.y, (_) => _.y);\r\n\r\n  private extremes: [number, number] = [0, 0];\r\n\r\n  build(settings: Axis): [number, number] {\r\n    const options = settings.options;\r\n\r\n    const hasMin = options?.min != null;\r\n    const hasMax = options?.max != null;\r\n\r\n    if (!hasMin || !hasMax) {\r\n      const linkedSeries = settings.linkedSeries();\r\n      const data = linkedSeries.reduce((acc: BasePoint[], current) => {\r\n        return acc.concat(current.data);\r\n      }, []);\r\n\r\n      const accessor = this.extentAccessorMap.get(settings.orientation);\r\n      // add negative axis!\r\n\r\n      this.extremes = d3.extent(data, accessor);\r\n    }\r\n\r\n    if (hasMin) {\r\n      this.extremes[0] = options?.min;\r\n    }\r\n\r\n    if (hasMax) {\r\n      this.extremes[1] = options?.max;\r\n    }\r\n    return this.extremes;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "extentAccessorMap",
                    "defaultValue": "new Map<\r\n    AxisOrientation,\r\n    (point: BasePoint) => number\r\n  >()\r\n    .set(AxisOrientation.x, (_) => _.x)\r\n    .set(AxisOrientation.y, (_) => _.y)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "extremes",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "settings",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IBuilder"
            ]
        },
        {
            "name": "FilterBase",
            "id": "class-FilterBase-9af4d4ec0fcc40f255ebd2747c59af93",
            "file": "projects/components/src/component/filter/base/filter-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IFilter} from '../contarct/i-filter';\r\n\r\nexport class FilterBase implements IFilter {\r\n  field: string;\r\n  name: string;\r\n  value: any;\r\n\r\n  constructor(options?: {\r\n    field: string;\r\n    name: string;\r\n  }) {\r\n    if (options) {\r\n      this.field = options.field;\r\n      this.name = options.name;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFilter"
            ]
        },
        {
            "name": "FilterComponentBase",
            "id": "class-FilterComponentBase-f6b0e997b9f79b3891f51133156646b3",
            "file": "projects/components/src/component/filter/base/filter-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterState} from '../contarct/filter-state';\r\nimport {EventEmitter} from '@angular/core';\r\nimport {FilterItem} from '../contarct/filter-item';\r\nimport {IFilter} from '../contarct/i-filter';\r\nimport {IIdName} from '../../../common/contract/i-id-name';\r\n\r\nexport abstract class FilterComponentBase {\r\n  abstract column: FilterItem;\r\n  abstract state: FilterState;\r\n  abstract filterOptions: IIdName<any>[];\r\n\r\n  abstract filterChanged: EventEmitter<IFilter>;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilterItem",
            "id": "class-FilterItem-c6cc9737aadfbb02715f023ac0fcaf78",
            "file": "projects/components/src/component/filter/contarct/filter-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterType} from '../enum/filter-type.enum';\r\nimport {StringFilterType} from '../enum/string-filter-type.enum';\r\nimport {ListFilterType} from '../enum/list-filter-type.enum';\r\n\r\nexport class FilterItem {\r\n  /**\r\n   * Порядковый номер\r\n   */\r\n  sortOrder: number = Number.MAX_VALUE;\r\n  /**\r\n   * Название столбца для заголовка таблицы\r\n   */\r\n  caption: string;\r\n  /**\r\n   * Подсказка\r\n   */\r\n  hint: string;\r\n  /**\r\n   * Название столбца в строке результатов\r\n   */\r\n  name: string;\r\n  /**\r\n   * Возможность сортировать поле\r\n   */\r\n  sortable = true;\r\n  /**\r\n   * Возможность фильтровать поле\r\n   */\r\n  filterable = true;\r\n  /**\r\n   * Поле для сортировки\r\n   */\r\n  sortField: string;\r\n  /**\r\n   * Поле для фильтрации\r\n   */\r\n  filterField: string;\r\n  /**\r\n   * Тип фильтра\r\n   */\r\n  filterType: FilterType | null;\r\n  /**\r\n   * Тип сравнения строкового фильтра\r\n   */\r\n  stringFilterType: StringFilterType;\r\n  /**\r\n   * Тип сравнения строкового фильтра\r\n   */\r\n  listFilterType: ListFilterType;\r\n  /**\r\n   * Строгое сравнение\r\n   */\r\n  strict: boolean;\r\n  /**\r\n   * Компонент для рендера фильтра\r\n   */\r\n  filterComponent: any;\r\n\r\n  /**\r\n   * Дочерние элементы\r\n   */\r\n  columns: FilterItem[];\r\n\r\n  constructor(options?: {\r\n    sortOrder?: number;\r\n    name?: string;\r\n    caption?: string;\r\n    hint?: string;\r\n    sortable?: boolean;\r\n    sortField?: string;\r\n    filterable?: boolean;\r\n    filterField?: string;\r\n    filterType?: FilterType | null;\r\n    stringFilterType?: StringFilterType;\r\n    listFilterType?: ListFilterType;\r\n    strict?: boolean;\r\n    filterComponent?: any;\r\n    columns?: FilterItem[];\r\n  }) {\r\n    this.sortOrder = options?.sortOrder ?? Number.MAX_VALUE;\r\n    this.name = options?.name ?? '';\r\n    this.caption = options?.caption ?? this.name;\r\n    this.hint = options?.hint ?? '';\r\n    this.sortable = options?.sortable ?? true;\r\n    this.filterable = options?.filterable ?? true;\r\n    this.sortField = options?.sortField ?? this.name;\r\n    this.filterField = options?.filterField ?? this.name;\r\n    this.filterType = options?.filterType;\r\n    this.stringFilterType = options?.stringFilterType ?? StringFilterType.Contains;\r\n    this.listFilterType = options?.listFilterType ?? ListFilterType.None;\r\n    this.strict = options?.strict ?? false;\r\n    this.filterComponent = options?.filterComponent;\r\n    this.columns = options?.columns?.map(_ => new FilterItem(_)) ?? [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца для заголовка таблицы</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nНазвание столбца для заголовка таблицы\n"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem[]",
                    "optional": false,
                    "description": "<p>Дочерние элементы</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nДочерние элементы\n"
                },
                {
                    "name": "filterable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность фильтровать поле</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nВозможность фильтровать поле\n"
                },
                {
                    "name": "filterComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера фильтра</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nКомпонент для рендера фильтра\n"
                },
                {
                    "name": "filterField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для фильтрации</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nПоле для фильтрации\n"
                },
                {
                    "name": "filterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType | null",
                    "optional": false,
                    "description": "<p>Тип фильтра</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nТип фильтра\n"
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Подсказка</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nПодсказка\n"
                },
                {
                    "name": "listFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца в строке результатов</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nНазвание столбца в строке результатов\n"
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность сортировать поле</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nВозможность сортировать поле\n"
                },
                {
                    "name": "sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для сортировки</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nПоле для сортировки\n"
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "Number.MAX_VALUE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядковый номер</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nПорядковый номер\n"
                },
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Строгое сравнение</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nСтрогое сравнение\n"
                },
                {
                    "name": "stringFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilterState",
            "id": "class-FilterState-9c5d6b9cfed1f99bc6c2cea423277387",
            "file": "projects/components/src/component/filter/contarct/filter-state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { StringFilter } from './string-filter';\r\nimport { NumericFilter } from './numeric-filter';\r\nimport { DateFilter } from './date-filter';\r\nimport { ListFilter } from './list-filter';\r\nimport { SortParam } from './sort-param';\r\nimport { DateFilterValue } from './date-filter-value';\r\nimport { NumericFilterValue } from './numeric-filter-value';\r\nimport { ListFilterType } from '../enum/list-filter-type.enum';\r\nimport { BooleanFilter } from './boolean-filter';\r\n\r\nexport class FilterState {\r\n  stringFilters: StringFilter[] = [];\r\n  numericFilters: NumericFilter[] = [];\r\n  dateFilters: DateFilter[] = [];\r\n  listFilters: ListFilter[] = [];\r\n  booleanFilters: BooleanFilter[] = [];\r\n  sortParams: SortParam[] = [];\r\n\r\n  constructor(options?: {\r\n    stringFilters?: any[];\r\n    booleanFilters?: any[];\r\n    numericFilters?: any[];\r\n    dateFilters?: any[];\r\n    listFilters?: any[];\r\n    sortParams?: any[];\r\n  }) {\r\n    if (options) {\r\n      if (options.stringFilters && options.stringFilters.length) {\r\n        this.stringFilters = options.stringFilters.map(\r\n          (x: any) => new StringFilter(x)\r\n        );\r\n      }\r\n\r\n      if (options.booleanFilters && options.booleanFilters.length) {\r\n        this.booleanFilters = options.booleanFilters.map(\r\n          (x: any) => new BooleanFilter(x)\r\n        );\r\n      }\r\n\r\n      if (options.numericFilters && options.numericFilters.length) {\r\n        this.numericFilters = options.numericFilters.map(\r\n          (x: any) => new NumericFilter(x)\r\n        );\r\n      }\r\n\r\n      if (options.dateFilters && options.dateFilters.length) {\r\n        this.dateFilters = options.dateFilters.map(\r\n          (x: any) => new DateFilter(x)\r\n        );\r\n      }\r\n\r\n      if (options.listFilters && options.listFilters.length) {\r\n        this.listFilters = options.listFilters.map(\r\n          (x: any) => new ListFilter(x)\r\n        );\r\n      }\r\n\r\n      if (options.sortParams && options.sortParams.length) {\r\n        this.sortParams = options.sortParams.map((x: any) => new SortParam(x));\r\n      }\r\n    }\r\n  }\r\n\r\n  static restore(cookie: string): any {\r\n    const state = localStorage.getItem(cookie) || 'null';\r\n    return JSON.parse(state);\r\n  }\r\n\r\n  save(cookieName: string): void {\r\n    if (cookieName) {\r\n      localStorage.setItem(cookieName, JSON.stringify(this));\r\n    }\r\n  }\r\n\r\n  addListFilter(value: ListFilter): ListFilter {\r\n    if (this.listFilters === null || this.listFilters === undefined) {\r\n      this.listFilters = [];\r\n    }\r\n    const filter = this.listFilters.find((f) => f.field === value.field);\r\n    if (filter === null || filter === undefined) {\r\n      this.listFilters.push(value);\r\n      return value;\r\n    } else {\r\n      filter.value = value.value;\r\n      return filter;\r\n    }\r\n  }\r\n\r\n  addDateFilter(value: DateFilter): DateFilter {\r\n    if (this.dateFilters === null || this.dateFilters === undefined) {\r\n      this.dateFilters = [];\r\n    }\r\n    const filter = this.dateFilters.find((f) => f.field === value.field);\r\n    if (filter === null || filter === undefined) {\r\n      this.dateFilters.push(value);\r\n      return value;\r\n    } else {\r\n      filter.value = value.value;\r\n      return filter;\r\n    }\r\n  }\r\n\r\n  addStringFilter(value: StringFilter): StringFilter {\r\n    if (this.stringFilters === null || this.stringFilters === undefined) {\r\n      this.stringFilters = [];\r\n    }\r\n    const filter = this.stringFilters.find((f) => f.field === value.field);\r\n    if (filter === null || filter === undefined) {\r\n      this.stringFilters.push(value);\r\n      return value;\r\n    } else {\r\n      filter.value = value.value;\r\n      return filter;\r\n    }\r\n  }\r\n\r\n  addBooleanFilter(value: BooleanFilter): BooleanFilter {\r\n    if (this.booleanFilters === null || this.booleanFilters === undefined) {\r\n      this.booleanFilters = [];\r\n    }\r\n    const filter = this.booleanFilters.find((f) => f.field === value.field);\r\n    if (filter === null || filter === undefined) {\r\n      this.booleanFilters.push(value);\r\n      return value;\r\n    } else {\r\n      filter.value = value.value;\r\n      return filter;\r\n    }\r\n  }\r\n\r\n  addNumericFilter(value: NumericFilter): NumericFilter {\r\n    if (this.numericFilters === null || this.numericFilters === undefined) {\r\n      this.numericFilters = [];\r\n    }\r\n    const filter = this.numericFilters.find((f) => f.field === value.field);\r\n    if (filter === null || filter === undefined) {\r\n      this.numericFilters.push(value);\r\n      return value;\r\n    } else {\r\n      filter.value = value.value;\r\n      return filter;\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.sortParams.length = 0;\r\n\r\n    this.stringFilters.map((f: StringFilter) => {\r\n      f.value = '';\r\n    });\r\n    this.booleanFilters.map((f: BooleanFilter) => {\r\n      f.value = null;\r\n    });\r\n    this.dateFilters.map((f: DateFilter) => {\r\n      f.value = new DateFilterValue({\r\n        lessThan: null,\r\n        greaterThan: null,\r\n      });\r\n    });\r\n    this.numericFilters.map((f: NumericFilter) => {\r\n      f.value = new NumericFilterValue({\r\n        lessThan: null,\r\n        greaterThan: null,\r\n        equalsTo: null,\r\n      });\r\n    });\r\n    this.listFilters.map((f: ListFilter) => {\r\n      f.value = [];\r\n      f.type = ListFilterType.None;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "booleanFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooleanFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dateFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "listFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "numericFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sortParams",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortParam[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stringFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "addBooleanFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "BooleanFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BooleanFilter",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BooleanFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addDateFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DateFilter",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addListFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ListFilter",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNumericFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NumericFilter",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addStringFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StringFilter",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restore",
                    "args": [
                        {
                            "name": "cookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "cookieName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cookieName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormsUtil",
            "id": "class-FormsUtil-49475a58719f706af2f6050e81296fba",
            "file": "projects/components/src/util/forms-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroup,\r\n  ValidationErrors,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { TableColumn } from '../component/table/contract/table-column';\r\nimport { ArrayUtil } from '../common/util/array-util';\r\n\r\nexport class FormsUtil {\r\n  static validateAllFormFields(formGroup: FormGroup) {\r\n    Object.keys(formGroup.controls).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n        control.markAsDirty({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFormFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  static controlIsInvalid(formGroup: FormGroup, controlName: string) {\r\n    return (\r\n      formGroup.controls[controlName]?.invalid &&\r\n      formGroup.controls[controlName]?.dirty\r\n    );\r\n  }\r\n\r\n  static matchValuesValidator(\r\n    matchTo: string\r\n  ): (control: AbstractControl) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null =>\r\n      !!control.parent &&\r\n      !!control.parent.value &&\r\n      control.value === control.parent.controls[matchTo].value\r\n        ? null\r\n        : { isMatching: false };\r\n  }\r\n\r\n  static requiredIf(\r\n    value: boolean\r\n  ): (control: AbstractControl) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null =>\r\n      !!control.parent &&\r\n      !!control.parent.value &&\r\n      control.value != null &&\r\n      value\r\n        ? null\r\n        : { isMatching: false };\r\n  }\r\n\r\n  static initFormFromColumns(columns: TableColumn[], dataItem: any) {\r\n    const form = new FormGroup({});\r\n    const flat = ArrayUtil.flatten(columns, 'columns');\r\n    flat.forEach((column: TableColumn) => {\r\n      const control = new FormControl(\r\n        {\r\n          value: dataItem ? dataItem[column.name] : undefined,\r\n          disabled: !column.editable,\r\n        },\r\n        FormsUtil.getValidators(column)\r\n      );\r\n      form.registerControl(column.name, control);\r\n    });\r\n    return form;\r\n  }\r\n\r\n  static getValidators(column: TableColumn) {\r\n    const validators = [];\r\n    if (column.required) {\r\n      validators.push(Validators.required);\r\n    }\r\n    if (column.minValue != null) {\r\n      validators.push(Validators.min(column.minValue));\r\n    }\r\n    if (column.maxValue != null) {\r\n      validators.push(Validators.max(column.maxValue));\r\n    }\r\n    return validators;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "controlIsInvalid",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormFromColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchValuesValidator",
                    "args": [
                        {
                            "name": "matchTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "matchTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requiredIf",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAllFormFields",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GradientDrawer",
            "id": "class-GradientDrawer-4372b5709a7dea3d76d3e1894399f28e",
            "file": "projects/components/src/component/chart/legend-drawer/gradient-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\r\nimport { ILegendDrawer, LegendDrawOptions } from '../model/i-drawer-legend';\r\nimport { BasePoint } from '../model/point/base-point';\r\n\r\nexport class GradientDrawer implements ILegendDrawer {\r\n  draw(options: LegendDrawOptions<BasePoint>): void {\r\n    const container = d3\r\n      .select(options.context.parentElement)\r\n      .select('.legend-container');\r\n\r\n    container.selectAll('.gradient-legend').remove();\r\n\r\n    const svg = container\r\n      .append('svg')\r\n      .attr('class', 'gradient-legend')\r\n      .attr('width', options.width)\r\n      .attr('height', 32);\r\n\r\n    svg.selectAll('.legend-defs').remove();\r\n\r\n    const extent = d3.extent(\r\n      options.series[0]?.data as any,\r\n      (d: any) => d.value\r\n    ) as any;\r\n\r\n    const defs = svg.append('defs').attr('class', 'legend-defs') as any;\r\n\r\n    const linearGradient = defs\r\n      .append('linearGradient')\r\n      .attr('id', 'legend-gradient');\r\n\r\n    linearGradient\r\n      .selectAll('stop')\r\n      .data([...options.series[0]?.data].reverse())\r\n      .enter()\r\n      .append('stop')\r\n      .attr(\r\n        'offset',\r\n        (d) => ((d.value - extent[0]) / (extent[1] - extent[0])) * 100 + '%'\r\n      )\r\n      .attr('stop-color', (d) => d.color);\r\n\r\n    const g = svg.append('g').attr('class', 'gradient-legend');\r\n\r\n    g.append('rect')\r\n      .attr('width', options.width - 80)\r\n      .attr('transform', 'translate(40, 0)')\r\n      .attr('height', 4)\r\n      .style('fill', 'url(#legend-gradient)');\r\n\r\n    const xScale = d3\r\n      .scaleLinear()\r\n      .range([80, options.width - 80])\r\n      .domain(extent)\r\n      .nice();\r\n    const tickCount = options.width / 80;\r\n\r\n    const xAxis = d3.axisBottom(xScale).tickSize(8).ticks(tickCount);\r\n\r\n    g.call(xAxis).call((node) => {\r\n      node.select('.domain').remove();\r\n      node.selectAll('line').remove();\r\n    });\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILegendDrawer"
            ]
        },
        {
            "name": "GroupRowComponentBase",
            "id": "class-GroupRowComponentBase-4ebeff2522f637ac459e91e17160641a",
            "file": "projects/components/src/component/table/base/group-row-component-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableRow} from '../contract/table-row';\r\nimport {TableColumn} from '../contract/table-column';\r\n\r\nexport abstract class GroupRowComponentBase<T> {\r\n  /**\r\n   * The row details are displayed for\r\n   */\r\n  abstract row: TableRow<T>;\r\n  /**\r\n   * displayed columns\r\n   */\r\n  abstract columns: TableColumn[];\r\n}\r\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LineDrawer",
            "id": "class-LineDrawer-23b03e7a1ebeb96e9a0b839a19961020",
            "file": "projects/components/src/component/chart/drawer/line-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\nimport { ChartOptions } from '../model/chart-options';\r\nimport { IDragEvent } from '../model/i-drag-event';\r\nimport { DispatchType } from '../model/enum/dispatch-type';\r\nimport { DragPointType } from '../model/enum/drag-point-type';\r\n\r\nexport class LineDrawer implements IDrawer<BasePoint> {\r\n  dispatch: d3.Dispatch<IDragEvent<Series<BasePoint>>>;\r\n\r\n  constructor() {\r\n    this.dispatch = d3.dispatch(DispatchType.moveLine, DispatchType.movePoint);\r\n  }\r\n\r\n  draw(\r\n    series: Series<BasePoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any,\r\n    options: ChartOptions\r\n  ): void {\r\n    const points = series.data;\r\n\r\n    const markerPoints = points.filter((_) => _.marker);\r\n\r\n    const path = d3\r\n      .line<BasePoint>()\r\n      .curve(series.curveType)\r\n      .defined((d) => d.x != null && d.y != null)\r\n      .x((d) => scaleX(d.x))\r\n      .y((d) => scaleY(d.y));\r\n\r\n    const seriesIndex = options.series.findIndex((_) => _.id === series.id);\r\n\r\n    context\r\n      .append('path')\r\n      .attr('class', (d: BasePoint) =>\r\n        series?.drag.enable ? 'draggable' : `series-${seriesIndex}`\r\n      )\r\n      .attr('data-draggable-id', seriesIndex)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', series.color)\r\n      .attr('stroke-dasharray', series?.strokeDasharray)\r\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\r\n      .style('cursor', series?.drag?.enable ? 'move' : 'default')\r\n      .datum(points)\r\n      .attr('d', path);\r\n\r\n    const u = context.append('g').attr('class', 'grabbers');\r\n\r\n    const emit = (event: DragEvent, target: Series<BasePoint>) => {\r\n      this.dispatch.apply(DispatchType.moveLine, {\r\n        target,\r\n        event,\r\n      });\r\n    };\r\n\r\n    if (series.drag.enable) {\r\n      u.selectAll('circle')\r\n        .data(points)\r\n        .enter()\r\n        .append('circle')\r\n        .attr('data-grabber-id', seriesIndex)\r\n        .attr('stroke', series?.drag?.grabbers?.stroke ?? series?.color)\r\n        .attr('stroke-width', series?.drag?.grabbers?.strokeWidth ?? 1)\r\n        .attr('fill', series?.drag?.grabbers?.fill ?? series?.color)\r\n        .attr('r', series?.drag?.grabbers?.radius ?? 4)\r\n        .attr('cx', function (d) {\r\n          return scaleX(d.x);\r\n        })\r\n        .attr('cy', function (d) {\r\n          return scaleY(d.y);\r\n        })\r\n        .style('cursor', 'move')\r\n        .call(\r\n          d3.drag().on('start drag end', function (event, d: BasePoint) {\r\n            d.x = scaleX.invert(event.sourceEvent?.offsetX);\r\n            d.y = scaleY.invert(event.sourceEvent?.offsetY);\r\n            d3.select(this).attr('cx', scaleX(d.x)).attr('cy', scaleY(d.y));\r\n\r\n            context\r\n              .select(`[data-draggable-id='${seriesIndex}']`)\r\n              .attr('d', path);\r\n\r\n            emit(event, series);\r\n\r\n            if (series?.drag?.extendLine) {\r\n              drawExtendedLine();\r\n            }\r\n          })\r\n        );\r\n\r\n      u.exit().remove();\r\n    }\r\n\r\n    const drawExtendedLine = () => {\r\n      context.selectAll(`[data-extended-id='${seriesIndex}']`).remove();\r\n\r\n      const p1 = points[0];\r\n      const p2 = points[points.length - 1];\r\n\r\n      const distance = Math.sqrt(\r\n        Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p2.y, 2)\r\n      );\r\n\r\n      if (distance <= 0) {\r\n        return;\r\n      }\r\n\r\n      const extendLength = 50;\r\n\r\n      const extendedEndX = p2.x + ((p2.x - p1.x) / distance) * extendLength;\r\n      const extendedEndY = p2.y + ((p2.y - p1.y) / distance) * extendLength;\r\n\r\n      const extendedStartX = p1.x - ((p2.x - p1.x) / distance) * extendLength;\r\n      const extendedStartY = p1.y - ((p2.y - p1.y) / distance) * extendLength;\r\n\r\n      context\r\n        .append('line')\r\n        .attr('class', 'extendedLine')\r\n        .attr('data-extended-id', seriesIndex)\r\n        .attr('stroke', series?.color)\r\n        .attr('stroke-width', series?.strokeWidth)\r\n        .attr('stroke-dasharray', series?.strokeDasharray)\r\n        .attr('x1', scaleX(p1.x))\r\n        .attr('y1', scaleY(p1.y))\r\n        .attr('x2', scaleX(extendedStartX))\r\n        .attr('y2', scaleY(extendedStartY));\r\n\r\n      context\r\n        .append('line')\r\n        .attr('class', 'extendedLine')\r\n        .attr('data-extended-id', seriesIndex)\r\n        .attr('stroke', series?.color)\r\n        .attr('stroke-width', series?.strokeWidth)\r\n        .attr('stroke-dasharray', series?.strokeDasharray)\r\n        .attr('x1', scaleX(p2.x))\r\n        .attr('y1', scaleY(p2.y))\r\n        .attr('x2', scaleX(extendedEndX))\r\n        .attr('y2', scaleY(extendedEndY));\r\n    };\r\n\r\n    if (series?.drag?.extendLine && points?.length) {\r\n      drawExtendedLine();\r\n    }\r\n\r\n    if (markerPoints?.length) {\r\n      const emit = (event: DragEvent, target: BasePoint) => {\r\n        this.dispatch.apply(DispatchType.movePoint, {\r\n          target: series,\r\n          point: {\r\n            ...target,\r\n          },\r\n          event,\r\n        });\r\n      };\r\n\r\n      context\r\n        .selectAll(`draggable-marker-${seriesIndex}`)\r\n        .data(markerPoints)\r\n        .enter()\r\n        .append('circle')\r\n        .attr('class', `draggable-marker-${seriesIndex}`)\r\n        .attr('r', (d) => d.marker?.style?.radius || 5)\r\n        .attr('cx', function (d) {\r\n          return scaleX(d.x);\r\n        })\r\n        .attr('cy', function (d) {\r\n          return scaleY(d.y);\r\n        })\r\n        .style('cursor', 'pointer')\r\n        .style('fill', (d) => d.marker?.style?.color || 'none')\r\n        .attr('stroke', (d) => d.marker?.style?.stroke || 'none')\r\n        .attr('stroke-width', (d) => d.marker?.style?.strokeWidth || 0);\r\n\r\n      context.selectAll(`.draggable-marker-${seriesIndex}`).call(\r\n        d3.drag().on('drag start end', function dragged(event, d: BasePoint) {\r\n          const node = d3.select(this);\r\n\r\n          if (event.type === 'start') {\r\n            node.raise().classed('active', true);\r\n          }\r\n\r\n          if (d.marker?.dragType === DragPointType.x) {\r\n            d.x = scaleX.invert(event.sourceEvent?.offsetX);\r\n            node.attr('cx', scaleX(d.x));\r\n          }\r\n\r\n          if (d.marker?.dragType === DragPointType.y) {\r\n            d.y = scaleY.invert(event.sourceEvent?.offsetY);\r\n            node.attr('cy', scaleY(d.y));\r\n          }\r\n\r\n          context.select(`.series-${seriesIndex}`).attr('d', path);\r\n\r\n          emit(event, d);\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "properties": [
                {
                    "name": "dispatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Dispatch<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "ListFilter",
            "id": "class-ListFilter-9dda62b0b0236451e8b54f937b04b0bc",
            "file": "projects/components/src/component/filter/contarct/list-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\r\nimport {ListFilterType} from '../enum/list-filter-type.enum';\r\n\r\nexport class ListFilter extends FilterBase {\r\n  override value: any[];\r\n  type: ListFilterType;\r\n\r\n  constructor(options?: {\r\n    value?: any[];\r\n    type?: ListFilterType;\r\n    field: string;\r\n    name: string;\r\n  }) {\r\n    super(options);\r\n    if (options) {\r\n      this.value = options.value || this.value;\r\n      this.type = options.type || ListFilterType.None;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-fed91b567a29a985b98f9c5e5929a6c4",
            "file": "projects/components/src/component/message/model/message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport class Message {\r\n  name: string | null | undefined;\r\n  title: string | null | undefined;\r\n  text: string | null | undefined;\r\n  infinite: boolean;\r\n  duration = 10000;\r\n  className: string[] | null | undefined;\r\n  palette = 'primary';\r\n  template: TemplateRef<any>;\r\n\r\n  constructor(options?: {\r\n    name?: string;\r\n    title: string;\r\n    text?: string;\r\n    infinite?: boolean;\r\n    duration?: number;\r\n    palette?: string;\r\n    className?: string[];\r\n    template?: TemplateRef<any>;\r\n  }) {\r\n    if (options) {\r\n      this.name = options.name;\r\n      this.title = options.title;\r\n      this.text = options.text;\r\n      this.infinite = options.infinite || false;\r\n      this.className = options.className;\r\n      if (options.palette) {\r\n        this.palette = options.palette;\r\n      }\r\n      this.template = options.template;\r\n      if (options.duration && options.duration > 0) {\r\n        this.duration = options.duration;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "duration",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "infinite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalInstance",
            "id": "class-ModalInstance-7c44d87b829b2c5841d642c7cfdeaf78",
            "file": "projects/components/src/component/modal/model/modal-instance.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\r\nimport { IModalResult } from './i-modal-result';\r\nimport { ComponentRef } from '@angular/core';\r\nimport { TetaContentRef } from '../../../common/contract/teta-content-ref';\r\nimport { ModalContainerComponent } from '../modal-container/modal-container.component';\r\n\r\nexport class ModalInstance {\r\n  onClose: Observable<IModalResult>;\r\n  private _onClose: Subject<IModalResult> = new Subject<IModalResult>();\r\n\r\n  constructor(\r\n    private _window: ComponentRef<ModalContainerComponent>,\r\n    private _content: TetaContentRef\r\n  ) {\r\n    this.onClose = this._onClose.asObservable();\r\n    if (this._window && this._window.instance) {\r\n      this._window.instance.closeEvent.subscribe((event: IModalResult) => {\r\n        this.close(event);\r\n      });\r\n    }\r\n  }\r\n\r\n  get window(): ComponentRef<ModalContainerComponent> {\r\n    return this._window;\r\n  }\r\n\r\n  get component(): ComponentRef<any> | null {\r\n    return this._content.componentRef ? this._content.componentRef : null;\r\n  }\r\n\r\n  close = (event?: IModalResult) => {\r\n    this._onClose.next(event);\r\n    this._onClose.complete();\r\n    this.destroy();\r\n  };\r\n\r\n  private destroy(): void {\r\n    this._window.destroy();\r\n\r\n    if (this._content && this._content.viewRef) {\r\n      this._content.viewRef.destroy();\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_window",
                        "type": "ComponentRef<ModalContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_content",
                        "type": "TetaContentRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_window",
                        "type": "ComponentRef<ModalContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_content",
                        "type": "TetaContentRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_onClose",
                    "defaultValue": "new Subject<IModalResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IModalResult>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "close",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IModalResult>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "window": {
                    "name": "window",
                    "getSignature": {
                        "name": "window",
                        "type": "",
                        "returnType": "ComponentRef<ModalContainerComponent>",
                        "line": 23
                    }
                },
                "component": {
                    "name": "component",
                    "getSignature": {
                        "name": "component",
                        "type": "",
                        "returnType": "ComponentRef | null",
                        "line": 27
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumericFilter",
            "id": "class-NumericFilter-06542745efba07105ff099e2e759b38f",
            "file": "projects/components/src/component/filter/contarct/numeric-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\r\nimport {NumericFilterValue} from './numeric-filter-value';\r\n\r\nexport class NumericFilter extends FilterBase {\r\n  override value: NumericFilterValue;\r\n  strict: boolean;\r\n\r\n  constructor(options?: {\r\n    value?: NumericFilterValue;\r\n    strict?: boolean;\r\n    field: string;\r\n    name: string;\r\n  }) {\r\n    super(options);\r\n    if (options) {\r\n      this.value = options.value || this.value;\r\n      this.strict = options.strict || false;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilterValue",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumericFilterValue",
            "id": "class-NumericFilterValue-932624118974fe93792b03b87e8f73fc",
            "file": "projects/components/src/component/filter/contarct/numeric-filter-value.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class NumericFilterValue {\r\n  /**\r\n   * Значение должно быть меньше чем\r\n   */\r\n  lessThan: number | null | undefined;\r\n  /**\r\n   * Значение должно быть больше чем\r\n   */\r\n  greaterThan: number | null | undefined;\r\n  /**\r\n   * Значение должно быть равно\r\n   */\r\n  equalsTo: number | null | undefined;\r\n\r\n  constructor(options?: {\r\n    lessThan?: number | null | undefined;\r\n    greaterThan?: number | null | undefined;\r\n    equalsTo?: number | null | undefined;\r\n  }) {\r\n    if (options) {\r\n      this.lessThan = options.lessThan;\r\n      this.greaterThan = options.greaterThan;\r\n      this.equalsTo = options.equalsTo;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "equalsTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть равно</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nЗначение должно быть равно\n"
                },
                {
                    "name": "greaterThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть больше чем</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nЗначение должно быть больше чем\n"
                },
                {
                    "name": "lessThan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null | undefined",
                    "optional": false,
                    "description": "<p>Значение должно быть меньше чем</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nЗначение должно быть меньше чем\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagerState",
            "id": "class-PagerState-8004094717ab51761a85c7f4f9a54b98",
            "file": "projects/components/src/component/pager/model/pager-state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PagerState {\r\n  /**\r\n   * Текущая страница\r\n   */\r\n  page = 0;\r\n\r\n  /**\r\n   * Количество записей на странице\r\n   */\r\n  pageSize = 30;\r\n  /**\r\n   * Количество страниц\r\n   */\r\n  count: number;\r\n  /**\r\n   * Количество записей\r\n   */\r\n  totalCount: number;\r\n  /**\r\n   * первая видимая страница\r\n   */\r\n  start: number;\r\n  /**\r\n   * Последняя видимая страница\r\n   */\r\n  end: number;\r\n  /**\r\n   * Список страниц\r\n   */\r\n  pages: number[];\r\n\r\n  /**\r\n   * Инициализация из анонимного объекта\r\n   */\r\n  constructor(options?: {\r\n    page?: number;\r\n    pageSize?: number;\r\n    count?: number;\r\n    totalCount?: number;\r\n  }) {\r\n    if (options) {\r\n      this.pageSize = options.pageSize || 30;\r\n      this.count = options.count !== null && options.count !== undefined ? options.count : this.count;\r\n      this.totalCount = options.totalCount !== null && options.totalCount !== undefined ? options.totalCount : this.totalCount;\r\n      this.page = options.page !== null && options.page !== undefined ? options.page : 0;\r\n      this.createPages();\r\n    }\r\n  }\r\n\r\n  createPages() {\r\n    if (this.page > this.count) {\r\n      this.page = this.count > 0 ? this.count - 1 : 0;\r\n    }\r\n\r\n    let start = 0;\r\n    let end = this.count - 1;\r\n    if (this.count > 5) {\r\n      start = this.page - 2;\r\n      end = this.page + 2;\r\n      if (start < 0) {\r\n        start = 0;\r\n        end = 4;\r\n      }\r\n      const rightShift = this.count - 1 - end;\r\n      if (rightShift < 0) {\r\n        start = this.count - 5;\r\n        end = this.count - 1;\r\n      }\r\n    }\r\n\r\n    const arr = [];\r\n    for (let i = start; i <= end; i++) {\r\n      arr.push(i);\r\n    }\r\n\r\n    this.start = start;\r\n    this.end = end;\r\n    this.pages = arr;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество страниц</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nКоличество страниц\n"
                },
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Последняя видимая страница</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nПоследняя видимая страница\n"
                },
                {
                    "name": "page",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Текущая страница</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nТекущая страница\n"
                },
                {
                    "name": "pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>Список страниц</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nСписок страниц\n"
                },
                {
                    "name": "pageSize",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество записей на странице</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nКоличество записей на странице\n"
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>первая видимая страница</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nпервая видимая страница\n"
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Количество записей</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nКоличество записей\n"
                }
            ],
            "methods": [
                {
                    "name": "createPages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagerUtil",
            "id": "class-PagerUtil-457c08a44e3156fa788b9f5d1da97bae",
            "file": "projects/components/src/component/pager/util/pager-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {PagerState} from '../model/pager-state';\r\n\r\nexport class PagerUtil {\r\n  static getPage<T>(data: T[], paging: PagerState): T[] {\r\n    return data.slice(paging.page * paging.pageSize, (paging.page + 1) * paging.pageSize);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paging",
                            "type": "PagerState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paging",
                            "type": "PagerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PickerLocaleModel",
            "id": "class-PickerLocaleModel-2c05085936e4d2bf7c6fd33c0a0a7897",
            "file": "projects/components/src/component/date-picker/model/picker-locale-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PickerLocaleModel {\r\n  dayNames: string[];\r\n  dayNamesShort: string[];\r\n  dayNamesMin: string[];\r\n  monthNames: string[];\r\n  monthNamesShort: string[];\r\n  today: string;\r\n\r\n  public constructor(options?: {\r\n    dayNames: string[];\r\n    dayNamesShort: string[];\r\n    dayNamesMin: string[];\r\n    monthNames: string[];\r\n    monthNamesShort: string[];\r\n    today: string;\r\n  }) {\r\n    if (options) {\r\n      this.dayNames = options.dayNames;\r\n      this.dayNamesShort = options.dayNamesShort;\r\n      this.dayNamesMin = options.dayNamesMin;\r\n      this.monthNames = options.monthNames;\r\n      this.monthNamesShort = options.monthNamesShort;\r\n      this.today = options.today;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dayNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "dayNamesMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dayNamesShort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "monthNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "monthNamesShort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PieDrawer",
            "id": "class-PieDrawer-94349455ec2419d3f593671d26591bc4",
            "file": "projects/components/src/component/chart/drawer/pie-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\n\r\nexport class PieDrawer implements IDrawer<BasePoint> {\r\n  draw(\r\n    series: Series<BasePoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any\r\n  ): void {}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "PlotBand",
            "id": "class-PlotBand-32f31555d8bfb26d9944680e20cf2be8",
            "file": "projects/components/src/component/chart/model/plot-band.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PlotBand {\r\n  id: any;\r\n  from: number;\r\n  to: number;\r\n  label?: string;\r\n  color?: string;\r\n  image?: string;\r\n  showGrabbers?: boolean;\r\n  draggable?: boolean;\r\n  resizable?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  opacity?: number;\r\n\r\n  constructor(options?: {\r\n    id: any;\r\n    from: number;\r\n    to: number;\r\n    label?: string;\r\n    color?: string;\r\n    image?: string;\r\n    showGrabbers?: boolean;\r\n    draggable?: boolean;\r\n    resizable?: boolean;\r\n    min?: number;\r\n    max?: number;\r\n    opacity?: number;\r\n  }) {\r\n    this.id = options?.id;\r\n    this.from = options?.from;\r\n    this.to = options?.to;\r\n    this.label = options?.label;\r\n    this.color = options?.color || '#59AE501A';\r\n    this.image = options?.image;\r\n    this.showGrabbers =\r\n      options?.showGrabbers != null ? options.showGrabbers : true;\r\n    this.draggable = options?.draggable != null ? options?.draggable : false;\r\n    this.resizable = options?.resizable != null ? options?.resizable : true;\r\n    this.min = options?.min;\r\n    this.max = options?.max;\r\n    this.opacity = options?.opacity;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "resizable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showGrabbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PlotLine",
            "id": "class-PlotLine-57fdd39f5dbf3d6f2f570596147b38f5",
            "file": "projects/components/src/component/chart/model/plot-line.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PlotLine {\r\n  id: number;\r\n  width?: number;\r\n  value: number;\r\n  label?: string;\r\n  color?: string;\r\n  dashed?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n\r\n  constructor(options?: {\r\n    id: number;\r\n    width?: number;\r\n    value: number;\r\n    label?: string;\r\n    color?: string;\r\n    dashed?: boolean;\r\n    min?: number;\r\n    max?: number;\r\n  }) {\r\n    this.id = options?.id;\r\n    this.width = options?.width || 1;\r\n    this.value = options?.value;\r\n    this.label = options?.label;\r\n    this.dashed = options?.dashed || false;\r\n    this.color = options?.color || 'var(--color-text-70)';\r\n    this.min = options?.min;\r\n    this.max = options?.max;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dashed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PositionUtil",
            "id": "class-PositionUtil-11b241b71c9106e502a4ed20a4cf02d8",
            "file": "projects/components/src/common/util/position-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IRect} from '../contract/i-rect';\r\nimport {Align} from '../enum/align.enum';\r\nimport {VerticalAlign} from '../enum/vertical-align.enum';\r\n\r\nexport class PositionUtil {\r\n  public static getPosition(\r\n    containerPosition: IRect,\r\n    elementPosition: IRect,\r\n    align: Align,\r\n    verticalAlign: VerticalAlign,\r\n    margin: number = 0,\r\n    verticalMargin: number = 0,\r\n    transformedParentRect: IRect = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }\r\n  ): IRect {\r\n    const rect: IRect = {};\r\n    const elementWidth = elementPosition.right - elementPosition.left;\r\n    const elementHeight = elementPosition.bottom - elementPosition.top;\r\n    const containerWidth = containerPosition.right - containerPosition.left;\r\n    const containerHeight = containerPosition.bottom - containerPosition.top;\r\n    if (align === Align.left) {\r\n      rect.left = containerPosition.left + margin;\r\n    }\r\n    if (align === Align.right) {\r\n      rect.left = containerPosition.right - elementWidth - margin;\r\n    }\r\n    if (align === Align.center) {\r\n      rect.left =\r\n        (containerPosition.left + containerPosition.right) / 2 -\r\n        elementWidth / 2;\r\n    }\r\n    if (align === Align.fitWidth) {\r\n      rect.left = containerPosition.left + margin;\r\n      rect.right = window.innerWidth - containerPosition.right + margin;\r\n    }\r\n\r\n    if (align === Align.minWidth) {\r\n      rect.left = containerPosition.left + margin;\r\n      rect.minWidth = containerWidth;\r\n    }\r\n\r\n    if (verticalAlign === VerticalAlign.auto) {\r\n      if (\r\n        containerPosition.bottom +\r\n        (elementPosition.bottom - elementPosition.top) <=\r\n        window.innerHeight\r\n      ) {\r\n        verticalAlign = VerticalAlign.bottom;\r\n      } else {\r\n        verticalAlign = VerticalAlign.top;\r\n      }\r\n    }\r\n    if (verticalAlign === VerticalAlign.top) {\r\n      rect.top = containerPosition.top - elementHeight - verticalMargin;\r\n    }\r\n    if (verticalAlign === VerticalAlign.bottom) {\r\n      rect.top = containerPosition.bottom + verticalMargin;\r\n    }\r\n    if (verticalAlign === VerticalAlign.center) {\r\n      rect.top =\r\n        (containerPosition.top + containerPosition.bottom) / 2 -\r\n        elementHeight / 2;\r\n    }\r\n\r\n    if (rect.left < 0) {\r\n      rect.left = 0;\r\n    }\r\n    if (rect.top + elementHeight > window.innerHeight || rect.bottom < 0) {\r\n      rect.bottom = 0;\r\n    }\r\n    if (rect.top < 0) {\r\n      rect.top = 0;\r\n    }\r\n    if (verticalAlign === VerticalAlign.bottom || verticalAlign === VerticalAlign.center) {\r\n      rect.maxHeight = window.innerHeight - rect.top;\r\n    }\r\n    if (verticalAlign === VerticalAlign.top) {\r\n      rect.maxHeight = containerPosition.top;\r\n    }\r\n    rect.left = rect.left - transformedParentRect.left;\r\n    rect.right = rect.right - transformedParentRect.left;\r\n    rect.top = rect.top - transformedParentRect.top;\r\n    rect.bottom = rect.bottom ? rect.bottom - transformedParentRect.bottom : rect.bottom;\r\n    return rect;\r\n  }\r\n\r\n  public static setElementPosition(element: HTMLElement, rect: IRect): void {\r\n    element.style.left = rect.left != null ? `${rect.left}px` : '';\r\n    element.style.right = rect.right != null ? `${rect.right}px` : '';\r\n    element.style.top = rect.top != null ? `${rect.top}px` : '';\r\n    element.style.bottom = rect.bottom != null ? `${rect.bottom}px` : '';\r\n    element.style.maxHeight =\r\n      rect.maxHeight != null ? `${rect.maxHeight}px` : '';\r\n    element.style.minWidth = rect.minWidth != null ? `${rect.minWidth}px` : '';\r\n  }\r\n\r\n  public static getMaxHeight(position: IRect): number | null {\r\n    let maxHeight = null;\r\n    maxHeight = 1;\r\n    return maxHeight;\r\n  }\r\n\r\n  public static getMaxWidth(position: IRect): number | null {\r\n    let maxWidth = null;\r\n    maxWidth = 1;\r\n    return maxWidth;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getMaxHeight",
                    "args": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMaxWidth",
                    "args": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPosition",
                    "args": [
                        {
                            "name": "containerPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "align",
                            "type": "Align",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "verticalAlign",
                            "type": "VerticalAlign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "verticalMargin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "transformedParentRect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }"
                        }
                    ],
                    "optional": false,
                    "returnType": "IRect",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "containerPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementPosition",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "align",
                            "type": "Align",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verticalAlign",
                            "type": "VerticalAlign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verticalMargin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformedParentRect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setElementPosition",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rect",
                            "type": "IRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScatterDrawer",
            "id": "class-ScatterDrawer-d480e144da6d4bd010f7d2fd86373758",
            "file": "projects/components/src/component/chart/drawer/scatter-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\nimport { ScatterPoint } from '../model/point/scatter-point';\r\nimport { ChartOptions } from '../model/chart-options';\r\n\r\nexport class ScatterDrawer implements IDrawer<ScatterPoint> {\r\n  private _virtualCanvas: any;\r\n  private _colorToData = {};\r\n  private _options: ChartOptions;\r\n  private _context:\r\n    | d3.Selection<SVGElement, unknown, null, undefined>\r\n    | d3.Selection<HTMLCanvasElement, unknown, null, undefined>;\r\n\r\n  draw(\r\n    series: Series<ScatterPoint>,\r\n    context:\r\n      | d3.Selection<SVGElement, unknown, null, undefined>\r\n      | d3.Selection<HTMLCanvasElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any,\r\n    options: ChartOptions\r\n  ): void {\r\n    this._options = options;\r\n\r\n    d3.select(context.node().parentNode as any).select('.virtual-canvas').remove();\r\n\r\n    if (series.renderTo === 'canvas') {\r\n      this._context = context;\r\n\r\n      const height = context.node().clientHeight;\r\n      const width = context.node().clientWidth;\r\n\r\n      const points = series.data;\r\n\r\n      const context2D = (context.node() as HTMLCanvasElement).getContext('2d');\r\n      this._virtualCanvas = d3\r\n        .select(context.node().parentNode as any)\r\n        .append('canvas')\r\n        .attr('class', 'virtual-canvas')\r\n        .style('display', 'none');\r\n\r\n      this._virtualCanvas.attr('width', width).attr('height', height);\r\n      const virtualContext = this._virtualCanvas.node().getContext('2d');\r\n\r\n      context.on('mouseout', () => {\r\n        d3.select(this._context.node().parentNode as any)\r\n          .select('.tooltip-chart')\r\n          .style('display', 'none');\r\n\r\n        context.on('mousemove', null);\r\n      });\r\n\r\n      context.on('mouseenter', () => {\r\n        d3.select(this._context.node().parentNode as any)\r\n          .select('.tooltip-chart')\r\n          .style('display', null);\r\n        context.on('mousemove', (e) => this.handleMouseMove(e));\r\n      });\r\n\r\n      points.forEach((d: any, idx) => {\r\n        const color = this.getColor(idx);\r\n        this._colorToData[color] = d;\r\n        virtualContext.fillStyle = color;\r\n        context2D.fillStyle = d.color;\r\n\r\n        const cx = scaleX(d.x);\r\n        const cy = scaleY(d.y);\r\n\r\n        context2D.beginPath();\r\n        context2D.arc(cx, cy, d.radius, 0, 2 * Math.PI);\r\n        context2D.closePath();\r\n        context2D.fill();\r\n\r\n        virtualContext.beginPath();\r\n        virtualContext.arc(cx, cy, d.radius, 0, 2 * Math.PI);\r\n        virtualContext.closePath();\r\n        virtualContext.fill();\r\n      });\r\n    }\r\n  }\r\n\r\n  private getColor(index) {\r\n    return d3\r\n      .rgb(\r\n        Math.floor(index / 256 / 256) % 256,\r\n        Math.floor(index / 256) % 256,\r\n        index % 256\r\n      )\r\n      .toString();\r\n  }\r\n\r\n  private tooltipPosition(event) {\r\n    const centerX = this._context.node().clientWidth / 2;\r\n    const centerY = this._context.node().clientHeight / 2;\r\n\r\n    const padding = { x: 10, y: 10 };\r\n\r\n    const scene = {\r\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\r\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\r\n      bottom:\r\n        event.pageY > centerY\r\n          ? `${window.innerHeight - event.pageY}px`\r\n          : 'initial',\r\n      right:\r\n        event.pageX > centerX\r\n          ? `${window.innerWidth - event.pageX + padding.x}px`\r\n          : 'initial',\r\n    };\r\n\r\n    return scene;\r\n  }\r\n\r\n  private handleMouseMove(event: MouseEvent) {\r\n    const mouse = d3.pointer(event);\r\n\r\n    const virtualContext = this._virtualCanvas.node().getContext('2d');\r\n\r\n    const image = virtualContext.getImageData(mouse[0], mouse[1], 1, 1);\r\n    const color = d3.rgb.apply(null, image.data).toString();\r\n    const possibleDatum = this._colorToData[color];\r\n\r\n    const { top, right, bottom, left } = this.tooltipPosition(event);\r\n\r\n    if (possibleDatum) {\r\n      const formatted = this._options.tooltip?.format([possibleDatum]);\r\n      d3.select(this._context.node().parentNode as any)\r\n        .select('.tooltip-chart')\r\n        .style('z-index', 3)\r\n        .style('top', top)\r\n        .style('right', right)\r\n        .style('bottom', bottom)\r\n        .style('left', left)\r\n        .html(formatted);\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "_colorToData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_virtualCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<ScatterPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<ScatterPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined> | d3.Selection<HTMLCanvasElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: string; top: string; bottom: string; right: string; }",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "Series",
            "id": "class-Series-cc6bc68921ad0ba9ccc0213bea859f24",
            "file": "projects/components/src/component/chart/model/series.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BasePoint } from './point/base-point';\r\nimport { SeriesType } from './enum/series-type';\r\nimport { IDrawer } from './i-drawer';\r\nimport * as d3 from 'd3';\r\n\r\nexport class Series<T extends BasePoint> {\r\n  id?: number | string;\r\n  renderTo?: 'canvas' | 'svg';\r\n  type: SeriesType;\r\n  curveType?: d3.CurveFactoryLineOnly | d3.CurveFactory;\r\n  data: T[];\r\n  axisFormat?: () => void;\r\n  name?: string;\r\n  xAxisIndex?: number;\r\n  yAxisIndex?: number;\r\n  drawer?: IDrawer<T>;\r\n  strokeWidth?: number;\r\n  strokeDasharray?: string;\r\n  visible?: boolean;\r\n  color?: string;\r\n  colorScale?: d3.ScaleSequential<any, any>;\r\n  drag?: {\r\n    enable?: boolean;\r\n    extendLine?: boolean;\r\n    grabbers?: {\r\n      radius?: number;\r\n      stroke?: string;\r\n      fill?: string;\r\n      strokeWidth?: string;\r\n    };\r\n  };\r\n  extend?: boolean;\r\n  showInLegend?: boolean;\r\n\r\n  constructor(options?: {\r\n    id?: number | string;\r\n    renderTo?: 'canvas' | 'svg';\r\n    type?: SeriesType;\r\n    curveType?: d3.CurveFactoryLineOnly | d3.CurveFactory;\r\n    data?: T[];\r\n    axisFormat?: () => void;\r\n    name?: string;\r\n    xAxisIndex?: number;\r\n    yAxisIndex?: number;\r\n    drawer?: IDrawer<T>;\r\n    strokeWidth?: number;\r\n    strokeDasharray?: string;\r\n    visible?: boolean;\r\n    color?: string;\r\n    colorScale?: d3.ScaleSequential<any, any>;\r\n    drag?: {\r\n      enable?: boolean;\r\n      extendLine?: boolean;\r\n      grabbers?: {\r\n        radius?: number;\r\n        stroke?: string;\r\n        fill?: string;\r\n        strokeWidth?: string;\r\n      };\r\n    };\r\n    extend?: boolean;\r\n    showInLegend?: boolean;\r\n  }) {\r\n    this.id = options?.id;\r\n    this.renderTo = options?.renderTo ?? 'svg';\r\n    this.type = options?.type != null ? options?.type : SeriesType.line;\r\n    this.curveType =\r\n      options?.curveType != null ? options?.curveType : d3.curveLinear;\r\n    this.data = options?.data?.filter((_) => !isNaN(_.x) && !isNaN(_.y));\r\n    this.axisFormat = options?.axisFormat;\r\n    this.name = options?.name;\r\n    this.xAxisIndex = options?.xAxisIndex != null ? options?.xAxisIndex : 0;\r\n    this.yAxisIndex = options?.yAxisIndex != null ? options?.yAxisIndex : 0;\r\n    this.drawer = options?.drawer;\r\n    this.strokeWidth = options?.strokeWidth;\r\n    this.strokeDasharray = options?.strokeDasharray ?? null;\r\n    this.visible = options?.visible || true;\r\n    this.color = options?.color ?? 'cyan';\r\n    this.colorScale = options?.colorScale;\r\n    this.drag = { enable: false, extendLine: false, ...options?.drag };\r\n    this.showInLegend =\r\n      options?.showInLegend != null ? options?.showInLegend : true;\r\n    this.extend = options?.extend != null ? options?.extend : false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "axisFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "colorScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.ScaleSequential<any | any>",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "curveType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.CurveFactoryLineOnly | d3.CurveFactory",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "drag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDrawer<T>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "extend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "renderTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"canvas\" | \"svg\"",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "showInLegend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "strokeDasharray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesType",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "xAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "yAxisIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Series3d",
            "id": "class-Series3d-e467a00aa5cd4e285cd1c9bf144fb2b6",
            "file": "projects/components/src/component/chart-3d/model/series-3d.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base3dPoint } from './base-3d-point';\r\n\r\nexport class Series3d<T extends Base3dPoint> {\r\n  color?: string;\r\n  points: T[];\r\n\r\n  constructor(options?: { color?: string; points: T[] }) {\r\n    this.color = options?.color;\r\n    this.points = options?.points || [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortEvent",
            "id": "class-SortEvent-49bff513a579e0a921b213347668ccf9",
            "file": "projects/components/src/component/table/contract/sort-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from './table-column';\r\n\r\nexport class SortEvent {\r\n  column: TableColumn;\r\n  shiftKey: boolean;\r\n\r\n  constructor(column: TableColumn, shiftKey: boolean) {\r\n    this.column = column;\r\n    this.shiftKey = shiftKey;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shiftKey",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "column",
                        "type": "TableColumn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shiftKey",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "shiftKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortParam",
            "id": "class-SortParam-3d95e152c84e6a96d44436e668bb7044",
            "file": "projects/components/src/component/filter/contarct/sort-param.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SortParam {\r\n  /**\r\n   * Поле сортировки\r\n   */\r\n  field: string;\r\n  /**\r\n   * Направление (true: Asc, false: Desc)\r\n   */\r\n  asc: boolean;\r\n  /**\r\n   * Порядок сортировки\r\n   */\r\n  order: number;\r\n\r\n  /**\r\n   * Инициализация из анонимного объекта\r\n   */\r\n  constructor(options?: {\r\n    field?: string;\r\n    asc?: boolean;\r\n    order?: number;\r\n  }) {\r\n    if (options) {\r\n      this.field = options.field || this.field;\r\n      this.asc = options.asc || false;\r\n      this.order = options.order || this.order;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "asc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Направление (true: Asc, false: Desc)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nНаправление (true: Asc, false: Desc)\n"
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле сортировки</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nПоле сортировки\n"
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядок сортировки</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nПорядок сортировки\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SplineDrawer",
            "id": "class-SplineDrawer-bb3e012f4842403e4bd3dd2e7527d155",
            "file": "projects/components/src/component/chart/drawer/spline-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDrawer } from '../model/i-drawer';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport * as d3 from 'd3';\r\n\r\nexport class SplineDrawer implements IDrawer<BasePoint> {\r\n  draw(\r\n    series: Series<BasePoint>,\r\n    context: d3.Selection<SVGElement, unknown, null, undefined>,\r\n    scaleX: any,\r\n    scaleY: any\r\n  ): void {\r\n    const points = series.data;\r\n\r\n    const path = d3\r\n      .line()\r\n      .curve(d3.curveCatmullRom)\r\n      .defined((d: any) => d.x != null && d.y != null)\r\n      .x((d: any) => scaleX(d.x))\r\n      .y((d: any) => scaleY(d.y));\r\n\r\n    context\r\n      .append('path')\r\n      .attr('transform', `translate(${0}, 0)`)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', series.color)\r\n      .attr('stroke-width', series.strokeWidth ? series.strokeWidth : 1)\r\n      .datum(points)\r\n      .attr('d', path as any)\r\n      .transition()\r\n      .duration(750);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "d3.Selection<SVGElement |  |  | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleX",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scaleY",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDrawer"
            ]
        },
        {
            "name": "StateUtil",
            "id": "class-StateUtil-ab1f2aa6e9ceb9e92b8b375b2dfb20ea",
            "file": "projects/components/src/component/table/util/state-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterState } from '../../filter/contarct/filter-state';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { SortParam } from '../../filter/contarct/sort-param';\r\nimport { FilterType } from '../../filter/enum/filter-type.enum';\r\nimport { SortEvent } from '../contract/sort-event';\r\n\r\nexport class StateUtil {\r\n  static hasSortedColumns(state: FilterState): boolean {\r\n    return state.sortParams && state.sortParams.length > 0;\r\n  }\r\n\r\n  static hasFilteredColumns(state: FilterState): boolean {\r\n    let hasFilters = false;\r\n    if (\r\n      state.stringFilters &&\r\n      state.stringFilters.some((filter) => filter.value && filter.value.length)\r\n    ) {\r\n      hasFilters = true;\r\n    }\r\n    if (\r\n      state.listFilters &&\r\n      state.listFilters.some((filter) => filter.value && filter.value.length)\r\n    ) {\r\n      hasFilters = true;\r\n    }\r\n    if (\r\n      state.numericFilters &&\r\n      state.numericFilters.some(\r\n        (filter) =>\r\n          filter &&\r\n          filter.value &&\r\n          ((filter.value.lessThan !== null &&\r\n            filter.value.lessThan !== undefined) ||\r\n            (filter.value.greaterThan !== null &&\r\n              filter.value.greaterThan !== undefined) ||\r\n            (filter.value.equalsTo !== null &&\r\n              filter.value.equalsTo !== undefined))\r\n      )\r\n    ) {\r\n      hasFilters = true;\r\n    }\r\n    if (\r\n      state.dateFilters &&\r\n      state.dateFilters.some(\r\n        (filter) =>\r\n          filter &&\r\n          filter.value &&\r\n          ((filter.value.lessThan !== null &&\r\n            filter.value.lessThan !== undefined) ||\r\n            (filter.value.greaterThan !== null &&\r\n              filter.value.greaterThan !== undefined))\r\n      )\r\n    ) {\r\n      hasFilters = true;\r\n    }\r\n\r\n    return hasFilters;\r\n  }\r\n\r\n  static getSortState(\r\n    state: FilterState,\r\n    column: TableColumn\r\n  ): SortParam | null {\r\n    if (state?.sortParams && state.sortParams.length) {\r\n      const param = state.sortParams.find((x) => x.field === column.sortField);\r\n      if (param) {\r\n        return param;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static isColumnFiltered(state: FilterState, column: TableColumn): boolean {\r\n    if (!column.filterable) {\r\n      return;\r\n    }\r\n    let filtered = false;\r\n    switch (column.filterType) {\r\n      case FilterType.string:\r\n        if (state?.stringFilters) {\r\n          const filter = state.stringFilters.find(\r\n            (x) => x.field === column.filterField\r\n          );\r\n          if (filter && filter.value && filter.value.length) {\r\n            filtered = true;\r\n          }\r\n        }\r\n        break;\r\n      case FilterType.list:\r\n        if (state?.listFilters) {\r\n          const filter = state.listFilters.find(\r\n            (x) => x.field === column.filterField\r\n          );\r\n          if (filter && filter.value && filter.value.length) {\r\n            filtered = true;\r\n          }\r\n        }\r\n        break;\r\n      case FilterType.number:\r\n        if (state?.numericFilters) {\r\n          const filter = state.numericFilters.find(\r\n            (x) => x.field === column.filterField\r\n          );\r\n          if (\r\n            filter &&\r\n            filter.value &&\r\n            ((filter.value.lessThan !== null &&\r\n              filter.value.lessThan !== undefined) ||\r\n              (filter.value.greaterThan !== null &&\r\n                filter.value.greaterThan !== undefined) ||\r\n              (filter.value.equalsTo !== null &&\r\n                filter.value.equalsTo !== undefined))\r\n          ) {\r\n            filtered = true;\r\n          }\r\n        }\r\n        break;\r\n      case FilterType.date:\r\n        if (state?.dateFilters) {\r\n          const filter = state.dateFilters.find(\r\n            (x) => x.field === column.filterField\r\n          );\r\n          if (\r\n            filter &&\r\n            filter.value &&\r\n            ((filter.value.lessThan !== null &&\r\n              filter.value.lessThan !== undefined) ||\r\n              (filter.value.greaterThan !== null &&\r\n                filter.value.greaterThan !== undefined))\r\n          ) {\r\n            filtered = true;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    return filtered;\r\n  }\r\n\r\n  static sortColumn(sortEvent: SortEvent, state: FilterState): FilterState {\r\n    const column = sortEvent.column;\r\n    const shiftKey = sortEvent.shiftKey;\r\n    const sort = state.sortParams.find(\r\n      (sortParam: SortParam) => sortParam.field === column.sortField\r\n    );\r\n    if (sort === null || sort === undefined) {\r\n      if (!shiftKey) {\r\n        state.sortParams.length = 0;\r\n      }\r\n      state.sortParams.push(\r\n        new SortParam({ field: column.sortField, asc: true, order: 0 })\r\n      );\r\n    } else {\r\n      if (!sort.asc) {\r\n        state.sortParams = StateUtil.clearSortParam(sort, state.sortParams);\r\n      } else {\r\n        sort.asc = !sort.asc;\r\n        if (!shiftKey) {\r\n          state.sortParams = [sort];\r\n        }\r\n      }\r\n    }\r\n    return new FilterState(state);\r\n  }\r\n\r\n  static clearSortParam(sort: SortParam, sortParams: SortParam[]) {\r\n    const index = sortParams.indexOf(sort);\r\n    sortParams.splice(index, 1);\r\n    return sortParams;\r\n  }\r\n\r\n  static clearSort(column: TableColumn, state: FilterState): FilterState {\r\n    state.sortParams = state.sortParams.filter(\r\n      (_) => _.field !== column.sortField\r\n    );\r\n    return new FilterState(state);\r\n  }\r\n\r\n  static clearAllSort(state: FilterState): FilterState {\r\n    state.sortParams = [];\r\n    return new FilterState(state);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clearAllSort",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSortParam",
                    "args": [
                        {
                            "name": "sort",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortParams",
                            "type": "SortParam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortParams",
                            "type": "SortParam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SortParam | null",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFilteredColumns",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasSortedColumns",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isColumnFiltered",
                    "args": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterState",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "sortEvent",
                            "type": "SortEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StringFilter",
            "id": "class-StringFilter-81060ed3e98116fe1764d93186850aa6",
            "file": "projects/components/src/component/filter/contarct/string-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterBase} from '../base/filter-base';\r\nimport {StringFilterType} from '../enum/string-filter-type.enum';\r\n\r\nexport class StringFilter extends FilterBase {\r\n  override value: string;\r\n  type: StringFilterType;\r\n\r\n\r\n  constructor(options?: {\r\n    value?: string;\r\n    type?: StringFilterType;\r\n    field: string;\r\n    name: string;\r\n  }) {\r\n    super(options);\r\n    if (options) {\r\n      this.value = options.value || this.value;\r\n      this.type = options.type || StringFilterType.Contains;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "FilterBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StringUtil",
            "id": "class-StringUtil-19ed8fca619c1a8b2bfbb808f7936304",
            "file": "projects/components/src/util/string-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class StringUtil {\r\n  static firstLetterToLower(input: string) {\r\n    return input.charAt(0).toLocaleLowerCase() + input.slice(1);\r\n  };\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "firstLetterToLower",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SwatchDrawer",
            "id": "class-SwatchDrawer-056d84d6a6602f6ccb0ef30a88cb73d4",
            "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as d3 from 'd3';\r\nimport { SeriesType } from '../model/enum/series-type';\r\nimport { ILegendDrawer, LegendDrawOptions } from '../model/i-drawer-legend';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { BarPoint } from '../model/point/bar-point';\r\n\r\nconst classTypeLegendMapping = new Map<SeriesType, string>()\r\n  .set(SeriesType.line, 'line')\r\n  .set(SeriesType.spline, 'line');\r\n\r\nexport class SwatchDrawer implements ILegendDrawer {\r\n  draw(options: LegendDrawOptions<BasePoint | BarPoint>): void {\r\n    d3.select(options.context.parentElement)\r\n      .select('.legend-container')\r\n      .selectAll('.legend')\r\n      .remove();\r\n\r\n    const defaultData = options.series?.filter(\r\n      (serie) => serie.type !== SeriesType.bar\r\n    );\r\n    const barData = options?.series\r\n      ?.filter((serie) => serie.type === SeriesType.bar)\r\n      .reduce((acc, serie) => {\r\n        const data = serie.data.map((_) => ({\r\n          ..._,\r\n          serieType: serie.type,\r\n          serieIndex: serie.id,\r\n        }));\r\n\r\n        return acc.concat(data);\r\n      }, []);\r\n\r\n    const legendContainer = d3\r\n      .select(options.context.parentElement)\r\n      .select('.legend-container')\r\n      .append('div')\r\n      .attr('class', 'legend padding-bottom-4');\r\n\r\n    const defaultLegend = legendContainer\r\n      .selectAll('div')\r\n      .data(defaultData)\r\n      .enter()\r\n      .append('div')\r\n      .attr('class', 'item')\r\n      .style('user-select', 'none');\r\n\r\n    const barLegend = legendContainer\r\n      .selectAll('.bar')\r\n      .data(barData)\r\n      .enter()\r\n      .append('div')\r\n      .attr('class', 'item bar')\r\n      .style('user-select', 'none');\r\n\r\n    defaultLegend\r\n      .append('div')\r\n      .attr('class', (_) => classTypeLegendMapping.get(_.type) || 'swatch')\r\n      .style('background', (_) =>\r\n        _.visible ? _.color ?? 'black' : 'var(--color-text-10)'\r\n      );\r\n\r\n    defaultLegend\r\n      .append('div')\r\n      .attr('class', 'label')\r\n      .text((_) => _.name ?? 'Без названия')\r\n      .style('text-decoration', (_) => (_.visible ? 'unset' : 'line-through'));\r\n\r\n    barLegend\r\n      .append('div')\r\n      .attr('class', 'swatch')\r\n      .style('background', (_) =>\r\n        _.visible ? _.color ?? 'black' : 'var(--color-text-10)'\r\n      );\r\n\r\n    barLegend\r\n      .append('div')\r\n      .attr('class', 'label')\r\n      .text((_) => _.label ?? 'Без названия')\r\n      .style('text-decoration', (_) => (_.visible ? 'unset' : 'line-through'));\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "draw",
                    "args": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint | BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "LegendDrawOptions<BasePoint | BarPoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILegendDrawer"
            ]
        },
        {
            "name": "TableColumn",
            "id": "class-TableColumn-a0082ed51bf930f49b3da578e0f5222d",
            "file": "projects/components/src/component/table/contract/table-column.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {FilterItem} from '../../filter/contarct/filter-item';\r\nimport {FilterType} from '../../filter/enum/filter-type.enum';\r\nimport {StringFilterType} from '../../filter/enum/string-filter-type.enum';\r\nimport {ListFilterType} from '../../filter/enum/list-filter-type.enum';\r\nimport {TableRow} from './table-row';\r\nimport {AggregationType} from '../enum/aggregation-type.enum';\r\nimport {TemplateRef} from '@angular/core';\r\n\r\nexport class TableColumn extends FilterItem {\r\n  /**\r\n   * Ширина\r\n   */\r\n  width = 150;\r\n  /**\r\n   * Коэффициент растяжения ячейки\r\n   */\r\n  flex = 0;\r\n  /**\r\n   * Стобец закреплен\r\n   */\r\n  locked: boolean;\r\n  /**\r\n   * Название столбца в строке результатов\r\n   */\r\n  override name: string;\r\n  /**\r\n   * Название столбца родителя\r\n   */\r\n  parentName: string;\r\n  /**\r\n   * Название столбца для заголовка таблицы\r\n   */\r\n  override caption: string;\r\n  /**\r\n   * Единицы измерения\r\n   */\r\n  unit: string;\r\n  /**\r\n   * список style классов для шапки таблицы\r\n   */\r\n  headCellClass: string[];\r\n  /**\r\n   * список style классов для ячейки таблицы\r\n   */\r\n  cellClass: string[];\r\n  /**\r\n   * Дополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например\r\n   */\r\n  data: any;\r\n  /**\r\n   * Колонка доступна для редактирования\r\n   */\r\n  editable: boolean;\r\n  /**\r\n   * Компонент для рендера ячейки\r\n   */\r\n  cellComponent: any;\r\n  /**\r\n   * Компонент для рендера заголовка столбца ячейки\r\n   */\r\n  headCellComponent: any;\r\n  /**\r\n   * Custom head dropdown for column\r\n   */\r\n  headDropdownTemplate: TemplateRef<any>;\r\n  /**\r\n   * Группировать по этому столбцу\r\n   */\r\n  groupBy: boolean;\r\n  /**\r\n   * Порядок группировки\r\n   */\r\n  groupingOrder = 0;\r\n  /**\r\n   *\r\n   */\r\n  groupByFn: ((row: TableRow<any>) => string) | undefined;\r\n  /**\r\n   * Дочерние колонки\r\n   */\r\n  override columns: TableColumn[];\r\n\r\n  /**\r\n   * Aggregate type\r\n   */\r\n  aggregate: AggregationType;\r\n\r\n  /**\r\n   * Значение по умолчанию при создании записи\r\n   */\r\n  defaultValue: any;\r\n\r\n  /**\r\n   * Значение по умолчанию при создании записи\r\n   */\r\n  maxValue: number;\r\n\r\n  /**\r\n   * Значение по умолчанию при создании записи\r\n   */\r\n  minValue: number;\r\n\r\n  /**\r\n   * Поле обязательно для заполнения\r\n   */\r\n  required: boolean;\r\n\r\n  /**\r\n   * Инициализация из анонимного объекта\r\n   */\r\n  constructor(options?: {\r\n    width?: number;\r\n    flex?: number;\r\n    sortOrder?: number;\r\n    locked?: boolean;\r\n    name?: string;\r\n    parentName?: string;\r\n    caption?: string;\r\n    hint?: string;\r\n    unit?: string;\r\n    sortable?: boolean;\r\n    sortField?: string;\r\n    filterable?: boolean;\r\n    filterField?: string;\r\n    filterType?: FilterType | null;\r\n    stringFilterType?: StringFilterType;\r\n    listFilterType?: ListFilterType;\r\n    strict?: boolean;\r\n    headCellClass?: string[];\r\n    cellClass?: string[];\r\n    data?: any;\r\n    editable?: boolean;\r\n    objectType?: boolean;\r\n    cellComponent?: any;\r\n    headCellComponent?: any;\r\n    headDropdownTemplate?: TemplateRef<any>;\r\n    filterComponent?: any;\r\n    groupBy?: boolean;\r\n    groupingOrder?: number;\r\n    groupByFn?: (row: TableRow<any>) => string;\r\n    columns?: any[];\r\n    aggregate?: AggregationType;\r\n    defaultValue?: any;\r\n    maxValue?: number;\r\n    minValue?: number;\r\n    required?: boolean;\r\n  }) {\r\n    super(options);\r\n    this.width = options?.width ?? 150;\r\n    this.flex = options?.flex ?? 0;\r\n    this.headCellClass = options?.headCellClass ?? [];\r\n    this.cellClass = options?.cellClass ?? [];\r\n    this.locked = options?.locked ?? false;\r\n    this.parentName = options?.parentName;\r\n    this.unit = options?.unit ?? '';\r\n    this.data = options?.data;\r\n    this.editable = options?.editable ?? true;\r\n    this.groupBy = options?.groupBy ?? false;\r\n    this.groupingOrder = options?.groupingOrder ?? 0;\r\n    this.groupByFn = options?.groupByFn;\r\n    this.headCellComponent = options?.headCellComponent;\r\n    this.headDropdownTemplate = options?.headDropdownTemplate;\r\n    this.cellComponent = options?.cellComponent;\r\n    this.aggregate = options?.aggregate;\r\n    this.defaultValue = options?.defaultValue;\r\n    this.maxValue = options?.maxValue;\r\n    this.minValue = options?.minValue;\r\n    this.required = options?.required;\r\n    this.columns = options?.columns?.map((x) => new TableColumn(x)) ?? [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Инициализация из анонимного объекта</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 106,
                "rawdescription": "\n\nИнициализация из анонимного объекта\n",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AggregationType",
                    "optional": false,
                    "description": "<p>Aggregate type</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nAggregate type\n"
                },
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца для заголовка таблицы</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nНазвание столбца для заголовка таблицы\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "cellClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>список style классов для ячейки таблицы</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nсписок style классов для ячейки таблицы\n"
                },
                {
                    "name": "cellComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера ячейки</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nКомпонент для рендера ячейки\n"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>Дочерние колонки</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nДочерние колонки\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Дополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nДополнительные данные, свободное описание, доступны внутри компонета ячейки, можно прокинуть callback например\n"
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "editable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Колонка доступна для редактирования</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nКолонка доступна для редактирования\n"
                },
                {
                    "name": "flex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Коэффициент растяжения ячейки</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nКоэффициент растяжения ячейки\n"
                },
                {
                    "name": "groupBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Группировать по этому столбцу</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nГруппировать по этому столбцу\n"
                },
                {
                    "name": "groupByFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "groupingOrder",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядок группировки</p>\n",
                    "line": 73,
                    "rawdescription": "\n\nПорядок группировки\n"
                },
                {
                    "name": "headCellClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>список style классов для шапки таблицы</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nсписок style классов для шапки таблицы\n"
                },
                {
                    "name": "headCellComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера заголовка столбца ячейки</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nКомпонент для рендера заголовка столбца ячейки\n"
                },
                {
                    "name": "headDropdownTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Custom head dropdown for column</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nCustom head dropdown for column\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Стобец закреплен</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nСтобец закреплен\n"
                },
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "minValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Значение по умолчанию при создании записи</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nЗначение по умолчанию при создании записи\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца в строке результатов</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nНазвание столбца в строке результатов\n",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "parentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Название столбца родителя</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nНазвание столбца родителя\n"
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Поле обязательно для заполнения</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nПоле обязательно для заполнения\n"
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Единицы измерения</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nЕдиницы измерения\n"
                },
                {
                    "name": "width",
                    "defaultValue": "150",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Ширина</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nШирина\n"
                },
                {
                    "name": "filterable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность фильтровать поле</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nВозможность фильтровать поле\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Компонент для рендера фильтра</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nКомпонент для рендера фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для фильтрации</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nПоле для фильтрации\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "filterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType | null",
                    "optional": false,
                    "description": "<p>Тип фильтра</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nТип фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Подсказка</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nПодсказка\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "listFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Возможность сортировать поле</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nВозможность сортировать поле\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Поле для сортировки</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nПоле для сортировки\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "Number.MAX_VALUE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Порядковый номер</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nПорядковый номер\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Строгое сравнение</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nСтрогое сравнение\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                },
                {
                    "name": "stringFilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilterType",
                    "optional": false,
                    "description": "<p>Тип сравнения строкового фильтра</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nТип сравнения строкового фильтра\n",
                    "inheritance": {
                        "file": "FilterItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FilterItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableColumnStore",
            "id": "class-TableColumnStore-73905a8dedda558072ae7510499bcac4",
            "file": "projects/components/src/component/table/contract/table-column-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TableColumnStore {\r\n  width: number;\r\n  flex: number;\r\n  locked: boolean;\r\n  name: string;\r\n  columns: TableColumnStore[];\r\n\r\n  constructor(options?: {\r\n    width?: number;\r\n    flex?: number;\r\n    sortOrder?: number;\r\n    locked?: boolean;\r\n    name?: string;\r\n    columns?: any[];\r\n  }) {\r\n    if (options) {\r\n      this.width = options?.width;\r\n      this.flex = options?.flex;\r\n      this.locked = options?.locked;\r\n      this.name = options?.name;\r\n      this.columns = options?.columns?.map((x) => new TableColumnStore(x));\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumnStore[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "flex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableContextMenuConfig",
            "id": "class-TableContextMenuConfig-75ceed65a5090b3885be76a72c655bc0",
            "file": "projects/components/src/component/table/contract/table-context-menu-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TableContextMenuConfig {\r\n  contextMenu = true;\r\n  copy = true;\r\n  delete = true;\r\n  add = true;\r\n  paste = true;\r\n\r\n  constructor(options?: {\r\n    contextMenu?: boolean;\r\n    copy?: boolean;\r\n    delete?: boolean;\r\n    add?: boolean;\r\n    paste?: boolean;\r\n  }) {\r\n    if (options) {\r\n      this.contextMenu = options?.contextMenu;\r\n      this.copy = options?.copy;\r\n      this.delete = options?.delete;\r\n      this.add = options?.add;\r\n      this.paste = options?.paste;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "add",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "contextMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "copy",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "delete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "paste",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableRow",
            "id": "class-TableRow-3d24165bb9509bddc03d75df2fd49ae1",
            "file": "projects/components/src/component/table/contract/table-row.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as hash from 'object-hash';\r\n\r\nexport class TableRow<T> {\r\n  set edit(value: boolean) {\r\n    if (value !== this._edit) {\r\n      this._edit = value;\r\n      this._hash = null;\r\n    }\r\n  }\r\n\r\n  get edit(): boolean {\r\n    return this._edit;\r\n  }\r\n\r\n  expanded = false;\r\n  showDetails = false;\r\n  data: T;\r\n  isGroup: boolean;\r\n  level: number;\r\n  path: any[] = [];\r\n  groupColumn: string;\r\n  groupValue: any[] = [];\r\n\r\n  // children: GridRow<T>[] = [];\r\n  // parents: GridRow<T>[];\r\n  // private backup: any = {};\r\n  private _edit = false;\r\n  private _hash: string | null;\r\n\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      this.data = data;\r\n    }\r\n  }\r\n\r\n  public get hash(): string {\r\n    if (!this._hash) {\r\n      const hashObj: any = { ...this.data };\r\n      if (hashObj.children) {\r\n        delete hashObj.children;\r\n      }\r\n      this._hash = hash.sha1(hashObj);\r\n    }\r\n    return this._hash;\r\n  }\r\n\r\n  public editData(items?: any): void {\r\n    this.data = items;\r\n    this._hash = null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_edit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "groupColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "groupValue",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "path",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "editData",
                    "args": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "edit": {
                    "name": "edit",
                    "setSignature": {
                        "name": "edit",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 4,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "edit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 11
                    }
                },
                "hash": {
                    "name": "hash",
                    "getSignature": {
                        "name": "hash",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableUtil",
            "id": "class-TableUtil-828a34f0dc8faf1436a9c106ff0e258f",
            "file": "projects/components/src/component/table/util/table-util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TableColumn} from '../contract/table-column';\r\nimport {ArrayUtil} from '../../../common/util/array-util';\r\nimport {SortParam} from '../../filter/contarct/sort-param';\r\nimport {ListFilterType} from '../../filter/enum/list-filter-type.enum';\r\nimport {ListFilter} from '../../filter/contarct/list-filter';\r\nimport {NumericFilter} from '../../filter/contarct/numeric-filter';\r\nimport {DateFilter} from '../../filter/contarct/date-filter';\r\nimport {StringFilterType} from '../../filter/enum/string-filter-type.enum';\r\nimport {StringFilter} from '../../filter/contarct/string-filter';\r\nimport {FilterState} from '../../filter/contarct/filter-state';\r\n\r\nexport class TableUtil {\r\n  public static getColumnLeaves(column: TableColumn): TableColumn[] | null {\r\n    if (column?.columns?.length > 0) {\r\n      return ArrayUtil.flatten(column.columns, 'columns', true);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static getGridTemplateColumns(columns: TableColumn[]): string {\r\n    const res = columns?.map((column: TableColumn) =>\r\n      column.flex > 0 ? `minmax(${column.width}px, ${column.flex}fr)` : `${column.width}px`).join(' ');\r\n    return res;\r\n  }\r\n\r\n  static getData<T>(data: T[], state: FilterState): T[] {\r\n    let result: T[] = data;\r\n    result = TableUtil.filterData(result, state);\r\n    result = TableUtil.sortData(result, state);\r\n    return result;\r\n  }\r\n\r\n  static sortData<T>(data: T[], state: FilterState): T[] {\r\n    let result: T[] = data;\r\n    const func = (sortParam: SortParam) => {\r\n      result = TableUtil.sort(result, sortParam);\r\n    };\r\n    if (state?.sortParams?.length > 0) {\r\n      state.sortParams.forEach(func);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static filterData<T>(data: T[], state: FilterState): T[] {\r\n    let result: T[] = data;\r\n    if (state?.stringFilters?.length) {\r\n      const stringFilter = (filter: StringFilter) => {\r\n        result = TableUtil.filterString(result, filter);\r\n      };\r\n      state.stringFilters.forEach(stringFilter);\r\n    }\r\n    if (state?.dateFilters?.length) {\r\n      const dateFilter = (filter: DateFilter) => {\r\n        result = TableUtil.filterDate(result, filter);\r\n      };\r\n      state.dateFilters.forEach(dateFilter);\r\n    }\r\n    if (state?.numericFilters?.length) {\r\n      const numericFilter = (filter: NumericFilter) => {\r\n        result = TableUtil.filterNumber(result, filter);\r\n      };\r\n      state.numericFilters.forEach(numericFilter);\r\n    }\r\n    if (state?.listFilters?.length) {\r\n      const listFilter = (filter: ListFilter) => {\r\n        result = TableUtil.filterList(result, filter);\r\n      };\r\n      state.listFilters.forEach(listFilter);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static filterString<T>(data: T[], filter: StringFilter): T[] {\r\n    if (filter.value === null || filter.value === undefined) {\r\n      return data;\r\n    }\r\n    const filterString = (row: T) => {\r\n      const item = row as any;\r\n      if (filter.type === StringFilterType.EndsWith) {\r\n        return item[filter.field].endsWith(filter.value);\r\n      }\r\n      if (filter.type === StringFilterType.Equals) {\r\n        return item[filter.field] === filter.value;\r\n      }\r\n      if (filter.type === StringFilterType.StartsWith) {\r\n        return item[filter.field].startsWith(filter.value);\r\n      }\r\n      return item[filter.field].indexOf(filter.value) >= 0;\r\n    };\r\n    return data.filter(filterString);\r\n  }\r\n\r\n  static filterDate<T>(data: T[], filter: DateFilter): T[] {\r\n    const filterDate = (row: T) => {\r\n      const item = row as any;\r\n      return (filter.value.lessThan === null || filter.value.lessThan === undefined\r\n          ? true\r\n          : filter.value.lessThan.getTime() > item[filter.field].getTime()) &&\r\n        (filter.value.greaterThan === null || filter.value.greaterThan === undefined\r\n          ? true\r\n          : filter.value.greaterThan.getTime() < item[filter.field].getTime());\r\n    };\r\n    return data.filter(filterDate);\r\n  }\r\n\r\n  static filterNumber<T>(data: T[], filter: NumericFilter): T[] {\r\n    const filterNumber = (row: T) => {\r\n      const item = row as any;\r\n      return (filter.value.lessThan === null || filter.value.lessThan === undefined\r\n          ? true\r\n          : filter.value.lessThan > item[filter.field]) &&\r\n        (filter.value.greaterThan === null || filter.value.greaterThan === undefined\r\n          ? true\r\n          : filter.value.greaterThan < item[filter.field]) &&\r\n        (filter.value.equalsTo === null || filter.value.equalsTo === undefined\r\n          ? true\r\n          : filter.value.equalsTo === item[filter.field]);\r\n    };\r\n    return data.filter(filterNumber);\r\n  }\r\n\r\n  static filterList<T>(data: T[], filter: ListFilter): T[] {\r\n    if (filter.value === null || filter.value === undefined || filter.value.length < 1) {\r\n      return data;\r\n    }\r\n    const filterList = (row: T) => {\r\n      const item = row as any;\r\n      if (filter.type === ListFilterType.Excluded) {\r\n        return filter.value.indexOf(item[filter.field]) < 0;\r\n      }\r\n      return filter.value.indexOf(item[filter.field]) >= 0;\r\n    };\r\n    return data.filter(filterList);\r\n  }\r\n\r\n  static sort<T>(data: T[], sortParam: SortParam): T[] {\r\n    const res = data.sort(sortParam.asc ? TableUtil.asc(sortParam.field) : TableUtil.desc(sortParam.field));\r\n    return res;\r\n  }\r\n\r\n  static desc(field: string) {\r\n    const res = (a: any, b: any) => a[field] > b[field] ? -1 : 1;\r\n    return res;\r\n  }\r\n\r\n  static asc(field: string) {\r\n    const res = (a: any, b: any) => a[field] < b[field] ? -1 : 1;\r\n    return res;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "asc",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(a: any, b: any) => 1 | -1",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "desc",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(a: any, b: any) => 1 | -1",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "DateFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "ListFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterNumber",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "NumericFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterString",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "StringFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnLeaves",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortParam",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortParam",
                            "type": "SortParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "FilterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TetaChart",
            "id": "class-TetaChart-bf5e1624a339435f3930b9390871671a",
            "file": "projects/components/src/component/chart/core/chart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport * as d3 from 'd3';\r\nimport { D3ZoomEvent, zoomIdentity, ZoomTransform } from 'd3';\r\nimport * as d3annotation from 'd3-svg-annotation';\r\nimport { Scale } from '../model/enum/scale';\r\nimport { ChartOptions } from '../model/chart-options';\r\nimport { AxisOptions } from '../model/axis-options';\r\nimport { Series } from '../model/series';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { SeriesType } from '../model/enum/series-type';\r\nimport { defaultDrawerMapping } from '../drawer/default-drawer-mapping';\r\nimport { defaultLegendDrawerMapping } from '../legend-drawer/default-drawer-legend-mapping';\r\nimport { LegendType } from '../model/enum/legend-type';\r\nimport { Axis } from './axis-creator';\r\nimport { AxisType } from '../model/enum/axis-type';\r\nimport { PlotLine } from '../model/plot-line';\r\nimport { PlotBand } from '../model/plot-band';\r\nimport { ScaleType } from '../model/enum/scale-type';\r\nimport { ZoomType } from '../model/enum/zoom-type';\r\nimport { IDragEvent } from '../model/i-drag-event';\r\nimport { DispatchType } from '../model/enum/dispatch-type';\r\nimport { IZoomEvent } from '../model/i-zoom-event';\r\n\r\ntype ChartSize = { width: number; height: number };\r\n\r\nexport class TetaChart {\r\n  plotLinesMove: Observable<IDragEvent<PlotLine>>;\r\n  plotBandsMove: Observable<IDragEvent<PlotBand>>;\r\n\r\n  zoom: Observable<IZoomEvent>;\r\n  seriesMove: Observable<IDragEvent<Series<BasePoint>>>;\r\n  pointMove: Observable<IDragEvent<Series<BasePoint>>>;\r\n\r\n  private plotLinesMove$: Subject<IDragEvent<PlotLine>> = new Subject<\r\n    IDragEvent<PlotLine>\r\n  >();\r\n  private plotBandsMove$: Subject<IDragEvent<PlotBand>> = new Subject<\r\n    IDragEvent<PlotBand>\r\n  >();\r\n\r\n  private seriesMove$: Subject<IDragEvent<Series<BasePoint>>> = new Subject<\r\n    IDragEvent<Series<BasePoint>>\r\n  >();\r\n  private pointMove$: Subject<IDragEvent<Series<BasePoint>>> = new Subject<\r\n    IDragEvent<Series<BasePoint>>\r\n  >();\r\n\r\n  private zoom$: Subject<IZoomEvent> = new Subject<IZoomEvent>();\r\n\r\n  private _container: ElementRef = null;\r\n  private _canvas: any;\r\n  private _width = 0;\r\n  private _height = 0;\r\n\r\n  private _zoomYCache: Map<number, ZoomTransform> = new Map<\r\n    number,\r\n    ZoomTransform\r\n  >();\r\n\r\n  private _zoomXCache: Map<number, ZoomTransform> = new Map<\r\n    number,\r\n    ZoomTransform\r\n  >();\r\n\r\n  private _zoom = d3.zoom();\r\n  private _commonZoomTransform: ZoomTransform;\r\n\r\n  private visibleChartWindowWidth = 0;\r\n\r\n  private _options: ChartOptions;\r\n  private _xAxisList: Axis[];\r\n  private _yAxisList: Axis[];\r\n  private _xScales: Map<number, any> = new Map<number, any>();\r\n  private _yScales: Map<number, any> = new Map<number, any>();\r\n\r\n  private _clonedX = new Map<number, any>();\r\n  private _clonedY = new Map<number, any>();\r\n\r\n  private _chart: d3.Selection<any, unknown, null, undefined>;\r\n\r\n  private offsetOpposite = 0;\r\n  private offsetNonOpposite = 0;\r\n\r\n  private uniqId: string;\r\n  private _zoomAdded = false;\r\n\r\n  constructor(options: ChartOptions, element: ElementRef) {\r\n    this._options = options;\r\n    this.selectNode(element);\r\n    this.createTooltip();\r\n\r\n    this.plotLinesMove = this.plotLinesMove$.asObservable();\r\n    this.plotBandsMove = this.plotBandsMove$.asObservable();\r\n    this.seriesMove = this.seriesMove$.asObservable();\r\n    this.pointMove = this.pointMove$.asObservable();\r\n    this.zoom = this.zoom$.asObservable();\r\n  }\r\n\r\n  public redraw(options?: ChartOptions) {\r\n    if (options) {\r\n      this._options = options;\r\n    }\r\n\r\n    this.createAxis();\r\n    this.createScales();\r\n    this.createMarkers();\r\n    this.createVisibleWindow();\r\n    this._redraw();\r\n    this.drawLegend();\r\n\r\n    if (this._commonZoomTransform) {\r\n      this._chart.call(this._zoom.transform, this._commonZoomTransform);\r\n    }\r\n\r\n    if (!this._zoomAdded) {\r\n      this.addZoom();\r\n      this._zoomAdded = true;\r\n    }\r\n\r\n    this.addAxesZoom();\r\n  }\r\n\r\n  public setZoom(zoom: IZoomEvent) {\r\n    if (!this._zoom) {\r\n      return;\r\n    }\r\n    this._chart.call(this._zoom.transform, zoom?.zoomTransform ?? zoomIdentity);\r\n  }\r\n\r\n  public setSize(size: ChartSize = { width: 0, height: 0 }) {\r\n    this._height = size.height;\r\n    this._width = size.width;\r\n\r\n    this._chart.attr('width', this._width).attr('height', this._height);\r\n    this._canvas.attr('width', this._width).attr('height', this._height);\r\n\r\n    const extent = [\r\n      [\r\n        this.offsetNonOpposite\r\n          ? this.offsetNonOpposite\r\n          : this._options.bounds.left,\r\n        this._options.bounds.top,\r\n      ],\r\n      [\r\n        this._width -\r\n          (this.offsetOpposite\r\n            ? this.offsetOpposite\r\n            : this._options.bounds.right),\r\n        this._height - this._options.bounds.bottom,\r\n      ],\r\n    ] as any;\r\n\r\n    this._zoom\r\n      .scaleExtent([1, Infinity])\r\n      .translateExtent(extent)\r\n      .extent(extent);\r\n  }\r\n\r\n  private createVisibleWindow() {\r\n    this.uniqId = (Date.now() + Math.random()).toString(36);\r\n\r\n    this._chart.selectAll('defs').remove();\r\n\r\n    this._chart\r\n      .append('defs')\r\n      .append('clipPath')\r\n      .attr('id', `draw-window-${this.uniqId}`)\r\n      .append('rect')\r\n      .attr(\r\n        'x',\r\n        this.offsetNonOpposite === 0\r\n          ? this._options.bounds.left\r\n          : this.offsetNonOpposite\r\n      )\r\n      .attr('y', this._options.bounds.top)\r\n      .attr('width', this.visibleChartWindowWidth + 1)\r\n      .attr(\r\n        'height',\r\n        this._height -\r\n          this._options.bounds.bottom -\r\n          this._options.bounds.top +\r\n          1 >\r\n          0\r\n          ? this._height -\r\n              this._options.bounds.bottom -\r\n              this._options.bounds.top +\r\n              1\r\n          : 0\r\n      );\r\n  }\r\n\r\n  private createAxis() {\r\n    this._xAxisList = this._options.xAxis.map(\r\n      (_, index) =>\r\n        new Axis({\r\n          type: AxisType.abscissa,\r\n          index,\r\n          chartOptions: this._options,\r\n        })\r\n    );\r\n\r\n    this._yAxisList = this._options.yAxis.map((_, index) => {\r\n      const axis = new Axis({\r\n        type: AxisType.ordinatus,\r\n        index,\r\n        chartOptions: this._options,\r\n        height: this._height,\r\n      });\r\n      return axis;\r\n    });\r\n\r\n    const nonTitleOffset = 6;\r\n\r\n    this.offsetNonOpposite = d3.reduce(\r\n      this._yAxisList.filter(\r\n        (_) => _.options?.opposite !== true && _.options?.visible\r\n      ),\r\n      (sum, axis) => {\r\n        const offset =\r\n          sum +\r\n          axis.width +\r\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\r\n        axis.setOffset(offset);\r\n        return offset;\r\n      },\r\n      0\r\n    );\r\n\r\n    this.offsetOpposite = d3.reduce(\r\n      this._yAxisList.filter(\r\n        (_) => _.options?.opposite === true && _.options?.visible\r\n      ),\r\n      (sum, axis) => {\r\n        const offset =\r\n          sum +\r\n          axis.width +\r\n          (axis?.options?.title ? Axis.offsetFactor : nonTitleOffset);\r\n        axis.setOffset(offset);\r\n        return offset;\r\n      },\r\n      0\r\n    );\r\n\r\n    this.visibleChartWindowWidth = this.caluclateChartWidth();\r\n  }\r\n\r\n  private _redraw() {\r\n    this.drawPlotBands();\r\n    this.drawPlotLines();\r\n\r\n    this.drawChart();\r\n    this.drawAxis();\r\n    this.drawGridLines();\r\n\r\n    this.drawAnnotations();\r\n  }\r\n\r\n  private addZoom() {\r\n    if (this._options?.zoom?.enable) {\r\n      const hasXZoom = [ZoomType.x, ZoomType.xy].includes(\r\n        this._options.zoom.zoomType\r\n      );\r\n      const hasYZoom = [ZoomType.y, ZoomType.xy].includes(\r\n        this._options.zoom.zoomType\r\n      );\r\n\r\n      this._chart.call(\r\n        this._zoom.on('start end zoom', (event) => {\r\n          if (hasXZoom) {\r\n            for (const [key, value] of this._clonedX.entries()) {\r\n              const rescaled = event.transform.rescaleX(value);\r\n              this._xScales.set(key, rescaled);\r\n\r\n              if (event.sourceEvent) {\r\n                this.zoom$.next({\r\n                  domain: rescaled.domain(),\r\n                  zoomTransform: event.transform,\r\n                  zoomType: ZoomType.x,\r\n                  event,\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          if (hasYZoom) {\r\n            for (const [key, value] of this._clonedY.entries()) {\r\n              const rescaled = event.transform.rescaleY(value);\r\n              this._yScales.set(key, rescaled);\r\n\r\n              if (event.type === 'zoom') {\r\n                if (event.sourceEvent) {\r\n                  this.zoom$.next({\r\n                    domain: rescaled.domain(),\r\n                    zoomTransform: event.transform,\r\n                    zoomType: ZoomType.y,\r\n                    event,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (event.type === 'end') {\r\n            this._commonZoomTransform = event.transform;\r\n          }\r\n\r\n          this._redraw();\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private addAxesZoom() {\r\n    this._chart.selectAll('.zoom-behavior').remove();\r\n\r\n    [...this._yAxisList, ...this._xAxisList]\r\n      .filter((axis) => axis.options.visible && axis.options.zoom)\r\n      .forEach((axis) => {\r\n        const foundNode = this._chart\r\n          .select(\r\n            `[data-${axis.type === AxisType.abscissa ? 'x' : 'y'}-scale-id='${\r\n              axis.index\r\n            }']`\r\n          )\r\n          .node() as any;\r\n\r\n        if (!foundNode) {\r\n          return;\r\n        }\r\n\r\n        const bBox = foundNode.getBBox();\r\n\r\n        const translateX =\r\n          axis.type === AxisType.abscissa\r\n            ? this.offsetNonOpposite\r\n              ? this.offsetNonOpposite\r\n              : this._options.bounds.left + this.offsetNonOpposite\r\n            : axis.options.opposite\r\n            ? this._width - axis.offset\r\n            : axis.offset - bBox.width;\r\n\r\n        const zoom = d3\r\n          .zoom()\r\n          .scaleExtent([1, Infinity])\r\n          .on('zoom end', (event: D3ZoomEvent<any, any>) => {\r\n            if (axis.type === AxisType.abscissa) {\r\n              const scale = this._clonedX.get(axis.index);\r\n              this._xScales.set(axis.index, event.transform.rescaleX(scale));\r\n            } else {\r\n              const scale = this._clonedY.get(axis.index);\r\n              this._yScales.set(axis.index, event.transform.rescaleY(scale));\r\n            }\r\n\r\n            if (event.type === 'end') {\r\n              if (axis.type === AxisType.ordinatus) {\r\n                this._zoomYCache.set(axis.index, event.transform);\r\n              }\r\n\r\n              if (axis.type === AxisType.abscissa) {\r\n                this._zoomXCache.set(axis.index, event.transform);\r\n                this._chart.call(this._zoom.transform, event.transform);\r\n              }\r\n            }\r\n\r\n            this._redraw();\r\n          });\r\n\r\n        const restoredTransform: ZoomTransform =\r\n          axis.type === AxisType.ordinatus\r\n            ? this._zoomYCache.get(axis.index)\r\n            : this._zoomXCache.get(axis.index);\r\n\r\n        this._chart\r\n          .append('rect')\r\n          .attr('class', 'zoom-behavior')\r\n          .attr('height', bBox.height)\r\n          .attr('width', bBox.width)\r\n          .attr(\r\n            'transform',\r\n            `translate(${translateX}, ${\r\n              axis.type === AxisType.abscissa\r\n                ? this._height - this._options.bounds.bottom\r\n                : this._options.bounds.top\r\n            })`\r\n          )\r\n          .style('opacity', '0')\r\n          .style('pointer-events', 'all')\r\n          .call(zoom.transform, restoredTransform ?? d3.zoomIdentity)\r\n          .call(zoom);\r\n      });\r\n  }\r\n\r\n  private selectNode(element: ElementRef) {\r\n    this._container = element;\r\n\r\n    d3.select(element.nativeElement).selectAll('.tooltip-chart').remove();\r\n\r\n    d3.select(element.nativeElement).selectAll('svg').remove();\r\n    d3.select(element.nativeElement).selectAll('canvas').remove();\r\n\r\n    this._chart = d3\r\n      .select(element.nativeElement)\r\n      .append('svg')\r\n      .attr('position', 'relative')\r\n      .style('z-index', 0);\r\n\r\n    this._canvas = d3\r\n      .select(element.nativeElement)\r\n      .append('canvas')\r\n      .attr('class', 'main-canvas')\r\n      .style('transform', 'translate(35, 0)')\r\n      .style('position', 'absolute')\r\n      .style('z-index', 1);\r\n  }\r\n\r\n  private drawAnnotations() {\r\n    this._chart.selectAll('.annotations').remove();\r\n\r\n    const annotations = this._options.annotations?.map((annotation) => {\r\n      const x = this._xScales.get(annotation.xAxisIndex);\r\n      const y = this._yScales.get(annotation.yAxisIndex);\r\n\r\n      return {\r\n        note: annotation.note,\r\n        connector: annotation.connector,\r\n        x: x(annotation.point?.x),\r\n        y: y(annotation.point?.y),\r\n        dx: annotation.dx,\r\n        dy: annotation.dy,\r\n        type: annotation.type,\r\n        className: annotation.className,\r\n      };\r\n    });\r\n\r\n    const makeAnnotations = d3annotation\r\n      .annotation()\r\n      .annotations(annotations ?? []);\r\n\r\n    this._chart\r\n      .append('g')\r\n      .attr('class', 'annotations')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`)\r\n      .call(makeAnnotations as any)\r\n      .lower();\r\n  }\r\n\r\n  private drawPlotLines() {\r\n    this._chart.selectAll('.plotlines').remove();\r\n\r\n    const plotlineGroup = this._chart\r\n      .append('g')\r\n      .attr('class', 'plotlines')\r\n      .style('shape-rendering', 'crispEdges')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    this._xAxisList\r\n      .filter((_) => _.options.plotLines.length > 0)\r\n      .forEach((axis) => {\r\n        const [min, max] = axis.extent;\r\n        const x = this._xScales.get(axis.index);\r\n\r\n        const plotlinesPoints = axis.options.plotLines;\r\n\r\n        const getTextCenterPointPx = (d: PlotLine, idx: number) =>\r\n          x(\r\n            (d?.value +\r\n              (plotlinesPoints[idx - 1]\r\n                ? plotlinesPoints[idx - 1]?.value\r\n                : 0)) /\r\n              2\r\n          );\r\n\r\n        const opacity = (d: PlotLine, idx: number) => {\r\n          const displayWidth = 20;\r\n\r\n          const width =\r\n            x(d?.value) -\r\n            x(plotlinesPoints[idx - 1] ? plotlinesPoints[idx - 1]?.value : 0);\r\n          return width <= displayWidth ? 0 : 1;\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.label')\r\n          .data(plotlinesPoints)\r\n          .join('text')\r\n          .attr('class', 'label font-body-3 fill-text-70')\r\n          .attr('x', getTextCenterPointPx)\r\n          .attr('y', (d) => this._height / 2)\r\n          .attr('text-anchor', 'middle')\r\n          .attr('dominant-baseline', 'central')\r\n          .attr(\r\n            'transform',\r\n            (d, idx) =>\r\n              `rotate(-90, ${getTextCenterPointPx(d, idx)}, ${\r\n                this._height / 2\r\n              })`\r\n          )\r\n          .text((d) => d?.label ?? '')\r\n          .style('opacity', opacity);\r\n\r\n        plotlineGroup\r\n          .selectAll('.plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'plotline')\r\n          .attr('data-plotline-id', (d) => d.id)\r\n          .attr('x1', (d) => x(d.value))\r\n          .attr('x2', (d) => x(d.value))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', (d) => d.width)\r\n          .style('stroke', (d) => d.color)\r\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\r\n\r\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\r\n          this.plotLinesMove$.next({ event, target: plotLine });\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.drag-plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'drag-plotline')\r\n          .attr('x1', (d) => x(d.value))\r\n          .attr('x2', (d) => x(d.value))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event, d: PlotLine) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedPlotLine = d3\r\n                  .select(group)\r\n                  .select(`[data-plotline-id='${d.id}']`);\r\n\r\n                d.value = x.invert(event.x);\r\n\r\n                const minValue = d.min ?? min;\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderLeftReached = d.value <= minValue;\r\n                const borderRightReached = d.value >= maxValue;\r\n\r\n                if (borderLeftReached) {\r\n                  d.value = minValue;\r\n                }\r\n\r\n                if (borderRightReached) {\r\n                  d.value = maxValue;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.value)).attr('x2', x(d.value));\r\n\r\n                draggedPlotLine.attr('x1', x(d.value)).attr('x2', x(d.value));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotLine) => {\r\n                emit(event, d);\r\n              }) as any\r\n          );\r\n      });\r\n\r\n    this._yAxisList\r\n      .filter((_) => _.options.plotLines.length > 0)\r\n      .forEach((axis) => {\r\n        const [min, max] = axis.extent;\r\n        const y = this._yScales.get(axis.index);\r\n\r\n        const plotlinesPoints = axis.options.plotLines;\r\n\r\n        plotlineGroup\r\n          .selectAll('.plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'plotline')\r\n          .attr('data-plotline-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.value))\r\n          .attr('y2', (d) => y(d.value))\r\n          .attr('x1', 0)\r\n          .attr(\r\n            'x2',\r\n            this._width - this._options.bounds.left - this._options.bounds.right\r\n          )\r\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\r\n          .style('stroke-width', (d) => d.width)\r\n          .style('stroke', (d) => d.color)\r\n          .style('stroke-dasharray', (d) => (d.dashed ? '8, 8' : '0, 0'));\r\n\r\n        const emit = (event: DragEvent, plotLine: PlotLine) => {\r\n          this.plotLinesMove$.next({ event, target: plotLine });\r\n        };\r\n\r\n        plotlineGroup\r\n          .selectAll('.drag-plotline')\r\n          .data(plotlinesPoints)\r\n          .join('line')\r\n          .attr('class', 'drag-plotline')\r\n          .attr('y1', (d) => y(d.value))\r\n          .attr('y2', (d) => y(d.value))\r\n          .attr('x1', 0)\r\n          .attr(\r\n            'x2',\r\n            this._width - this._options.bounds.left - this._options.bounds.right\r\n          )\r\n          .attr('transform', `translate(${this._options.bounds.left}, 0)`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'row-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event, d: PlotLine) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedPlotLine = d3\r\n                  .select(group)\r\n                  .select(`[data-plotline-id='${d.id}']`);\r\n\r\n                d.value = y.invert(event.y);\r\n\r\n                const minValue = d.min ?? min;\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderTopReached = d.value <= minValue;\r\n                const borderBottomReached = d.value >= maxValue;\r\n\r\n                if (borderTopReached) {\r\n                  d.value = minValue;\r\n                }\r\n\r\n                if (borderBottomReached) {\r\n                  d.value = maxValue;\r\n                }\r\n\r\n                d3.select(this).attr('y1', y(d.value)).attr('y2', y(d.value));\r\n\r\n                draggedPlotLine.attr('y1', y(d.value)).attr('y2', y(d.value));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotLine) => {\r\n                emit(event, d);\r\n              }) as any\r\n          );\r\n      });\r\n  }\r\n\r\n  private drawPlotBands() {\r\n    this._chart.selectAll('.plotbands').remove();\r\n\r\n    const plotBandGroup = this._chart\r\n      .append('g')\r\n      .attr('class', 'plotbands')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    this._xAxisList\r\n      .filter((_) => _.options.plotBands.length > 0)\r\n      .forEach((axis) => {\r\n        const x = this._xScales.get(axis.index);\r\n\r\n        const [min, max] = axis.extent;\r\n\r\n        const plotband = plotBandGroup\r\n          .append('g')\r\n          .style('shape-rendering', 'crispEdges');\r\n\r\n        const plotBandHeight =\r\n          this._height - this._options.bounds.top - this._options.bounds.bottom;\r\n\r\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\r\n          this.plotBandsMove$.next({\r\n            event,\r\n            target: plotBand,\r\n          });\r\n        };\r\n\r\n        plotband\r\n          .selectAll('rect')\r\n          .data(axis.options.plotBands)\r\n          .on('start', (_) => {\r\n            this._chart.selectAll('.marker').style('display', 'none');\r\n            d3.select(this._container.nativeElement)\r\n              .select('.tooltip-chart')\r\n              .style('display', 'none');\r\n          })\r\n          .join('rect')\r\n          .attr('data-plotband-id', (d) => d.id)\r\n          .attr('x', (d) => x(d.from))\r\n          .attr('y', 0)\r\n          .attr('width', (d) => Math.abs(x(d.to) - x(d.from)))\r\n          .attr('fill', (d) => {\r\n            if (d.image) {\r\n              return `url(#${d.image})`;\r\n            }\r\n            return d.color;\r\n          })\r\n          .style('opacity', (d) => d.opacity ?? 1)\r\n          .attr('height', plotBandHeight > 0 ? plotBandHeight : 0)\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`);\r\n\r\n        plotband\r\n          .selectAll('.line-left')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('data-line-left-id', (d) => d.id)\r\n          .attr('class', 'line-left')\r\n          .attr('x1', (d) => x(d.from))\r\n          .attr('x2', (d) => x(d.from))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-left')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('x1', (d) => x(d.from))\r\n          .attr('x2', (d) => x(d.from))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .style('display', (d) => (d?.resizable ? 'unset' : 'none'))\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event: DragEvent, d: PlotBand) {\r\n                const group = d3.select(this).node().parentElement;\r\n                const draggedBand = d3\r\n                  .select(group)\r\n                  .select(`[data-plotband-id='${d.id}']`);\r\n\r\n                const draggedLine = d3\r\n                  .select(group)\r\n                  .select(`[data-line-left-id='${d.id}']`);\r\n\r\n                d.from = x.invert(event.x);\r\n\r\n                const minValue = d.min ?? min;\r\n\r\n                const borderReached = d.from <= minValue;\r\n\r\n                if (borderReached) {\r\n                  d.from = minValue;\r\n                }\r\n\r\n                if (d.from >= d.to) {\r\n                  d.from = d.to;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.from)).attr('x2', x(d.from));\r\n\r\n                draggedBand\r\n                  .attr('x', x(d.from))\r\n                  .attr('width', x(d.to) - x(d.from));\r\n\r\n                draggedLine.attr('x1', x(d.from)).attr('x2', x(d.from));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotBand) =>\r\n                emit(event, d)\r\n              ) as any\r\n          );\r\n\r\n        plotband\r\n          .selectAll('.line-right')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('data-line-right-id', (d) => d.id)\r\n          .attr('class', 'line-right')\r\n          .attr('x1', (d) => x(d.to))\r\n          .attr('x2', (d) => x(d.to))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-right')\r\n          .data(axis.options.plotBands)\r\n          .join('line')\r\n          .attr('class', 'drag-right')\r\n          .style('display', (d) => (d?.resizable ? 'unset' : 'none'))\r\n          .attr('x1', (d) => x(d.to))\r\n          .attr('x2', (d) => x(d.to))\r\n          .attr('y1', 0)\r\n          .attr(\r\n            'y2',\r\n            this._height -\r\n              this._options.bounds.top -\r\n              this._options.bounds.bottom\r\n          )\r\n          .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', 'col-resize')\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on('drag', function (event: DragEvent, d: PlotBand) {\r\n                const group = d3.select(this).node().parentElement;\r\n\r\n                const draggedBand = d3\r\n                  .select(group)\r\n                  .select(`[data-plotband-id='${d.id}']`);\r\n\r\n                const draggedLine = d3\r\n                  .select(group)\r\n                  .select(`[data-line-right-id='${d.id}']`);\r\n\r\n                d.to = x.invert(event.x);\r\n\r\n                const maxValue = d.max ?? max;\r\n\r\n                const borderReached = d.to >= maxValue;\r\n\r\n                if (borderReached) {\r\n                  d.to = maxValue;\r\n                }\r\n\r\n                if (d.to <= d.from) {\r\n                  d.to = d.from;\r\n                }\r\n\r\n                d3.select(this).attr('x1', x(d.to)).attr('x2', x(d.to));\r\n                draggedBand.attr('width', x(d.to) - x(d.from));\r\n                draggedLine.attr('x1', x(d.to)).attr('x2', x(d.to));\r\n\r\n                emit(event, d);\r\n              })\r\n              .on('end', (event: DragEvent, d: PlotBand) =>\r\n                emit(event, d)\r\n              ) as any\r\n          );\r\n      });\r\n\r\n    this._yAxisList\r\n      .filter((_) => _.options.plotBands.length > 0)\r\n      .forEach((axis) => {\r\n        const y = this._yScales.get(axis.index);\r\n\r\n        const [min, max] = axis.extent;\r\n\r\n        const plotband = plotBandGroup\r\n          .append('g')\r\n          .style('shape-rendering', 'crispEdges');\r\n\r\n        const plotBandWidth =\r\n          this._width - this._options.bounds.left - this._options.bounds.right; // TODO add multiaxis support width\r\n\r\n        const emit = (event: DragEvent, plotBand: PlotBand) => {\r\n          this.plotBandsMove$.next({\r\n            event,\r\n            target: plotBand,\r\n          });\r\n        };\r\n\r\n        const dragPlotband = d3\r\n          .drag()\r\n          .subject(function () {\r\n            const element = d3.select(this);\r\n            return { y: element.attr('y') };\r\n          })\r\n          .on('start drag end', function (event: any, d: PlotBand) {\r\n            const element = d3.select(this);\r\n\r\n            const height = parseFloat(element.attr('height'));\r\n\r\n            d.to = y.invert(event.y + height);\r\n            d.from = y.invert(event.y);\r\n\r\n            const minValue = d.min ?? min;\r\n            const maxValue = d.max ?? max;\r\n\r\n            const borderReachedMin = d.from <= minValue;\r\n            const borderReachedMax = d.to >= maxValue;\r\n\r\n            if (borderReachedMin) {\r\n              d.to = y.invert(y(minValue) + height);\r\n              d.from = minValue;\r\n            }\r\n\r\n            if (borderReachedMax) {\r\n              d.to = maxValue;\r\n              d.from = y.invert(y(maxValue) - height);\r\n            }\r\n\r\n            element.attr('y', y(d.from));\r\n\r\n            const group = element.node().parentElement;\r\n\r\n            d3.select(group)\r\n              .select(`[data-line-left-id='${d.id}']`)\r\n              .attr('y1', y(d.from))\r\n              .attr('y2', y(d.from));\r\n\r\n            d3.select(group)\r\n              .select(`[data-grab-left-id='${d.id}']`)\r\n              .attr('y1', y(d.from))\r\n              .attr('y2', y(d.from));\r\n\r\n            d3.select(group)\r\n              .select(`[data-line-right-id='${d.id}']`)\r\n              .attr('y1', y(d.to))\r\n              .attr('y2', y(d.to));\r\n\r\n            d3.select(group)\r\n              .select(`[data-grab-right-id='${d.id}']`)\r\n              .attr('y1', y(d.to))\r\n              .attr('y2', y(d.to));\r\n\r\n            emit(event, d);\r\n          }) as any;\r\n\r\n        const leftGrabDrag = d3\r\n          .drag()\r\n          .on('drag', function (event: DragEvent, d: PlotBand) {\r\n            const group = d3.select(this).node().parentElement;\r\n            const draggedBand = d3\r\n              .select(group)\r\n              .select(`[data-plotband-id='${d.id}']`);\r\n\r\n            const draggedLine = d3\r\n              .select(group)\r\n              .select(`[data-line-left-id='${d.id}']`);\r\n\r\n            d.from = y.invert(event.y);\r\n\r\n            const minValue = d.min ?? min;\r\n\r\n            const borderReached = d.from <= minValue;\r\n\r\n            if (borderReached) {\r\n              d.from = minValue;\r\n            }\r\n\r\n            if (d.from >= d.to) {\r\n              d.from = d.to;\r\n            }\r\n\r\n            d3.select(this).attr('y1', y(d.from)).attr('y2', y(d.from));\r\n\r\n            draggedBand\r\n              .attr('y', y(d.from))\r\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\r\n            draggedLine.attr('y1', y(d.from)).attr('y2', y(d.from));\r\n\r\n            emit(event, d);\r\n          })\r\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\r\n\r\n        const rightGrabDrag = d3\r\n          .drag()\r\n          .on('drag', function (event: DragEvent, d: PlotBand) {\r\n            const group = d3.select(this).node().parentElement;\r\n\r\n            const draggedBand = d3\r\n              .select(group)\r\n              .select(`[data-plotband-id='${d.id}']`);\r\n\r\n            const draggedLine = d3\r\n              .select(group)\r\n              .select(`[data-line-right-id='${d.id}']`);\r\n\r\n            d.to = y.invert(event.y);\r\n\r\n            const maxValue = d.max ?? max;\r\n\r\n            const borderReached = d.to >= maxValue;\r\n\r\n            if (borderReached) {\r\n              d.to = maxValue;\r\n            }\r\n\r\n            if (d.to <= d.from) {\r\n              d.to = d.from;\r\n            }\r\n\r\n            d3.select(this).attr('y1', y(d.to)).attr('y2', y(d.to));\r\n\r\n            draggedBand\r\n              .attr('y', y(d.from))\r\n              .attr('height', Math.abs(y(d.to) - y(d.from)));\r\n            draggedLine.attr('y1', y(d.to)).attr('y2', y(d.to));\r\n\r\n            emit(event, d);\r\n          })\r\n          .on('end', (event: DragEvent, d: PlotBand) => emit(event, d)) as any;\r\n\r\n        plotband\r\n          .selectAll('rect')\r\n          .data(axis.options.plotBands)\r\n          .join('rect')\r\n          .attr('data-plotband-id', (d) => d.id)\r\n          .attr('x', 0)\r\n          .attr('y', (d) => y(d.from))\r\n          .attr('width', (d) => plotBandWidth)\r\n          .attr('fill', (d) => {\r\n            if (d.image) {\r\n              return `url(#${d.image})`;\r\n            }\r\n            return d.color;\r\n          })\r\n          .style('opacity', (d) => d.opacity ?? 1)\r\n          .attr('height', (d) => Math.abs(y(d.to) - y(d.from)))\r\n          .attr('cursor', (d) => (d.draggable ? 'move' : 'default'));\r\n\r\n        plotband\r\n          .selectAll('.line-left')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-line-left-id', (d) => d.id)\r\n          .attr('class', 'line-left')\r\n          .attr('y1', (d) => y(d.from))\r\n          .attr('y2', (d) => y(d.from))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-left')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-grab-left-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.from))\r\n          .attr('y2', (d) => y(d.from))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\r\n\r\n        plotband\r\n          .selectAll('.line-right')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('data-line-right-id', (d) => d.id)\r\n          .attr('class', 'line-right')\r\n          .attr('y1', (d) => y(d.to))\r\n          .attr('y2', (d) => y(d.to))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 1)\r\n          .style('stroke-dasharray', '8, 8')\r\n          .style('stroke', 'var(--color-text-90)')\r\n          .style('opacity', (d) => (d.showGrabbers ? 1 : 0));\r\n\r\n        plotband\r\n          .selectAll('.drag-right')\r\n          .data(axis.options.plotBands.filter((d) => d.resizable))\r\n          .join('line')\r\n          .attr('class', 'drag-right')\r\n          .attr('data-grab-right-id', (d) => d.id)\r\n          .attr('y1', (d) => y(d.to))\r\n          .attr('y2', (d) => y(d.to))\r\n          .attr('x1', 0)\r\n          .attr('x2', plotBandWidth)\r\n          .style('stroke-width', 8)\r\n          .style('stroke', 'rgba(0, 0, 0, 0)')\r\n          .style('cursor', (d) => (d.resizable ? 'row-resize' : 'default'));\r\n\r\n        axis.options.plotBands.forEach((_) => {\r\n          if (_.draggable) {\r\n            plotband.select(`[data-plotband-id='${_.id}']`).call(dragPlotband);\r\n          }\r\n\r\n          if (_.resizable) {\r\n            plotband.select(`[data-grab-left-id='${_.id}']`).call(leftGrabDrag);\r\n            plotband\r\n              .select(`[data-grab-right-id='${_.id}']`)\r\n              .call(rightGrabDrag);\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  private drawChart() {\r\n    const series = this._options.series?.filter((_) => _.visible);\r\n\r\n    this._chart.selectAll('.series').remove();\r\n\r\n    if (!series || series.length < 1) {\r\n      d3.select(this._container.nativeElement)\r\n        .select('canvas')\r\n        .style('display', 'none');\r\n    }\r\n\r\n    const group = this._chart\r\n      .append('g')\r\n      .attr('class', 'series')\r\n      .attr('clip-path', `url(#draw-window-${this.uniqId})`);\r\n\r\n    series?.forEach((seriesItem: Series<BasePoint>, index) => {\r\n      if (seriesItem.renderTo === 'canvas') {\r\n        d3.select(this._container.nativeElement)\r\n          .select('canvas')\r\n          .style('display', null);\r\n\r\n        d3.select(this._container.nativeElement)\r\n          .select('svg')\r\n          .style('position', 'absolute');\r\n      } else {\r\n        d3.select(this._container.nativeElement)\r\n          .select('canvas')\r\n          .style('display', 'none');\r\n      }\r\n      if (\r\n        !this._xScales.has(seriesItem.xAxisIndex) ||\r\n        !this._yScales.has(seriesItem.yAxisIndex)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const foundX = this._xScales.get(seriesItem.xAxisIndex);\r\n      const foundY = this._yScales.get(seriesItem.yAxisIndex);\r\n\r\n      const drawer =\r\n        seriesItem.drawer != null\r\n          ? seriesItem.drawer\r\n          : defaultDrawerMapping.get(seriesItem.type);\r\n\r\n      if (!drawer) {\r\n        throw new Error(\r\n          `No drawer for series ${seriesItem.name}, type ${\r\n            SeriesType[seriesItem.type]\r\n          }`\r\n        );\r\n      }\r\n\r\n      if (seriesItem.renderTo === 'canvas') {\r\n        const context = this._canvas.node().getContext('2d');\r\n        context.clearRect(0, 0, this._width, this._height);\r\n      }\r\n\r\n      let [xMin, xMax] = foundX.domain();\r\n      let [yMin, yMax] = foundY.domain();\r\n\r\n      xMin = xMin instanceof Date ? xMin.getTime() : xMin;\r\n      xMax = xMax instanceof Date ? xMax.getTime() : xMax;\r\n\r\n      yMin = yMin instanceof Date ? yMin.getTime() : yMin;\r\n      yMax = yMax instanceof Date ? yMax.getTime() : yMax;\r\n\r\n      const visiblePoints = (\r\n        point: BasePoint,\r\n        idx: number,\r\n        arr: Array<BasePoint>\r\n      ) =>\r\n        (point.x <= xMax ||\r\n          point.x1 <= xMax ||\r\n          (arr[idx - 1] && arr[idx - 1].x <= xMax) ||\r\n          (arr[idx - 1] && arr[idx - 1].x1 <= xMax)) &&\r\n        (point.x >= xMin ||\r\n          point.x1 >= xMin ||\r\n          (arr[idx + 1] && arr[idx + 1].x >= xMin) ||\r\n          (arr[idx + 1] && arr[idx + 1].x1 >= xMin)) &&\r\n        (point.y <= yMax ||\r\n          point.y1 <= yMax ||\r\n          (arr[idx - 1] && arr[idx - 1].y <= yMax) ||\r\n          (arr[idx - 1] && arr[idx - 1].y1 <= yMax)) &&\r\n        (point.y >= yMin ||\r\n          point.y1 >= yMin ||\r\n          (arr[idx + 1] && arr[idx + 1].y >= yMin) ||\r\n          (arr[idx + 1] && arr[idx + 1].y1 >= yMin));\r\n\r\n      const filteredData = seriesItem.data; //.filter(visiblePoints);\r\n\r\n      const serie = {\r\n        ...seriesItem,\r\n        data: filteredData,\r\n      };\r\n\r\n      drawer.draw(\r\n        serie,\r\n        seriesItem.renderTo === 'canvas' ? this._canvas : group,\r\n        foundX,\r\n        foundY,\r\n        this._options\r\n      );\r\n\r\n      const emit = (event: IDragEvent<Series<BasePoint>>) => {\r\n        this.seriesMove$.next(event);\r\n      };\r\n\r\n      const emitPoint = (event: IDragEvent<Series<BasePoint>>) => {\r\n        this.pointMove$.next(event);\r\n      };\r\n\r\n      drawer?.dispatch?.on(DispatchType.moveLine, function () {\r\n        emit(this);\r\n      });\r\n\r\n      drawer?.dispatch?.on(DispatchType.movePoint, function () {\r\n        emitPoint(this);\r\n      });\r\n    });\r\n  }\r\n\r\n  private createTooltip() {\r\n    d3.select(this._container.nativeElement)\r\n      .append('div')\r\n      .attr('class', 'tooltip-chart color-text-90 bg-background-50 shadow-2')\r\n      .style('position', 'fixed')\r\n      .style('top', 'unset')\r\n      .style('right', 'unset')\r\n      .style('bottom', 'unset')\r\n      .style('left', 'unset')\r\n      .style('pointer-events', 'none')\r\n      .style('display', 'none');\r\n  }\r\n\r\n  private handleMouseMove(options) {\r\n    const mouse = d3.pointer(options.event);\r\n    const { top, right, bottom, left } = this.tooltipPosition(options.event);\r\n\r\n    const tooltipsData = [];\r\n\r\n    this._chart\r\n      .select('.marker-line')\r\n      .attr('transform', `translate(${0}, ${mouse[1] - 2})`);\r\n\r\n    this._chart\r\n      .selectAll('.marker')\r\n      .attr('transform', (d: Series<BasePoint>) => {\r\n        if (!d.data.length) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          !this._xScales.has(d.xAxisIndex) ||\r\n          !this._yScales.has(d.yAxisIndex)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        const foundX = this._xScales.get(d.xAxisIndex);\r\n        const foundY = this._yScales.get(d.yAxisIndex);\r\n\r\n        if (this._options.tooltip.tracking === 'x') {\r\n          const [min, max] = foundX.domain();\r\n          const filteredData = d.data.filter(\r\n            (point) => point.x <= max && point.x >= min\r\n          );\r\n\r\n          const sorted = [...filteredData].sort((a, b) =>\r\n            d3.ascending(a.x, b.x)\r\n          );\r\n\r\n          const bisect = d3.bisector((dd: any) => dd.x).left;\r\n          const x0 = foundX.invert(mouse[0]);\r\n\r\n          const index = bisect(sorted, x0);\r\n\r\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\r\n\r\n          tooltipsData.push({\r\n            point: data,\r\n            color: d.color,\r\n            name: d.name,\r\n          });\r\n\r\n          return `translate(${\r\n            !isNaN(data?.x) && data?.x != null ? foundX(data.x) : -10\r\n          }, ${!isNaN(data?.y) && data?.y != null ? foundY(data.y) : -10})`;\r\n        }\r\n\r\n        if (this._options.tooltip.tracking === 'y') {\r\n          const sorted = [...d.data].sort((a, b) => d3.ascending(a.y, b.y));\r\n          const bisect = d3.bisector((dd: any) => dd.y).left;\r\n          const y0 = foundY.invert(mouse[1]);\r\n\r\n          const index = bisect(sorted, y0, 0);\r\n\r\n          const data = sorted[index] ? sorted[index] : sorted[index - 1];\r\n\r\n          tooltipsData.push({\r\n            point: data,\r\n            color: d.color,\r\n            name: d.name,\r\n          });\r\n\r\n          return `translate(${\r\n            !isNaN(data?.x) && data?.x != null ? foundX(data.x) : -10\r\n          }, ${!isNaN(data?.y) && data?.y != null ? foundY(data.y) : -10})`;\r\n        }\r\n      });\r\n\r\n    if (this._options.tooltip?.format) {\r\n      const formatted = this._options.tooltip?.format(tooltipsData);\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('top', top)\r\n        .style('right', right)\r\n        .style('bottom', bottom)\r\n        .style('left', left)\r\n        .html(formatted);\r\n    }\r\n  }\r\n\r\n  private tooltipPosition(event) {\r\n    const centerX = this._width / 2;\r\n    const centerY = this._height / 2;\r\n\r\n    const padding = { x: 10, y: 10 };\r\n\r\n    const scene = {\r\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\r\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\r\n      bottom:\r\n        event.pageY > centerY\r\n          ? `${window.innerHeight - event.pageY}px`\r\n          : 'initial',\r\n      right:\r\n        event.pageX > centerX\r\n          ? `${window.innerWidth - event.pageX + padding.x}px`\r\n          : 'initial',\r\n    };\r\n\r\n    return scene;\r\n  }\r\n\r\n  private createMarkers() {\r\n    if (this._options.tooltip === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (!this._options.tooltip.enable) {\r\n      return;\r\n    }\r\n\r\n    this._chart.selectAll('.marker').remove();\r\n    this._chart.select('.marker-line').remove();\r\n\r\n    this._chart\r\n      .append('line')\r\n      .attr('class', 'marker-line')\r\n      .attr('x1', 35)\r\n      .attr('x2', this._width)\r\n      .style('stroke-width', 0.5)\r\n      .style('stroke', 'var(--color-text-40)')\r\n      .style('display', 'none');\r\n\r\n    const { series } = this._options;\r\n\r\n    if (!series) {\r\n      return;\r\n    }\r\n\r\n    const markers = this._chart\r\n      .selectAll()\r\n      .data(series.filter((_) => _.visible));\r\n\r\n    markers\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'marker')\r\n      .attr('pointer-events', 'none')\r\n      .attr('r', 3)\r\n      .attr('fill', (_, i) => _.color)\r\n      .style('display', 'none');\r\n\r\n    const mouseoutEvent = () => {\r\n      this._chart.selectAll('.marker').style('display', 'none');\r\n      this._chart.select('.marker-line').style('display', 'none');\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('display', 'none');\r\n    };\r\n\r\n    const mouseMoveEvent = (event) => {\r\n      const options = {\r\n        event,\r\n        series,\r\n      };\r\n\r\n      this.handleMouseMove(options);\r\n    };\r\n\r\n    const mouseOverEvent = () => {\r\n      if (this._options.tooltip.showMarkers) {\r\n        this._chart\r\n          .selectAll('.marker')\r\n          .style('display', (d: Series<BasePoint>) => {\r\n            if (d.data.length) {\r\n              return null;\r\n            }\r\n            return 'none';\r\n          });\r\n      }\r\n\r\n      if (this._options.tooltip.showLine) {\r\n        this._chart.select('.marker-line').style('display', null);\r\n      }\r\n\r\n      d3.select(this._container.nativeElement)\r\n        .select('.tooltip-chart')\r\n        .style('display', null);\r\n    };\r\n\r\n    this._chart\r\n      .on('mouseover', mouseOverEvent)\r\n      .on('mousemove', mouseMoveEvent)\r\n      .on('mouseleave', mouseoutEvent);\r\n  }\r\n\r\n  private drawLegend() {\r\n    if (this._options.legend?.visible === false) {\r\n      return;\r\n    }\r\n\r\n    this._chart.selectAll('.legend').remove();\r\n\r\n    const drawer = this._options.legend?.type\r\n      ? defaultLegendDrawerMapping.get(this._options.legend.type)\r\n      : defaultLegendDrawerMapping.get(LegendType.swatches);\r\n\r\n    const context = this._container.nativeElement as HTMLElement;\r\n\r\n    if (!drawer) {\r\n      throw new Error(\r\n        `No drawer for legend\r\n        }`\r\n      );\r\n    }\r\n\r\n    drawer.draw({\r\n      context,\r\n      series: this._options.series.filter((_) => _.showInLegend),\r\n      width: this._width,\r\n      height: this._height,\r\n    });\r\n  }\r\n\r\n  private caluclateChartWidth() {\r\n    let width = -this._width;\r\n\r\n    if (this.offsetOpposite > 0) {\r\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\r\n    }\r\n\r\n    if (this.offsetNonOpposite > 0) {\r\n      width =\r\n        -this._width + this._options.bounds.right + this.offsetNonOpposite;\r\n    }\r\n\r\n    if (\r\n      this.offsetOpposite >= Axis.offsetFactor &&\r\n      this.offsetNonOpposite === 0\r\n    ) {\r\n      width = -this._width + this.offsetOpposite + this._options.bounds.left;\r\n    }\r\n\r\n    if (this.offsetOpposite > 0 && this.offsetNonOpposite > 0) {\r\n      width = -this._width + this.offsetOpposite + this.offsetNonOpposite;\r\n    }\r\n\r\n    return Math.abs(width);\r\n  }\r\n\r\n  private drawGridLines() {\r\n    if (this._options.gridLines === false) {\r\n      return;\r\n    }\r\n\r\n    const translateX =\r\n      this.offsetNonOpposite > 0\r\n        ? this.offsetNonOpposite\r\n        : this._options.bounds.left + this.offsetNonOpposite;\r\n\r\n    this._chart.selectAll('.grid').remove();\r\n\r\n    const yList = this._yAxisList.filter(\r\n      (_) => _.options.visible && !_.options.opposite\r\n    );\r\n\r\n    const y: any =\r\n      yList?.length > 0\r\n        ? this._yScales.get(yList[yList.length - 1].index)\r\n        : this._yScales.get(0);\r\n\r\n    const x = this._xScales.get(0);\r\n\r\n    if (!y || !x) {\r\n      return;\r\n    }\r\n\r\n    const TICK_HEIGHT = 40;\r\n    const TICK_WIDTH = 60;\r\n\r\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\r\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\r\n\r\n    const gridY = this._chart\r\n      .append('g')\r\n      .attr('class', 'grid color-text-10')\r\n      .style('shape-rendering', 'crispEdges');\r\n\r\n    const gridlinesY = d3\r\n      .axisLeft(y)\r\n      .tickFormat('' as any)\r\n      .tickSize(-this.visibleChartWindowWidth);\r\n\r\n    const hasBarSeriesType = this._options.series.some(\r\n      (_) => _.type === SeriesType.bar\r\n    );\r\n\r\n    if (!hasBarSeriesType) {\r\n      const gridX = this._chart\r\n        .append('g')\r\n        .attr('class', 'grid color-text-10')\r\n        .style('shape-rendering', 'crispEdges');\r\n\r\n      const gridlinesX = d3\r\n        .axisBottom(x)\r\n        .ticks(tickCountX)\r\n        .tickFormat('' as any)\r\n        .tickSize(\r\n          this._height - this._options.bounds.bottom - this._options.bounds.top\r\n        );\r\n\r\n      gridX\r\n        .call(gridlinesX)\r\n        .attr('transform', `translate(0, ${this._options.bounds.top})`)\r\n        .lower();\r\n    }\r\n\r\n    gridY\r\n      .call(gridlinesY)\r\n      .attr('transform', `translate(${translateX}, ${0})`)\r\n      .lower();\r\n\r\n    this._chart.selectAll('.grid path').remove();\r\n  }\r\n\r\n  private createScales() {\r\n    this._xScales.clear();\r\n    this._yScales.clear();\r\n\r\n    const defaultScaleMapping: Map<ScaleType, any> = new Map<ScaleType, any>()\r\n      .set(ScaleType.linear, d3.scaleLinear)\r\n      .set(ScaleType.log, d3.scaleLog)\r\n      .set(ScaleType.sqrt, d3.scaleSqrt)\r\n      .set(ScaleType.pow, d3.scalePow);\r\n\r\n    const xRange = [\r\n      this.offsetNonOpposite\r\n        ? this.offsetNonOpposite\r\n        : this._options.bounds.left,\r\n      this._width -\r\n        (this.offsetOpposite\r\n          ? this.offsetOpposite\r\n          : this._options.bounds.right),\r\n    ];\r\n\r\n    const yRange = [\r\n      this._height - this._options.bounds.bottom,\r\n      this._options.bounds.top,\r\n    ];\r\n\r\n    this._xAxisList.forEach((axis, index) => {\r\n      let scale = null;\r\n\r\n      if (axis.options.type === Scale.time) {\r\n        scale = d3\r\n          .scaleTime()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\r\n      }\r\n\r\n      if (axis.options.type === Scale.number) {\r\n        scale = defaultScaleMapping\r\n          .get(axis.options.scaleOptions.type)()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...xRange].reverse() : xRange);\r\n      }\r\n\r\n      if (axis.options.niceTicks) {\r\n        scale.nice();\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.log) {\r\n        scale.base(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\r\n        scale.exponent(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      this._xScales.set(index, scale);\r\n    });\r\n\r\n    this._yAxisList.forEach((axis, index) => {\r\n      let scale = null;\r\n\r\n      if (axis.options.type === Scale.number) {\r\n        scale = defaultScaleMapping\r\n          .get(axis.options.scaleOptions.type)()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\r\n      }\r\n\r\n      if (axis.options.type === Scale.time) {\r\n        scale = d3\r\n          .scaleTime()\r\n          .domain(axis.extent)\r\n          .range(axis.options.inverted ? [...yRange].reverse() : yRange);\r\n      }\r\n\r\n      if (axis.options.niceTicks) {\r\n        scale.nice();\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.log) {\r\n        scale.base(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      if (axis.options.scaleOptions.type === ScaleType.pow) {\r\n        scale.exponent(axis.options.scaleOptions.base);\r\n      }\r\n\r\n      this._yScales.set(index, scale);\r\n    });\r\n\r\n    for (const [key, value] of this._yScales) {\r\n      this._clonedY.set(key, value.copy());\r\n    }\r\n\r\n    for (const [key, value] of this._xScales) {\r\n      this._clonedX.set(key, value.copy());\r\n    }\r\n  }\r\n\r\n  private drawAxis() {\r\n    const hasVisibleAxis = [...this._xAxisList, ...this._yAxisList].filter(\r\n      (axis) => axis.options.visible\r\n    );\r\n\r\n    if (!hasVisibleAxis) {\r\n      return;\r\n    }\r\n\r\n    const negative = false;\r\n\r\n    this._chart.selectAll('.axes').remove();\r\n\r\n    const axes = this._chart\r\n      .append('g')\r\n      .attr('class', 'axes')\r\n      .style('shape-rendering', 'crispEdges');\r\n\r\n    const TICK_HEIGHT = 40;\r\n    const TICK_WIDTH = 60;\r\n\r\n    const tickCount = Math.round(this._height / TICK_HEIGHT);\r\n    const tickCountX = Math.round(this._width / TICK_WIDTH);\r\n\r\n    this._xAxisList.forEach((axis) => {\r\n      const options: AxisOptions = axis.options;\r\n\r\n      const translate = `translate(${0}, ${\r\n        this._height - this._options.bounds.bottom\r\n      })`;\r\n\r\n      const x = this._xScales.get(axis.index);\r\n\r\n      const xAxis = d3.axisBottom(x).ticks(tickCountX);\r\n\r\n      if (axis.options?.tickFormat) {\r\n        xAxis.tickFormat(axis.options.tickFormat);\r\n      }\r\n\r\n      if (options.visible !== false) {\r\n        const translateX = this.offsetNonOpposite\r\n          ? this.offsetNonOpposite\r\n          : this._options.bounds.left + this.offsetNonOpposite;\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'x-axis-label')\r\n          .append('text')\r\n          .style('fill', 'var(--color-text-50)')\r\n          .attr(\r\n            'transform',\r\n            'translate(' +\r\n              this._width / 2 +\r\n              ' ,' +\r\n              (this._height - this._options.bounds.bottom) +\r\n              ')'\r\n          )\r\n          .style('text-anchor', 'middle')\r\n          .attr('dy', '3em')\r\n          .text(options.title ?? '');\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'x-axis font-caption')\r\n          .attr('data-x-scale-id', axis.index)\r\n          .attr('transform', translate)\r\n          .style('pointer-events', 'none')\r\n          .call(xAxis)\r\n          .call((_) => {\r\n            _.select('.domain').remove();\r\n            _.selectAll('.tick').attr('class', 'color-text-50');\r\n\r\n            if (negative) {\r\n              _.append('line')\r\n                .attr('y1', 0)\r\n                .attr('y2', this._height)\r\n                .attr('transform', `translate(${x(0)}, -${this._height})`)\r\n                .style('stroke-width', 0.5)\r\n                .style('stroke', 'var(--color-text-50)');\r\n            }\r\n\r\n            _.append('line')\r\n              .attr('x1', 0)\r\n              .attr('x2', this.visibleChartWindowWidth)\r\n              .attr('transform', `translate(${translateX}, ${0})`)\r\n              .style('stroke-width', 0.5)\r\n              .style('stroke', 'var(--color-text-50)');\r\n          });\r\n      }\r\n    });\r\n\r\n    this._yAxisList.forEach((axis) => {\r\n      const translate = axis.options.opposite\r\n        ? `translate(${this._width - axis.offset}, ${0})`\r\n        : `translate(${axis.offset}, ${0})`;\r\n\r\n      const y = this._yScales.get(axis.index);\r\n\r\n      const yAxis = axis.options.opposite ? d3.axisRight(y) : d3.axisLeft(y);\r\n\r\n      if (axis.options.visible !== false) {\r\n        const labelOffset = axis.options.opposite\r\n          ? this._width - axis.offset + axis.width\r\n          : axis.offset - axis.width;\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'y-axis-label')\r\n          .append('text')\r\n          .style('fill', 'var(--color-text-50)')\r\n          .attr('transform', 'rotate(-90)')\r\n          .attr('y', labelOffset)\r\n          .attr('x', 0 - this._height / 2)\r\n          .attr('dy', axis.options.opposite ? '12px' : '-3px')\r\n          .style('text-anchor', 'middle')\r\n          .text(axis.options.title ?? '');\r\n\r\n        axes\r\n          .append('g')\r\n          .attr('class', 'y-axis font-caption')\r\n          .attr('data-y-scale-id', axis.index)\r\n          .attr('transform', translate)\r\n          .call(yAxis)\r\n          .style('pointer-events', 'none')\r\n          .call((_) => {\r\n            _.select('.domain').remove();\r\n            _.selectAll('.tick').attr('class', 'color-text-50');\r\n\r\n            if (!negative) {\r\n              _.append('line')\r\n                .attr('y1', 0)\r\n                .attr(\r\n                  'y2',\r\n                  this._height -\r\n                    this._options.bounds.top -\r\n                    this._options.bounds.bottom\r\n                )\r\n                .attr(\r\n                  'transform',\r\n                  `translate(${0}, ${this._options.bounds.top})`\r\n                )\r\n                .style('stroke-width', 0.5)\r\n                .style('stroke', 'var(--color-text-50)');\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ChartOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ChartOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_canvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.Selection<any |  |  | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_clonedX",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_clonedY",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_commonZoomTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ZoomTransform",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_container",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_height",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_width",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_xAxisList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Axis[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_xScales",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | any>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_yAxisList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Axis[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_yScales",
                    "defaultValue": "new Map<number, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | any>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoom",
                    "defaultValue": "d3.zoom()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomAdded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomXCache",
                    "defaultValue": "new Map<\r\n    number,\r\n    ZoomTransform\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ZoomTransform>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoomYCache",
                    "defaultValue": "new Map<\r\n    number,\r\n    ZoomTransform\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ZoomTransform>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetNonOpposite",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "offsetOpposite",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "plotBandsMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<PlotBand>>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "plotBandsMove$",
                    "defaultValue": "new Subject<\r\n    IDragEvent<PlotBand>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<PlotBand>>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "plotLinesMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<PlotLine>>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "plotLinesMove$",
                    "defaultValue": "new Subject<\r\n    IDragEvent<PlotLine>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<PlotLine>>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pointMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "pointMove$",
                    "defaultValue": "new Subject<\r\n    IDragEvent<Series<BasePoint>>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "seriesMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "seriesMove$",
                    "defaultValue": "new Subject<\r\n    IDragEvent<Series<BasePoint>>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IDragEvent<Series<BasePoint>>>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "uniqId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "visibleChartWindowWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IZoomEvent>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "zoom$",
                    "defaultValue": "new Subject<IZoomEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IZoomEvent>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_redraw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addAxesZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "caluclateChartWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 1483,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createScales",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1584,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createVisibleWindow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawAnnotations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 417,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1682,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawGridLines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1509,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawPlotBands",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawPlotLines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 448,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redraw",
                    "args": [
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "element",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 394,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "ChartSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ width: 0, height: 0 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "ChartSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ width: 0, height: 0 }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setZoom",
                    "args": [
                        {
                            "name": "zoom",
                            "type": "IZoomEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "zoom",
                            "type": "IZoomEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: string; top: string; bottom: string; right: string; }",
                    "typeParameters": [],
                    "line": 1348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TetaContentRef",
            "id": "class-TetaContentRef-91379935651975d30974067543104e11",
            "file": "projects/components/src/common/contract/teta-content-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ComponentRef, ViewRef} from '@angular/core';\r\n\r\nexport class TetaContentRef {\r\n  constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) {\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodes",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewRef",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TooltipOptions",
            "id": "class-TooltipOptions-90bb13a0463bdfa757eca3ea6d7c4c0c",
            "file": "projects/components/src/component/chart/model/tooltip-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TooltipOptions {\r\n  enable?: boolean;\r\n  showMarkers?: boolean;\r\n  showLine?: boolean;\r\n  tracking?: 'x' | 'y' | 'both';\r\n  format?: (data: any) => any;\r\n\r\n  constructor(options?: {\r\n    enable?: boolean;\r\n    showMarkers?: boolean;\r\n    showLine?: boolean;\r\n    tracking?: 'x' | 'y' | 'both';\r\n    format?: (data: any) => any;\r\n  }) {\r\n    const defaultFormatter = (tooltips) => {\r\n      let html = '';\r\n\r\n      tooltips\r\n        .filter((_) => _.point)\r\n        .forEach((_) => {\r\n          html += `<div>${_.name ?? 'Без названия'} x: ${_.point?.x?.toFixed(\r\n            2\r\n          )} y: ${_.point?.y?.toFixed(2)}</div>`;\r\n        });\r\n\r\n      return html;\r\n    };\r\n\r\n    this.enable = options?.enable ?? true;\r\n    this.showMarkers = options?.showMarkers ?? true;\r\n    this.showLine = options?.showLine ?? false;\r\n    this.tracking = options?.tracking ?? 'x';\r\n    this.format = options?.format ?? defaultFormatter;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "showLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "showMarkers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tracking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"x\" | \"y\" | \"both\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AccordionContentDirective",
            "id": "directive-AccordionContentDirective-c8d8527d9fe803b464fefa3a50356294",
            "file": "projects/components/src/component/accordion/accordion-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaAccordionContent]'\r\n})\r\nexport class AccordionContentDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaAccordionContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-2348ddb8b6c9d9c4790ea4f39aaf4d22",
            "file": "projects/components/src/directive/click-outside/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport { DomUtil } from '../../common/util/dom-util';\r\n\r\n@Directive({\r\n  selector: '[tetaClickOutside]',\r\n})\r\nexport class ClickOutsideDirective implements OnDestroy {\r\n  @Output() clickOutside = new EventEmitter<MouseEvent>();\r\n  @Input() rightClick = false;\r\n\r\n  private _handleEvents = false;\r\n\r\n  @Input()\r\n  set tetaClickOutside(val: boolean) {\r\n    this._handleEvents = val;\r\n    if (this._handleEvents) {\r\n      this.addListener(this.rightClick);\r\n    } else {\r\n      this.removeListener();\r\n    }\r\n  }\r\n\r\n  get tetaClickOutside(): boolean {\r\n    return this._handleEvents;\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.removeListener();\r\n  }\r\n\r\n  private addListener(handleRightClick: boolean): void {\r\n    window.addEventListener('click', this.listener);\r\n    if (handleRightClick) {\r\n      window.addEventListener('contextmenu', this.listener);\r\n    }\r\n  }\r\n\r\n  private removeListener(): void {\r\n    window.removeEventListener('click', this.listener);\r\n    window.removeEventListener('contextmenu', this.listener);\r\n  }\r\n\r\n  private listener = (click: MouseEvent) => {\r\n    if (!this._handleEvents) {\r\n      return;\r\n    }\r\n    const clickedInside = DomUtil.clickedInside(\r\n      this._elementRef.nativeElement,\r\n      click\r\n    );\r\n    if (!clickedInside) {\r\n      this.clickOutside.emit(click);\r\n    }\r\n  };\r\n}\r\n",
            "selector": "[tetaClickOutside]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "rightClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "tetaClickOutside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_handleEvents",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "listener",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [
                        {
                            "name": "handleRightClick",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "handleRightClick",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaClickOutside": {
                    "name": "tetaClickOutside",
                    "setSignature": {
                        "name": "tetaClickOutside",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tetaClickOutside",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "ContextMenuDirective",
            "id": "directive-ContextMenuDirective-648a678c172acd380ffdd20dbd69a455",
            "file": "projects/components/src/directive/context-menu/context-menu.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  TemplateRef,\r\n  Type,\r\n} from '@angular/core';\r\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ArrayUtil } from '../../common/util/array-util';\r\nimport { DomUtil } from '../../common/util/dom-util';\r\nimport { PositionUtil } from '../../common/util/position-util';\r\nimport { DynamicContentBaseDirective } from '../dynamic-content-base.directive';\r\nimport { ClickService } from '../../common/service/click.service';\r\nimport { merge } from 'rxjs';\r\nimport { filter, takeWhile, tap } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[tetaContextMenu]',\r\n})\r\nexport class ContextMenuDirective\r\n  extends DynamicContentBaseDirective\r\n  implements OnDestroy, OnInit\r\n{\r\n  /**\r\n   * Строка, шаблон или компонент для создания контекстного меню\r\n   */\r\n  @Input() tetaContextMenu: string | TemplateRef<any> | Type<any>;\r\n\r\n  get _dynamicContent() {\r\n    return this.tetaContextMenu;\r\n  }\r\n\r\n  private _eventPoint: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT)\r\n    protected override _document: any,\r\n    protected override _elementRef: ElementRef,\r\n    protected override _service: DynamicComponentService,\r\n    protected override _injector: Injector,\r\n    protected override _zone: NgZone,\r\n    protected override _cdr: ChangeDetectorRef,\r\n    private _click: ClickService\r\n  ) {\r\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  showContent(event: MouseEvent): void {\r\n    event.preventDefault();\r\n    setTimeout(() => {\r\n      this.createMenu(event);\r\n    });\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  click(event: MouseEvent): void {\r\n    if (\r\n      this._componentRef &&\r\n      DomUtil.clickedInside(this._componentRef.location.nativeElement, event)\r\n    ) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n    merge(this._click.click, this._click.contextMenu)\r\n      .pipe(\r\n        takeWhile(() => this._alive),\r\n        filter(() => this._open),\r\n        filter(() => this._componentRef != null),\r\n        filter(\r\n          (event: MouseEvent) =>\r\n            !DomUtil.clickedInside(\r\n              this._componentRef.location.nativeElement,\r\n              event\r\n            )\r\n        ),\r\n        tap((_) => {\r\n          this.destroyContentRef();\r\n          this.openChange.emit(false);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  protected setPosition() {\r\n    if (this._componentRef && this._open) {\r\n      const position = PositionUtil.getPosition(\r\n        {\r\n          top: this._eventPoint.y,\r\n          bottom: this._eventPoint.y,\r\n          left: this._eventPoint.x,\r\n          right: this._eventPoint.x,\r\n        },\r\n        this._componentRef.location.nativeElement.getBoundingClientRect(),\r\n        this.align,\r\n        this.verticalAlign\r\n      );\r\n      PositionUtil.setElementPosition(\r\n        this._componentRef.location.nativeElement,\r\n        position\r\n      );\r\n    }\r\n  }\r\n\r\n  private createMenu(event: MouseEvent): void {\r\n    if (this.tetaContextMenu == null) {\r\n      return;\r\n    }\r\n    this._eventPoint = event;\r\n    this._componentRef = this.createContentRef();\r\n    this._componentRef.instance.className = [\r\n      ...ArrayUtil.asArray(this.className),\r\n      'context-menu',\r\n    ];\r\n    this.openChange.emit(true);\r\n  }\r\n}\r\n",
            "selector": "[tetaContextMenu]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 35,
                    "type": "string | TemplateRef<any> | Type<any>"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68
                },
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60
                }
            ],
            "propertiesClass": [
                {
                    "name": "_eventPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showContent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'contextmenu', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            }
        },
        {
            "name": "DisableControlDirective",
            "id": "directive-DisableControlDirective-c9ddf4cecbb108ae804a70fac0470dcb",
            "file": "projects/components/src/directive/disable-control/disable-control.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input} from '@angular/core';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[tetaDisableControl]'\r\n})\r\nexport class DisableControlDirective {\r\n  @Input() set tetaDisableControl(val: boolean) {\r\n    if (this.ngControl.control) {\r\n      if (val) {\r\n        this.ngControl.control.disable();\r\n      } else {\r\n        this.ngControl.control.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private ngControl: NgControl) {\r\n  }\r\n}\r\n",
            "selector": "[tetaDisableControl]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaDisableControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaDisableControl": {
                    "name": "tetaDisableControl",
                    "setSignature": {
                        "name": "tetaDisableControl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 8,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "DragSortContainerDirective",
            "id": "directive-DragSortContainerDirective-9d3f34fbb9f868ff741036097d9ab3c2",
            "file": "projects/components/src/directive/drag-sort/drag-sort-container.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  // ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  // QueryList,\r\n} from '@angular/core';\r\nimport {DragSortEvent} from './drag-sort-event';\r\n// import {DragSortItemDirective} from './drag-sort-item.directive';\r\n\r\n@Directive({\r\n  selector: '[tetaDragSortContainer]',\r\n})\r\nexport class DragSortContainerDirective<T> {\r\n  @Input() dragSortList: T[];\r\n  @Output() dragSorted: EventEmitter<DragSortEvent<T>> = new EventEmitter<DragSortEvent<T>>();\r\n\r\n  // @ContentChildren(DragSortItemDirective, {descendants: true})\r\n  // private items: QueryList<DragSortItemDirective<T>>;\r\n  private _dragItem: T;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  setDragItem(item: T) {\r\n    this._dragItem = item;\r\n  }\r\n\r\n  getDragItem(): T {\r\n    return this._dragItem;\r\n  }\r\n\r\n  getList(): T[] {\r\n    return this.dragSortList;\r\n  }\r\n\r\n  setList(list: T[]) {\r\n    this.dragSortList = list;\r\n  }\r\n\r\n  updateSortOrder(source: T, target: T, insertBefore: boolean) {\r\n    if (source === target) {\r\n      return;\r\n    }\r\n    const list = this.getList();\r\n    const sourceIndex = list.indexOf(source);\r\n    const targetIndex = list.indexOf(target);\r\n    if (\r\n      (insertBefore && sourceIndex + 1 === targetIndex) ||\r\n      (!insertBefore && sourceIndex === targetIndex + 1)\r\n    ) {\r\n      return;\r\n    }\r\n    const newIndex = list.indexOf(target) + (insertBefore ? 0 : 1);\r\n\r\n    this.dragSorted.emit({\r\n      list,\r\n      source,\r\n      target,\r\n      newIndex,\r\n      previousIndex: sourceIndex,\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[tetaDragSortContainer]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dragSortList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "T[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "dragSorted",
                    "defaultValue": "new EventEmitter<DragSortEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<DragSortEvent<T>>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dragItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDragItem",
                    "args": [],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getList",
                    "args": [],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDragItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setList",
                    "args": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortOrder",
                    "args": [
                        {
                            "name": "source",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "insertBefore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            }
        },
        {
            "name": "DragSortItemDirective",
            "id": "directive-DragSortItemDirective-e5ef1c9aa9ac19344785c9b113cba457",
            "file": "projects/components/src/directive/drag-sort/drag-sort-item.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {DragSortContainerDirective} from './drag-sort-container.directive';\r\n\r\n@Directive({\r\n  selector: '[tetaDragSortItem]',\r\n})\r\nexport class DragSortItemDirective<T> implements OnInit, OnDestroy {\r\n  @Input() tetaDragSortItem: T;\r\n  @Input() dragSortDirection: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  @HostBinding('attr.draggable') private readonly draggable = true;\r\n  @HostBinding('class.position-relative') private readonly relative = true;\r\n\r\n  private _dragElement: HTMLElement;\r\n\r\n  private rect: any;\r\n\r\n  constructor(\r\n    @Host() private _container: DragSortContainerDirective<T>,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2\r\n  ) {\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) dragstart(event: DragEvent): void {\r\n    this._container.setDragItem(this.tetaDragSortItem);\r\n  }\r\n\r\n  @HostListener('dragenter', ['$event']) dragenter(event: DragEvent): void {\r\n    this.rect = this._elementRef.nativeElement.getBoundingClientRect();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event']) dragover(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (this.rect && this._container.getDragItem()) {\r\n      this.showDrag(this.getDropPosition(event));\r\n    }\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) dragleave(event: DragEvent): void {\r\n    event.preventDefault();\r\n    this.hideDrag();\r\n  }\r\n\r\n  @HostListener('dragend', ['$event']) dragend(event: DragEvent): void {\r\n    this._container.setDragItem(null);\r\n    this.hideDrag();\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\r\n    event.stopPropagation();\r\n    this._container.updateSortOrder(\r\n      this._container.getDragItem(),\r\n      this.tetaDragSortItem,\r\n      this.getDropPosition(event) === 'start'\r\n    );\r\n    this.hideDrag();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createDrag();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyDrag();\r\n  }\r\n\r\n  private showDrag(position: 'start' | 'end') {\r\n    this.hideDrag();\r\n    this._renderer.addClass(this._dragElement, `drop-direction-${position}`);\r\n  }\r\n\r\n  private hideDrag() {\r\n    this._renderer.removeClass(this._dragElement, 'drop-direction-start');\r\n    this._renderer.removeClass(this._dragElement, 'drop-direction-end');\r\n  }\r\n\r\n  private createDrag() {\r\n    this._dragElement = this._renderer.createElement('div');\r\n    this._renderer.appendChild(\r\n      this._elementRef.nativeElement,\r\n      this._dragElement\r\n    );\r\n    this._renderer.addClass(this._dragElement, 'drop-direction');\r\n    this._renderer.addClass(\r\n      this._dragElement,\r\n      this.dragSortDirection === 'horizontal'\r\n        ? 'drop-direction-horizontal'\r\n        : 'drop-direction-vertical'\r\n    );\r\n  }\r\n\r\n  private destroyDrag() {\r\n    this._renderer.removeChild(this._renderer, this._dragElement);\r\n  }\r\n\r\n  private getDropPosition(event: DragEvent) {\r\n    if (this.dragSortDirection === 'horizontal') {\r\n      return event.clientX >= this.rect.x + this.rect.width / 2\r\n        ? 'end'\r\n        : 'start';\r\n    } else {\r\n      return event.clientY >= this.rect.y + this.rect.height / 2\r\n        ? 'end'\r\n        : 'start';\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[tetaDragSortItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dragSortDirection",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"horizontal\" | \"vertical\""
                },
                {
                    "name": "tetaDragSortItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "T"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "true"
                },
                {
                    "name": "class.position-relative",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dragElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.draggable'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "rect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "relative",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.position-relative'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroyDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDropPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"end\" | \"start\"",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideDrag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDrag",
                    "args": [
                        {
                            "name": "position",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_container",
                        "type": "DragSortContainerDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_container",
                        "type": "DragSortContainerDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownBase",
            "id": "directive-DropdownBase-f2880a315e45f0f5a896a6648bf48715",
            "file": "projects/components/src/component/dropdown/dropdown-base.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {DomUtil} from '../../common/util/dom-util';\r\nimport {PositionUtil} from '../../common/util/position-util';\r\nimport {Align} from '../../common/enum/align.enum';\r\nimport {VerticalAlign} from '../../common/enum/vertical-align.enum';\r\nimport {DropdownHeadDirective} from './dropdown-head.directive';\r\nimport {DropdownContentDirective} from './dropdown-content.directive';\r\nimport {AutoCloseIgnoreCase} from '../../common/contract/auto-close-ignore-case';\r\nimport {IRect} from '../../common/contract/i-rect';\r\nimport {takeWhile, throttleTime} from 'rxjs/operators';\r\n\r\n@Directive()\r\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\r\nexport class DropdownBase {\r\n  @Input() align: Align = Align.left;\r\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\r\n  @Input() appendToBody: boolean;\r\n  @Input() disabled: boolean;\r\n  @Input() shadow = true;\r\n  @Input() className: string | string[];\r\n\r\n  @Input()\r\n  set open(val: boolean) {\r\n    if (val != null && val !== this._open && !this.disabled) {\r\n      if (val) {\r\n        this.openDropdown();\r\n      } else {\r\n        this.closeDropdown();\r\n      }\r\n    }\r\n  }\r\n\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n\r\n  get container() {\r\n    return this.appendToBody\r\n      ? this._document.body\r\n      : this._elementRef.nativeElement;\r\n  }\r\n\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Input() autoClose = true;\r\n  @Input() autoCloseIgnore: Array<AutoCloseIgnoreCase> = ['inside'];\r\n\r\n  @ContentChild(DropdownHeadDirective, {\r\n    static: false,\r\n    read: ElementRef,\r\n  })\r\n  protected _head: ElementRef;\r\n\r\n  @ContentChild(DropdownContentDirective, {static: false})\r\n  protected _content: DropdownContentDirective;\r\n\r\n  protected _body: HTMLElement | null = null;\r\n  protected _open = false;\r\n  protected _alive = true;\r\n\r\n  constructor(\r\n    protected _cdr: ChangeDetectorRef,\r\n    protected _document: any,\r\n    protected _elementRef: ElementRef<HTMLElement>,\r\n    protected _zone: NgZone,\r\n    protected _renderer: Renderer2\r\n  ) {\r\n    this._zone.onStable\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        throttleTime(10, undefined, {trailing: true})\r\n      )\r\n      .subscribe((_) => {\r\n        if (this._head?.nativeElement && this._body) {\r\n          setTimeout(() => {\r\n            if (this._head?.nativeElement && this._body) {\r\n              this.setPosition(this._head.nativeElement, this._body);\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    if (this.open) {\r\n      if (!DomUtil.clickedInside(this._body, event)) {\r\n        this.closeDropdown();\r\n      }\r\n    } else {\r\n      if (DomUtil.clickedInside(this._head.nativeElement, event)) {\r\n        this.openDropdown();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('document:click', ['$event']) documentClick(\r\n    event: MouseEvent\r\n  ): void {\r\n    if (\r\n      !this.open ||\r\n      !this.autoClose ||\r\n      event.detail === 0 ||\r\n      DomUtil.clickedInside(this._head.nativeElement, event) ||\r\n      DomUtil.clickedInside(this._body, event)\r\n    ) {\r\n      return;\r\n    }\r\n    if (DomUtil.clickedInside(this._body, event)) {\r\n      if (this.autoCloseIgnore.indexOf('inside') < 0) {\r\n        this.closeDropdown();\r\n      }\r\n    } else {\r\n      if (this.autoCloseIgnore.indexOf('outside') < 0) {\r\n        this.closeDropdown();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:keyup', ['$event']) keyUp(event: KeyboardEvent): void {\r\n    if (\r\n      !this.open ||\r\n      !this.autoClose ||\r\n      ['esc', 'enter'].every(\r\n        (_: 'esc' | 'enter') => this.autoCloseIgnore.indexOf(_) >= 0\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      (event.code === 'Escape' && this.autoCloseIgnore.indexOf('esc') < 0) ||\r\n      (event.code === 'Enter' && this.autoCloseIgnore.indexOf('enter') < 0)\r\n    ) {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n\r\n  protected closeDropdown(): void {\r\n    if (this.open && this._body && this.container.contains(this._body)) {\r\n      this._renderer.removeChild(this.container, this._body);\r\n      this._open = false;\r\n      this._body = null;\r\n      this.openChange.emit(this.open);\r\n    }\r\n  }\r\n\r\n  private openDropdown(): void {\r\n    if (this._open || !this._content || this.disabled) {\r\n      return;\r\n    }\r\n    this._open = true;\r\n    this.openChange.emit(this.open);\r\n    const renderer = this._renderer;\r\n    const content = this._content.nativeElement;\r\n    const container = (this._body =\r\n      this._body || renderer.createElement('div'));\r\n    renderer.addClass(container, 'dropdown');\r\n    if (this.className != null) {\r\n      if (this.className instanceof Array && this.className.length > 0) {\r\n        this.className.forEach((_) => {\r\n          renderer.addClass(container, _);\r\n        });\r\n      }\r\n      if (typeof this.className === 'string') {\r\n        renderer.addClass(container, this.className);\r\n      }\r\n    }\r\n\r\n    renderer.appendChild(container, content);\r\n    renderer.appendChild(this.container, container);\r\n\r\n    this.setPosition(this._head.nativeElement, this._body);\r\n  }\r\n\r\n  private setPosition(container: HTMLElement, target: HTMLElement): void {\r\n    const containerPosition = container.getBoundingClientRect();\r\n    const targetPosition = target.getBoundingClientRect();\r\n\r\n    const rect: IRect = {\r\n      bottom: containerPosition.bottom,\r\n      top: containerPosition.top,\r\n      left: containerPosition.left,\r\n      right: containerPosition.right,\r\n    };\r\n\r\n    const targetRect: IRect = {\r\n      bottom: targetPosition.bottom,\r\n      top: targetPosition.top,\r\n      left: targetPosition.left,\r\n      right: targetPosition.right,\r\n    };\r\n\r\n    const targetTransformedParent = DomUtil.findTransformedParent(target);\r\n    let parentPosition = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    };\r\n    if (targetTransformedParent) {\r\n      parentPosition = targetTransformedParent.getBoundingClientRect();\r\n    }\r\n\r\n    const position = PositionUtil.getPosition(\r\n      rect,\r\n      targetRect,\r\n      this.align,\r\n      this.verticalAlign,\r\n      0,\r\n      0,\r\n      parentPosition\r\n    );\r\n\r\n    PositionUtil.setElementPosition(target, position);\r\n  }\r\n}\r\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Array<AutoCloseIgnoreCase>"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | string[]"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownContentDirective, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownHeadDirective, {static: false, read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "documentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "open",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "container": {
                    "name": "container",
                    "getSignature": {
                        "name": "container",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "DropdownContentDirective",
            "id": "directive-DropdownContentDirective-9b98456b5ec61657bd79ee6bec3d1166",
            "file": "projects/components/src/component/dropdown/dropdown-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaDropdownContent]'\r\n})\r\nexport class DropdownContentDirective {\r\n  nativeElement: HTMLElement;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\r\n    this.nativeElement = _elementRef.nativeElement;\r\n  }\r\n}\r\n",
            "selector": "[tetaDropdownContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "nativeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-4d75c551437c332ae901f9d9c130eb2d",
            "file": "projects/components/src/component/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  NgZone, OnDestroy,\r\n  OnInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {DropdownBase} from './dropdown-base';\r\n\r\n@Directive({\r\n  selector: '[tetaDropdown]'\r\n})\r\nexport class DropdownDirective extends DropdownBase implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(protected override _cdr: ChangeDetectorRef,\r\n              @Inject(DOCUMENT) protected override _document: any,\r\n              protected override _elementRef: ElementRef<HTMLElement>,\r\n              protected override _zone: NgZone,\r\n              protected override _renderer: Renderer2) {\r\n    super(_cdr, _document, _elementRef, _zone, _renderer);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.closeDropdown();\r\n    this._alive = false;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this._content) {\r\n      this._renderer.removeChild(this._content.nativeElement.parentNode, this._content.nativeElement);\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[tetaDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownHeadDirective",
            "id": "directive-DropdownHeadDirective-2d51512232ad201734f63be31fee5cc6",
            "file": "projects/components/src/component/dropdown/dropdown-head.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Optional, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaDropdownHead]'\r\n})\r\nexport class DropdownHeadDirective {\r\n  constructor(@Optional() public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaDropdownHead]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DynamicContentBaseDirective",
            "id": "directive-DynamicContentBaseDirective-c5a6fd8b812c952f2e7cea95f4bb94d0",
            "file": "projects/components/src/directive/dynamic-content-base.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef,\r\n  Type,\r\n} from '@angular/core';\r\nimport { DynamicComponentService } from '../common/service/dynamic-component.service';\r\nimport { Align } from '../common/enum/align.enum';\r\nimport { VerticalAlign } from '../common/enum/vertical-align.enum';\r\nimport { filter, takeWhile } from 'rxjs/operators';\r\nimport { TetaContentRef } from '../common/contract/teta-content-ref';\r\nimport { PopupContentComponent } from '../component/dynamic-component/popup-content/popup-content.component';\r\n\r\n@Directive()\r\nexport abstract class DynamicContentBaseDirective implements OnInit, OnDestroy {\r\n  @Input() data: any;\r\n  @Input() className: string | string[];\r\n  @Input() align: Align = Align.left;\r\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\r\n  @Input() appendToBody: boolean;\r\n  @Input() set open(open: boolean) {\r\n    this._open = open;\r\n    if (this._open) {\r\n      this.createContentRef();\r\n    } else {\r\n      this.destroyContentRef();\r\n    }\r\n  }\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  protected _alive = true;\r\n  protected _componentRef: ComponentRef<any>;\r\n  protected _content: TetaContentRef;\r\n  protected _open = false;\r\n\r\n  protected abstract get _dynamicContent():\r\n    | string\r\n    | TemplateRef<any>\r\n    | Type<any>;\r\n\r\n  protected constructor(\r\n    protected _document: any,\r\n    protected _elementRef: ElementRef,\r\n    protected _service: DynamicComponentService,\r\n    protected _injector: Injector,\r\n    protected _zone: NgZone,\r\n    protected _cdr: ChangeDetectorRef\r\n  ) {\r\n    this._zone.onStable\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((_) => this._open)\r\n      )\r\n      .subscribe((_) => {\r\n        this.setPosition();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n    this.destroyContentRef();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  protected createContentRef<T>(\r\n    className?: string | string[]\r\n  ): ComponentRef<T> {\r\n    if (!this._componentRef) {\r\n      this._open = true;\r\n      const injector = this._service.getInjector(this.data, this._injector);\r\n      const context = this._service.getContext(this._dynamicContent, this.data);\r\n      this._content = this._service.createContent(\r\n        this._dynamicContent,\r\n        this._injector,\r\n        context\r\n      );\r\n      this._componentRef = this._service.createComponent(\r\n        PopupContentComponent,\r\n        this._content,\r\n        injector,\r\n        this.appendToBody ? this._document.body : this._elementRef.nativeElement\r\n      );\r\n      if (className) {\r\n        this._componentRef.instance.addClass(className);\r\n      }\r\n    }\r\n    return this._componentRef;\r\n  }\r\n\r\n  protected destroyContentRef(): void {\r\n    if (this._open) {\r\n      this._open = false;\r\n      this._service.destroy(\r\n        this._componentRef,\r\n        this._content,\r\n        this.appendToBody ? this._document.body : this._elementRef.nativeElement\r\n      );\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n  protected abstract setPosition(): void;\r\n}\r\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Align"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | string[]"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaContentRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createContentRef",
                    "args": [
                        {
                            "name": "className",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroyContentRef",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        126
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "string | TemplateRef | Type",
                        "line": 45
                    }
                }
            }
        },
        {
            "name": "ExpandPanelContentDirective",
            "id": "directive-ExpandPanelContentDirective-28f6353daeb07694ed39fa12b75976d5",
            "file": "projects/components/src/component/expand-panel/expand-panel-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaExpandPanelContent]',\r\n})\r\nexport class ExpandPanelContentDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n",
            "selector": "[tetaExpandPanelContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ExpandPanelHeadDirective",
            "id": "directive-ExpandPanelHeadDirective-94d34d435efe0613cf3173a1335906c8",
            "file": "projects/components/src/component/expand-panel/expand-panel-head.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaExpandPanelHead]',\r\n})\r\nexport class ExpandPanelHeadDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n",
            "selector": "[tetaExpandPanelHead]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-50a30d5daef1bb709bd89dbdd19626a9",
            "file": "projects/components/src/directive/highlight/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, Input} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaHighlight]',\r\n})\r\nexport class HighlightDirective {\r\n  @Input() set tetaHighlight(text: string) {\r\n    setTimeout(() => {\r\n      if (this._initialElement) {\r\n        this.elementRef.nativeElement.innerHTML = this._initialElement;\r\n      }\r\n      if (!text) {\r\n        return;\r\n      }\r\n      const pattern = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\r\n      const searchWithOutRegExp = text\r\n        .toLowerCase()\r\n        .replace(pattern, '\\\\$&')\r\n        .split(' ')\r\n        .filter(t => t.length > 0)\r\n        .join('|');\r\n      this._initialElement = this.elementRef.nativeElement.innerHTML;\r\n      this.recursiveReplaceNode(this.elementRef.nativeElement.childNodes, searchWithOutRegExp);\r\n    }, 10);\r\n  }\r\n\r\n  private _initialElement = null;\r\n\r\n  constructor(private elementRef: ElementRef) {\r\n  }\r\n\r\n  private recursiveReplaceNode(nodes: NodeListOf<ChildNode>, searchWithOutRegExp: string): boolean {\r\n    let match = false;\r\n    const cacheNodes: ChildNode[] = [];\r\n    nodes.forEach((node: ChildNode) => {\r\n      cacheNodes.push(node);\r\n    });\r\n    cacheNodes.forEach(node => {\r\n      if (node.nodeType === 3) {\r\n        if (node.nodeValue && node.nodeValue.search(new RegExp(searchWithOutRegExp, 'i')) > -1) {\r\n          match = true;\r\n          this.wrapNode(node, searchWithOutRegExp);\r\n        }\r\n      } else {\r\n        match = this.recursiveReplaceNode(node.childNodes, searchWithOutRegExp) || match;\r\n      }\r\n    });\r\n\r\n    return match;\r\n  }\r\n\r\n  private wrapNode(textNode: ChildNode, searchWithOutRegExp: string) {\r\n    if (!textNode || !textNode.nodeValue) {\r\n      return;\r\n    }\r\n    const tempDiv = document.createElement('div');\r\n    tempDiv.innerHTML = textNode.nodeValue\r\n      .replace(new RegExp(searchWithOutRegExp, 'gi'), match => `<mark>${match}</mark>`);\r\n\r\n    const parentNode = textNode.parentNode;\r\n    if (parentNode) {\r\n      while (tempDiv.firstChild) {\r\n        parentNode.insertBefore(tempDiv.firstChild, textNode);\r\n      }\r\n      parentNode.removeChild(textNode);\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[tetaHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaHighlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_initialElement",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "recursiveReplaceNode",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "NodeListOf<ChildNode>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "NodeListOf<ChildNode>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wrapNode",
                    "args": [
                        {
                            "name": "textNode",
                            "type": "ChildNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "textNode",
                            "type": "ChildNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchWithOutRegExp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaHighlight": {
                    "name": "tetaHighlight",
                    "setSignature": {
                        "name": "tetaHighlight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "text",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 7,
                        "jsdoctags": [
                            {
                                "name": "text",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "HintDirective",
            "id": "directive-HintDirective-8e2ef8139d137976f8ea509b13a4a407",
            "file": "projects/components/src/directive/hint/hint.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  Type,\r\n} from '@angular/core';\r\nimport {DynamicContentBaseDirective} from '../dynamic-content-base.directive';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {DynamicComponentService} from '../../common/service/dynamic-component.service';\r\nimport {PositionUtil} from '../../common/util/position-util';\r\nimport {ArrayUtil} from '../../common/util/array-util';\r\nimport {Align} from '../../common/enum/align.enum';\r\nimport {VerticalAlign} from '../../common/enum/vertical-align.enum';\r\nimport {DomUtil} from '../../common/util/dom-util';\r\nimport Timeout = NodeJS.Timeout;\r\n\r\n@Directive({\r\n  selector: '[tetaHint]',\r\n})\r\nexport class HintDirective\r\n  extends DynamicContentBaseDirective\r\n  implements OnDestroy {\r\n  /**\r\n   * Строка, шаблон или компонент для создания контекстного меню\r\n   */\r\n  @Input() tetaHint: string | TemplateRef<any> | Type<any>;\r\n  @Input() override align: Align = Align.center;\r\n  @Input() override verticalAlign: VerticalAlign = VerticalAlign.top;\r\n  @Input() delay = 300;\r\n\r\n  get _dynamicContent() {\r\n    return this.tetaHint;\r\n  }\r\n\r\n  private _timeout: Timeout;\r\n  private _componentRect: any;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT)\r\n    protected override _document: any,\r\n    protected override _elementRef: ElementRef,\r\n    protected override _service: DynamicComponentService,\r\n    protected override _injector: Injector,\r\n    protected override _zone: NgZone,\r\n    protected override _cdr: ChangeDetectorRef\r\n  ) {\r\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\r\n  }\r\n\r\n  @HostListener('mouseenter', ['$event'])\r\n  mouseenter(): void {\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => {\r\n      this.createHint();\r\n    }, this.delay);\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event'])\r\n  mouseleave(): void {\r\n    clearTimeout(this._timeout);\r\n    if (this._open && this._componentRef) {\r\n      this._timeout = setTimeout(() => {\r\n        this.destroyContentRef();\r\n      }, this.delay);\r\n    }\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  click(event: MouseEvent): void {\r\n    if (\r\n      this._open &&\r\n      this._componentRef &&\r\n      DomUtil.clickedInside(this._componentRef.location.nativeElement, event)\r\n    ) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  protected setPosition() {\r\n    if (this._componentRef && this._open) {\r\n      if (!this._componentRect) {\r\n        this._componentRect =\r\n          this._componentRef.location.nativeElement.getBoundingClientRect();\r\n      }\r\n      const position = PositionUtil.getPosition(\r\n        this._elementRef.nativeElement.getBoundingClientRect(),\r\n        this._componentRect,\r\n        this.align,\r\n        this.verticalAlign,\r\n        0,\r\n        4\r\n      );\r\n      PositionUtil.setElementPosition(\r\n        this._componentRef.location.nativeElement,\r\n        position\r\n      );\r\n    }\r\n  }\r\n\r\n  private createHint(): void {\r\n    if (!this._dynamicContent) {\r\n      return;\r\n    }\r\n    this._componentRef = this.createContentRef();\r\n    this._componentRef.instance.className = [\r\n      ...ArrayUtil.asArray(this.className),\r\n      'hint',\r\n    ];\r\n  }\r\n}\r\n",
            "selector": "[tetaHint]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Align"
                },
                {
                    "name": "delay",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "tetaHint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 33,
                    "type": "string | TemplateRef<any> | Type<any>"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66
                }
            ],
            "propertiesClass": [
                {
                    "name": "_componentRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timeout",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter', ['$event']"
                        }
                    ]
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave', ['$event']"
                        }
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            }
        },
        {
            "name": "IconSpriteDirective",
            "id": "directive-IconSpriteDirective-673da9db49c6b7e0e0d0a761682f3756",
            "file": "projects/components/src/component/icon/icon-sprite.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, OnInit} from '@angular/core';\r\nimport {IconService} from './icon.service';\r\n\r\n@Directive({\r\n  selector: '[tetaIconSprite]'\r\n})\r\nexport class IconSpriteDirective implements OnInit {\r\n  @Input() tetaIconSprite: string | string[];\r\n  @Input() bypassInterceptors = true;\r\n\r\n  constructor(private _iconService: IconService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof this.tetaIconSprite === 'string') {\r\n      this._iconService.addSprite(this.tetaIconSprite, this.bypassInterceptors);\r\n    }\r\n    if (this.tetaIconSprite instanceof Array && this.tetaIconSprite?.length) {\r\n      this.tetaIconSprite.forEach((sprite: string) => {\r\n        this._iconService.addSprite(sprite, this.bypassInterceptors);\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[tetaIconSprite]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bypassInterceptors",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "tetaIconSprite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string | string[]"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LoaderDirective",
            "id": "directive-LoaderDirective-4ac3062affeefc0a12c0f5b65a0113c0",
            "file": "projects/components/src/directive/loader/loader.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[tetaLoader]',\r\n})\r\nexport class LoaderDirective implements OnDestroy {\r\n  @Input() appendToBody = false;\r\n\r\n  @Input()\r\n  set tetaLoader(value: boolean) {\r\n    this._loading = value;\r\n    if (this._loading) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  get tetaLoader() {\r\n    return this._loading;\r\n  }\r\n\r\n  private _element: HTMLElement;\r\n  private _loader: any;\r\n  private _alive = true;\r\n  private _loading: boolean;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    @Inject(DOCUMENT) private _document: any\r\n  ) {\r\n    this._element = this._elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n    this.hide();\r\n  }\r\n\r\n  private show() {\r\n    if (this._loader === null || this._loader === undefined) {\r\n      this._loader = this._renderer.createElement('div');\r\n      this._loader.setAttribute('class', 'loader');\r\n    }\r\n    this._renderer.appendChild(\r\n      this.appendToBody ? this._document.body : this._element,\r\n      this._loader\r\n    );\r\n    this.setPosition();\r\n  }\r\n\r\n  private hide() {\r\n    if (this._loader && this._loader.parentElement) {\r\n      this._renderer.removeChild(this._loader.parentElement, this._loader);\r\n    }\r\n  }\r\n\r\n  private setPosition() {\r\n    const position = this._element.getBoundingClientRect();\r\n    this._renderer.setStyle(\r\n      this._loader,\r\n      'top',\r\n      `${position.y + position.height / 2}px`\r\n    );\r\n    this._renderer.setStyle(\r\n      this._loader,\r\n      'left',\r\n      `${position.x + +position.width / 2}px`\r\n    );\r\n  }\r\n}\r\n",
            "selector": "[tetaLoader]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appendToBody",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "tetaLoader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tetaLoader": {
                    "name": "tetaLoader",
                    "setSignature": {
                        "name": "tetaLoader",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tetaLoader",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            }
        },
        {
            "name": "NoAutofillDirective",
            "id": "directive-NoAutofillDirective-606dc21581fa0dbcaac25aab97b96eb9",
            "file": "projects/components/src/directive/no-autofill/no-autofill.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaNoAutofill]',\r\n})\r\n\r\n/**\r\n * Disable autofill inputs in Chrome. Append hidden inputs with text/password type, to element.\r\n */\r\nexport class NoAutofillDirective implements OnInit {\r\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    const inputsTypes = ['text', 'password'];\r\n\r\n    inputsTypes.forEach((_) => {\r\n      const inputElement = this._renderer.createElement('input');\r\n      this._renderer.setAttribute(inputElement, 'type', _);\r\n      this._renderer.setAttribute(inputElement, 'class', 'position-absolute');\r\n      this._renderer.setStyle(inputElement, 'left', '-9999px');\r\n      this._renderer.insertBefore(\r\n        this._elementRef.nativeElement,\r\n        inputElement,\r\n        this._elementRef.nativeElement.firstChild\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[tetaNoAutofill]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "OnlyNumberDirective",
            "id": "directive-OnlyNumberDirective-b055a6d080d1f62a8bee4476d0268408",
            "file": "projects/components/src/directive/only-number/only-number.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, HostListener, Input} from '@angular/core';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[tetaOnlyNumber]',\r\n})\r\nexport class OnlyNumberDirective {\r\n  @Input() tetaOnlyNumber = true;\r\n  @Input() allowDecimals = true;\r\n  @Input() allowSign = true;\r\n  @Input() decimalSeparator = '.';\r\n  @Input() commaSeparator = ',';\r\n\r\n  private _previousValue = '';\r\n\r\n  private _integerUnsigned = '^[0-9]*$';\r\n  private _integerSigned = '^-?[0-9]+$';\r\n  private _decimalUnsigned = '^[0-9]+(.[0-9]+)?$';\r\n  private _decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\r\n\r\n  private readonly _minusSign: string = '-';\r\n\r\n  constructor(private _elementRef: ElementRef, private _control: NgControl) {\r\n  }\r\n\r\n  @HostListener('change', ['$event']) onChange(e: any) {\r\n    if (this.tetaOnlyNumber === false) {\r\n      return;\r\n    }\r\n    this.validateValue(this._elementRef.nativeElement.value);\r\n  }\r\n\r\n  @HostListener('paste', ['$event']) onPaste(e: any) {\r\n    if (this.tetaOnlyNumber === false) {\r\n      return;\r\n    }\r\n    this.validateValue(e.clipboardData.getData('text/plain'));\r\n    e.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown', ['$event']) onKeyDown(e: KeyboardEvent) {\r\n    if (this.tetaOnlyNumber === false) {\r\n      return;\r\n    }\r\n    const cursorPosition: number =\r\n      (e.target as HTMLInputElement).selectionStart ?? 0;\r\n    const originalValue: string = (e.target as HTMLInputElement).value;\r\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\r\n    const signExists = originalValue.includes('-');\r\n    const separatorExists =\r\n      originalValue.includes(this.decimalSeparator) ||\r\n      originalValue.includes(this.commaSeparator);\r\n\r\n    const allowedKeys = [\r\n      'Backspace',\r\n      'ArrowLeft',\r\n      'ArrowRight',\r\n      'Delete',\r\n      'Escape',\r\n      'Tab',\r\n      'Home',\r\n      'End',\r\n    ];\r\n\r\n    const separatorIsCloseToSign = signExists && cursorPosition <= 1;\r\n    if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\r\n      // if (this.decimalSeparator === '.') {\r\n      allowedKeys.push('.');\r\n      // } else {\r\n      // allowedKeys.push(',');\r\n      // }\r\n    }\r\n\r\n    const firstCharacterIsSeparator =\r\n      originalValue.charAt(0) !== this.decimalSeparator;\r\n    if (\r\n      this.allowSign &&\r\n      !signExists &&\r\n      firstCharacterIsSeparator &&\r\n      cursorPosition === 0\r\n    ) {\r\n      allowedKeys.push('-');\r\n    }\r\n\r\n    if (\r\n      allowedKeys.indexOf(e.key) !== -1 ||\r\n      (e.code === 'KeyA' && controlOrCommand) ||\r\n      (e.code === 'KeyC' && controlOrCommand) ||\r\n      (e.code === 'KeyV' && controlOrCommand) ||\r\n      (e.code === 'KeyZ' && controlOrCommand) ||\r\n      (e.code === 'KeyX' && controlOrCommand)\r\n    ) {\r\n      return;\r\n    }\r\n    this._previousValue = originalValue;\r\n\r\n    const isNumber = new RegExp(this._integerUnsigned).test(e.key);\r\n    if (isNumber) {\r\n      return;\r\n    } else {\r\n      if (e.key === ',' && originalValue.indexOf('.') < 0) {\r\n        this._elementRef.nativeElement.value = originalValue + '.';\r\n      }\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  validateValue(value: string): void {\r\n    if (this.tetaOnlyNumber === false) {\r\n      return;\r\n    }\r\n    value = value.replace(',', '.').trim();\r\n    let regex: string = this._integerUnsigned;\r\n    if (!this.allowDecimals && !this.allowSign) {\r\n      regex = this._integerUnsigned;\r\n    }\r\n    if (!this.allowDecimals && this.allowSign) {\r\n      regex = this._integerSigned;\r\n    }\r\n    if (this.allowDecimals && !this.allowSign) {\r\n      regex = this._decimalUnsigned;\r\n    }\r\n    if (this.allowDecimals && this.allowSign) {\r\n      regex = this._decimalSigned;\r\n    }\r\n\r\n    let firstCharacter = value.charAt(0);\r\n    if (firstCharacter === this.decimalSeparator) {\r\n      value = 0 + value;\r\n    }\r\n\r\n    const lastCharacter = value.charAt(value.length - 1);\r\n    if (lastCharacter === this.decimalSeparator) {\r\n      value = value + 0;\r\n    }\r\n\r\n    let signedValue = false;\r\n    if (firstCharacter === this._minusSign) {\r\n      signedValue = true;\r\n      value = value.substring(1);\r\n      firstCharacter = value.charAt(0);\r\n    }\r\n    let secondChar = value.charAt(1);\r\n    while (\r\n      firstCharacter === '0' &&\r\n      secondChar !== '' &&\r\n      secondChar !== this.decimalSeparator\r\n      ) {\r\n      value = value.substring(1);\r\n      firstCharacter = value.charAt(0);\r\n      secondChar = value.charAt(1);\r\n    }\r\n    if (signedValue === true) {\r\n      value = this._minusSign + value;\r\n    }\r\n\r\n    const valueParts = value.split(this.decimalSeparator);\r\n    const naturalPart = valueParts?.[0];\r\n    let decimalPart = valueParts?.[1];\r\n\r\n    if (decimalPart != null && /^0+$/.test(decimalPart)) {\r\n      decimalPart = '0';\r\n      value = naturalPart + '.' + decimalPart;\r\n    }\r\n    if (value === '-0') {\r\n      value = '0';\r\n    }\r\n    if (value === '-0.0') {\r\n      value = '0.0';\r\n    }\r\n    const valid: boolean = new RegExp(regex).test(value.toString());\r\n    this._control.control.setValue(valid ? value : this._previousValue ?? 0);\r\n  }\r\n}\r\n",
            "selector": "[tetaOnlyNumber]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "allowDecimals",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "allowSign",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "commaSeparator",
                    "defaultValue": "','",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "decimalSeparator",
                    "defaultValue": "'.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "tetaOnlyNumber",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41
                },
                {
                    "name": "paste",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                }
            ],
            "propertiesClass": [
                {
                    "name": "_decimalSigned",
                    "defaultValue": "'^-?[0-9]+(.[0-9]+)?$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_decimalUnsigned",
                    "defaultValue": "'^[0-9]+(.[0-9]+)?$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_integerSigned",
                    "defaultValue": "'^-?[0-9]+$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_integerUnsigned",
                    "defaultValue": "'^[0-9]*$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_minusSign",
                    "defaultValue": "'-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_previousValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'change', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ResizeDragDirective",
            "id": "directive-ResizeDragDirective-62505000e7e20c6ae9637ddf3ffa6d32",
            "file": "projects/components/src/directive/resize-drag/resize-drag.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[tetaResizeDrag]',\r\n})\r\nexport class ResizeDragDirective {\r\n  @Input() tetaResizeDrag: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  @Output() resizeStart = new EventEmitter<MouseEvent>();\r\n  @Output() resizeProcess = new EventEmitter<MouseEvent>();\r\n  @Output() resizeEnd = new EventEmitter<MouseEvent>();\r\n\r\n  @HostBinding('class.resize-drag_active')\r\n  private _active: boolean;\r\n\r\n  @HostBinding('class.resize-drag_horizontal')\r\n  private get horizontal() {\r\n    return this.tetaResizeDrag === 'horizontal';\r\n  }\r\n\r\n  @HostBinding('class.resize-drag_vertical')\r\n  private get vertical() {\r\n    return this.tetaResizeDrag === 'vertical';\r\n  }\r\n\r\n  constructor(@Inject(DOCUMENT) private _document: any) {}\r\n\r\n  @HostListener('mousedown', ['$event']) mouseDown(event: MouseEvent) {\r\n    this.resizeStart.emit(event);\r\n    this.addListeners();\r\n  }\r\n\r\n  private addListeners() {\r\n    this._active = true;\r\n    this._document.addEventListener('mouseup', this.handleMouseUp);\r\n    this._document.addEventListener('mousemove', this.handleMouseMove);\r\n  }\r\n\r\n  private removeListeners() {\r\n    this._active = false;\r\n    this._document.removeEventListener('mouseup', this.handleMouseUp);\r\n    this._document.removeEventListener('mousemove', this.handleMouseMove);\r\n  }\r\n\r\n  private handleMouseUp = (event: MouseEvent) => {\r\n    this.resizeEnd.emit(event);\r\n    this.removeListeners();\r\n  };\r\n\r\n  private handleMouseMove = (event: MouseEvent) => {\r\n    this.resizeProcess.emit(event);\r\n  };\r\n}\r\n",
            "selector": "[tetaResizeDrag]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaResizeDrag",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"horizontal\" | \"vertical\""
                }
            ],
            "outputsClass": [
                {
                    "name": "resizeEnd",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "resizeProcess",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "resizeStart",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.resize-drag_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "class.resize-drag_horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "class.resize-drag_vertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                }
            ],
            "propertiesClass": [
                {
                    "name": "_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.resize-drag_active'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseMove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleMouseUp",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "horizontal": {
                    "name": "horizontal",
                    "getSignature": {
                        "name": "horizontal",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "vertical": {
                    "name": "vertical",
                    "getSignature": {
                        "name": "vertical",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "SelectOptionDirective",
            "id": "directive-SelectOptionDirective-9444d5537b287350db46aa7772c74b3f",
            "file": "projects/components/src/component/select/select-option.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaSelectOption]'\r\n})\r\nexport class SelectOptionDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaSelectOption]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SelectValueDirective",
            "id": "directive-SelectValueDirective-32924724b903ff3420f239bd5e7f740b",
            "file": "projects/components/src/component/select/select-value.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaSelectValue]'\r\n})\r\nexport class SelectValueDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaSelectValue]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabContentDirective",
            "id": "directive-TabContentDirective-ba119843c21f15758b05abfbf4819fb1",
            "file": "projects/components/src/component/tabs/tab-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaTabContent]'\r\n})\r\nexport class TabContentDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaTabContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabTitleDirective",
            "id": "directive-TabTitleDirective-801e0ad5bd7b973ec2d930597849c884",
            "file": "projects/components/src/component/tabs/tab-title.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaTabTitle]'\r\n})\r\nexport class TabTitleDirective {\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n}\r\n",
            "selector": "[tetaTabTitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TetaTemplateDirective",
            "id": "directive-TetaTemplateDirective-ac34214c3ed82445a114ca1c445060ab",
            "file": "projects/components/src/directive/teta-template/teta-template.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tetaTemplate]'\r\n})\r\nexport class TetaTemplateDirective {\r\n  @Input('tetaTemplate') id: string;\r\n\r\n  constructor(public template: TemplateRef<any>) {\r\n  }\r\n\r\n  getId(): string {\r\n    return this.id;\r\n  }\r\n}\r\n",
            "selector": "[tetaTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tetaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-203fa8a4dcd091b988be82c216466745",
            "file": "projects/components/src/directive/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  TemplateRef,\r\n  Type,\r\n} from '@angular/core';\r\nimport { DynamicContentBaseDirective } from '../dynamic-content-base.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { DynamicComponentService } from '../../common/service/dynamic-component.service';\r\nimport { DomUtil } from '../../common/util/dom-util';\r\nimport { PositionUtil } from '../../common/util/position-util';\r\nimport { Align } from '../../common/enum/align.enum';\r\nimport { VerticalAlign } from '../../common/enum/vertical-align.enum';\r\nimport { merge } from 'rxjs';\r\nimport { filter, takeWhile, tap } from 'rxjs/operators';\r\nimport { ClickService } from '../../common/service/click.service';\r\n\r\n@Directive({\r\n  selector: '[tetaTooltip]',\r\n})\r\nexport class TooltipDirective\r\n  extends DynamicContentBaseDirective\r\n  implements OnDestroy, OnInit\r\n{\r\n  /**\r\n   * Строка, шаблон или компонент для создания контекстного меню\r\n   */\r\n  @Input() tetaTooltip: string | TemplateRef<any> | Type<any>;\r\n  @Input() override align: Align = Align.center;\r\n  @Input() override verticalAlign: VerticalAlign = VerticalAlign.top;\r\n  private _componentRect: any;\r\n\r\n  get _dynamicContent() {\r\n    return this.tetaTooltip;\r\n  }\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT)\r\n    protected override _document: any,\r\n    protected override _elementRef: ElementRef,\r\n    protected override _service: DynamicComponentService,\r\n    protected override _injector: Injector,\r\n    protected override _zone: NgZone,\r\n    protected override _cdr: ChangeDetectorRef,\r\n    private _click: ClickService\r\n  ) {\r\n    super(_document, _elementRef, _service, _injector, _zone, _cdr);\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  showContent(event: MouseEvent): void {\r\n    event.preventDefault();\r\n    this.createTooltip();\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n    merge(this._click.click, this._click.contextMenu)\r\n      .pipe(\r\n        takeWhile(() => this._alive),\r\n        filter(() => this._open),\r\n        filter(() => this._componentRef != null),\r\n        filter(\r\n          (event: MouseEvent) =>\r\n            !DomUtil.clickedInside(this._elementRef.nativeElement, event)\r\n        ),\r\n        filter(\r\n          (event: MouseEvent) =>\r\n            !DomUtil.clickedInside(\r\n              this._componentRef.location.nativeElement,\r\n              event\r\n            )\r\n        ),\r\n        tap((_) => this.destroyContentRef())\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  protected setPosition() {\r\n    if (this._componentRef && this._open) {\r\n      if (!this._componentRect) {\r\n        this._componentRect =\r\n          this._componentRef.location.nativeElement.getBoundingClientRect();\r\n      }\r\n      const containerPosition =\r\n        this._elementRef.nativeElement.getBoundingClientRect();\r\n      const position = PositionUtil.getPosition(\r\n        containerPosition,\r\n        this._componentRect,\r\n        this.align,\r\n        this.verticalAlign,\r\n        0,\r\n        12\r\n      );\r\n      PositionUtil.setElementPosition(\r\n        this._componentRef.location.nativeElement,\r\n        position\r\n      );\r\n      const verticalClass =\r\n        containerPosition.top < position.top ? 'tooltip_bottom' : 'tooltip_top';\r\n      this._componentRef.instance.addClass(verticalClass);\r\n    }\r\n  }\r\n\r\n  private createTooltip(): void {\r\n    this._componentRef = this.createContentRef('tooltip');\r\n  }\r\n}\r\n",
            "selector": "[tetaTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Align"
                },
                {
                    "name": "tetaTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Строка, шаблон или компонент для создания контекстного меню",
                    "description": "<p>Строка, шаблон или компонент для создания контекстного меню</p>\n",
                    "line": 36,
                    "type": "string | TemplateRef<any> | Type<any>"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59
                }
            ],
            "propertiesClass": [
                {
                    "name": "_componentRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showContent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_service",
                        "type": "DynamicComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_click",
                        "type": "ClickService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_dynamicContent": {
                    "name": "_dynamicContent",
                    "getSignature": {
                        "name": "_dynamicContent",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-d28c23fa885228ba582832d69ee2d9b8-1",
            "file": "projects/chart/src/chart/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input } from '@angular/core';\r\n\r\nimport * as d3 from 'd3';\r\nimport { Series } from '../model/series';\r\nimport { BasePoint } from '../model/base-point';\r\n\r\n@Directive({\r\n  selector: '[tetaChartTooltip]',\r\n})\r\nexport class TooltipDirective {\r\n  @Input() series: Series<BasePoint>[];\r\n  @Input() size: DOMRect;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "selector": "[tetaChartTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Series<BasePoint>[]"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TooltipDirective-1"
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-382c2a05d9550f03b7645870a2daea8b",
            "file": "projects/components/src/component/accordion/accordion/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionClassName",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-accordion',\r\n  templateUrl: './accordion.component.html',\r\n  styleUrls: ['./accordion.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionComponent implements OnInit {\r\n  @HostBinding('class.accordion') private readonly accordionClassName = true;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "AccordionHeadComponent",
            "id": "component-AccordionHeadComponent-fcec37613be7f85d43bff7289fc75521",
            "file": "projects/components/src/component/accordion/accordion-head/accordion-head.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion-head",
            "styleUrls": [
                "./accordion-head.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-head.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showToggle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionHeadClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion-head'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "accordionItem$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionItemComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion-head",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "true"
                },
                {
                    "name": "class.accordion-head_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "class.accordion-head_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Host,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { AccordionItemComponent } from '../accordion-item/accordion-item.component';\r\n\r\n@Component({\r\n  selector: 'teta-accordion-head',\r\n  templateUrl: './accordion-head.component.html',\r\n  styleUrls: ['./accordion-head.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionHeadComponent implements OnInit {\r\n  @HostBinding('class.accordion-head') private readonly accordionHeadClass =\r\n    true;\r\n\r\n  @Input() showToggle = true;\r\n\r\n  private readonly accordionItem$: AccordionItemComponent;\r\n\r\n  constructor(\r\n    @Host()\r\n    @Inject(AccordionItemComponent)\r\n    accordionItem: AccordionItemComponent\r\n  ) {\r\n    this.accordionItem$ = accordionItem;\r\n  }\r\n\r\n  @HostListener('click')\r\n  toggle(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.accordionItem$.toggle();\r\n  }\r\n\r\n  @HostBinding('class.accordion-head_open')\r\n  get open(): boolean {\r\n    return this.accordionItem$.open;\r\n  }\r\n\r\n  @HostBinding('class.accordion-head_disabled')\r\n  get disabled(): boolean {\r\n    return this.accordionItem$.disabled;\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-head.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordionItem",
                        "type": "AccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "accordionItem",
                        "type": "AccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "open": {
                    "name": "open",
                    "getSignature": {
                        "name": "open",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n<div *ngIf=\"showToggle\" class=\"accordion-toggle\">\r\n  <teta-icon [name]=\"open ? 'arrowUpKey' : 'arrowDownKey'\"\r\n             [palette]=\"'text'\"></teta-icon>\r\n</div>\r\n\r\n"
        },
        {
            "name": "AccordionItemComponent",
            "id": "component-AccordionItemComponent-7a7884a4d71cdb58b8dccc5dec76b9a7",
            "file": "projects/components/src/component/accordion/accordion-item/accordion-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-accordion-item",
            "styleUrls": [
                "./accordion-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "accordionItemClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.accordion-item'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccordionContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "AccordionContentDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.accordion-item",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { AccordionContentDirective } from '../accordion-content.directive';\r\nimport { AccordionComponent } from '../accordion/accordion.component';\r\n\r\n@Component({\r\n  selector: 'teta-accordion-item',\r\n  templateUrl: './accordion-item.component.html',\r\n  styleUrls: ['./accordion-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionItemComponent implements OnInit {\r\n  @ContentChild(AccordionContentDirective, { static: false })\r\n  content: AccordionContentDirective;\r\n\r\n  @HostBinding('class.accordion-item_active')\r\n  @Input()\r\n  open: boolean;\r\n  @Input() disabled: boolean;\r\n\r\n  @HostBinding('class.accordion-item') private readonly accordionItemClass =\r\n    true;\r\n\r\n  private readonly accordion$: AccordionComponent;\r\n\r\n  constructor(\r\n    @Optional() @Inject(AccordionComponent) accordion: AccordionComponent,\r\n    private cdr$: ChangeDetectorRef\r\n  ) {\r\n    this.accordion$ = accordion;\r\n  }\r\n\r\n  toggle() {\r\n    this.open = !this.open;\r\n    this.cdr$.detectChanges();\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordion",
                        "type": "AccordionComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr$",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "accordion",
                        "type": "AccordionComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr$",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"teta-accordion-head\"></ng-content>\r\n<div class=\"accordion-content\" *ngIf=\"open\">\r\n  <ng-container *ngTemplateOutlet=\"content.template\"></ng-container>\r\n</div>\r\n"
        },
        {
            "name": "AlertSampleComponent",
            "id": "component-AlertSampleComponent-1534347530c7528ecef458a2dee2965d",
            "file": "projects/components/src/component/modal/modal-samples/alert-sample/alert-sample.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-alert-sample",
            "styleUrls": [
                "./alert-sample.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-sample.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "alert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dialog2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { DialogService } from '../../dialog.service';\r\n\r\n@Component({\r\n  selector: 'teta-alert-sample',\r\n  templateUrl: './alert-sample.component.html',\r\n  styleUrls: ['./alert-sample.component.scss'],\r\n})\r\nexport class AlertSampleComponent implements OnInit {\r\n  constructor(private _dialog: DialogService) {}\r\n\r\n  alert() {\r\n    this._dialog.alert('Some alert text');\r\n  }\r\n\r\n  dialog() {\r\n    this._dialog.confirm('Some alert text').subscribe((_) => {\r\n      alert(_.toString());\r\n    });\r\n  }\r\n\r\n  dialog2() {\r\n    this._dialog\r\n      .confirm('Some alert text', 'Edit', 'edit', 'red')\r\n      .subscribe((_) => {\r\n        alert(_.toString());\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert-sample.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar toolbar_panel\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n  <button teta-button [palette]=\"'primary'\" (click)=\"alert()\">\r\n    Alert\r\n  </button>\r\n\r\n  <button teta-button [palette]=\"'primary'\" (click)=\"dialog()\">\r\n    Dialog\r\n  </button>\r\n\r\n  <button teta-button [palette]=\"'red'\" (click)=\"dialog2()\">\r\n    Dangerous dialog\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "BarSeriesComponent",
            "id": "component-BarSeriesComponent-f146abfb6ddb4e3df78c9e3ab4050a5a",
            "file": "projects/chart/src/chart/chart-container/series/bar/bar-series.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:svg[teta-bar-series]",
            "styleUrls": [
                "./bar-series.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bar-series.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Series<T>",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "DOMRect",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "scaleBand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.ScaleBand<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getX",
                    "args": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getY",
                    "args": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "height",
                    "args": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "BasePoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                },
                {
                    "name": "width",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport { SeriesBaseComponent } from '../../../base/series-base.component';\r\nimport { BasePoint } from '../../../model/base-point';\r\nimport { ChartService } from '../../../chart.service';\r\nimport { ScaleService } from '../../../scale.service';\r\n\r\n@Component({\r\n  selector: 'svg:svg[teta-bar-series]',\r\n  templateUrl: './bar-series.component.html',\r\n  styleUrls: ['./bar-series.component.scss'],\r\n})\r\nexport class BarSeriesComponent<T extends BasePoint>\r\n  extends SeriesBaseComponent<T>\r\n  implements OnInit\r\n{\r\n  private scaleBand: d3.ScaleBand<any>;\r\n  private y: any;\r\n\r\n  constructor(\r\n    protected override svc: ChartService,\r\n    protected override cdr: ChangeDetectorRef,\r\n    protected override scaleService: ScaleService\r\n  ) {\r\n    super(svc, cdr, scaleService);\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    const x = this.scaleService.xScales.get(this.series.xAxisIndex);\r\n    const y = this.scaleService.yScales.get(this.series.yAxisIndex);\r\n\r\n    const domain = this.series.data?.map((_: BasePoint) => _.x);\r\n    const range = [x(domain[0]), x(domain[domain?.length - 1])];\r\n\r\n    this.scaleBand = d3\r\n      .scaleBand<number>()\r\n      .domain(domain)\r\n      .range(range)\r\n      .padding(0.1);\r\n    this.y = y;\r\n  }\r\n\r\n  width() {\r\n    return this.scaleBand.bandwidth();\r\n  }\r\n\r\n  height(point: BasePoint) {\r\n    return Math.abs(this.y(0) - this.y(point.y));\r\n  }\r\n\r\n  getX(point: BasePoint) {\r\n    return this.scaleBand(point.x);\r\n  }\r\n\r\n  getY(point: BasePoint) {\r\n    return this.y(point.y);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bar-series.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "SeriesBaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:rect *ngFor=\"let point of series.data\" [attr.y]=\"getY(point)\" [attr.x]=\"getX(point)\" [attr.width]=\"width()\"\r\n          [attr.height]=\"height(point)\"\r\n          [attr.fill]=\"point.color\"></svg:rect>\r\n"
        },
        {
            "name": "BooleanCellComponent",
            "id": "component-BooleanCellComponent-43e2267646b5e044fa4b5bb4f3836cb0",
            "file": "projects/components/src/component/table/default/boolean-cell/boolean-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-boolean-cell",
            "styleUrls": [
                "./boolean-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./boolean-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "svc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CellComponentBase } from '../../base/cell-component-base';\r\nimport { TableColumn } from '../../contract/table-column';\r\nimport { TableRow } from '../../contract/table-row';\r\nimport { TableService } from '../../service/table.service';\r\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\r\n\r\n@Component({\r\n  selector: 'teta-boolean-cell',\r\n  templateUrl: './boolean-cell.component.html',\r\n  styleUrls: ['./boolean-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BooleanCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit\r\n{\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n  @ViewChild('input', { static: false }) input: ElementRef;\r\n\r\n  constructor(public override svc: TableService<T>, public override cdr: ChangeDetectorRef) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  setValue(): void {\r\n    this.valueChanged();\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      this.cdr.markForCheck();\r\n      setTimeout(() => {\r\n        this.input?.nativeElement.focus();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit(): void {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./boolean-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\r\n  {{ row.data[column.name] }}\r\n</span>\r\n<teta-checkbox\r\n  #input\r\n  *ngIf=\"edit\"\r\n  [binary]=\"true\"\r\n  [(ngModel)]=\"row.data[column.name]\"\r\n  (blur)=\"setValue()\"\r\n></teta-checkbox>\r\n"
        },
        {
            "name": "BooleanFilterComponent",
            "id": "component-BooleanFilterComponent-efcaaff09470988f25f8196f61d82ccc",
            "file": "projects/components/src/component/filter/boolean-filter/boolean-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-boolean-filter",
            "styleUrls": [
                "./boolean-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./boolean-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooleanFilter",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "BooleanFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { BooleanFilter } from '../contarct/boolean-filter';\r\n\r\n@Component({\r\n  selector: 'teta-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BooleanFilterComponent\r\n  extends FilterComponentBase\r\n  implements OnInit\r\n{\r\n  @Input() column: FilterItem;\r\n  @Input() filterOptions: IIdName<any>[] = [];\r\n  @Output() filterChanged: EventEmitter<FilterBase> =\r\n    new EventEmitter<FilterBase>();\r\n\r\n  filter: BooleanFilter;\r\n  state$: FilterState;\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this.state$ = val;\r\n    this.filter = this.getFilter();\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  get state() {\r\n    return this.state$;\r\n  }\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  setFilter() {\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  private getFilter(): BooleanFilter {\r\n    let filter = this.state.booleanFilters.find(\r\n      (f) => f.field === this.column.filterField\r\n    );\r\n    if (!filter) {\r\n      filter = this.state.addBooleanFilter(\r\n        new BooleanFilter({\r\n          value: null,\r\n          field: this.column.filterField,\r\n          name: this.column.name,\r\n        })\r\n      );\r\n    }\r\n    return filter;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./boolean-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"padding-3\">\r\n  <teta-radio [ngModel]=\"filter.value\" (ngModelChange)=\"setFilter()\">\r\n    <teta-radio-button [value]=\"null\">null</teta-radio-button>\r\n    <teta-radio-button [value]=\"true\">true</teta-radio-button>\r\n    <teta-radio-button [value]=\"false\">false</teta-radio-button>\r\n  </teta-radio>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-772259be0a54ba7c587049974416e3bf-1",
            "file": "projects/components/src/component/button/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[teta-button], teta-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "square",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "view",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ButtonViewType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\nexport type ButtonViewType = 'primary' | 'outline' | 'ghost';\r\n\r\n@Component({\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'button[teta-button], teta-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input() palette: string;\r\n  @Input() class;\r\n  @Input() view: ButtonViewType = 'primary';\r\n  @Input() square = false;\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [this.class, 'button'];\r\n    if (this.palette) {\r\n      result.push(`button-${this.palette}`);\r\n    }\r\n    if (this.view) {\r\n      result.push(`button_${this.view}`);\r\n    }\r\n    if (this.square) {\r\n      result.push(`button-square`);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "CellComponent",
            "id": "component-CellComponent-ea2e0dab0953010ee362e54bd0b8de9b",
            "file": "projects/components/src/component/table/cell/cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-cell",
            "styleUrls": [
                "./cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { TableRow } from '../contract/table-row';\r\nimport { TableService } from '../service/table.service';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\n\r\n@Component({\r\n  selector: 'teta-cell',\r\n  templateUrl: './cell.component.html',\r\n  styleUrls: ['./cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CellComponent<T> implements OnInit, OnDestroy {\r\n  @Input() column: TableColumn;\r\n  @Input() filterOptions: IIdName<any>[];\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n  @Input() row: TableRow<T>;\r\n  @HostBinding('class.cell') private readonly tableCellClass = true;\r\n\r\n  private alive = true;\r\n\r\n  constructor(protected _svc: TableService<T>) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-cell-host [row]=\"row\"\r\n                [column]=\"column\"\r\n                [filterOptions]=\"filterOptions\"\r\n                [dict]=\"dict\"></teta-cell-host>\r\n"
        },
        {
            "name": "CellComponentBase",
            "id": "component-CellComponentBase-2843e55d443ac4bc2cfb8194a7d3ea62",
            "file": "projects/components/src/component/table/base/cell-component-base.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableService } from '../service/table.service';\r\nimport { TableRow } from '../contract/table-row';\r\nimport { filter, takeWhile } from 'rxjs/operators';\r\nimport { ICellCoordinates } from '../contract/i-cell-coordinates';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { ICellValue } from '../contract/i-cell-value';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport abstract class CellComponentBase<T> implements OnInit, OnDestroy {\r\n  @HostBinding('class.cell-component')\r\n  private readonly tableCellComponent = true;\r\n\r\n  get edit() {\r\n    return (\r\n      this._edit &&\r\n      this.svc.boolOrFuncCallback(this.svc.cellEditable)({\r\n        column: this.column,\r\n        row: this.row,\r\n      })\r\n    );\r\n  }\r\n\r\n  _edit: boolean;\r\n  column: TableColumn;\r\n  filterOptions: IIdName<any>[] = [];\r\n  dict: IDictionary<IIdName<any>[]> = {};\r\n  row: TableRow<T>;\r\n\r\n  protected _alive = true;\r\n\r\n  protected constructor(\r\n    protected svc: TableService<T>,\r\n    protected cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  valueChanged(): void {\r\n    this.svc.changeValue({\r\n      column: this.column,\r\n      row: this.row,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  private init(): void {\r\n    this.svc.editRowStart\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((_) => this.column.editable)\r\n      )\r\n      .subscribe((cell: ICellCoordinates<T>) => {\r\n        if (\r\n          this.row === cell?.row &&\r\n          !this._edit &&\r\n          this.svc.boolOrFuncCallback(this.svc.cellEditable)({\r\n            column: this.column,\r\n            row: this.row,\r\n          })\r\n        ) {\r\n          this.start(cell, 'row');\r\n        }\r\n        if (this.row !== cell?.row && this._edit) {\r\n          this.stop();\r\n        }\r\n      });\r\n\r\n    this.svc.editCellStart\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((_) => this.column.editable)\r\n      )\r\n      .subscribe((cell: ICellCoordinates<T>) => {\r\n        if (\r\n          this.row === cell.row &&\r\n          this.column.name === cell.column.name &&\r\n          !this._edit\r\n        ) {\r\n          this.start(cell, 'cell');\r\n        }\r\n        if (\r\n          (this.row !== cell.row || this.column.name !== cell.column.name) &&\r\n          this._edit\r\n        ) {\r\n          this.stop();\r\n        }\r\n      });\r\n\r\n    this.svc.valueSet\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((cellValue: ICellValue<T>) => {\r\n        if (\r\n          this.row === cellValue.cell.row &&\r\n          this.column.name === cellValue.cell.column.name\r\n        ) {\r\n          this.row.data[this.column.name] = cellValue.value;\r\n          this.cdr.detectChanges();\r\n        }\r\n      });\r\n  }\r\n\r\n  private start(initiator: ICellCoordinates<T>, type: 'cell' | 'row') {\r\n    this._edit = true;\r\n    this.startEdit(initiator, type);\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  private stop() {\r\n    this._edit = false;\r\n    this.stopEdit();\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  abstract startEdit(\r\n    initiator: ICellCoordinates<T>,\r\n    type: 'cell' | 'row'\r\n  ): void;\r\n\r\n  abstract stopEdit(): void;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "edit": {
                    "name": "edit",
                    "getSignature": {
                        "name": "edit",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            }
        },
        {
            "name": "CellHostComponent",
            "id": "component-CellHostComponent-e1775306f3fc7d133c1c9ad5bdc112b8",
            "file": "projects/components/src/component/table/cell-host/cell-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-cell-host",
            "styleUrls": [
                "./cell-host.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { CellComponentBase } from '../base/cell-component-base';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { TableRow } from '../contract/table-row';\r\nimport { getCellComponent } from '../contract/cell-components-map';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\n\r\n@Component({\r\n  selector: 'teta-cell-host',\r\n  template: '',\r\n  styleUrls: ['./cell-host.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CellHostComponent<T> implements OnInit, OnDestroy, OnChanges {\r\n  @Input() column: TableColumn;\r\n  @Input() row: TableRow<T>;\r\n  @Input() filterOptions: IIdName<any>[];\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n  private _init = false;\r\n  private _componentRef: ComponentRef<any>;\r\n\r\n  constructor(private viewContainerRef: ViewContainerRef) {}\r\n\r\n  ngOnInit(): void {\r\n    if (!CellComponentBase.isPrototypeOf(this.column.cellComponent)) {\r\n      this.column.cellComponent = getCellComponent(this.column);\r\n    }\r\n    this._componentRef = this.viewContainerRef.createComponent(\r\n      this.column.cellComponent\r\n    );\r\n    this._componentRef.instance.column = this.column;\r\n    this._componentRef.instance.row = this.row;\r\n    this._componentRef.instance.filterOptions = this.filterOptions;\r\n    this._componentRef.instance.dict = this.dict;\r\n    this._init = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (\r\n      this._init &&\r\n      (changes.hasOwnProperty('row') ||\r\n        changes.hasOwnProperty('column') ||\r\n        changes.hasOwnProperty('filterOptions') ||\r\n        changes.hasOwnProperty('dict'))\r\n    ) {\r\n      this._componentRef.instance.row = this.row;\r\n      this._componentRef.instance.column = this.column;\r\n      this._componentRef.instance.filterOptions = this.filterOptions;\r\n      this._componentRef.instance.dict = this.dict;\r\n      this._componentRef.injector.get(ChangeDetectorRef).markForCheck();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cell-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ]
        },
        {
            "name": "Chart3dComponent",
            "id": "component-Chart3dComponent-661e92b2f9c828e4b616aa936646eb27",
            "file": "projects/components/src/component/chart-3d/chart3d/chart3d.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart3d",
            "styleUrls": [
                "./chart3d.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart3d.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_camera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.PerspectiveCamera",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart3dOptions",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrbitControls",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_obs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Renderer",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Scene",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canvasRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas'"
                        }
                    ]
                },
                {
                    "name": "gridColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "SIDE_SIZE",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addResizeObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createScene",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "drawTicks",
                    "args": [
                        {
                            "name": "x",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "z",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "z",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScales",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series3d<Base3dPoint>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: any; y: any; z: any; }",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series3d<Base3dPoint>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "makeSprite",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opts",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "THREE.Sprite",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opts",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRenderingLoop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport * as d3 from 'd3';\r\nimport { Chart3dOptions } from '../model/chart-3d-options';\r\nimport { Base3dPoint } from '../model/base-3d-point';\r\nimport { Series3d } from '../model/series-3d';\r\nimport { ThemeSwitchService } from '../../theme-switch/theme-switch.service';\r\nimport { takeWhile, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-chart3d',\r\n  templateUrl: './chart3d.component.html',\r\n  styleUrls: ['./chart3d.component.scss'],\r\n})\r\nexport class Chart3dComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('canvas') canvasRef: ElementRef;\r\n\r\n  private _scene: THREE.Scene;\r\n  private _camera: THREE.PerspectiveCamera;\r\n  private _renderer: THREE.Renderer;\r\n  private _controls: OrbitControls;\r\n  private _obs: ResizeObserver;\r\n  private _config: Chart3dOptions;\r\n\r\n  private SIDE_SIZE = 100;\r\n  private gridColor: any;\r\n\r\n  private _alive = true;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _themeService: ThemeSwitchService\r\n  ) {}\r\n\r\n  @Input() set config(config: Chart3dOptions) {\r\n    if (config) {\r\n      this._config = config;\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  get config() {\r\n    return this._config;\r\n  }\r\n\r\n  private get canvas(): HTMLCanvasElement {\r\n    return this.canvasRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._themeService.theme\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        tap((_) => {\r\n          this.gridColor = _ ? '#474751' : '#d7dee3';\r\n          this.init();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.addResizeObserver();\r\n    this.createScene();\r\n    this.startRenderingLoop();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  private init() {\r\n    if (!this._scene) {\r\n      return;\r\n    }\r\n\r\n    while (this._scene.children.length > 0) {\r\n      this._scene.remove(this._scene.children[0]);\r\n    }\r\n\r\n    const { x, y, z } = this.getScales(this._config.series);\r\n\r\n    this.config.series.forEach((data, idx) => {\r\n      const geometry = new THREE.BufferGeometry().setFromPoints(\r\n        data.points.map((_) => new THREE.Vector3(x(_.x), z(_.z), y(_.y)))\r\n      );\r\n\r\n      const color = d3.scaleOrdinal(d3.schemeTableau10);\r\n\r\n      const material = new THREE.LineBasicMaterial({\r\n        color: data?.color ?? color(idx.toString()),\r\n      });\r\n\r\n      const line = new THREE.Line(geometry, material);\r\n\r\n      line.computeLineDistances();\r\n      line.scale.set(1, 1, 1);\r\n      this._scene.add(line);\r\n    });\r\n\r\n    const plane = new THREE.GridHelper(\r\n      this.SIDE_SIZE,\r\n      this.SIDE_SIZE / 10,\r\n      this.gridColor,\r\n      this.gridColor\r\n    );\r\n\r\n    plane.position.set(this.SIDE_SIZE / 2, 0, this.SIDE_SIZE / 2);\r\n    this._scene.add(plane);\r\n\r\n    const gridX = new THREE.GridHelper(\r\n      this.SIDE_SIZE,\r\n      this.SIDE_SIZE / 10,\r\n      this.gridColor,\r\n      this.gridColor\r\n    );\r\n    gridX.geometry.rotateX(-Math.PI / 2);\r\n    gridX.position.set(this.SIDE_SIZE / 2, this.SIDE_SIZE / 2, 0);\r\n    this._scene.add(gridX);\r\n\r\n    const gridY = new THREE.GridHelper(\r\n      this.SIDE_SIZE,\r\n      this.SIDE_SIZE / 10,\r\n      this.gridColor,\r\n      this.gridColor\r\n    );\r\n    gridY.geometry.rotateZ(Math.PI / 2);\r\n    gridY.position.set(0, this.SIDE_SIZE / 2, this.SIDE_SIZE / 2);\r\n    this._scene.add(gridY);\r\n\r\n    this.drawTicks(x, y, z);\r\n\r\n    this._controls = new OrbitControls(this._camera, this._renderer.domElement);\r\n\r\n    this._controls.enableDamping = true;\r\n    this._controls.enablePan = true;\r\n    this._controls.dampingFactor = 0.25;\r\n    this._controls.screenSpacePanning = true;\r\n    this._controls.minDistance = 0;\r\n    this._controls.maxDistance = 10000;\r\n    this._controls.maxPolarAngle = Math.PI / 2;\r\n\r\n    this._controls.enableZoom = true;\r\n  }\r\n\r\n  private createScene() {\r\n    this._scene = new THREE.Scene();\r\n\r\n    const aspectRatio =\r\n      this._elementRef.nativeElement.clientWidth /\r\n      this._elementRef.nativeElement.clientHeight;\r\n\r\n    const fieldOfView = 10;\r\n    const nearClippingPane = 1;\r\n    const farClippingPane = 10000;\r\n\r\n    this._camera = new THREE.PerspectiveCamera(\r\n      fieldOfView,\r\n      aspectRatio,\r\n      nearClippingPane,\r\n      farClippingPane\r\n    );\r\n\r\n    this._camera.position.set(1300, 1300, 1300).setLength(1300);\r\n    this._scene.add(this._camera);\r\n  }\r\n\r\n  private setSize(width: number, height: number) {\r\n    this._camera.aspect = width / height;\r\n    this._renderer.setSize(width, height);\r\n\r\n    this._camera.updateProjectionMatrix();\r\n  }\r\n\r\n  private render() {\r\n    this._renderer.render(this._scene, this._camera);\r\n  }\r\n\r\n  private startRenderingLoop() {\r\n    this._renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      canvas: this.canvas,\r\n      alpha: true,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      this._controls?.update();\r\n      this.render();\r\n    };\r\n\r\n    animate();\r\n  }\r\n\r\n  private addResizeObserver() {\r\n    this._obs = new ResizeObserver((_) => {\r\n      this.setSize(_[0]?.contentRect.width, _[0]?.contentRect.height);\r\n    });\r\n\r\n    this._obs.observe(this._elementRef.nativeElement);\r\n  }\r\n\r\n  private makeSprite(text: string, opts?: { fontSize?: number }): THREE.Sprite {\r\n    const fontSize = 20;\r\n\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const textWidth = text.length * 50;\r\n    canvas.height = 50;\r\n    canvas.width = 50;\r\n\r\n    if(ctx) {\r\n      ctx.font = `${fontSize}px Arial`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillStyle = '#A0A0A0';\r\n      ctx.fillText(text, 25, 25);\r\n    }\r\n\r\n    const texture = new THREE.Texture(canvas);\r\n    texture.minFilter = THREE.LinearFilter;\r\n    texture.needsUpdate = true;\r\n    const spriteMaterial = new THREE.SpriteMaterial({\r\n      map: texture,\r\n    });\r\n\r\n    const sprite = new THREE.Sprite(spriteMaterial);\r\n    sprite.scale.set(5, 5, 5);\r\n\r\n    return sprite;\r\n  }\r\n\r\n  private drawTicks(x: any, y: any, z: any) {\r\n    const ticks = new THREE.Object3D();\r\n    const scalesExtrems: any[] = [];\r\n\r\n    [x, y, z].forEach((scale, idx) => {\r\n      const generatedTicks = scale.ticks(this.SIDE_SIZE / 10);\r\n\r\n      scalesExtrems.push(d3.max(generatedTicks));\r\n\r\n      generatedTicks.forEach((_: any) => {\r\n        const sprite = this.makeSprite(_);\r\n\r\n        if (idx === 0) {\r\n          sprite.position.set(x(_), z(0), -5);\r\n        }\r\n\r\n        if (idx === 1) {\r\n          sprite.position.set(-5, z(0), y(_));\r\n        }\r\n\r\n        if (idx === 2) {\r\n          sprite.position.set(0, z(_), -5);\r\n        }\r\n\r\n        ticks.add(sprite);\r\n      });\r\n    });\r\n\r\n    const northLabel = this.makeSprite('North', { fontSize: 28 });\r\n    const westLabel = this.makeSprite('West', { fontSize: 28 });\r\n    const tvdLabel = this.makeSprite('TVD', { fontSize: 28 });\r\n\r\n    northLabel.position.set(x(scalesExtrems[0]) + 10, 0, 0);\r\n    westLabel.position.set(0, 0, y(scalesExtrems[1]) + 10);\r\n    tvdLabel.position.set(0, z(scalesExtrems[2]), 0);\r\n\r\n    ticks.add(northLabel, westLabel, tvdLabel);\r\n\r\n    this._scene.add(ticks);\r\n  }\r\n\r\n  private getScales(series: Series3d<Base3dPoint>[]) {\r\n    const extrems = series.map((_) => ({\r\n      x: d3.extent(_.points, (p: any) => p.x),\r\n      y: d3.extent(_.points, (p: any) => p.y),\r\n      z: d3.extent(_.points, (p: any) => p.z),\r\n    }));\r\n\r\n    const flattenExtrems = extrems.reduce(\r\n      (acc: any, _): { x: [number]; y: [number]; z: [number] } => {\r\n        acc.x = acc.x.concat(_.x);\r\n        acc.y = acc.y.concat(_.y);\r\n        acc.z = acc.z.concat(_.z);\r\n        return acc as any;\r\n      },\r\n      { x: [], y: [], z: [] }\r\n    );\r\n\r\n    const x = d3\r\n      .scaleLinear()\r\n      .domain([\r\n        d3.min(flattenExtrems.x) as any,\r\n        this._config?.axes?.max == null\r\n          ? d3.max(flattenExtrems.x)\r\n          : this._config.axes.max,\r\n      ])\r\n      .range([0, this.SIDE_SIZE])\r\n      .nice();\r\n\r\n    const y = d3\r\n      .scaleLinear()\r\n      .domain([\r\n        d3.min(flattenExtrems.y) as any,\r\n        this._config?.axes?.max == null\r\n          ? d3.max(flattenExtrems.y)\r\n          : this._config.axes.max,\r\n      ])\r\n      .range([0, this.SIDE_SIZE])\r\n      .nice();\r\n\r\n    const z = d3\r\n      .scaleLinear()\r\n      .domain([\r\n        d3.min(flattenExtrems.z) as any,\r\n        this._config?.axes?.max == null\r\n          ? d3.max(flattenExtrems.z)\r\n          : this._config.axes.max,\r\n      ])\r\n      .range([this.SIDE_SIZE, 0])\r\n      .nice();\r\n\r\n    return { x, y, z };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./chart3d.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_themeService",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_themeService",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "Chart3dOptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "Chart3dOptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "canvas": {
                    "name": "canvas",
                    "getSignature": {
                        "name": "canvas",
                        "type": "",
                        "returnType": "HTMLCanvasElement",
                        "line": 55
                    }
                }
            },
            "templateData": "<canvas #canvas></canvas>\r\n"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-b57880cf202e083f13aa2b5207a92e42",
            "file": "projects/chart/src/chart/chart/chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ChartService"
                }
            ],
            "selector": "teta-chart",
            "styleUrls": [
                "./chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "legendSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Series<BasePoint>>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ChartService } from '../chart.service';\r\nimport { IChartConfig } from '../model/i-chart-config';\r\nimport { defaultChartConfig } from '../default/default-chart-config';\r\nimport { BasePoint } from '../model/base-point';\r\nimport { Series } from '../model/series';\r\n\r\n@Component({\r\n  selector: 'teta-chart',\r\n  templateUrl: './chart.component.html',\r\n  styleUrls: ['./chart.component.scss'],\r\n  providers: [ChartService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChartComponent implements OnInit {\r\n  legendSeries: Array<Series<BasePoint>>;\r\n\r\n  @Input() set config(config: IChartConfig) {\r\n    this._config = Object.assign(defaultChartConfig, config);\r\n  }\r\n\r\n  get config() {\r\n    return this._config;\r\n  }\r\n\r\n  private _config;\r\n\r\n  constructor(private _service: ChartService) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "IChartConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "IChartConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"column column_auto\">\r\n  <teta-chart-container [config]=\"config\"></teta-chart-container>\r\n</div>\r\n<teta-legend [series]=\"config.series\"></teta-legend>\r\n"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-8503a53cdd0ded91febf8aee8e53f174-1",
            "file": "projects/components/src/component/chart/chart/chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart",
            "styleUrls": [
                "./chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "ChartOptions"
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "IZoomEvent"
                }
            ],
            "outputsClass": [
                {
                    "name": "plotBandsMove",
                    "defaultValue": "new EventEmitter<\r\n    IDragEvent<PlotBand>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<IDragEvent<PlotBand>>"
                },
                {
                    "name": "plotLinesMove",
                    "defaultValue": "new EventEmitter<\r\n    IDragEvent<PlotLine>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<IDragEvent<PlotLine>>"
                },
                {
                    "name": "pointMove",
                    "defaultValue": "new EventEmitter<\r\n    IDragEvent<Series<BasePoint>>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter<IDragEvent<Series<BasePoint>>>"
                },
                {
                    "name": "seriesMove",
                    "defaultValue": "new EventEmitter<\r\n    IDragEvent<Series<BasePoint>>\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<IDragEvent<Series<BasePoint>>>"
                },
                {
                    "name": "zoomChange",
                    "defaultValue": "new EventEmitter<IZoomEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter<IZoomEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaChart",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IZoomEvent",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chart', {static: true}"
                        }
                    ]
                },
                {
                    "name": "hasSeriesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "size$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redraw",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resize",
                    "args": [
                        {
                            "name": "contentRect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "contentRect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ChartOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeWhile, throttleTime } from 'rxjs/operators';\r\nimport { TetaChart } from '../core/chart';\r\nimport { ChartOptions } from '../model/chart-options';\r\nimport { BasePoint } from '../model/point/base-point';\r\nimport { Series } from '../model/series';\r\nimport { PlotLine } from '../model/plot-line';\r\nimport { PlotBand } from '../model/plot-band';\r\nimport { IDragEvent } from '../model/i-drag-event';\r\nimport { IZoomEvent } from '../model/i-zoom-event';\r\nimport { SeriesType } from '../model/enum/series-type';\r\nimport { BarPoint } from '../model/point/bar-point';\r\n\r\n@Component({\r\n  selector: 'teta-chart',\r\n  templateUrl: './chart.component.html',\r\n  styleUrls: ['./chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChartComponent\r\n  implements OnInit, AfterViewInit, OnDestroy, OnChanges\r\n{\r\n  @Input() zoom: IZoomEvent;\r\n\r\n  @Input() config: ChartOptions;\r\n\r\n  @Output()\r\n  plotLinesMove: EventEmitter<IDragEvent<PlotLine>> = new EventEmitter<\r\n    IDragEvent<PlotLine>\r\n  >();\r\n  @Output()\r\n  plotBandsMove: EventEmitter<IDragEvent<PlotBand>> = new EventEmitter<\r\n    IDragEvent<PlotBand>\r\n  >();\r\n\r\n  @Output()\r\n  seriesMove: EventEmitter<IDragEvent<Series<BasePoint>>> = new EventEmitter<\r\n    IDragEvent<Series<BasePoint>>\r\n  >();\r\n\r\n  @Output()\r\n  pointMove: EventEmitter<IDragEvent<Series<BasePoint>>> = new EventEmitter<\r\n    IDragEvent<Series<BasePoint>>\r\n  >();\r\n\r\n  @Output()\r\n  zoomChange: EventEmitter<IZoomEvent> = new EventEmitter<IZoomEvent>();\r\n\r\n  @ViewChild('chart', {\r\n    static: true,\r\n  })\r\n  chart: ElementRef;\r\n  hasSeriesData: boolean;\r\n\r\n  private _config: ChartOptions;\r\n  private _alive = true;\r\n  private size$ = new Subject<any>();\r\n  private _observer: ResizeObserver;\r\n  private _chart: TetaChart;\r\n  private _zoom: IZoomEvent;\r\n\r\n  constructor(private _zone: NgZone) {}\r\n\r\n  @HostListener('click', ['$event']) click(event: any): void {\r\n    const composedPath = event.composedPath();\r\n    const triggerToken = 'legend';\r\n\r\n    const isLegend = composedPath.some((_) =>\r\n      _.classList?.contains(triggerToken)\r\n    );\r\n\r\n    if (isLegend) {\r\n      const clickedElement: any = event.target?.__data__;\r\n\r\n      if (!clickedElement) {\r\n        return;\r\n      }\r\n\r\n      const serieIndex = this._config?.series?.indexOf(clickedElement);\r\n\r\n      if (clickedElement.serieType === SeriesType.bar) {\r\n        const foundSerie = this._config.series[clickedElement.serieIndex];\r\n\r\n        this._config.series[foundSerie.id].data = this._config.series[\r\n          foundSerie.id\r\n        ].data.map((_: BasePoint & BarPoint) => {\r\n          if (clickedElement.id === _.id) {\r\n            return {\r\n              ..._,\r\n              visible: !_.visible,\r\n            };\r\n          }\r\n\r\n          return _;\r\n        });\r\n\r\n        this.redraw(this._config);\r\n      }\r\n\r\n      if (serieIndex !== -1) {\r\n        const foundSerie = this._config.series[serieIndex];\r\n\r\n        const yAxisIndex = foundSerie?.yAxisIndex;\r\n\r\n        this._config.series[serieIndex].visible = !foundSerie.visible;\r\n\r\n        const attachedYAxes = this._config.series\r\n          ?.filter((_) => _.visible)\r\n          .map((_) => _.yAxisIndex);\r\n\r\n        const shouldVisibleYAxis = attachedYAxes?.includes(yAxisIndex);\r\n\r\n        this._config.yAxis[yAxisIndex].visible = shouldVisibleYAxis;\r\n        this.redraw(this._config);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this.config && changes.hasOwnProperty('config')) {\r\n      this.setConfig(this.config);\r\n\r\n      if (this.zoom) {\r\n        this._chart?.setZoom(this.zoom);\r\n      }\r\n    }\r\n\r\n    if (this.zoom && changes.hasOwnProperty('zoom')) {\r\n      this._chart?.setZoom(this.zoom);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this._observer = new ResizeObserver((entries) => {\r\n      const { contentRect } = entries[0];\r\n      this.size$.next(contentRect);\r\n    });\r\n\r\n    this._observer.observe(this.chart.nativeElement);\r\n\r\n    this.size$\r\n      .pipe(throttleTime(100, undefined, { trailing: true }))\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        map((_) => {\r\n          this.resize(_);\r\n          this.redraw(this._config);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  get showLegend(): boolean {\r\n    return this._config?.legend?.visible;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n    this._observer?.unobserve(this.chart.nativeElement);\r\n  }\r\n\r\n  private redraw(config: any) {\r\n    if (config) {\r\n      this._chart.redraw(config);\r\n    }\r\n  }\r\n\r\n  private resize(contentRect: any) {\r\n    const { width, height } = contentRect;\r\n    this._chart.setSize({\r\n      width,\r\n      height,\r\n    });\r\n  }\r\n\r\n  private setConfig(config: ChartOptions) {\r\n    if (config) {\r\n      this._config = config;\r\n      this.hasSeriesData = !!this._config?.series?.some((_) => _.data.length);\r\n\r\n      if (!this._chart) {\r\n        this._chart = new TetaChart(this._config, this.chart);\r\n\r\n        this._chart.plotLinesMove\r\n          .pipe(takeWhile((_) => this._alive))\r\n          .subscribe((_) => this.plotLinesMove.emit(_));\r\n\r\n        this._chart.plotBandsMove\r\n          .pipe(takeWhile((_) => this._alive))\r\n          .subscribe((_) => this.plotBandsMove.emit(_));\r\n\r\n        this._chart.seriesMove\r\n          .pipe(takeWhile((_) => this._alive))\r\n          .subscribe((_) => this.seriesMove.emit(_));\r\n\r\n        this._chart.pointMove\r\n          .pipe(takeWhile((_) => this._alive))\r\n          .subscribe((_) => {\r\n            this.pointMove.emit(_);\r\n          });\r\n\r\n        this._chart.zoom\r\n          .pipe(\r\n            takeWhile((_) => this._alive),\r\n            map((_) => {\r\n              this.zoomChange.emit(_);\r\n            })\r\n          )\r\n          .subscribe();\r\n      }\r\n\r\n      if (this.chart) {\r\n        if (this.hasSeriesData) {\r\n          if (!this._zoom || this._zoom?.event?.type === 'end') {\r\n            this.redraw(this._config);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 0;\r\n  flex-grow: 1;\r\n  flex-basis: 1px;\r\n}\r\n\r\n.chart-placeholder {\r\n  margin: auto;\r\n  width: 100%;\r\n}\r\n\r\n.chart-placeholder span {\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  display: block;\r\n}\r\n\r\n.legend-container {\r\n  flex-shrink: 0;\r\n  flex-basis: 1px;\r\n}\r\n\r\n::ng-deep .grid line {\r\n  stroke-dasharray: 1, 4;\r\n}\r\n\r\n::ng-deep .tooltip-chart {\r\n  padding: 8px 12px;\r\n  border-radius: 2px;\r\n}\r\n\r\n::ng-deep .legend {\r\n  grid-gap: 8px;\r\n  padding-bottom: 5px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n::ng-deep .legend .item {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n}\r\n\r\n::ng-deep .legend .item .swatch {\r\n  width: 10px;\r\n  height: 10px;\r\n}\r\n\r\n::ng-deep .legend .item .line {\r\n  width: 12px;\r\n  height: 2px;\r\n}\r\n\r\n::ng-deep .legend .item .label {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  margin-left: 5px;\r\n}\r\n",
                    "styleUrl": "./chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "OnChanges"
            ],
            "accessors": {
                "showLegend": {
                    "name": "showLegend",
                    "getSignature": {
                        "name": "showLegend",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 172
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ChartComponent-1",
            "templateData": "<div [style.display]=\"hasSeriesData ? 'contents' : 'none'\">\r\n  <div #chart class=\"chart-container\"></div>\r\n  <div *ngIf=\"showLegend\" class=\"legend-container\"></div>\r\n</div>\r\n<div [style.display]=\"!hasSeriesData ? 'block' : 'none'\" class=\"chart-placeholder text-align-center\">\r\n  <span class=\"font-body-3 color-text-40\">Данные отсутствуют</span>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "ChartContainerComponent",
            "id": "component-ChartContainerComponent-c8caac325f4774c56ffdc05214ef7e92",
            "file": "projects/chart/src/chart/chart-container/chart-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-chart-container",
            "styleUrls": [
                "./chart-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IChartConfig"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DOMRect>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sumSize",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "xAxes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "yAxes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Axis>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "getVisibleRect",
                    "args": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: any; top: any; width: number; height: number; }",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXAxisTranslate",
                    "args": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYAxisTranslate",
                    "args": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "DOMRect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nonOppositeFilter",
                    "args": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(_: any) => boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "oppositeFilter",
                    "args": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(_: any) => boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "Axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentChecked,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { IChartConfig } from '../model/i-chart-config';\r\nimport { ChartService } from '../chart.service';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { AxesService } from '../axes.service';\r\nimport { Axis } from '../core/axis/axis';\r\nimport { IPointer } from '../model/i-pointer';\r\n\r\n@Component({\r\n  selector: 'teta-chart-container',\r\n  templateUrl: './chart-container.component.html',\r\n  styleUrls: ['./chart-container.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChartContainerComponent\r\n  implements OnInit, OnChanges, AfterViewChecked, AfterContentChecked\r\n{\r\n  @Input() config: IChartConfig;\r\n\r\n  yAxes: Map<number, Axis>;\r\n  xAxes: Map<number, Axis>;\r\n  size: Observable<DOMRect>;\r\n\r\n  private _observer: ResizeObserver;\r\n\r\n  constructor(\r\n    private _svc: ChartService,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _elementRef: ElementRef,\r\n    private _axesService: AxesService\r\n  ) {\r\n    this.size = this._svc.size.pipe(\r\n      throttleTime(100, undefined, { trailing: true }),\r\n      tap(() => {\r\n        setTimeout(() => {\r\n          this._cdr.detectChanges();\r\n        });\r\n      })\r\n    );\r\n\r\n    this.yAxes = this._axesService.yAxis;\r\n    this.xAxes = this._axesService.xAxis;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\r\n      this._svc.setSize(entries[0].contentRect);\r\n    });\r\n    this._observer.observe(this._elementRef.nativeElement);\r\n\r\n    this._svc.init(this.config);\r\n  }\r\n\r\n  private sumSize = (acc, curr) => acc + curr.selfSize;\r\n\r\n  private oppositeFilter(axis?: Axis) {\r\n    return (_) =>\r\n      _.options.opposite && _.options.visible && axis.index <= _.index;\r\n  }\r\n\r\n  private nonOppositeFilter(axis?: Axis) {\r\n    return (_) =>\r\n      _.options.opposite !== true && _.options.visible && _.index <= axis.index;\r\n  }\r\n\r\n  getVisibleRect(size: DOMRect) {\r\n    const yAxesArray = [...this.yAxes.values()];\r\n    const xAxesArray = [...this.xAxes.values()];\r\n\r\n    const left = yAxesArray\r\n      .filter((_) => _.options.opposite !== true && _.options.visible)\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const right = yAxesArray\r\n      .filter((_) => _.options.opposite && _.options.visible)\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const bottom = xAxesArray\r\n      .filter((_) => _.options.opposite !== true && _.options.visible)\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const top = xAxesArray\r\n      .filter((_) => _.options.opposite && _.options.visible)\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const rect = {\r\n      left,\r\n      top,\r\n      width: size.width - left - right + 1,\r\n      height: size.height - top - bottom + 1,\r\n    };\r\n\r\n    return rect;\r\n  }\r\n\r\n  getYAxisTranslate(axis: Axis, size: DOMRect): string {\r\n    const yAxesArray = [...this.yAxes.values()];\r\n\r\n    const translateOpposite = yAxesArray\r\n      .filter(this.nonOppositeFilter(axis))\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const translateNonOpposite = yAxesArray\r\n      .filter(this.oppositeFilter(axis))\r\n      .reduce(this.sumSize, 0);\r\n\r\n    return `translate(${\r\n      axis.options.opposite\r\n        ? size.width - translateNonOpposite\r\n        : translateOpposite\r\n    }, 0)`;\r\n  }\r\n\r\n  getXAxisTranslate(axis: Axis, size: DOMRect): string {\r\n    const xAxesArray = [...this.xAxes.values()];\r\n\r\n    const translateNonOpposite = xAxesArray\r\n      .filter(this.nonOppositeFilter(axis))\r\n      .reduce(this.sumSize, 0);\r\n\r\n    const translateOpposite = xAxesArray\r\n      .filter(this.oppositeFilter(axis))\r\n      .reduce(this.sumSize, 0);\r\n\r\n    return `translate(0, ${\r\n      axis.options.opposite\r\n        ? translateOpposite\r\n        : size.height - translateNonOpposite\r\n    })`;\r\n  }\r\n\r\n  mouseMove(event: IPointer) {\r\n    this._svc.setPointerMove(event);\r\n  }\r\n\r\n  ngAfterContentChecked(): void {}\r\n\r\n  ngAfterViewChecked(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  min-width: 0;\r\n  min-height: 0;\r\n}\r\n",
                    "styleUrl": "./chart-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterViewChecked",
                "AfterContentChecked"
            ],
            "templateData": "<ng-container *ngIf=\"size | async as s\">\r\n  <teta-tooltip [size]=\"s\"></teta-tooltip>\r\n  <svg [attr.width]=\"s.width\" [attr.height]=\"s.height\" (mousemove)=\"mouseMove($event)\">\r\n    <ng-container *ngIf=\"getVisibleRect(s) as rect\">\r\n      <defs>\r\n        <clipPath id=\"visible-window\">\r\n          <rect [attr.x]=\"rect.left\" [attr.y]=\"rect.top\" [attr.width]=\"rect.width\" [attr.height]=\"rect.height\"></rect>\r\n        </clipPath>\r\n      </defs>\r\n    </ng-container>\r\n    <g class=\"y-axis-container\">\r\n      <g *ngFor=\"let item of yAxes | keyvalue\"\r\n         teta-y-axis\r\n         [axis]=\"item.value\"\r\n         [size]=\"s\"\r\n         [attr.transform]=\"getYAxisTranslate(item.value, s)\"></g>\r\n    </g>\r\n    <g class=\"x-axis-container\">\r\n      <g *ngFor=\"let item of xAxes | keyvalue\"\r\n         teta-x-axis\r\n         [axis]=\"item.value\"\r\n         [attr.transform]=\"getXAxisTranslate(item.value, s)\"></g>\r\n    </g>\r\n    <g clip-path=\"url(#visible-window)\">\r\n      <g class=\"gridlines\" teta-gridlines [size]=\"s\"></g>\r\n      <g class=\"series-container\">\r\n        <g teta-series-host\r\n           *ngFor=\"let series of config.series\"\r\n           [series]=\"series\"\r\n           [size]=\"s\"></g>\r\n      </g>\r\n\r\n      <g class=\"x-axis-plotline-container\">\r\n        <g teta-plot-line></g>\r\n      </g>\r\n      <g class=\"x-axis-plotband-container\">\r\n        <g teta-plot-band></g>\r\n      </g>\r\n      <g class=\"series-tooltip-line-marker\"></g>\r\n    </g>\r\n  </svg>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-7fb7944583a278443ddd61570f841dde",
            "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowNull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "binary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "true/false или list",
                    "description": "<p>true/false или list</p>\n",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "компонент неактивен",
                    "description": "<p>компонент неактивен</p>\n",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "true/false или list",
                    "description": "<p>true/false или list</p>\n",
                    "line": 52,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "model$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Значение</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nЗначение\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CheckboxComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CheckboxComponent implements ControlValueAccessor, OnInit {\r\n  @HostBinding('attr.tabindex') tabindex = 0;\r\n\r\n  @Input() class;\r\n\r\n  @HostBinding('class')\r\n  private get getClass() {\r\n    const result = [this.class, 'checkbox'];\r\n    if (this.palette) {\r\n      result.push(`checkbox-${this.palette}`);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  @Input() palette = 'primary';\r\n  @Input() noLabel: boolean;\r\n\r\n  /**\r\n   * компонент неактивен\r\n   */\r\n  @HostBinding('class.checkbox_disabled')\r\n  @Input()\r\n  disabled: boolean;\r\n  /**\r\n   * true/false или list\r\n   */\r\n  @Input() value: any;\r\n  /**\r\n   * true/false или list\r\n   */\r\n  @Input() binary: boolean;\r\n\r\n  @Input() allowNull: boolean;\r\n\r\n  checked: boolean;\r\n\r\n  /**\r\n   * Значение\r\n   */\r\n  private model$: any = null;\r\n\r\n  get model(): any {\r\n    return this.model$;\r\n  }\r\n\r\n  set model(v: any) {\r\n    if (v !== this.model$) {\r\n      this.model$ = v;\r\n      this.onChange(v);\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  @HostListener('click')\r\n  changeValue() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    if (this.binary) {\r\n      this.model = !this.model;\r\n    } else {\r\n      if (!this.isChecked()) {\r\n        this.addValue();\r\n      } else {\r\n        this.removeValue();\r\n      }\r\n    }\r\n    this.checked = this.isChecked();\r\n  }\r\n\r\n  writeValue(model: any) {\r\n    if (this.binary) {\r\n      this.model$ = model;\r\n    } else {\r\n      if (model && model instanceof Array) {\r\n        this.model$ = model;\r\n      } else {\r\n        this.model$ = [];\r\n      }\r\n    }\r\n    this.checked = this.isChecked();\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  isChecked(): boolean {\r\n    if (this.binary) {\r\n      return this.allowNull ? this.model : !!this.model;\r\n    } else {\r\n      return this.model && this.model.indexOf(this.value) >= 0;\r\n    }\r\n  }\r\n\r\n  removeValue() {\r\n    this.model = this.model.filter((val: any) => val !== this.value);\r\n  }\r\n\r\n  addValue() {\r\n    if (this.model) {\r\n      this.model = [...this.model, this.value];\r\n    } else {\r\n      this.model = [this.value];\r\n    }\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.cdr.detectChanges();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "any",
                        "returnType": "any",
                        "line": 67
                    }
                }
            },
            "templateData": "<div class=\"checkbox__tick\">\r\n  <teta-icon [name]=\"checked ? 'tick' : checked === false ? '' : 'minus'\"></teta-icon>\r\n</div>\r\n<span class=\"font-body-3 margin-left-1\" *ngIf=\"!noLabel\">\r\n  <ng-content></ng-content>\r\n</span>\r\n"
        },
        {
            "name": "DateCellComponent",
            "id": "component-DateCellComponent-5bc0998ba38de0af3676ec99358ee260",
            "file": "projects/components/src/component/table/default/date-cell/date-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-cell",
            "styleUrls": [
                "./date-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerComponent",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {CellComponentBase} from '../../base/cell-component-base';\r\nimport {TableColumn} from '../../contract/table-column';\r\nimport {TableRow} from '../../contract/table-row';\r\nimport {TableService} from '../../service/table.service';\r\nimport {ICellCoordinates} from '../../contract/i-cell-coordinates';\r\nimport {DatePickerComponent} from '../../../date-picker/date-picker/date-picker.component';\r\n\r\n@Component({\r\n  selector: 'teta-date-cell',\r\n  templateUrl: './date-cell.component.html',\r\n  styleUrls: ['./date-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DateCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit {\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n\r\n  @ViewChild('input', {static: false}) input: DatePickerComponent;\r\n\r\n  constructor(\r\n    protected override svc: TableService<T>,\r\n    protected override cdr: ChangeDetectorRef\r\n  ) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  setValue(value: Date): void {\r\n    this.row.data[this.column.name] = value ? new Date(value) : value;\r\n    this.valueChanged();\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      setTimeout(() => {\r\n        this.input?.focus();\r\n        this.cdr.markForCheck();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit(): void {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\r\n  {{row.data[column.name] | date : 'dd.MM.yyyy'}}\r\n</span>\r\n<teta-date-picker class=\"datepicker-table\"\r\n                  #input\r\n                  *ngIf=\"edit\"\r\n                  [appendToBody]=\"true\"\r\n                  [showTime]=\"false\"\r\n                  [ngModel]=\"row.data[column.name]\"\r\n                  (ngModelChange)=\"setValue($event)\"\r\n></teta-date-picker>\r\n"
        },
        {
            "name": "DateFilterComponent",
            "id": "component-DateFilterComponent-10f4d12dbfa8aadc0caec55033b6ff50",
            "file": "projects/components/src/component/filter/date-filter/date-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-filter",
            "styleUrls": [
                "./date-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateFilter",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "DateFilter",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { DateFilterValue } from '../contarct/date-filter-value';\r\nimport { DateFilter } from '../contarct/date-filter';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-date-filter',\r\n  templateUrl: './date-filter.component.html',\r\n  styleUrls: ['./date-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DateFilterComponent extends FilterComponentBase implements OnInit {\r\n  @Input() column: FilterItem;\r\n  @Input() filterOptions: IIdName<any>[] = [];\r\n  @Output() filterChanged: EventEmitter<FilterBase> =\r\n    new EventEmitter<FilterBase>();\r\n\r\n  filter: DateFilter;\r\n  state$: FilterState;\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this.state$ = val;\r\n    this.filter = this.getFilter();\r\n    this.changeDetector.detectChanges();\r\n    this.changeDetector.markForCheck();\r\n  }\r\n\r\n  get state() {\r\n    return this.state$;\r\n  }\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filter = this.getFilter();\r\n  }\r\n\r\n  private getFilter(): DateFilter {\r\n    let filter = this.state.dateFilters.find(\r\n      (f) => f.field === this.column.filterField\r\n    );\r\n    if (filter === null || filter === undefined) {\r\n      filter = this.state.addDateFilter(\r\n        new DateFilter({\r\n          value: new DateFilterValue(),\r\n          field: this.column.filterField,\r\n          name: this.column.name,\r\n        })\r\n      );\r\n    }\r\n    return filter;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"form-row padding-3\">\r\n  <teta-input [label]=\"'От'\">\r\n    <teta-date-picker style=\"width: 110px\"\r\n                      [ngModel]=\"filter.value?.greaterThan\"\r\n                      [appendToBody]=\"true\"\r\n                      (ngModelChange)=\"filter.value.greaterThan=$event\"></teta-date-picker>\r\n  </teta-input>\r\n  <teta-input [label]=\"'До'\">\r\n    <teta-date-picker style=\"width: 110px\"\r\n                      [ngModel]=\"filter.value?.lessThan\"\r\n                      [appendToBody]=\"true\"\r\n                      (ngModelChange)=\"filter.value.lessThan=$event\"></teta-date-picker>\r\n  </teta-input>\r\n</div>\r\n"
        },
        {
            "name": "DateItemDefaultComponent",
            "id": "component-DateItemDefaultComponent-962a4f51b62b8487c064746f892d9997",
            "file": "projects/components/src/component/property-grid/default/date-item-default/date-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-item-default",
            "styleUrls": [
                "./date-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-date-item-default',\r\n  templateUrl: './date-item-default.component.html',\r\n  styleUrls: ['./date-item-default.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DateItemDefaultComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>date-item-default works!</p>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-7408aea07fc98503f387a4166dcfaacd",
            "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-date-picker",
            "styleUrls": [
                "./date-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Align"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "Date[]"
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number[]"
                },
                {
                    "name": "disabledPeriods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "DatePeriod[]"
                },
                {
                    "name": "firstDayOfWeek",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number"
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "Date"
                },
                {
                    "name": "maxYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Date"
                },
                {
                    "name": "minYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Date"
                },
                {
                    "name": "showTime",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "_format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "classDatepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "clearPicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "closePicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 277
                },
                {
                    "name": "datePickerModeEnum",
                    "defaultValue": "DatePickerMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "displayMode",
                    "defaultValue": "DatePickerMode.date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerMode",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "isDateInDisabledPeriod",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "isScrollIgnored",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 237
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker_open'"
                        }
                    ]
                },
                {
                    "name": "openPicker",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "preventEvent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 282
                },
                {
                    "name": "scrollMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 241
                },
                {
                    "name": "scrollYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 254
                },
                {
                    "name": "setDate",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "setHour",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "setMinute",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 198
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "setSecond",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 205
                },
                {
                    "name": "setToday",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 212
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "applyValue",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.datepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "true"
                },
                {
                    "name": "class.datepicker_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "0"
                }
            ],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {PickerLocaleService} from '../service/picker-locale.service';\r\nimport {takeWhile} from 'rxjs/operators';\r\nimport {DatePeriod} from '../model/date-period';\r\nimport {PickerLocaleModel} from '../model/picker-locale-model';\r\nimport {DatePickerMode} from '../model/date-picker-mode.enum';\r\nimport {DateUtil} from '../../../util/date-util';\r\nimport {DatePickerUtil} from '../util/date-picker-util';\r\nimport {Align} from '../../../common/enum/align.enum';\r\nimport {VerticalAlign} from '../../../common/enum/vertical-align.enum';\r\n\r\nexport const DATE_PICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DatePickerComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrls: ['./date-picker.component.scss'],\r\n  providers: [DATE_PICKER_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DatePickerComponent\r\n  implements ControlValueAccessor, OnInit, OnDestroy {\r\n  @Input() disabled: boolean;\r\n  @Input() invalid: boolean;\r\n  @Input() firstDayOfWeek = 1;\r\n  @Input() disabledDates: Date[];\r\n  @Input() disabledPeriods: DatePeriod[];\r\n  @Input() disabledDays: number[];\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Input() minYearDate: Date;\r\n  @Input() maxYearDate: Date;\r\n  @Input() align: Align = Align.left;\r\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.auto;\r\n  @Input() appendToBody: boolean;\r\n\r\n  @HostBinding('class.datepicker-wide')\r\n  @Input()\r\n  showTime = false;\r\n\r\n  @Input()\r\n  set format(val: string) {\r\n    this._format = val;\r\n  }\r\n\r\n  get format(): string {\r\n    if (this._format) {\r\n      return this._format;\r\n    }\r\n    return this.showTime ? 'dd.MM.yyyy HH:mm:ss' : 'dd.MM.yyyy';\r\n  }\r\n\r\n  @HostBinding('class.datepicker_open') open: boolean;\r\n  @HostBinding('class.datepicker') private readonly classDatepicker = true;\r\n  @HostBinding('tabindex') private readonly tabindex = 0;\r\n\r\n  locale: PickerLocaleModel;\r\n  today: Date = new Date();\r\n\r\n  datePickerModeEnum = DatePickerMode;\r\n  displayMode: DatePickerMode = DatePickerMode.date;\r\n  _format: string;\r\n\r\n  _value: Date | null = null;\r\n  _currentValue: Date;\r\n\r\n  private _alive = true;\r\n\r\n  get value(): Date | null {\r\n    return this._value;\r\n  }\r\n\r\n  set value(v: Date | null) {\r\n    if (v?.getTime() !== this._value?.getTime()) {\r\n      this._value = v;\r\n      this.currentValue = this._value;\r\n    }\r\n  }\r\n\r\n  get currentValue(): Date {\r\n    return this._currentValue;\r\n  }\r\n\r\n  set currentValue(date: Date) {\r\n    this._currentValue = date;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  get internalValue() {\r\n    return this.currentValue ?? this.emptyDate();\r\n  }\r\n\r\n  constructor(\r\n    public localeService: PickerLocaleService,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _elementRef: ElementRef\r\n  ) {\r\n    localeService.locale\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((locale: PickerLocaleModel) => {\r\n        this.locale = locale;\r\n      });\r\n  }\r\n\r\n  @HostListener('window:keyup', ['$event']) keyUp(event: KeyboardEvent): void {\r\n    if (!this.open) {\r\n      return;\r\n    }\r\n    if (event.code === 'Escape') {\r\n      this.currentValue = this.value;\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  onChange = (_: any) => {\r\n  };\r\n\r\n  onTouched = () => {\r\n  };\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  applyValue(date: Date) {\r\n    this.setDate(date);\r\n    this.value = this.currentValue;\r\n    this.onChange(this.value);\r\n    this.open = false;\r\n  }\r\n\r\n  setDate = (day: Date) => {\r\n    if (day === null || day === undefined) {\r\n      this.currentValue = null;\r\n      return;\r\n    }\r\n    const dt = this.internalValue;\r\n    dt.setFullYear(day.getFullYear(), day.getMonth(), day.getDate());\r\n    this.currentValue = new Date(dt);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setYear = (year: number) => {\r\n    const dt = this.internalValue;\r\n    dt.setFullYear(year);\r\n    this.currentValue = new Date(dt);\r\n    this.setMode(DatePickerMode.date);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setMonth = (month: number) => {\r\n    const dt = this.internalValue;\r\n    dt.setMonth(month);\r\n    this.currentValue = new Date(dt);\r\n    this.setMode(DatePickerMode.date);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setHour = (hours: number) => {\r\n    const dt = this.internalValue;\r\n    dt.setHours(hours);\r\n    this.currentValue = new Date(dt);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setMinute = (minute: number) => {\r\n    const dt = this.internalValue;\r\n    dt.setMinutes(minute);\r\n    this.currentValue = new Date(dt);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setSecond = (seconds: number) => {\r\n    const dt = this.internalValue;\r\n    dt.setSeconds(seconds);\r\n    this.currentValue = new Date(dt);\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  setToday = () => {\r\n    this.currentValue = this.emptyDate();\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  clearPicker = (event: MouseEvent): void => {\r\n    this.preventEvent(event);\r\n    this.value = null;\r\n    this.onChange(null);\r\n  };\r\n\r\n  isDateInDisabledPeriod = (dat: Date): boolean => {\r\n    if (!this.disabledPeriods || this.disabledPeriods.length < 1 || !dat) {\r\n      return false;\r\n    }\r\n    return this.disabledPeriods.some(\r\n      (d: DatePeriod) =>\r\n        d &&\r\n        d.start &&\r\n        d.end &&\r\n        d.start.getTime() <= dat.getTime() &&\r\n        d.end.getTime() >= dat.getTime()\r\n    );\r\n  };\r\n\r\n  isScrollIgnored = (): boolean =>\r\n    this.displayMode === DatePickerMode.month ||\r\n    this.displayMode === DatePickerMode.year;\r\n\r\n  scrollMonth = (e: any) => {\r\n    const delta = e?.deltaY ?? e;\r\n\r\n    if (e instanceof WheelEvent) {\r\n      this.preventEvent(e);\r\n    }\r\n\r\n    if (this.isScrollIgnored()) {\r\n      return false;\r\n    }\r\n    this.currentValue = DatePickerUtil.scrollMonth(delta, this.internalValue);\r\n  };\r\n\r\n  scrollYear = (e: any) => {\r\n    this.preventEvent(e);\r\n    if (this.isScrollIgnored()) {\r\n      return false;\r\n    }\r\n    this.currentValue = DatePickerUtil.scrollMonth(\r\n      e.deltaY,\r\n      this.internalValue\r\n    );\r\n  };\r\n\r\n  openPicker = (show: boolean) => {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    if (!show) {\r\n      this.setMode(DatePickerMode.date);\r\n      this.applyValue(this.currentValue);\r\n    }\r\n    this.open = show;\r\n    this._cdr.markForCheck();\r\n  };\r\n\r\n  closePicker = () => {\r\n    this.openPicker(false);\r\n    this.onTouched();\r\n  };\r\n\r\n  preventEvent = (event: any) => {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    return false;\r\n  };\r\n\r\n  focus() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  setMode(mode: DatePickerMode) {\r\n    let result: DatePickerMode;\r\n    if (mode === this.displayMode || mode === DatePickerMode.date) {\r\n      result = DatePickerMode.date;\r\n    } else {\r\n      result = mode;\r\n    }\r\n    this.displayMode = result;\r\n  }\r\n\r\n  private emptyDate() {\r\n    return DateUtil.truncateToDay(new Date());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 107,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "format": {
                    "name": "format",
                    "setSignature": {
                        "name": "format",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "format",
                        "type": "string",
                        "returnType": "string",
                        "line": 62
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "Date | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "Date | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 85
                    }
                },
                "currentValue": {
                    "name": "currentValue",
                    "setSignature": {
                        "name": "currentValue",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "date",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 100,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentValue",
                        "type": "",
                        "returnType": "Date",
                        "line": 96
                    }
                },
                "internalValue": {
                    "name": "internalValue",
                    "getSignature": {
                        "name": "internalValue",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                }
            },
            "templateData": "<teta-dropdown\r\n  class=\"row row_auto\"\r\n  [disabled]=\"disabled\"\r\n  [open]=\"open\"\r\n  [autoCloseIgnore]=\"['esc']\"\r\n  (openChange)=\"openPicker($event)\"\r\n  [align]=\"align\"\r\n  [verticalAlign]=\"verticalAlign\"\r\n  [appendToBody]=\"appendToBody\">\r\n  <div tetaDropdownHead\r\n       class=\"datepicker-head font-body-3\"\r\n       [class.datepicker-head_disabled]=\"disabled\"\r\n       [class.datepicker-head_invalid]=\"invalid\">\r\n    <teta-icon [name]=\"'calendar'\" class=\"margin-right-1\"></teta-icon>\r\n    <div class=\"row_auto\">\r\n      {{currentValue !== null && currentValue !== undefined ? (currentValue | date : format) : ''}}\r\n    </div>\r\n    <teta-icon [name]=\"'closeBig'\" (click)=\"clearPicker($event);\" class=\"margin-left-1\"></teta-icon>\r\n  </div>\r\n  <div tetaDropdownContent class=\"datepicker-body scrollable\" (click)=\"$event.preventDefault()\">\r\n    <div class=\"padding-3\">\r\n      <div class=\"row align-center justify-content-between\">\r\n        <div>\r\n          <button teta-button\r\n                  [palette]=\"'text'\"\r\n                  [view]=\"displayMode===datePickerModeEnum.month ? 'primary' : 'ghost'\"\r\n                  (click)=\"setMode(datePickerModeEnum.month)\"\r\n                  (wheel)=\"scrollMonth($event);\">\r\n            {{locale.monthNames[internalValue?.getMonth()]}}\r\n          </button>\r\n          <button teta-button\r\n                  class=\"margin-left-2\"\r\n                  [palette]=\"'text'\"\r\n                  [view]=\"displayMode===datePickerModeEnum.year ? 'primary' : 'ghost'\"\r\n                  (click)=\"setMode(datePickerModeEnum.year)\"\r\n                  (wheel)=\"scrollYear($event);\">\r\n            {{internalValue?.getFullYear()}}\r\n          </button>\r\n        </div>\r\n        <button teta-button\r\n                [palette]=\"'text'\"\r\n                [view]=\"'ghost'\"\r\n                (click)=\"setToday()\">\r\n          <teta-icon [name]=\"'calendar'\"></teta-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"datepicker-content\">\r\n        <teta-year-select\r\n          *ngIf=\"displayMode === datePickerModeEnum.year\"\r\n          [currentYear]=\"internalValue?.getFullYear()\"\r\n          [today]=\"today\"\r\n          [minDate]=\"minDate\"\r\n          [maxDate]=\"maxDate\"\r\n          (yearSelected)=\"setYear($event)\">\r\n        </teta-year-select>\r\n        <teta-month-select\r\n          *ngIf=\"displayMode === datePickerModeEnum.month\"\r\n          [currentMonth]=\"internalValue?.getMonth()\"\r\n          [currentYear]=\"internalValue?.getFullYear()\"\r\n          [locale]=\"locale\"\r\n          [minDate]=\"minDate\"\r\n          [maxDate]=\"maxDate\"\r\n          (monthSelected)=\"setMonth($event)\">\r\n        </teta-month-select>\r\n        <teta-day-select\r\n          *ngIf=\"displayMode === datePickerModeEnum.date\"\r\n          [ngModel]=\"currentValue\"\r\n          (ngModelChange)=\"applyValue($event)\"\r\n          (dateSelected)=\"setDate($event)\"\r\n          (yearSelected)=\"setYear($event)\"\r\n          (monthSelected)=\"setMonth($event)\"\r\n          [minDate]=\"minDate\"\r\n          [maxDate]=\"maxDate\"\r\n          [firstDayOfWeek]=\"firstDayOfWeek\"\r\n          [disabledDays]=\"disabledDays\"\r\n          [disabledDates]=\"disabledDates\"\r\n          [disabledPeriods]=\"disabledPeriods\"></teta-day-select>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"showTime\" class=\"datepicker-time padding-v-1 border-top border-text-10 font-body-3 color-text-90\">\r\n      <teta-time-part-control [max]=\"23\" [ngModel]=\"internalValue?.getHours()\"\r\n                              (ngModelChange)=\"setHour($event)\"></teta-time-part-control>\r\n      :\r\n      <teta-time-part-control [ngModel]=\"internalValue?.getMinutes()\"\r\n                              (ngModelChange)=\"setMinute($event)\"></teta-time-part-control>\r\n      :\r\n      <teta-time-part-control [ngModel]=\"internalValue?.getSeconds()\"\r\n                              (ngModelChange)=\"setSecond($event)\"></teta-time-part-control>\r\n    </div>\r\n  </div>\r\n</teta-dropdown>\r\n"
        },
        {
            "name": "DateTimeCellComponent",
            "id": "component-DateTimeCellComponent-ddd0ad308d74065cfeff7549133a3f27",
            "file": "projects/components/src/component/table/default/date-time-cell/date-time-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-date-time-cell",
            "styleUrls": [
                "./date-time-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-time-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerComponent",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {CellComponentBase} from '../../base/cell-component-base';\r\nimport {TableColumn} from '../../contract/table-column';\r\nimport {TableRow} from '../../contract/table-row';\r\nimport {TableService} from '../../service/table.service';\r\nimport {ICellCoordinates} from '../../contract/i-cell-coordinates';\r\nimport {DatePickerComponent} from '../../../date-picker/date-picker/date-picker.component';\r\n\r\n@Component({\r\n  selector: 'teta-date-time-cell',\r\n  templateUrl: './date-time-cell.component.html',\r\n  styleUrls: ['./date-time-cell.component.scss'],\r\n})\r\nexport class DateTimeCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit {\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n\r\n  @ViewChild('input', {static: false}) input: DatePickerComponent;\r\n\r\n  constructor(\r\n    protected override svc: TableService<T>,\r\n    protected override cdr: ChangeDetectorRef\r\n  ) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  setValue(value: Date): void {\r\n    this.row.data[this.column.name] = value;\r\n    this.valueChanged();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      setTimeout(() => {\r\n        this.input.openPicker(true);\r\n        this.cdr.markForCheck();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit(): void {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-time-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\r\n  {{row.data[column.name] | date : 'dd.MM.yyyy HH:mm:ss'}}\r\n</span>\r\n<teta-date-picker class=\"datepicker-table\" #input\r\n                  *ngIf=\"edit\"\r\n                  [appendToBody]=\"true\"\r\n                  [showTime]=\"true\"\r\n                  [ngModel]=\"row.data[column.name]\"\r\n                  (ngModelChange)=\"setValue($event)\"\r\n></teta-date-picker>\r\n"
        },
        {
            "name": "DaySelectComponent",
            "id": "component-DaySelectComponent-8f4ce07f18dfa2511787612ee3d75408",
            "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-day-select",
            "styleUrls": [
                "./day-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./day-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean"
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Date[]"
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number[]"
                },
                {
                    "name": "disabledPeriods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "DatePeriod[]"
                },
                {
                    "name": "firstDayOfWeek",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateSelected",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "monthSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "yearSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DayModel>",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "weekDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "applyValue",
                    "args": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createWeekDays",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "preventEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollMonth",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "DayModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { DayModel } from '../model/day-model';\r\nimport { DatePeriod } from '../model/date-period';\r\nimport { PickerLocaleService } from '../service/picker-locale.service';\r\nimport { takeWhile, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { PickerLocaleModel } from '../model/picker-locale-model';\r\nimport { DatePickerUtil } from '../util/date-picker-util';\r\nimport { fromEvent } from 'rxjs';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DateUtil } from '../../../util/date-util';\r\n\r\nexport const DAY_SELECT_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DaySelectComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-day-select',\r\n  templateUrl: './day-select.component.html',\r\n  styleUrls: ['./day-select.component.scss'],\r\n  providers: [DAY_SELECT_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DaySelectComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor\r\n{\r\n  @Input() firstDayOfWeek = 1;\r\n  @Input() disabledDates: Date[];\r\n  @Input() disabledPeriods: DatePeriod[];\r\n  @Input() disabledDays: number[];\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Input() disabled: boolean;\r\n\r\n  @Output() dateSelected = new EventEmitter<Date>();\r\n  @Output() monthSelected = new EventEmitter<number>();\r\n  @Output() yearSelected = new EventEmitter<number>();\r\n\r\n  locale: PickerLocaleModel;\r\n\r\n  value: Date;\r\n\r\n  _currentValue: Date;\r\n\r\n  set currentValue(val: Date) {\r\n    if (\r\n      !this._currentValue ||\r\n      DateUtil.truncateToDay(val)?.getTime() !==\r\n        DateUtil.truncateToDay(this._currentValue)?.getTime()\r\n    ) {\r\n      this._currentValue = val;\r\n      this.createDays();\r\n      this.checkDays();\r\n    } else {\r\n      this._currentValue = val;\r\n    }\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  get currentValue(): Date {\r\n    return this._currentValue;\r\n  }\r\n\r\n  days: Array<DayModel>;\r\n  weekDays: number[] = [];\r\n\r\n  private _alive = true;\r\n\r\n  constructor(\r\n    public localeService: PickerLocaleService,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _elementRef: ElementRef\r\n  ) {\r\n    localeService.locale\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((locale: PickerLocaleModel) => {\r\n        this.locale = locale;\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.weekDays = this.createWeekDays();\r\n\r\n    const touchStart$ = fromEvent(this._elementRef.nativeElement, 'touchstart');\r\n    const touchEnd$ = fromEvent(this._elementRef.nativeElement, 'touchend');\r\n\r\n    touchEnd$\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        withLatestFrom(touchStart$),\r\n        tap((touches: [TouchEvent, TouchEvent]) => {\r\n          const [start, end] = touches.map((_) => _.changedTouches?.item(0));\r\n          const deltaY = end?.clientY - start?.clientY;\r\n          if (deltaY !== 0) {\r\n            this.scrollMonth(deltaY);\r\n          }\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  writeValue(model: Date) {\r\n    this.value = model;\r\n    this.currentValue = model ? model : new Date();\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  applyValue(day: DayModel, event: MouseEvent) {\r\n    this.preventEvent(event);\r\n    if (day === null || day === undefined || day.disabled) {\r\n      return;\r\n    }\r\n    this.value = day.date;\r\n    this.currentValue = day.date;\r\n    this.onChange(day.date);\r\n  }\r\n\r\n  setDate(day: DayModel, event: MouseEvent) {\r\n    if (day === null || day === undefined || day.disabled) {\r\n      return;\r\n    }\r\n    if (\r\n      day.date !== null &&\r\n      day.date !== undefined &&\r\n      day.date instanceof Date\r\n    ) {\r\n      this.currentValue = day.date;\r\n      this.dateSelected.emit(day.date);\r\n    }\r\n  }\r\n\r\n  scrollMonth(event: WheelEvent | number) {\r\n    const deltaY = event instanceof WheelEvent ? event.deltaY : event;\r\n\r\n    if (event instanceof WheelEvent) {\r\n      this.preventEvent(event);\r\n    }\r\n    this.currentValue = DatePickerUtil.scrollMonth(deltaY, this.currentValue);\r\n    this.monthSelected.emit(this.currentValue.getMonth());\r\n    this.yearSelected.emit(this.currentValue.getFullYear());\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  private createWeekDays(): number[] {\r\n    const result = [];\r\n    let dayIndex = this.firstDayOfWeek;\r\n    for (let i = 0; i < 7; i++) {\r\n      result.push(dayIndex);\r\n      dayIndex = dayIndex === 6 ? 0 : ++dayIndex;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private createDays() {\r\n    this.days = DatePickerUtil.getPickerDays(\r\n      this.currentValue,\r\n      this.firstDayOfWeek,\r\n      this.minDate,\r\n      this.maxDate,\r\n      this.disabledDates,\r\n      this.disabledDays,\r\n      this.disabledPeriods\r\n    );\r\n  }\r\n\r\n  private checkDays() {\r\n    if (this.days) {\r\n      this.days = this.days.map((dat: DayModel) => ({\r\n        ...dat,\r\n        selected:\r\n          dat.date.getFullYear() === this.currentValue.getFullYear() &&\r\n          dat.date.getMonth() === this.currentValue.getMonth() &&\r\n          dat.date.getDate() === this.currentValue.getDate(),\r\n      }));\r\n    }\r\n  }\r\n\r\n  private preventEvent(event: any) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    return false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./day-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "currentValue": {
                    "name": "currentValue",
                    "setSignature": {
                        "name": "currentValue",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentValue",
                        "type": "",
                        "returnType": "Date",
                        "line": 72
                    }
                }
            },
            "templateData": "<div class=\"datepicker-week font-caption color-text-80\">\r\n  <div class=\"datepicker-day\"\r\n       [class.font-caption-bold]=\"day === 0 || day === 6\"\r\n       *ngFor=\"let day of weekDays\">\r\n    {{locale.dayNamesMin[day]}}\r\n  </div>\r\n</div>\r\n<div class=\"datepicker-picker color-text-90 font-body-3\"\r\n     (wheel)=\"scrollMonth($event)\"\r\n>\r\n  <div *ngFor=\"let day of days\"\r\n       class=\"datepicker-date\"\r\n       (click)=\"setDate(day, $event);\"\r\n       (dblclick)=\"applyValue(day, $event);\"\r\n       [class.datepicker-date_active]=\"day.selected\"\r\n       [class.datepicker-date_disabled]=\"day.disabled || !day.isCurrentMonth\"\r\n       [class.datepicker-date_weekend]=\"day.weekend\"\r\n       [class.datepicker-date_today]=\"day.today\">\r\n    <ng-container *ngIf=\"day !== null && day !== undefined\">\r\n      {{day.date.getDate()}}\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DefaultHeadCellComponent",
            "id": "component-DefaultHeadCellComponent-59d9fda631e62e37c8a73cac505b200a",
            "file": "projects/components/src/component/table/default/default-head-cell/default-head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-default-head-cell",
            "styleUrls": [
                "./default-head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__cell__component'"
                        }
                    ],
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "HeadCellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__cell__component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TableColumn",
                    "inheritance": {
                        "file": "HeadCellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { HeadCellComponentBase } from '../../base/head-cell-component-base';\r\nimport { TableColumn } from '../../contract/table-column';\r\n\r\n@Component({\r\n  selector: 'teta-default-head-cell',\r\n  templateUrl: './default-head-cell.component.html',\r\n  styleUrls: ['./default-head-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DefaultHeadCellComponent\r\n  extends HeadCellComponentBase\r\n  implements OnInit\r\n{\r\n  private _column: TableColumn;\r\n\r\n  @Input()\r\n  set column(val: TableColumn) {\r\n    this._column = val;\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  constructor(private _cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  align-items: center;\r\n  justify-content: center;\r\n  display: flex;\r\n  min-width: 0;\r\n}\r\n",
                    "styleUrl": "./default-head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HeadCellComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"column column_auto align-center\" [tetaHint]=\"column.hint || column.caption\">\r\n  <div class=\"table-head__cell__text align-center\">\r\n    {{column.caption}}\r\n  </div>\r\n  <div *ngIf=\"column.unit\" class=\"table-head__cell__text align-center color-text-70\" style=\"overflow: visible;\">\r\n    [{{column.unit}}]\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DelimiterComponent",
            "id": "component-DelimiterComponent-5ee298de4e479827bd27198583fa68fe",
            "file": "projects/components/src/component/delimiter/delimiter/delimiter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-delimiter",
            "styleUrls": [
                "./delimiter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delimiter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any"
                },
                {
                    "name": "direction",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"vertical\" | \"horizontal\""
                },
                {
                    "name": "height",
                    "defaultValue": "32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "horizontalMargin",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "palette",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "verticalMargin",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBgColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "style.height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "style.width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-delimiter',\r\n  templateUrl: './delimiter.component.html',\r\n  styleUrls: ['./delimiter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DelimiterComponent implements OnInit {\r\n  @Input() direction: 'vertical' | 'horizontal' = 'vertical';\r\n  @Input() palette = 'text';\r\n  @Input() height = 32;\r\n  @Input() verticalMargin = 4;\r\n  @Input() horizontalMargin = 8;\r\n\r\n  @Input() class;\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    return [\r\n      this.class,\r\n      'delimiter',\r\n      this.getBgColor(),\r\n      this.direction === 'horizontal' ? 'display-flex' : 'display-inline-flex',\r\n    ].join(' ');\r\n  }\r\n\r\n  @HostBinding('style.height')\r\n  private get getHeight(): string {\r\n    return this.direction === 'vertical' ? '' : '1px';\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  private get getWidth(): string {\r\n    return this.direction === 'horizontal' ? '' : '1px';\r\n  }\r\n\r\n  @HostBinding('style.margin')\r\n  private get getMargin(): string {\r\n    return this.direction === 'horizontal' ? '8px' : '0';\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  getBgColor() {\r\n    return this.palette ? `bg-${this.palette}-10` : '';\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host.delimiter {\r\n  flex-shrink: 0;\r\n}\r\n",
                    "styleUrl": "./delimiter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 47
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                },
                "getHeight": {
                    "name": "getHeight",
                    "getSignature": {
                        "name": "getHeight",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                },
                "getWidth": {
                    "name": "getWidth",
                    "getSignature": {
                        "name": "getWidth",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "getMargin": {
                    "name": "getMargin",
                    "getSignature": {
                        "name": "getMargin",
                        "type": "string",
                        "returnType": "string",
                        "line": 45
                    }
                }
            },
            "templateData": ""
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-c1d9a994a69baf11bda31dd7b90f351e",
            "file": "projects/components/src/component/modal/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "buttonPalette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "showCancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentModal",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ok",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { CurrentModal } from '../model/current-modal';\r\nimport { DynamicData } from '../../../common/contract/dynamic-data';\r\nimport { ModalCloseReason } from '../model/modal-close-reason.enum';\r\n\r\n@Component({\r\n  selector: 'teta-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements OnInit {\r\n  @Input() message: string;\r\n  @Input() buttonText: string;\r\n  @Input() buttonIcon: string;\r\n  @Input() buttonPalette: string;\r\n  @Input() showCancelButton: boolean;\r\n\r\n  constructor(public modal: CurrentModal, private data: DynamicData) {}\r\n\r\n  cancel() {\r\n    this.modal.close({\r\n      reason: ModalCloseReason.exit,\r\n    });\r\n  }\r\n\r\n  ok() {\r\n    this.modal.close({\r\n      reason: ModalCloseReason.resolve,\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 240px;\r\n}\r\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-2 font-body-2\">\r\n  {{message | transloco}}\r\n</div>\r\n<teta-toolbar class=\"justify-content-end\">\r\n  <button teta-button\r\n          *ngIf=\"showCancelButton\"\r\n          (click)=\"cancel()\"\r\n          [palette]=\"'text'\"\r\n          [view]=\"'ghost'\">\r\n    {{'common.cancel' | transloco}}\r\n  </button>\r\n\r\n  <button teta-button\r\n          (click)=\"ok()\"\r\n          [square]=\"!buttonText?.length\"\r\n          [palette]=\"buttonPalette\">\r\n    <teta-icon *ngIf=\"buttonIcon\" [name]=\"buttonIcon\"></teta-icon>\r\n    <ng-container *ngIf=\"buttonText?.length > 0\">{{buttonText | transloco}}</ng-container>\r\n  </button>\r\n</teta-toolbar>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-a1dec53f6fc9aa9f71aa32ee85fc0dc3",
            "file": "projects/components/src/component/dropdown/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Array<AutoCloseIgnoreCase>",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | string[]",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<boolean>",
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownContentDirective, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DropdownHeadDirective, {static: false, read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "documentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129,
                    "inheritance": {
                        "file": "DropdownBase"
                    }
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { DropdownBase } from '../dropdown-base';\r\n\r\n@Component({\r\n  selector: 'teta-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrls: ['./dropdown.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DropdownComponent\r\n  extends DropdownBase\r\n  implements OnInit, OnDestroy\r\n{\r\n  constructor(\r\n    protected override _cdr: ChangeDetectorRef,\r\n    @Inject(DOCUMENT) protected override _document: any,\r\n    protected override _elementRef: ElementRef<HTMLElement>,\r\n    protected override _zone: NgZone,\r\n    protected override _renderer: Renderer2\r\n  ) {\r\n    super(_cdr, _document, _elementRef, _zone, _renderer);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.closeDropdown();\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DropdownBase",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-content select=\"[tetaDropdownHead]\"></ng-content>\r\n"
        },
        {
            "name": "ExpandPanelComponent",
            "id": "component-ExpandPanelComponent-5154ce0b71c3c2c87ae3b31891699bad",
            "file": "projects/components/src/component/expand-panel/expand-panel/expand-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-expand-panel",
            "styleUrls": [
                "./expand-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expand-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "direction",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "\"left\" | \"right\""
                },
                {
                    "name": "open",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExpandPanelContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ExpandPanelContentDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "head",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExpandPanelHeadDirective",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ExpandPanelHeadDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "saveCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ExpandPanelContentDirective } from '../expand-panel-content.directive';\r\nimport { ExpandPanelHeadDirective } from '../expand-panel-head.directive';\r\n\r\n@Component({\r\n  selector: 'teta-expand-panel',\r\n  templateUrl: './expand-panel.component.html',\r\n  styleUrls: ['./expand-panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExpandPanelComponent implements OnInit {\r\n  @ContentChild(ExpandPanelContentDirective, { static: false })\r\n  content: ExpandPanelContentDirective;\r\n\r\n  @ContentChild(ExpandPanelHeadDirective, { static: false })\r\n  head: ExpandPanelHeadDirective;\r\n\r\n  @Input() placeholder: string;\r\n  @Input() open = true;\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Input() cookieName: string;\r\n  @Input() direction: 'left' | 'right' = 'left';\r\n\r\n  constructor() {}\r\n\r\n  openPanel() {\r\n    this.open = true;\r\n    this.openChange.emit(true);\r\n    this.saveCookie();\r\n  }\r\n\r\n  closePanel() {\r\n    this.open = false;\r\n    this.openChange.emit(false);\r\n    this.saveCookie();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.restoreCookie();\r\n  }\r\n\r\n  private saveCookie() {\r\n    if (!this.cookieName?.length) {\r\n      return;\r\n    }\r\n    localStorage.setItem(this.cookieName, JSON.stringify(this.open));\r\n  }\r\n\r\n  private restoreCookie() {\r\n    if (!this.cookieName?.length) {\r\n      return;\r\n    }\r\n    const cookie = localStorage.getItem(this.cookieName);\r\n    this.open = cookie != null ? JSON.parse(cookie) : true;\r\n    this.openChange.emit(this.open);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  min-width: 0;\r\n  min-height: 0;\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./expand-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"open\">\r\n  <teta-toolbar\r\n    style=\"display: flex\"\r\n    [style.justifyContent]=\"direction === 'right' ? 'space-between' : 'unset'\"\r\n    [style.flexDirection]=\"direction === 'right' ? 'row-reverse' : 'row'\">\r\n    <button\r\n      teta-button\r\n      [square]=\"true\"\r\n      [palette]=\"'text'\"\r\n      [view]=\"'ghost'\"\r\n      (click)=\"closePanel()\"\r\n    >\r\n      <teta-icon [name]=\"direction === 'right' ? 'arrowRight' : 'arrowLeft'\"></teta-icon>\r\n    </button>\r\n    <span class=\"font-title-2\" style=\"display: contents\"><ng-container *ngTemplateOutlet=\"head?.template\"></ng-container></span>\r\n  </teta-toolbar>\r\n  <ng-container *ngTemplateOutlet=\"content?.template\"></ng-container>\r\n</ng-container>\r\n<ng-container *ngIf=\"!open\">\r\n  <div class=\"width-10 overflow-hidden\" style=\"height: 100%;\">\r\n    <button\r\n      teta-button\r\n      style=\"\r\n        transform-origin: 0 0;\r\n        transform: rotate(-90deg) translateX(-100%);\r\n        margin: 8px;\r\n      \"\r\n      [palette]=\"'text'\"\r\n      [view]=\"'ghost'\"\r\n      (click)=\"openPanel()\"\r\n    >\r\n      <div class=\"font-button-2 nowrap\">{{ placeholder }}</div>\r\n      <teta-icon [name]=\"direction === 'right' ? 'arrowUp' : 'arrowDown'\"></teta-icon>\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "FileItemComponent",
            "id": "component-FileItemComponent-cd4e02d68b69cac3d5ea4fd0df5d85a8",
            "file": "projects/components/src/component/file-upload/file-item/file-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-file-item",
            "styleUrls": [
                "./file-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-file-item',\r\n  templateUrl: './file-item.component.html',\r\n  styleUrls: ['./file-item.component.scss'],\r\n})\r\nexport class FileItemComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>file-item works!</p>\r\n"
        },
        {
            "name": "FileUploadAreaComponent",
            "id": "component-FileUploadAreaComponent-3415de5f8e67db4ee5209576c27b381a",
            "file": "projects/components/src/component/file-upload/file-upload-area/file-upload-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-file-upload-area",
            "styleUrls": [
                "./file-upload-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string[]"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "upload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<FileList>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_asActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "fileUpload",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.file-upload'"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileUpload', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dragEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "preventDefaults",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.file-upload",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "class.file-upload_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-file-upload-area',\r\n  templateUrl: './file-upload-area.component.html',\r\n  styleUrls: ['./file-upload-area.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FileUploadAreaComponent implements OnInit {\r\n  @HostBinding('class.file-upload') fileUpload = true;\r\n\r\n  @HostBinding('class.file-upload_active')\r\n  get fileUploadActive() {\r\n    return this._asActive;\r\n  }\r\n\r\n  @Input() multiple = true;\r\n  @Input() disabled: boolean;\r\n  @Input() accept: string[];\r\n\r\n  @Output() upload: EventEmitter<FileList> = new EventEmitter();\r\n\r\n  @ViewChild('fileUpload', { static: false }) input: ElementRef;\r\n\r\n  files: any;\r\n\r\n  private _asActive: boolean;\r\n\r\n  constructor() {}\r\n\r\n  @HostListener('dragenter', ['$event']) dragEnter(event) {\r\n    this.preventDefaults(event);\r\n    this._asActive = true;\r\n  }\r\n\r\n  @HostListener('dragover', ['$event']) dragOver(event) {\r\n    this.preventDefaults(event);\r\n    this._asActive = true;\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) dragLeave(event) {\r\n    this.preventDefaults(event);\r\n    this._asActive = false;\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) drop(event) {\r\n    this.upload.emit(event.dataTransfer.files);\r\n    this.preventDefaults(event);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  fileChanged(event: any) {\r\n    if (event.target && event.target.files) {\r\n      this.upload.emit(event.target.files);\r\n      this.input.nativeElement.value = null;\r\n    }\r\n  }\r\n\r\n  private preventDefaults(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./file-upload-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fileUploadActive": {
                    "name": "fileUploadActive",
                    "getSignature": {
                        "name": "fileUploadActive",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n<label class=\"file-upload-label\">\r\n  <input #fileUpload\r\n         id=\"upload-input\"\r\n         class=\"file-upload-input\"\r\n         type=\"file\"\r\n         name=\"fileUpload\"\r\n         [attr.accept]=\"accept\"\r\n         [attr.multiple]=\"multiple ? 'multiple' : null\"\r\n         [disabled]=\"disabled\"\r\n         (change)=\"fileChanged($event)\"/>\r\n  <teta-button [palette]=\"'primary'\" type=\"button\">\r\n    <teta-icon [name]=\"'upload'\"></teta-icon>\r\n    Загрузить\r\n  </teta-button>\r\n</label>\r\n"
        },
        {
            "name": "FilterHostComponent",
            "id": "component-FilterHostComponent-e8b71885ea0b42c70fe0212ffc9f2456",
            "file": "projects/components/src/component/filter/filter-host/filter-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-filter-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": ""
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {FilterState} from '../contarct/filter-state';\r\nimport {FilterItem} from '../contarct/filter-item';\r\nimport {FilterBase} from '../base/filter-base';\r\nimport {FilterComponentBase} from '../base/filter-component-base';\r\nimport {takeWhile} from 'rxjs/operators';\r\nimport {getFilterComponent} from '../contarct/filter-component-map';\r\nimport {IIdName} from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-filter-host',\r\n  template: '',\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FilterHostComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  set column(val: FilterItem) {\r\n    this._column = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.filterField = this._column;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this._state = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.state = this._state;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set filterOptions(val: IIdName<any>[]) {\r\n    this._filterOptions = val;\r\n    if (this._init) {\r\n      this._componentRef.instance.filterOptions = this._filterOptions;\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n\r\n  @Output() filterChanged: EventEmitter<FilterBase> = new EventEmitter();\r\n\r\n  private _alive = true;\r\n  private _column: FilterItem;\r\n  private _state: FilterState;\r\n  private _filterOptions: IIdName<any>[];\r\n  private _componentRef: ComponentRef<any>;\r\n  private _init: boolean;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!FilterComponentBase.isPrototypeOf(this._column.filterComponent)) {\r\n      this._column.filterComponent = getFilterComponent(this._column);\r\n    }\r\n    this._componentRef =\r\n      this.viewContainerRef.createComponent<FilterComponentBase>(this._column.filterComponent);\r\n    this._componentRef.instance.column = this._column;\r\n    this._componentRef.instance.state = this._state;\r\n    this._componentRef.instance.filterOptions = this._filterOptions;\r\n    this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    this._init = true;\r\n    this._componentRef.instance.filterChanged\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((filter: FilterBase) => {\r\n        this.filterChanged.emit(filter);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterItem",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterItem",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filterOptions": {
                    "name": "filterOptions",
                    "setSignature": {
                        "name": "filterOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IIdName<any>[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IIdName<any>[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "FilterPanelComponent",
            "id": "component-FilterPanelComponent-5df45319d5166dd4a9ef349fbe45e230",
            "file": "projects/components/src/component/filter/filter-panel/filter-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-filter-panel",
            "styleUrls": [
                "./filter-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-filter-panel',\r\n  templateUrl: './filter-panel.component.html',\r\n  styleUrls: ['./filter-panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FilterPanelComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filter-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>filter-panel works!</p>\r\n"
        },
        {
            "name": "FormGroupTitleComponent",
            "id": "component-FormGroupTitleComponent-213bc472fcd478fa751dabb1590e9953",
            "file": "projects/components/src/component/input/form-group-title/form-group-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-form-group-title",
            "styleUrls": [
                "./form-group-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-group-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-group-title'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-group-title",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-form-group-title',\r\n  templateUrl: './form-group-title.component.html',\r\n  styleUrls: ['./form-group-title.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FormGroupTitleComponent implements OnInit {\r\n  @HostBinding('class.form-group-title') private readonly className = true;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-group-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"font-overline form-group-title-text\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<div class=\"form-group-title-line\"></div>\r\n"
        },
        {
            "name": "GridlinesComponent",
            "id": "component-GridlinesComponent-f7ddb866c8a38e9a72c8433344e1a691",
            "file": "projects/chart/src/chart/chart-container/gridlines/gridlines.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-gridlines]",
            "styleUrls": [
                "./gridlines.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gridlines.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tickXValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tickYValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "draw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ScaleService } from '../../scale.service';\r\nimport { AxesService } from '../../axes.service';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { tap } from 'rxjs';\r\nimport { ChartService } from '../../chart.service';\r\n\r\n@Component({\r\n  selector: '[teta-gridlines]',\r\n  templateUrl: './gridlines.component.html',\r\n  styleUrls: ['./gridlines.component.scss'],\r\n})\r\nexport class GridlinesComponent implements OnInit {\r\n  @Input() size: DOMRect;\r\n  tickYValues: number[];\r\n  tickXValues: number[];\r\n  y: any;\r\n  x: any;\r\n\r\n  constructor(\r\n    private scaleService: ScaleService,\r\n    private axesService: AxesService,\r\n    private chartService: ChartService\r\n  ) {\r\n    this.chartService.size\r\n      .pipe(\r\n        throttleTime(100, null, { trailing: true }),\r\n        tap(() => {\r\n          this.draw();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  draw() {\r\n    this.tickYValues = this.axesService.yAxis.get(0).tickValues;\r\n    this.tickXValues = this.axesService.xAxis.get(0).tickValues;\r\n    this.y = this.scaleService.yScales.get(0);\r\n    this.x = this.scaleService.xScales.get(0);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.draw();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  shape-rendering: crispEdges;\r\n}\r\n\r\n:host line {\r\n  stroke-dasharray: 1,4;\r\n  stroke: var(--color-text-20);\r\n}\r\n",
                    "styleUrl": "./gridlines.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "axesService",
                        "type": "AxesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngFor=\"let tick of tickYValues\">\r\n  <svg:line [attr.x1]=\"0\" stroke=\"red\" [attr.y1]=\"y(tick)\" [attr.x2]=\"size.width\" [attr.y2]=\"y(tick)\"></svg:line>\r\n</ng-container>\r\n\r\n<ng-container *ngFor=\"let tick of tickXValues\">\r\n  <svg:line [attr.x1]=\"x(tick)\" stroke=\"red\" [attr.y1]=\"0\" [attr.x2]=\"x(tick)\" [attr.y2]=\"size.height\"></svg:line>\r\n</ng-container>\r\n"
        },
        {
            "name": "GroupRowComponent",
            "id": "component-GroupRowComponent-a27ab66a91dab05beb2be978bf5b50d9",
            "file": "projects/components/src/component/table/default/group-row/group-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-group-row",
            "styleUrls": [
                "./group-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TableColumn[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "<p>displayed columns</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ndisplayed columns\n",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "GroupRowComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "<p>The row details are displayed for</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nThe row details are displayed for\n",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "GroupRowComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { GroupRowComponentBase } from '../../base/group-row-component-base';\r\nimport { TableRow } from '../../contract/table-row';\r\nimport { TableColumn } from '../../contract/table-column';\r\n\r\n@Component({\r\n  selector: 'teta-group-row',\r\n  templateUrl: './group-row.component.html',\r\n  styleUrls: ['./group-row.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class GroupRowComponent<T>\r\n  extends GroupRowComponentBase<T>\r\n  implements OnInit\r\n{\r\n  @Input() row: TableRow<T>;\r\n  @Input() columns: TableColumn[];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./group-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": "GroupRowComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span>{{row.groupValue[row.level]}} ()</span>\r\n<!--<span>{{row.groupValue[row.level]}} ({{row.children.length}})</span>-->\r\n"
        },
        {
            "name": "HeadCellComponent",
            "id": "component-HeadCellComponent-6e4df4b726ff86dd69cd09d3982c8b98",
            "file": "projects/components/src/component/table/head-cell/head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell",
            "styleUrls": [
                "./head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "TableColumn"
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "align",
                    "defaultValue": "Align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableColumn[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dropDownOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "filtered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "rect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showDrag",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\" | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sortParam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SortParam>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FilterState>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "allowDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "autosizeAllColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autosizeColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeProcess",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                },
                {
                    "name": "dragenter",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59
                },
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ApplicationRef,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { ColumnResizeEvent } from '../contract/column-resize-event';\r\nimport { FilterState } from '../../filter/contarct/filter-state';\r\nimport { TableService } from '../service/table.service';\r\nimport { SortEvent } from '../contract/sort-event';\r\nimport { map } from 'rxjs/operators';\r\nimport { SortParam } from '../../filter/contarct/sort-param';\r\nimport { StateUtil } from '../util/state-util';\r\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\r\nimport { Align } from '../../../common/enum/align.enum';\r\nimport { combineLatest, Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'teta-head-cell',\r\n  templateUrl: './head-cell.component.html',\r\n  styleUrls: ['./head-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeadCellComponent<T> implements OnInit, OnDestroy {\r\n  @Input() column: TableColumn;\r\n  @Input() showHeadCellMenu: boolean;\r\n  verticalAlign = VerticalAlign;\r\n  align = Align;\r\n  state: Observable<FilterState>;\r\n  columns: Observable<TableColumn[]>;\r\n  filtered: Observable<boolean>;\r\n  sortParam: Observable<SortParam>;\r\n  iconName: Observable<string>;\r\n  dropDownOpen: boolean;\r\n  showDrag: 'left' | 'right' | null = null;\r\n  private rect: any;\r\n\r\n  private _alive = true;\r\n  private _startPosition: number;\r\n\r\n  constructor(\r\n    private _svc: TableService<T>,\r\n    private _app: ApplicationRef,\r\n    private _elementRef: ElementRef\r\n  ) {}\r\n\r\n  @HostListener('dragstart', ['$event']) dragstart(event: DragEvent): void {\r\n    if (event && event.dataTransfer) {\r\n      event.dataTransfer.setData('text', 'move');\r\n    }\r\n    this._svc.dragStart(this.column);\r\n  }\r\n\r\n  @HostListener('dragenter', ['$event']) dragenter(event: DragEvent): void {\r\n    this.rect = this._elementRef.nativeElement.getBoundingClientRect();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event']) allowDrop(event: DragEvent): void {\r\n    event.preventDefault();\r\n    if (this.rect && this._svc.dragSource) {\r\n      this.showDrag =\r\n        event.clientX >= this.rect.x + this.rect.width / 2 ? 'right' : 'left';\r\n    }\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) dragleave(event: DragEvent): void {\r\n    event.preventDefault();\r\n    this.showDrag = null;\r\n  }\r\n\r\n  @HostListener('dragend', ['$event']) dragend(event: DragEvent): void {\r\n    this.showDrag = null;\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) drop(event: DragEvent): void {\r\n    const move = event.dataTransfer && event.dataTransfer.getData('text');\r\n    if (move === 'move') {\r\n      this._svc.reorderColumn(this.column, this.showDrag === 'left');\r\n    }\r\n    this.showDrag = null;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columns = this._svc.columns;\r\n    this.state = this._svc.state;\r\n    this.sortParam = this.state.pipe(\r\n      map((_) => StateUtil.getSortState(_, this.column))\r\n    );\r\n    this.filtered = this.state.pipe(\r\n      map((_) => StateUtil.isColumnFiltered(_, this.column))\r\n    );\r\n    this.iconName = combineLatest([this.sortParam, this.filtered]).pipe(\r\n      map((data: [SortParam, boolean]) => {\r\n        const [sortParam, filtered] = data;\r\n        if (sortParam && filtered) {\r\n          return sortParam.asc ? 'filterSortUpColor' : 'filterSortDownColor';\r\n        }\r\n        if (sortParam) {\r\n          return sortParam.asc ? 'sortUpColor' : 'sortDownColor';\r\n        }\r\n        if (filtered) {\r\n          return 'filterColor';\r\n        }\r\n        return '';\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  autosizeColumn() {\r\n    this._svc.autosizeColumn(this.column, this._elementRef.nativeElement);\r\n  }\r\n\r\n  autosizeAllColumns() {\r\n    this._svc.autosizeAllColumns(this._elementRef.nativeElement);\r\n  }\r\n\r\n  sortColumn(column: TableColumn, event: MouseEvent): void {\r\n    if (!event.defaultPrevented) {\r\n      this._svc.sort(new SortEvent(this.column, event.shiftKey));\r\n    }\r\n  }\r\n\r\n  resizeStart(event: MouseEvent): void {\r\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\r\n    this._startPosition = rect.x;\r\n    this._svc.lockPreviousColumns(this.column, this._elementRef.nativeElement);\r\n  }\r\n\r\n  resizeProcess(event: MouseEvent): void {\r\n    if (this._startPosition && event.pageX > 0) {\r\n      this._svc.resizeColumn(\r\n        new ColumnResizeEvent(this.column, event.pageX - this._startPosition)\r\n      );\r\n      this._app.tick();\r\n    }\r\n  }\r\n\r\n  resizeEnd() {\r\n    this._startPosition = null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".drop-area {\r\n  position: absolute;\r\n  width: 1px;\r\n  background: var(--color-text-50);\r\n  top: 0;\r\n  bottom: 0;\r\n  z-index: 10;\r\n\r\n  &_left {\r\n    left: -1px;\r\n  }\r\n\r\n  &_right {\r\n    right: -1px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_app",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_app",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div draggable=\"true\" class=\"row row_auto\">\r\n  <div class=\"table-head__cell__wrapper\"\r\n       [ngClass]=\"column.headCellClass\"\r\n       (click)=\"sortColumn(column, $event)\">\r\n    <teta-icon *ngIf=\"iconName | async as icon\"\r\n               [palette]=\"'text'\"\r\n               [name]=\"icon\"></teta-icon>\r\n    <teta-head-cell-host [column]=\"column\"></teta-head-cell-host>\r\n    <teta-dropdown *ngIf=\"showHeadCellMenu\"\r\n                   [verticalAlign]=\"verticalAlign.bottom\"\r\n                   [appendToBody]=\"true\"\r\n                   [(open)]=\"dropDownOpen\"\r\n                   [align]=\"align.right\"\r\n                   (click)=\"$event.preventDefault()\"\r\n                   [class.table-head__cell__menu_open]=\"dropDownOpen\"\r\n                   class=\"table-head__cell__menu\">\r\n      <button tetaDropdownHead teta-button\r\n              [square]=\"true\"\r\n              [palette]=\"'text'\"\r\n              [view]=\"'ghost'\">\r\n        <teta-icon [palette]=\"'text'\" [name]=\"'menu'\"></teta-icon>\r\n      </button>\r\n      <teta-head-cell-dropdown tetaDropdownContent\r\n                               (autosize)=\"autosizeColumn()\"\r\n                               (autosizeAll)=\"autosizeAllColumns()\"\r\n                               [column]=\"column\"\r\n                               [columns]=\"columns | async\"\r\n                               [state]=\"state | async\"\r\n                               [(dropDownOpen)]=\"dropDownOpen\"></teta-head-cell-dropdown>\r\n    </teta-dropdown>\r\n  </div>\r\n  <div class=\"drop-area\"\r\n       draggable=\"false\"\r\n       [class.drop-area_left]=\"showDrag === 'left'\"\r\n       [class.drop-area_right]=\"showDrag === 'right'\"\r\n       *ngIf=\"showDrag\"></div>\r\n</div>\r\n<div class=\"table-head__cell__resize\"\r\n     draggable=\"false\"\r\n     (dragstart)=\"$event.preventDefault();$event.stopPropagation()\"\r\n     (drag)=\"$event.preventDefault();$event.stopPropagation()\"\r\n     [tetaResizeDrag]=\"'vertical'\"\r\n     (resizeStart)=\"resizeStart($event)\"\r\n     (resizeProcess)=\"resizeProcess($event)\"\r\n     (resizeEnd)=\"resizeEnd()\"></div>\r\n"
        },
        {
            "name": "HeadCellComponentBase",
            "id": "component-HeadCellComponentBase-07fa61468186e572f3e68528102b6907",
            "file": "projects/components/src/component/table/base/head-cell-component-base.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__cell__component'"
                        }
                    ],
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__cell__component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TableColumn"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding} from '@angular/core';\r\nimport {TableColumn} from '../contract/table-column';\r\n\r\n@Component({\r\n  template: ''\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport abstract class HeadCellComponentBase {\r\n  @HostBinding('class.table-head__cell__component')\r\n\r\n  abstract column: TableColumn;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "HeadCellDropdownComponent",
            "id": "component-HeadCellDropdownComponent-9963890923163e3e20e29bf6db8cd675",
            "file": "projects/components/src/component/table/head-cell-dropdown/head-cell-dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell-dropdown",
            "styleUrls": [
                "./head-cell-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-cell-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "TableColumn"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ITreeData[]"
                },
                {
                    "name": "dropDownOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "FilterState"
                }
            ],
            "outputsClass": [
                {
                    "name": "autosize",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "autosizeAll",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "dropDownOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[]",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "bg",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.bg-background-50'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "compareItems",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDictionary<IIdName[]>>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "setChildrenVisibility",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "setParentsVisibility",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "shadow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.shadow-2'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allColumnsVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAllSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParentColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableColumn | null",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFilteredColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasSortedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideParents",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pinColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreDefaultColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAllColumns",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumnsVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setColumnVisibility",
                    "args": [
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showParents",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hiddenColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.bg-background-50",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "true"
                },
                {
                    "name": "class.shadow-2",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { TableService } from '../service/table.service';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { FilterState } from '../../filter/contarct/filter-state';\r\nimport { StateUtil } from '../util/state-util';\r\nimport { ITreeData } from '../../../common/contract/i-tree-data';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { Observable } from 'rxjs';\r\nimport { map, takeWhile } from 'rxjs/operators';\r\nimport { ArrayUtil } from '../../../common/util/array-util';\r\n\r\n@Component({\r\n  selector: 'teta-head-cell-dropdown',\r\n  templateUrl: './head-cell-dropdown.component.html',\r\n  styleUrls: ['./head-cell-dropdown.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeadCellDropdownComponent<T> implements OnInit, OnDestroy {\r\n  @Input() columns: ITreeData[];\r\n  @Input() column: TableColumn;\r\n  @Input() state: FilterState;\r\n  @Input() dropDownOpen: boolean;\r\n  @Output() dropDownOpenChange: EventEmitter<boolean> =\r\n    new EventEmitter<boolean>();\r\n\r\n  @Output() autosize: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() autosizeAll: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @HostBinding('class.shadow-2') private readonly shadow = true;\r\n  @HostBinding('class.bg-background-50') private readonly bg = true;\r\n\r\n  dict: Observable<IDictionary<IIdName<any>[]>>;\r\n  hiddenColumns: string[];\r\n\r\n  get sortParam() {\r\n    return StateUtil.getSortState(this.state, this.column);\r\n  }\r\n\r\n  get filtered() {\r\n    return StateUtil.isColumnFiltered(this.state, this.column);\r\n  }\r\n\r\n  get openItems() {\r\n    if (this._openItems == null) {\r\n      this._openItems = this.columns.map((_) => _);\r\n    }\r\n    return this._openItems;\r\n  }\r\n\r\n  set openItems(openItems: ITreeData[]) {\r\n    this._openItems = openItems;\r\n  }\r\n\r\n  get childMode() {\r\n    return this.columns.find((_: any) => _.columns?.length > 0);\r\n  }\r\n\r\n  private _openItems: ITreeData[];\r\n  private _alive = true;\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\r\n    this.dict = this._svc.dict;\r\n    this._svc.hiddenColumns\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        map((_) => [..._])\r\n      )\r\n      .subscribe((_) => {\r\n        this.hiddenColumns = _;\r\n      });\r\n  }\r\n\r\n  clearFilter() {\r\n    this._svc.clearFilter(this.column);\r\n    this.dropDownOpenChange.emit(false);\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  applyFilter() {\r\n    this._svc.setState(new FilterState(this.state));\r\n    this.dropDownOpenChange.emit(false);\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  pinColumn() {\r\n    this._svc.pinColumn(this.column);\r\n  }\r\n\r\n  clearSort(): void {\r\n    this._svc.clearSort(this.column);\r\n  }\r\n\r\n  clearAllSort(): void {\r\n    this._svc.clearAllSort();\r\n  }\r\n\r\n  hasFilteredColumns() {\r\n    return StateUtil.hasFilteredColumns(this.state);\r\n  }\r\n\r\n  hasSortedColumns() {\r\n    return StateUtil.hasSortedColumns(this.state);\r\n  }\r\n\r\n  restoreDefaultColumns() {\r\n    this._svc.restoreDefaultColumns();\r\n  }\r\n\r\n  clearAllFilters() {\r\n    this._svc.clearAllFilters();\r\n    this.dropDownOpen = false;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  columnIsHidden(column: TableColumn) {\r\n    return this.hiddenColumns.indexOf(column.name) >= 0;\r\n  }\r\n\r\n  allColumnsVisible() {\r\n    if (this.hiddenColumns?.length <= 0) {\r\n      return true;\r\n    }\r\n    const columns = ArrayUtil.flatten(this.columns, 'columns');\r\n    const notHidden = columns.find(\r\n      (_) => this.hiddenColumns.indexOf(_.name) < 0\r\n    );\r\n    if (!notHidden) {\r\n      return false;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setAllColumns(value: boolean) {\r\n    if (value) {\r\n      this.hiddenColumns = [];\r\n    } else {\r\n      this.hiddenColumns = ArrayUtil.flatten(this.columns, 'columns').map(\r\n        (_) => _.name\r\n      );\r\n    }\r\n  }\r\n\r\n  setColumnsVisibility() {\r\n    this._svc.setHiddenColumns(this.hiddenColumns);\r\n  }\r\n\r\n  compareItems = (item: TableColumn) => item.name;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  setColumnVisibility(item: TableColumn, visible: boolean) {\r\n    this.setChildrenVisibility(item, visible, this.hiddenColumns);\r\n    this.setParentsVisibility(item, visible, this.hiddenColumns);\r\n  }\r\n\r\n  setChildrenVisibility = (\r\n    column: TableColumn,\r\n    visible: boolean,\r\n    hiddenColumns: string[]\r\n  ) => {\r\n    if (visible) {\r\n      this.showColumn(column, hiddenColumns);\r\n    } else {\r\n      this.hideColumn(column, hiddenColumns);\r\n    }\r\n    if (column.columns) {\r\n      column.columns.forEach((x) => {\r\n        this.setChildrenVisibility(x, visible, hiddenColumns);\r\n      });\r\n    }\r\n  };\r\n\r\n  setParentsVisibility = (\r\n    column: TableColumn,\r\n    visible: boolean,\r\n    hiddenColumns: string[]\r\n  ) => {\r\n    if (!visible) {\r\n      this.hideParents(column, hiddenColumns);\r\n    } else {\r\n      this.showParents(column, hiddenColumns);\r\n    }\r\n  };\r\n\r\n  showParents(column: TableColumn, hiddenColumns: string[]) {\r\n    const parent = this.findParentColumn(column, this.columns as TableColumn[]);\r\n    if (parent && this.columnIsHidden(parent)) {\r\n      this.showColumn(parent, hiddenColumns);\r\n      this.showParents(parent, hiddenColumns);\r\n    }\r\n  }\r\n\r\n  hideParents(column: TableColumn, hiddenColumns: string[]) {\r\n    const parent = this.findParentColumn(column, this.columns as TableColumn[]);\r\n    if (\r\n      parent &&\r\n      !this.columnIsHidden(parent) &&\r\n      parent.columns &&\r\n      parent.columns.every((_) => this.columnIsHidden(_))\r\n    ) {\r\n      this.hideColumn(parent, hiddenColumns);\r\n      this.hideParents(parent, hiddenColumns);\r\n    }\r\n  }\r\n\r\n  hideColumn(column: TableColumn, hiddenColumns: string[]) {\r\n    hiddenColumns.push(column.name);\r\n  }\r\n\r\n  showColumn(column: TableColumn, hiddenColumns: string[]) {\r\n    hiddenColumns.splice(hiddenColumns.indexOf(column.name), 1);\r\n  }\r\n\r\n  private findParentColumn(\r\n    column: TableColumn,\r\n    columns: TableColumn[]\r\n  ): TableColumn | null {\r\n    return ArrayUtil.findRecursive(\r\n      columns,\r\n      (iterableNode) => iterableNode.columns?.indexOf(column) >= 0,\r\n      'columns'\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-grow: 1;\r\n  min-height: 0;\r\n  width: 250px;\r\n}\r\n",
                    "styleUrl": "./head-cell-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "sortParam": {
                    "name": "sortParam",
                    "getSignature": {
                        "name": "sortParam",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                },
                "filtered": {
                    "name": "filtered",
                    "getSignature": {
                        "name": "filtered",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "openItems": {
                    "name": "openItems",
                    "setSignature": {
                        "name": "openItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "openItems",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "openItems",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "openItems",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "childMode": {
                    "name": "childMode",
                    "getSignature": {
                        "name": "childMode",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            },
            "templateData": "<teta-tabs class=\"column_auto\">\r\n  <teta-tab *ngIf=\"column.filterable\">\r\n    <ng-template tetaTabTitle>\r\n      <teta-icon [name]=\"'filter'\"></teta-icon>\r\n    </ng-template>\r\n    <ng-template tetaTabContent>\r\n      <teta-filter-host [column]=\"column\" [state]=\"state\"\r\n                        *ngIf=\"dict | async as d\"\r\n                        [filterOptions]=\"d[column.name]\"></teta-filter-host>\r\n      <teta-toolbar class=\"justify-content-between\">\r\n        <button teta-button [palette]=\"'text'\" [view]=\"'ghost'\" (click)=\"clearFilter()\">\r\n          Очистить\r\n        </button>\r\n        <button teta-button [palette]=\"'primary'\" (click)=\"applyFilter()\">\r\n          <teta-icon [name]=\"'tick'\"></teta-icon>\r\n          Применить\r\n        </button>\r\n      </teta-toolbar>\r\n    </ng-template>\r\n  </teta-tab>\r\n  <teta-tab *ngIf=\"column.headDropdownTemplate\">\r\n    <ng-template tetaTabTitle>\r\n      <teta-icon [name]=\"'measurement'\"></teta-icon>\r\n    </ng-template>\r\n    <ng-template tetaTabContent>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"column.headDropdownTemplate; context: {$implicit: column, column: column}\"></ng-container>\r\n    </ng-template>\r\n  </teta-tab>\r\n  <teta-tab>\r\n    <ng-template tetaTabTitle>\r\n      <teta-icon [name]=\"'menu'\"></teta-icon>\r\n    </ng-template>\r\n    <ng-template tetaTabContent>\r\n      <div class=\"list column_auto\">\r\n        <div class=\"list-item list-item_interactive\" (click)=\"pinColumn()\">\r\n          <teta-icon [palette]=\"'text'\"\r\n                     [name]=\"column.locked ? 'unpin' : 'pin'\"\r\n                     class=\"margin-right-2\"></teta-icon>\r\n          {{column.locked ? 'Открепить' : 'Закрепить'}}\r\n        </div>\r\n        <div class=\"list-divider\"></div>\r\n        <ng-container *ngIf=\"hasSortedColumns()\">\r\n          <div class=\"list-item list-item_interactive\"\r\n               *ngIf=\"sortParam\"\r\n               (click)=\"clearSort()\">\r\n            <teta-icon [palette]=\"'text'\"\r\n                       [name]=\"'pin'\" class=\"margin-right-2\"></teta-icon>\r\n            Сбросить сортировку\r\n          </div>\r\n          <div class=\"list-item list-item_interactive\"\r\n               (click)=\"clearAllSort()\">\r\n            <teta-icon [palette]=\"'text'\"\r\n                       [name]=\"'pin'\"\r\n                       class=\"margin-right-2\"></teta-icon>\r\n            Сбросить все сортировки\r\n          </div>\r\n          <div class=\"list-divider\"></div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"hasFilteredColumns()\">\r\n          <div class=\"list-item list-item_interactive\"\r\n               *ngIf=\"filtered\"\r\n               (click)=\"clearFilter()\">\r\n            <teta-icon [palette]=\"'text'\"\r\n                       [name]=\"'pin'\"\r\n                       class=\"margin-right-2\"></teta-icon>\r\n            Очистить фильтр\r\n          </div>\r\n          <div class=\"list-item list-item_interactive\"\r\n               (click)=\"clearAllFilters()\">\r\n            <teta-icon [palette]=\"'text'\"\r\n                       [name]=\"'pin'\"\r\n                       class=\"margin-right-2\"></teta-icon>\r\n            Очистить все фильтры\r\n          </div>\r\n          <div class=\"list-divider\"></div>\r\n        </ng-container>\r\n        <div class=\"list-item list-item_interactive\" (click)=\"autosize.emit()\">\r\n          <teta-icon [palette]=\"'text'\"\r\n                     [name]=\"'autoSize'\"\r\n                     class=\"margin-right-2\"></teta-icon>\r\n          Авторазмер колонки\r\n        </div>\r\n        <div class=\"list-item list-item_interactive\" (click)=\"autosizeAll.emit()\">\r\n          <teta-icon [palette]=\"'text'\"\r\n                     [name]=\"'autoSizeAll'\"\r\n                     class=\"margin-right-2\"></teta-icon>\r\n          Авторазмер всех колонок\r\n        </div>\r\n        <div class=\"list-divider\"></div>\r\n        <div class=\"list-item list-item_interactive\" (click)=\"restoreDefaultColumns()\">\r\n          <teta-icon [palette]=\"'text'\"\r\n                     [name]=\"'undo'\"\r\n                     class=\"margin-right-2\"></teta-icon>\r\n          Отменить все изменения\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  </teta-tab>\r\n  <teta-tab>\r\n    <ng-template tetaTabTitle>\r\n      <teta-icon [name]=\"'eye'\"></teta-icon>\r\n    </ng-template>\r\n    <ng-template tetaTabContent>\r\n      <div class=\"list-item padding-left-6 padding-top-2\" [class.padding-left-9]=\"childMode\">\r\n        <teta-checkbox [binary]=\"true\"\r\n                       [allowNull]=\"true\"\r\n                       [ngModel]=\"allColumnsVisible()\"\r\n                       (ngModelChange)=\"setAllColumns($event)\">\r\n          Все\r\n        </teta-checkbox>\r\n      </div>\r\n      <div class=\"list-divider\"></div>\r\n      <div class=\"padding-v-2 column column_auto scrollable\">\r\n        <teta-tree [data]=\"columns\"\r\n                   [openItems]=\"openItems\"\r\n                   (openItemsChange)=\"openItems = $event\"\r\n                   [childNodeName]=\"'columns'\"\r\n                   [compareItems]=\"compareItems\">\r\n          <ng-template tetaTemplate let-item>\r\n            <div class=\"tree__item\">\r\n              <teta-tree-item-toggle [item]=\"item\" *ngIf=\"item.columns?.length > 0\"></teta-tree-item-toggle>\r\n              <teta-checkbox\r\n                [ngModel]=\"!columnIsHidden(item)\"\r\n                (ngModelChange)=\"setColumnVisibility(item, $event)\"\r\n                (click)=\"$event.stopPropagation()\"\r\n                [binary]=\"true\"\r\n              >\r\n                {{item.caption}}\r\n              </teta-checkbox>\r\n            </div>\r\n          </ng-template>\r\n        </teta-tree>\r\n      </div>\r\n      <teta-toolbar class=\"justify-content-end\">\r\n        <button teta-button\r\n                [disabled]=\"allColumnsVisible() === false\"\r\n                [palette]=\"'primary'\"\r\n                (click)=\"setColumnsVisibility()\">\r\n          Применить\r\n        </button>\r\n      </teta-toolbar>\r\n    </ng-template>\r\n  </teta-tab>\r\n</teta-tabs>\r\n"
        },
        {
            "name": "HeadCellHostComponent",
            "id": "component-HeadCellHostComponent-6a3b931f0f2dc6a3794ff383fa8781b6",
            "file": "projects/components/src/component/table/head-cell-host/head-cell-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-head-cell-host",
            "styleUrls": [
                "./head-cell-host.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<HeadCellComponentBase>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  Input,\r\n  OnInit,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {HeadCellComponentBase} from '../base/head-cell-component-base';\r\nimport {TableColumn} from '../contract/table-column';\r\nimport {DefaultHeadCellComponent} from '../default/default-head-cell/default-head-cell.component';\r\n\r\n@Component({\r\n  selector: 'teta-head-cell-host',\r\n  template: '',\r\n  styleUrls: ['./head-cell-host.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeadCellHostComponent implements OnInit {\r\n  private _column: TableColumn;\r\n  private componentRef: ComponentRef<HeadCellComponentBase>;\r\n  private init: boolean;\r\n\r\n  @Input()\r\n  set column(column: TableColumn) {\r\n    this._column = column;\r\n    if (this.init) {\r\n      this.componentRef.instance.column = this._column;\r\n    }\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!HeadCellComponentBase.isPrototypeOf(this.column.headCellComponent)) {\r\n      this.column.headCellComponent = DefaultHeadCellComponent;\r\n    }\r\n    this.componentRef =\r\n      this.viewContainerRef.createComponent<HeadCellComponentBase>(this.column.headCellComponent);\r\n    this.componentRef.instance.column = this.column;\r\n    this.init = true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./head-cell-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-61ff6ed03898e533396705cbffe1566f",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-a335c7ff8fcdb8de2b1cf873f32512a0",
            "file": "projects/components/src/component/icon/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "TetaSize.M",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TetaSize"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TetaSize } from '../../../common/enum/teta-size.enum';\r\n\r\n@Component({\r\n  selector: 'teta-icon',\r\n  templateUrl: './icon.component.html',\r\n  styleUrls: ['./icon.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class IconComponent implements OnInit {\r\n  @Input() name: string;\r\n  @Input() size: TetaSize = TetaSize.M;\r\n  @Input() palette: string;\r\n\r\n  @Input() class;\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [this.class, 'icon'];\r\n    if (this.palette) {\r\n      result.push(`icon-${this.palette}`);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  getName(): string {\r\n    return `#${this.name}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                }
            },
            "templateData": "<svg class=\"icon__image\">\r\n  <use [attr.xlink:href]=\"getName()\"></use>\r\n</svg>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-85d1606a0e1e3403634cf8fd2b0ae46f",
            "file": "projects/components/src/component/input/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class InputComponent implements OnInit {\r\n  @Input() label: string;\r\n\r\n  @Input()\r\n  @HostBinding('class.row')\r\n  horizontal: boolean;\r\n\r\n  @Input()\r\n  required = false;\r\n\r\n  @HostBinding('class.column')\r\n  get column() {\r\n    return !this.horizontal;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  grid-gap: 8px;\r\n  flex-grow: 1;\r\n  flex-basis: 10px;\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"font-caption color-text-90 align-center row nowrap overflow-hidden text-overflow-ellipsis\"\r\n     [class.row_6]=\"horizontal\"\r\n     [class.text-field_required]=\"required\"\r\n     *ngIf=\"label?.length > 0\">\r\n  {{label}}\r\n</div>\r\n<div class=\"input-container\" [class.row_6]=\"horizontal\">\r\n  <ng-content></ng-content>\r\n  <div class=\"input-message font-error-message\">\r\n    <ng-content select=\"message\"></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LegendComponent",
            "id": "component-LegendComponent-41ac7c0c8108e7d9812f4f19676e00f4",
            "file": "projects/chart/src/chart/legend/legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-legend",
            "styleUrls": [
                "./legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Array<Series<BasePoint>>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.padding-bottom-4'"
                        }
                    ]
                },
                {
                    "name": "sizeMapping",
                    "defaultValue": "new Map<SeriesType, number>()\r\n    .set(SeriesType.line, 2)\r\n    .set(SeriesType.bar, 12)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getHeight",
                    "args": [
                        {
                            "name": "serie",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serie",
                            "type": "Series<BasePoint>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.padding-bottom-4",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Series } from '../model/series';\r\nimport { BasePoint } from '../model/base-point';\r\nimport { SeriesType } from '../model/series-type';\r\n\r\n@Component({\r\n  selector: 'teta-legend',\r\n  templateUrl: './legend.component.html',\r\n  styleUrls: ['./legend.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LegendComponent implements OnInit {\r\n  private sizeMapping = new Map<SeriesType, number>()\r\n    .set(SeriesType.line, 2)\r\n    .set(SeriesType.bar, 12);\r\n\r\n  @Input() series: Array<Series<BasePoint>>;\r\n  @HostBinding('class.padding-bottom-4') classLegend = true;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.series = this.series?.filter((_) => _.showInLegend !== false);\r\n  }\r\n\r\n  getHeight(serie: Series<BasePoint>) {\r\n    return this.sizeMapping.get(serie.type);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  grid-gap: 8px;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n:host .legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n:host .legend-icon-form {\r\n  width: 12px;\r\n}\r\n\r\n:host .legend-label {\r\n  margin-left: 5px;\r\n}\r\n",
                    "styleUrl": "./legend.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let serie of series\">\r\n  <div class=\"legend-item\">\r\n    <div class=\"legend-icon-form\" [style.height.px]=\"getHeight(serie)\" [style.background-color]=\"serie.color\"></div>\r\n    <div class=\"legend-label\">{{ serie.name }}</div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LineSeriesComponent",
            "id": "component-LineSeriesComponent-2e424313273f3340d78c1db5c3b559e9",
            "file": "projects/chart/src/chart/chart-container/series/line/line-series.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:svg[teta-line-series]",
            "styleUrls": [
                "./line-series.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./line-series.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Series<T>",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "DOMRect",
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getPath",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTransform",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "SeriesBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport { SeriesBaseComponent } from '../../../base/series-base.component';\r\nimport { ChartService } from '../../../chart.service';\r\nimport { BasePoint } from '../../../model/base-point';\r\nimport { ScaleService } from '../../../scale.service';\r\nimport { filter, interval, map, Observable, tap } from 'rxjs';\r\nimport { IPointer } from '../../../model/i-pointer';\r\n\r\n@Component({\r\n  selector: 'svg:svg[teta-line-series]',\r\n  templateUrl: './line-series.component.html',\r\n  styleUrls: ['./line-series.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineSeriesComponent<T extends BasePoint>\r\n  extends SeriesBaseComponent<T>\r\n  implements OnInit\r\n{\r\n  transform: Observable<string>;\r\n\r\n  constructor(\r\n    protected override svc: ChartService,\r\n    protected override cdr: ChangeDetectorRef,\r\n    protected override scaleService: ScaleService\r\n  ) {\r\n    super(svc, cdr, scaleService);\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    this.transform = this.svc.pointerMove.pipe(\r\n      filter(({ event }) => event),\r\n      map(({ event }) => {\r\n        return this.getTransform(event);\r\n      }),\r\n      tap((_) => this.cdr.detectChanges())\r\n    );\r\n  }\r\n\r\n  getPath() {\r\n    const x = this.scaleService.xScales.get(this.series.xAxisIndex);\r\n    const y = this.scaleService.yScales.get(this.series.yAxisIndex);\r\n\r\n    const line = d3\r\n      .line<BasePoint>()\r\n      .x((point) => x(point.x))\r\n      .y((point) => y(point.y));\r\n\r\n    return line(this.series.data);\r\n  }\r\n\r\n  getTransform(event: any) {\r\n    const mouse = d3.pointer(event);\r\n\r\n    const foundX = this.scaleService.xScales.get(this.series.xAxisIndex);\r\n    const foundY = this.scaleService.yScales.get(this.series.yAxisIndex);\r\n\r\n    const bisect = d3.bisector((_: BasePoint) => _.x).left;\r\n    const x0 = foundX.invert(mouse[0]);\r\n\r\n    const index = bisect(this.series.data, x0, 0);\r\n\r\n    const foundPoint = this.series.data[index] ? this.series.data[index] : null;\r\n\r\n    this.svc.setTooltip(foundPoint);\r\n\r\n    return `translate(${!isNaN(foundPoint?.x) ? foundX(foundPoint.x) : 0}, ${\r\n      !isNaN(foundPoint?.y) ? foundY(foundPoint.y) : 0\r\n    })`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./line-series.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "SeriesBaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:path [attr.d]=\"getPath()\" [attr.stroke]=\"series.color\" [attr.stroke-width]=\"series.strokeWidth\"\r\n          fill=\"none\"></svg:path>\r\n<ng-container *ngIf=\"transform | async as t\">\r\n  <svg:circle r=\"3\" [attr.fill]=\"series.color\" [attr.transform]=\"t\"></svg:circle>\r\n</ng-container>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "ListCellComponent",
            "id": "component-ListCellComponent-90fc64d7246ece957d60b8471e7727a5",
            "file": "projects/components/src/component/table/default/list-cell/list-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-cell",
            "styleUrls": [
                "./list-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TableColumn"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../../contract/table-column';\r\nimport { TableRow } from '../../contract/table-row';\r\nimport { TableService } from '../../service/table.service';\r\nimport { CellComponentBase } from '../../base/cell-component-base';\r\nimport { SelectComponent } from '../../../select/select/select.component';\r\nimport { IIdName } from '../../../../common/contract/i-id-name';\r\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\r\nimport { VerticalAlign } from '../../../../common/enum/vertical-align.enum';\r\n\r\n@Component({\r\n  selector: 'teta-list-cell',\r\n  templateUrl: './list-cell.component.html',\r\n  styleUrls: ['./list-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ListCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit\r\n{\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n  @Input() override filterOptions: IIdName<any>[] = [];\r\n\r\n  get value() {\r\n    return this.getValue();\r\n  }\r\n\r\n  @ViewChild('input', { static: false }) input: SelectComponent;\r\n\r\n  verticalAlign = VerticalAlign;\r\n\r\n  constructor(\r\n    protected override svc: TableService<T>,\r\n    protected override cdr: ChangeDetectorRef\r\n  ) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  setValue(value: any): void {\r\n    this.row.data[this.column.name] = value;\r\n    this.valueChanged();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      setTimeout(() => {\r\n        this.input?.focus();\r\n        this.cdr.markForCheck();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit() {\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  private getValue() {\r\n    if (\r\n      this.filterOptions === null ||\r\n      this.filterOptions === undefined ||\r\n      !(this.filterOptions instanceof Array)\r\n    ) {\r\n      return '';\r\n    }\r\n    const item = this.filterOptions.find(\r\n      (option) => option.id === this.row.data[this.column.name]\r\n    );\r\n    if (item === null || item === undefined) {\r\n      return '';\r\n    }\r\n    return item.name;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\r\n  {{value}}\r\n</span>\r\n<teta-select #input\r\n             class=\"row_auto select-table\"\r\n             *ngIf=\"edit\"\r\n             [allowNull]=\"!column.required\"\r\n             [verticalAlign]=\"verticalAlign.auto\"\r\n             [appendToBody]=\"true\"\r\n             [options]=\"filterOptions\"\r\n             [valueRef]=\"'id'\"\r\n             [textRef]=\"'name'\"\r\n             [ngModel]=\"row.data[column.name]\"\r\n             (ngModelChange)=\"setValue($event)\">\r\n</teta-select>\r\n"
        },
        {
            "name": "ListFilterComponent",
            "id": "component-ListFilterComponent-89609fbfb1ff400af579ed6ef8391451",
            "file": "projects/components/src/component/filter/list-filter/list-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-filter",
            "styleUrls": [
                "./list-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "excluded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListFilter",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "search",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "all",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "ListFilter",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAll",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ListFilter } from '../contarct/list-filter';\r\nimport { ListFilterType } from '../enum/list-filter-type.enum';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-list-filter',\r\n  templateUrl: './list-filter.component.html',\r\n  styleUrls: ['./list-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ListFilterComponent extends FilterComponentBase implements OnInit {\r\n  @Input() column: FilterItem;\r\n  @Input() filterOptions: IIdName<any>[] = [];\r\n  @Output() filterChanged: EventEmitter<FilterBase> =\r\n    new EventEmitter<FilterBase>();\r\n\r\n  filter: ListFilter;\r\n  state$: FilterState;\r\n  search = '';\r\n\r\n  get visibleOptions() {\r\n    return this.filterOptions?.filter(\r\n      (_) => _.name?.toString().indexOf(this.search) >= 0\r\n    );\r\n  }\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this.state$ = val;\r\n    this.filter = this.getFilter();\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  get state() {\r\n    return this.state$;\r\n  }\r\n\r\n  excluded: boolean;\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  all() {\r\n    if (!this.filter?.value || this.filter?.value?.length === 0) {\r\n      return false;\r\n    }\r\n    const notSet = this.visibleOptions?.find(\r\n      (_) => this.filter?.value?.indexOf(_.id) < 0\r\n    );\r\n    if (!notSet) {\r\n      return true;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setAll(value: boolean) {\r\n    if (value) {\r\n      this.setFilter(this.visibleOptions?.map((_) => _.id));\r\n    } else {\r\n      this.setFilter([]);\r\n    }\r\n  }\r\n\r\n  setType() {\r\n    this.excluded = !this.excluded;\r\n    this.filter.type = this.excluded\r\n      ? ListFilterType.Excluded\r\n      : ListFilterType.None;\r\n  }\r\n\r\n  setFilter(value: any[]) {\r\n    this.filter.value = value;\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  private getFilter(): ListFilter {\r\n    let filter = this.state.listFilters?.find(\r\n      (f) => f.field === this.column.filterField\r\n    );\r\n    if (!filter) {\r\n      filter = this.state.addListFilter(\r\n        new ListFilter({\r\n          field: this.column.filterField,\r\n          value: [],\r\n          type: this.column.listFilterType,\r\n          name: this.column.name,\r\n        })\r\n      );\r\n    }\r\n    this.excluded = filter.type === ListFilterType.Excluded;\r\n    return filter;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  min-height: 0;\r\n  min-width: 0;\r\n}\r\n",
                    "styleUrl": "./list-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "visibleOptions": {
                    "name": "visibleOptions",
                    "getSignature": {
                        "name": "visibleOptions",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"padding-2\">\r\n  <teta-text-field [(ngModel)]=\"search\"></teta-text-field>\r\n</div>\r\n<div class=\"list padding-v-2 scrollable\">\r\n  <div class=\"list-item\">\r\n    <teta-checkbox [binary]=\"true\"\r\n                   [allowNull]=\"true\"\r\n                   [ngModel]=\"all()\"\r\n                   (ngModelChange)=\"setAll($event)\">Все\r\n    </teta-checkbox>\r\n  </div>\r\n  <div class=\"list-divider\"></div>\r\n  <div class=\"list-item\" *ngFor=\"let option of visibleOptions\">\r\n    <teta-checkbox [ngModel]=\"filter.value\"\r\n                   (ngModelChange)=\"setFilter($event)\"\r\n                   [value]=\"option.id\"\r\n                   [binary]=\"false\">\r\n      {{option.name}}\r\n    </teta-checkbox>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ListItemDefaultComponent",
            "id": "component-ListItemDefaultComponent-1e1c7bb68e91954750e5a39aa4e74b47",
            "file": "projects/components/src/component/property-grid/default/list-item-default/list-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-list-item-default",
            "styleUrls": [
                "./list-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-list-item-default',\r\n  templateUrl: './list-item-default.component.html',\r\n  styleUrls: ['./list-item-default.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ListItemDefaultComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>list-item-default works!</p>\r\n"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-5ebe5fac38ad10ca5e6ec000cf2d79ba",
            "file": "projects/components/src/component/message/message/message.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message",
            "styleUrls": [
                "./message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Message"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMe",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any"
                }
            ],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport { Message } from '../model/message';\r\n\r\n@Component({\r\n  selector: 'teta-message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MessageComponent implements AfterViewInit, OnDestroy {\r\n  @Input() message: Message;\r\n  @Input() index: number;\r\n  @Output() closed: EventEmitter<any> = new EventEmitter();\r\n  @Input() class;\r\n\r\n  @HostBinding('class')\r\n  private get getClass() {\r\n    const result = ['message'];\r\n    if (this.message.className?.length > 0) {\r\n      result.push(...this.message.className);\r\n    }\r\n    if (this.message.palette) {\r\n      result.push(`message-${this.message.palette}`);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  timeout: any;\r\n\r\n  constructor() {}\r\n\r\n  @HostListener('mouseleave')\r\n  init() {\r\n    if (!this.message.infinite) {\r\n      this.timeout = setTimeout(() => {\r\n        this.closed.emit({\r\n          index: this.index,\r\n          message: this.message,\r\n        });\r\n      }, this.message.duration);\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  reset() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n      this.timeout = null;\r\n    }\r\n  }\r\n\r\n  closeMe(event: MouseEvent) {\r\n    this.reset();\r\n\r\n    this.closed.emit({\r\n      index: this.index,\r\n      message: this.message,\r\n    });\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.reset();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"row align-center justify-content-between\">\r\n  <div class=\"font-title-3 padding-left-1\">\r\n    {{message.title}}\r\n  </div>\r\n  <button teta-button\r\n          [square]=\"true\"\r\n          [palette]=\"message.palette\"\r\n          [view]=\"'primary'\"\r\n          (click)=\"closeMe($event)\">\r\n    <teta-icon [name]=\"'closeBig'\"></teta-icon>\r\n  </button>\r\n</div>\r\n<div class=\"font-body-3 padding-v-1\" *ngIf=\"!message.template && message.text\">\r\n  {{message.text}}\r\n</div>\r\n<ng-container *ngIf=\"message.template\">\r\n  <ng-container *ngTemplateOutlet=\"message.template; context: {$implicit: message}\"></ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "MessageHostComponent",
            "id": "component-MessageHostComponent-c9f460453c46a1e102aceb56c323117a",
            "file": "projects/components/src/component/message/message-host/message-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message-host",
            "styleUrls": [
                "./message-host.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-host.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Align"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "VerticalAlign"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alignMap",
                    "defaultValue": "new Map<Align, string>()\r\n    .set(Align.right, 'message-host_right')\r\n    .set(Align.left, 'message-host_left')\r\n    .set(Align.center, 'message-host_center')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<Align | string>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_valignMap",
                    "defaultValue": "new Map<\r\n    VerticalAlign,\r\n    string\r\n  >()\r\n    .set(VerticalAlign.top, 'message-host_top')\r\n    .set(VerticalAlign.center, 'message-host_vertical-center')\r\n    .set(VerticalAlign.bottom, 'message-host_bottom')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<VerticalAlign | string>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "closedItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { MessageService } from '../message.service';\r\nimport { Message } from '../model/message';\r\nimport { Align } from '../../../common/enum/align.enum';\r\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\r\nimport { takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-message-host',\r\n  templateUrl: './message-host.component.html',\r\n  styleUrls: ['./message-host.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MessageHostComponent implements OnInit, OnDestroy {\r\n  @Input() class;\r\n  @Input() align: Align = Align.right;\r\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\r\n  @Output() itemClose: EventEmitter<any> = new EventEmitter();\r\n\r\n  messages: Message[] = [];\r\n  private readonly _alignMap: Map<Align, string> = new Map<Align, string>()\r\n    .set(Align.right, 'message-host_right')\r\n    .set(Align.left, 'message-host_left')\r\n    .set(Align.center, 'message-host_center');\r\n  private readonly _valignMap: Map<VerticalAlign, string> = new Map<\r\n    VerticalAlign,\r\n    string\r\n  >()\r\n    .set(VerticalAlign.top, 'message-host_top')\r\n    .set(VerticalAlign.center, 'message-host_vertical-center')\r\n    .set(VerticalAlign.bottom, 'message-host_bottom');\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [this.class, 'message-host'];\r\n    if (this._alignMap.has(this.align)) {\r\n      result.push(this._alignMap.get(this.align));\r\n    }\r\n    if (this._valignMap.has(this.verticalAlign)) {\r\n      result.push(this._valignMap.get(this.verticalAlign));\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  private _alive = true;\r\n\r\n  constructor(private _svc: MessageService, private _cdr: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this._svc.message\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((messages) => {\r\n        if (messages) {\r\n          if (!this.messages) {\r\n            this.messages = [];\r\n          }\r\n          this.messages.push(messages);\r\n        }\r\n        this._cdr.markForCheck();\r\n      });\r\n\r\n    this._svc.clear\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((x: string) => {\r\n        if (!x) {\r\n          this.messages = [];\r\n        } else {\r\n          this.messages = this.messages?.filter((_) => _.name !== x);\r\n        }\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  closedItem(event: any) {\r\n    this.messages.splice(event.index, 1);\r\n    this.itemClose.emit({\r\n      message: event.message,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            },
            "templateData": "<teta-message\r\n  *ngFor=\"let message of messages; let i=index\"\r\n  (closed)=\"closedItem($event)\"\r\n  [message]=\"message\"\r\n  [index]=\"i\">\r\n</teta-message>\r\n"
        },
        {
            "name": "MessageSampleComponent",
            "id": "component-MessageSampleComponent-6c21a79c850410adfd2afffdb2913f2b",
            "file": "projects/components/src/component/message/message-samples/message-sample/message-sample.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-message-sample",
            "styleUrls": [
                "./message-sample.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-sample.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "infinite",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "palette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "infinite",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "palette",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnInit,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { MessageService } from '../../message.service';\r\nimport { Message } from '../../model/message';\r\n\r\n@Component({\r\n  selector: 'teta-message-sample',\r\n  templateUrl: './message-sample.component.html',\r\n  styleUrls: ['./message-sample.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MessageSampleComponent implements OnInit {\r\n  constructor(private _svc: MessageService) {}\r\n\r\n  create(\r\n    title: string,\r\n    text: string,\r\n    infinite: boolean,\r\n    palette: string,\r\n    className?: string,\r\n    template?: TemplateRef<any>\r\n  ) {\r\n    this._svc.add(\r\n      new Message({\r\n        className: [className],\r\n        title,\r\n        palette,\r\n        text,\r\n        template,\r\n        infinite,\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-sample.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-3 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n  <button teta-button [palette]=\"'primary'\"\r\n          (click)=\"create('Simple' , 'I will close after 5 seconds', false, 'primary')\">\r\n    Simple\r\n  </button>\r\n  <button teta-button [palette]=\"'primary'\"\r\n          (click)=\"create('Infinite' , 'I will close after 5 seconds', true, 'primary')\">\r\n    Infinite\r\n  </button>\r\n  <button teta-button [palette]=\"'green'\"\r\n          (click)=\"create('Infinite' , 'I will close after 5 seconds', true, 'green')\">\r\n    Infinite\r\n  </button>\r\n  <button teta-button [palette]=\"'red'\"\r\n          (click)=\"create('Custom class' , 'I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background I am supposed to have red background ', false, 'red','bg-red-20')\">\r\n    With a custom class name\r\n  </button>\r\n  <button teta-button [palette]=\"'text'\"\r\n          (click)=\"create('Template' , 'I have a custom template', false, 'text', '', messageTemplate)\">\r\n    Template\r\n  </button>\r\n\r\n  <teta-message-host></teta-message-host>\r\n\r\n  <ng-template #messageTemplate let-message>\r\n    <div class=\"bg-green-10\">\r\n      {{message.text}}\r\n    </div>\r\n\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "ModalContainerComponent",
            "id": "component-ModalContainerComponent-247617b7b2e725146a4a5b3a208863d6",
            "file": "projects/components/src/component/modal/modal-container/modal-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-container",
            "styleUrls": [
                "./modal-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "IModalConfig"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter<IModalResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@dialog'"
                        }
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "attr.tabindex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { IModalConfig } from '../model/i-modal-config';\r\nimport { IModalResult } from '../model/i-modal-result';\r\nimport { ModalCloseReason } from '../model/modal-close-reason.enum';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'teta-modal-container',\r\n  templateUrl: './modal-container.component.html',\r\n  styleUrls: ['./modal-container.component.scss'],\r\n  animations: [\r\n    trigger('dialog', [\r\n      transition('void => *', [\r\n        style({ opacity: '0' }),\r\n        animate(150, style({ opacity: '1' })),\r\n      ]),\r\n      transition('* => void', [animate(150, style({ opacity: '0' }))]),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModalContainerComponent {\r\n  @Input() config: IModalConfig;\r\n  @Output() closeEvent = new EventEmitter<IModalResult>();\r\n\r\n  @HostBinding('attr.tabindex') tabindex = -1;\r\n  @HostBinding('@dialog') dialog = true;\r\n\r\n  @HostBinding('class')\r\n  get classList(): string {\r\n    const classList = ['modal__window'];\r\n    if (this.config) {\r\n      if (this.config && this.config.class) {\r\n        classList.push(...this.config.class);\r\n      }\r\n      if (this.config.backdrop) {\r\n        classList.push('modal__backdrop');\r\n      }\r\n    }\r\n    return classList.join(' ');\r\n  }\r\n\r\n  constructor(private elRef$: ElementRef) {}\r\n\r\n  @HostListener('keyup', ['$event']) keyup(event: KeyboardEvent): void {\r\n    if (this.config && this.config.esc && !event.defaultPrevented) {\r\n      const key = event.key || event.keyCode;\r\n\r\n      if (key === 'Escape' || key === 'Esc' || key === 27) {\r\n        this.closeEvent.emit({\r\n          reason: ModalCloseReason.esc,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    if (\r\n      this.config.closeOnBackdropClick === true &&\r\n      this.elRef$.nativeElement === event.target\r\n    ) {\r\n      this.closeEvent.emit({\r\n        reason: ModalCloseReason.backdrop,\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef$",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "elRef$",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "string",
                        "returnType": "string",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"modal__container\" [class.modal__container_resize]=\"config?.resizable\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "ModalExampleComponent",
            "id": "component-ModalExampleComponent-024ec9568d6cdaea78f3e6fd8b5e7199",
            "file": "projects/components/src/component/modal/modal-samples/modal-example/modal-example.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-example",
            "styleUrls": [
                "./modal-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeReason",
                    "defaultValue": "ModalCloseReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentModal",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ModalCloseReason } from '../../model/modal-close-reason.enum';\r\nimport { DynamicData } from '../../../../common/contract/dynamic-data';\r\nimport { CurrentModal } from '../../model/current-modal';\r\n\r\n@Component({\r\n  selector: 'teta-modal-example',\r\n  templateUrl: './modal-example.component.html',\r\n  styleUrls: ['./modal-example.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModalExampleComponent implements OnInit {\r\n  closeReason = ModalCloseReason;\r\n\r\n  constructor(public modal: CurrentModal, private data: DynamicData) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "CurrentModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DynamicData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"column\">\r\n  <teta-toolbar [palette]=\"'background'\" class=\"justify-content-between\">\r\n    <span>Создать проект</span>\r\n    <teta-icon [name]=\"'closeBig'\" (click)=\"modal.close({reason: closeReason.exit})\"></teta-icon>\r\n  </teta-toolbar>\r\n  <div class=\"padding-3 column\">\r\n    <div class=\"margin-v-2\">\r\n      <input class=\"input\" type=\"text\" [(ngModel)]=\"data.name\" placeholder=\"Название\">\r\n    </div>\r\n    <div class=\"margin-v-2\">\r\n      <input class=\"input\" type=\"text\" [(ngModel)]=\"data.description\" placeholder=\"Описание\">\r\n    </div>\r\n  </div>\r\n  <teta-toolbar [palette]=\"'panel'\">\r\n    <button teta-button [palette]=\"'primary'\"\r\n            (click)=\"modal.close({reason: closeReason.exit })\">\r\n      Отменить\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\"\r\n            (click)=\"modal.close({reason: closeReason.resolve })\">\r\n      Создать\r\n    </button>\r\n  </teta-toolbar>\r\n</div>\r\n"
        },
        {
            "name": "ModalFromComponentComponent",
            "id": "component-ModalFromComponentComponent-5de1587fd97b13f9d6c8ea805f4a5cf1",
            "file": "projects/components/src/component/modal/modal-samples/modal-from-component/modal-from-component.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-modal-from-component",
            "styleUrls": [
                "./modal-from-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-from-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ModalExampleComponent } from '../modal-example/modal-example.component';\r\nimport { ModalService } from '../../modal.service';\r\n\r\n@Component({\r\n  selector: 'teta-modal-from-component',\r\n  templateUrl: './modal-from-component.component.html',\r\n  styleUrls: ['./modal-from-component.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModalFromComponentComponent implements OnInit {\r\n  @Input() name: string;\r\n  @Input() description: string;\r\n\r\n  constructor(private modal: ModalService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  create(): void {\r\n    const modal = this.modal.create(ModalExampleComponent, {\r\n      name: this.name,\r\n      description: this.description,\r\n    });\r\n    modal.onClose.subscribe((_) => {});\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-from-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button teta-button [palette]=\"'primary'\" (click)=\"create()\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n  Create modal\r\n</button>\r\n"
        },
        {
            "name": "ModalFromTemplateComponent",
            "id": "component-ModalFromTemplateComponent-a8daee12b784232e6ce29b69eaf55a1c",
            "file": "projects/components/src/component/modal/modal-samples/modal-from-template/modal-from-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-from-template",
            "styleUrls": [
                "./modal-from-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-from-template.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeReason",
                    "defaultValue": "ModalCloseReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ModalCloseReason } from '../../model/modal-close-reason.enum';\r\nimport { ModalService } from '../../modal.service';\r\n\r\n@Component({\r\n  selector: 'app-modal-from-template',\r\n  templateUrl: './modal-from-template.component.html',\r\n  styleUrls: ['./modal-from-template.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModalFromTemplateComponent implements OnInit {\r\n  @Input() name: string;\r\n  @Input() description: string;\r\n\r\n  closeReason = ModalCloseReason;\r\n\r\n  constructor(private modal: ModalService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  create(template: TemplateRef<any>): void {\r\n    const modal = this.modal.create(template, {\r\n      name: this.name,\r\n      description: this.description,\r\n    });\r\n    modal.onClose.subscribe((_) => {});\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-from-template.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #content let-data=\"data\" let-modal=\"modal\">\r\n  <div class=\"column\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-toolbar [palette]=\"'background'\" class=\"justify-content-between\">\r\n      <span>Создать проект</span>\r\n      <teta-icon [name]=\"'closeBig'\" (click)=\"modal.close({reason: closeReason.exit })\"></teta-icon>\r\n    </teta-toolbar>\r\n    <div class=\"padding-3 column\">\r\n      <div class=\"margin-v-2\">\r\n        <input class=\"input\" type=\"text\" [(ngModel)]=\"data.name\" placeholder=\"'Название'\">\r\n      </div>\r\n      <div class=\"margin-v-2\">\r\n        <input class=\"input\" type=\"text\" [(ngModel)]=\"data.description\" placeholder=\"'Описание'\">\r\n      </div>\r\n    </div>\r\n    <teta-toolbar [palette]=\"'panel'\">\r\n      <button teta-button\r\n              [palette]=\"'primary'\"\r\n              (click)=\"modal.close({reason: closeReason.exit })\">\r\n        Отменить\r\n      </button>\r\n      <button teta-button\r\n              [palette]=\"'primary'\"\r\n              (click)=\"modal.close({reason: closeReason.resolve })\">\r\n        Создать\r\n      </button>\r\n    </teta-toolbar>\r\n  </div>\r\n</ng-template>\r\n<button teta-button [palette]=\"'primary'\" (click)=\"create(content)\">\r\n  Create modal\r\n</button>\r\n"
        },
        {
            "name": "MonthPickerComponent",
            "id": "component-MonthPickerComponent-30a21ceb1eb193047244f778808a5a75",
            "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-month-picker",
            "styleUrls": [
                "./month-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./month-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendToBody",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Date"
                },
                {
                    "name": "showToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "_currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "classDatepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "datePickerModeEnum",
                    "defaultValue": "DatePickerMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayMode",
                    "defaultValue": "DatePickerMode.month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerMode",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleModel",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "localeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PickerLocaleService",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "scrollMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "scrollYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "setToday",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 250
                },
                {
                    "name": "showPicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.datepicker_open'"
                        }
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "clearPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initPicker",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "DatePickerMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.datepicker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "true"
                },
                {
                    "name": "class.datepicker_open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "0"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { PickerLocaleModel } from '../model/picker-locale-model';\r\nimport { PickerLocaleService } from '../service/picker-locale.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { DatePickerMode } from '../model/date-picker-mode.enum';\r\n\r\nexport const MONTH_PICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MonthPickerComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-month-picker',\r\n  templateUrl: './month-picker.component.html',\r\n  styleUrls: ['./month-picker.component.scss'],\r\n  providers: [MONTH_PICKER_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MonthPickerComponent\r\n  implements ControlValueAccessor, OnInit, OnDestroy\r\n{\r\n  @Input() disabled: boolean;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Input() showToday = true;\r\n  @Input() appendToBody = true;\r\n\r\n  @HostBinding('class.datepicker_open') showPicker: boolean;\r\n  @HostBinding('class.datepicker') private readonly classDatepicker = true;\r\n  @HostBinding('tabindex') private readonly tabindex = 0;\r\n\r\n  datePickerModeEnum = DatePickerMode;\r\n\r\n  locale: PickerLocaleModel;\r\n  today: Date;\r\n\r\n  displayMode: DatePickerMode = DatePickerMode.month;\r\n\r\n  _value: Date | null = null;\r\n  _currentMonth: number | null;\r\n  _currentYear: number | null;\r\n\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(v: any) {\r\n    if (v !== this._value) {\r\n      this._value = v;\r\n      this.onChange(v);\r\n    }\r\n  }\r\n\r\n  get currentMonth(): number | null {\r\n    return this._currentMonth;\r\n  }\r\n\r\n  set currentMonth(v: number | null) {\r\n    if (v === null || v === undefined || v < 0 || v > 11) {\r\n      return;\r\n    }\r\n    if (v !== this._currentMonth) {\r\n      this._currentMonth = v;\r\n    }\r\n  }\r\n\r\n  get currentYear(): number | null {\r\n    return this._currentYear;\r\n  }\r\n\r\n  set currentYear(v: number | null) {\r\n    if (v !== this._currentYear) {\r\n      this._currentYear = v;\r\n    }\r\n  }\r\n\r\n  private _alive = true;\r\n\r\n  constructor(\r\n    public localeService: PickerLocaleService,\r\n    private _cdr: ChangeDetectorRef\r\n  ) {\r\n    localeService.locale\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((locale: PickerLocaleModel) => {\r\n        this.locale = locale;\r\n      });\r\n    this.setDefaults();\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    this._value = value;\r\n    this.initPicker(value);\r\n  }\r\n\r\n  initPicker(date: Date) {\r\n    if (!date || !(date instanceof Date)) {\r\n      this.setDefaults();\r\n    } else {\r\n      this.currentMonth = date.getMonth();\r\n      this.currentYear = date.getFullYear();\r\n    }\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  setDefaults() {\r\n    this.today = new Date();\r\n    this.currentMonth = null;\r\n    this.currentYear = null;\r\n  }\r\n\r\n  clearPicker() {\r\n    this.value = null;\r\n  }\r\n\r\n  onChange = (_: any) => {};\r\n\r\n  onTouched = () => {};\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.minDate || !(this.minDate instanceof Date)) {\r\n      this.minDate = new Date('1900-01-01T00:00:00Z');\r\n    }\r\n    if (!this.maxDate || !(this.maxDate instanceof Date)) {\r\n      this.maxDate = new Date('2100-12-31T00:00:00Z');\r\n    }\r\n    this.initPicker(this.value);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  isMinInvalid = (dat: Date): boolean => {\r\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    const min = new Date(\r\n      this.minDate.getFullYear(),\r\n      this.minDate.getMonth(),\r\n      1\r\n    );\r\n    return min.getTime() > dat.getTime();\r\n  };\r\n\r\n  isMaxInvalid = (dat: Date): boolean => {\r\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    const max = new Date(\r\n      this.maxDate.getFullYear(),\r\n      this.maxDate.getMonth(),\r\n      1\r\n    );\r\n    return max.getTime() < dat.getTime();\r\n  };\r\n\r\n  scrollMonth = (e: any) => {\r\n    if (this.showPicker) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this._value) {\r\n      return;\r\n    }\r\n    if (this.currentYear === null || this.currentYear === undefined) {\r\n      this.currentYear = this.today.getFullYear();\r\n    }\r\n    if (this.currentMonth === null || this.currentMonth === undefined) {\r\n      this.currentMonth = this.today.getMonth();\r\n    }\r\n    if (e.deltaY > 0) {\r\n      if (this.currentMonth === 11) {\r\n        this.currentMonth = 0;\r\n        this.currentYear++;\r\n      } else {\r\n        this.currentMonth++;\r\n      }\r\n    } else {\r\n      if (this.currentMonth === 0) {\r\n        this.currentMonth = 11;\r\n        this.currentYear--;\r\n      } else {\r\n        this.currentMonth--;\r\n      }\r\n    }\r\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\r\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\r\n      this.value = newDate;\r\n    }\r\n  };\r\n\r\n  scrollYear = (e: any) => {\r\n    if (this.showPicker) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this._value) {\r\n      return;\r\n    }\r\n    if (!this.currentYear) {\r\n      this.currentYear = this.today.getFullYear();\r\n    }\r\n    if (!this.currentMonth) {\r\n      this.currentMonth = this.today.getMonth();\r\n    }\r\n    if (e.deltaY > 0) {\r\n      this.currentYear++;\r\n    } else {\r\n      this.currentYear--;\r\n    }\r\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\r\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\r\n      this.value = newDate;\r\n    }\r\n  };\r\n\r\n  setMonth = (month: number) => {\r\n    this.currentMonth = month;\r\n    if (!this.currentYear) {\r\n      this.currentYear = this.today.getFullYear();\r\n    }\r\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\r\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\r\n      this.value = newDate;\r\n    }\r\n  };\r\n\r\n  setYear = (year: number) => {\r\n    this.currentYear = year;\r\n    if (!this.currentMonth) {\r\n      this.currentMonth = this.today.getMonth();\r\n    }\r\n    const newDate = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\r\n    if (!this.isMinInvalid(newDate) && !this.isMaxInvalid(newDate)) {\r\n      this.value = newDate;\r\n    }\r\n  };\r\n\r\n  setToday = () => {\r\n    const today = new Date();\r\n    this.currentYear = today.getFullYear();\r\n    this.currentMonth = today.getMonth();\r\n    this.value = new Date(this.currentYear, this.currentMonth, 1, 0, 0, 0);\r\n    this.showPicker = false;\r\n  };\r\n\r\n  setMode(mode: DatePickerMode) {\r\n    let result: DatePickerMode;\r\n    if (mode === this.displayMode || mode === DatePickerMode.month) {\r\n      result = DatePickerMode.month;\r\n    } else {\r\n      result = mode;\r\n    }\r\n    this.displayMode = result;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./month-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "localeService",
                        "type": "PickerLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 54
                    }
                },
                "currentMonth": {
                    "name": "currentMonth",
                    "setSignature": {
                        "name": "currentMonth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentMonth",
                        "type": "",
                        "returnType": "number | null",
                        "line": 65
                    }
                },
                "currentYear": {
                    "name": "currentYear",
                    "setSignature": {
                        "name": "currentYear",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentYear",
                        "type": "",
                        "returnType": "number | null",
                        "line": 78
                    }
                }
            },
            "templateData": "<teta-dropdown\r\n  class=\"row row_auto\"\r\n  [appendToBody]=\"appendToBody\"\r\n  [(open)]=\"showPicker\"\r\n  [disabled]=\"disabled\">\r\n  <div tetaDropdownHead\r\n       (wheel)=\"scrollMonth($event)\"\r\n       class=\"datepicker-head font-body-3\">\r\n    <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>\r\n    <div class=\"row_auto\">\r\n      <ng-container *ngIf=\"_value !==null && _value!==undefined\">\r\n        {{locale.monthNames[_value.getMonth()]}} {{_value.getFullYear()}}\r\n      </ng-container>\r\n    </div>\r\n    <teta-icon [name]=\"'closeBig'\" (click)=\"clearPicker()\" class=\"margin-left-2\"></teta-icon>\r\n  </div>\r\n  <div tetaDropdownContent class=\"datepicker-body scrollable padding-3\">\r\n    <div class=\"row align-center justify-content-between\">\r\n      <div>\r\n        <button teta-button\r\n                [palette]=\"'text'\"\r\n                [view]=\"displayMode===datePickerModeEnum.month ? 'primary' : 'ghost'\"\r\n                (click)=\"setMode(datePickerModeEnum.month)\"\r\n                (wheel)=\"scrollMonth($event);\">\r\n          {{locale.monthNames[_currentMonth || today.getMonth()]}}\r\n        </button>\r\n        <button teta-button\r\n                class=\"margin-left-2\"\r\n                [palette]=\"'text'\"\r\n                [view]=\"displayMode===datePickerModeEnum.year ? 'primary' : 'ghost'\"\r\n                (click)=\"setMode(datePickerModeEnum.year)\"\r\n                (wheel)=\"scrollYear($event);\">\r\n          {{_currentYear || today.getFullYear()}}\r\n        </button>\r\n      </div>\r\n      <button teta-button\r\n              [palette]=\"'text'\"\r\n              [view]=\"'ghost'\"\r\n              (click)=\"setToday()\">\r\n        <teta-icon [name]=\"'calendar'\"></teta-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"datepicker-content\">\r\n      <teta-year-select\r\n        *ngIf=\"displayMode === datePickerModeEnum.year\"\r\n        [currentYear]=\"_currentYear\"\r\n        [today]=\"today\"\r\n        [size]=\"8\"\r\n        [minDate]=\"minDate\"\r\n        [maxDate]=\"maxDate\"\r\n        (yearSelected)=\"setYear($event)\">\r\n      </teta-year-select>\r\n      <teta-month-select\r\n        *ngIf=\"displayMode === datePickerModeEnum.month\"\r\n        [currentMonth]=\"_currentMonth\"\r\n        [locale]=\"locale\"\r\n        [currentYear]=\"_currentYear\"\r\n        [minDate]=\"minDate\"\r\n        [maxDate]=\"maxDate\"\r\n        (monthSelected)=\"setMonth($event)\">\r\n      </teta-month-select>\r\n    </div>\r\n  </div>\r\n</teta-dropdown>\r\n"
        },
        {
            "name": "MonthSelectComponent",
            "id": "component-MonthSelectComponent-fa3753de7843bf3f234d760b4652043a",
            "file": "projects/components/src/component/date-picker/month-select/month-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-month-select",
            "styleUrls": [
                "./month-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./month-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "number"
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "PickerLocaleModel"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Date"
                },
                {
                    "name": "size",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "monthApplied",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "monthSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "_currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "applyMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "isMonthDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "scrollMonthSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "setMonth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "shift",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "shiftMonthSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "makeMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { PickerLocaleModel } from '../model/picker-locale-model';\r\nimport { fromEvent, merge } from 'rxjs';\r\nimport { takeWhile, tap } from 'rxjs/operators';\r\nimport { PickerTouchService } from '../service/picker-touch.service';\r\n\r\n@Component({\r\n  selector: 'teta-month-select',\r\n  templateUrl: './month-select.component.html',\r\n  styleUrls: ['./month-select.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MonthSelectComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @Input() locale: PickerLocaleModel;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Input() size = 8;\r\n  @Output() monthSelected = new EventEmitter<number>();\r\n  @Output() monthApplied = new EventEmitter<number>();\r\n\r\n  _currentMonth: number;\r\n\r\n  @Input()\r\n  set currentMonth(val: number) {\r\n    this._currentMonth = val;\r\n    this.makeMonths();\r\n  }\r\n\r\n  get currentMonth(): number {\r\n    return this._currentMonth;\r\n  }\r\n\r\n  _currentYear: number;\r\n\r\n  @Input()\r\n  set currentYear(val: number) {\r\n    this._currentYear = val;\r\n  }\r\n\r\n  get currentYear(): number {\r\n    return this._currentYear;\r\n  }\r\n\r\n  today: Date;\r\n  months: number[] = [];\r\n  shift = 0;\r\n\r\n  private _alive = true;\r\n\r\n  private get _displayDate(): Date {\r\n    let month = 0;\r\n    let year = 0;\r\n    if (\r\n      this.currentMonth !== null &&\r\n      this.currentMonth !== undefined &&\r\n      this.currentMonth >= 0 &&\r\n      this.currentMonth <= 11\r\n    ) {\r\n      month = this.currentMonth;\r\n    }\r\n    if (this.currentYear !== null && this.currentYear !== undefined) {\r\n      year = this.currentYear;\r\n    }\r\n    return new Date(year, month, 1);\r\n  }\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _pickerTouchService: PickerTouchService\r\n  ) {\r\n    this.today = new Date();\r\n    this.today.setHours(0, 0, 0, 0);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const touchMove$ = fromEvent(\r\n      this._elementRef.nativeElement.parentElement,\r\n      'touchmove'\r\n    );\r\n\r\n    touchMove$\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        tap((e: TouchEvent) => {\r\n          if (e.type === 'touchmove') {\r\n            this._pickerTouchService.onTouchMove(e);\r\n          }\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this._pickerTouchService.step\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        tap((_) => {\r\n          this.shiftMonthSelector(_);\r\n          this._cdr.detectChanges();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  scrollMonthSelector = (e: WheelEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const step = e.deltaY > 0 ? 1 : -1;\r\n    this.shiftMonthSelector(step);\r\n  };\r\n\r\n  shiftMonthSelector = (step: number = 0) => {\r\n    this.shift += step;\r\n    this.makeMonths();\r\n  };\r\n\r\n  setMonth = (e: any, month: number) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this.isMonthDisabled(month)) {\r\n      this.shift = 0;\r\n      this.monthSelected.emit(month);\r\n    }\r\n  };\r\n\r\n  applyMonth = (e: any, month: number) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this.isMonthDisabled(month)) {\r\n      this.monthApplied.emit(month);\r\n    }\r\n  };\r\n\r\n  isMonthDisabled = (month: number) => {\r\n    if (!month && !this.currentYear) {\r\n      const dat = new Date(this.currentYear, month, 1);\r\n      return this.isMaxInvalid(dat) || this.isMinInvalid(dat);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  isMinInvalid = (dat: Date): boolean => {\r\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    const min = new Date(\r\n      this.minDate.getFullYear(),\r\n      this.minDate.getMonth(),\r\n      1\r\n    );\r\n    return min.getTime() > dat.getTime();\r\n  };\r\n\r\n  isMaxInvalid = (dat: Date): boolean => {\r\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    const max = new Date(\r\n      this.maxDate.getFullYear(),\r\n      this.maxDate.getMonth(),\r\n      1\r\n    );\r\n    return max.getTime() < dat.getTime();\r\n  };\r\n\r\n  private makeMonths() {\r\n    const start = this._displayDate;\r\n    this.months = [];\r\n    start.setMonth(start.getMonth() - 3);\r\n    for (let i = this.shift; i < this.size + this.shift; i++) {\r\n      const dt = new Date(start.getFullYear(), start.getMonth() + i, 1);\r\n      this.months.push(dt.getMonth());\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./month-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "currentMonth": {
                    "name": "currentMonth",
                    "setSignature": {
                        "name": "currentMonth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentMonth",
                        "type": "number",
                        "returnType": "number",
                        "line": 41
                    }
                },
                "currentYear": {
                    "name": "currentYear",
                    "setSignature": {
                        "name": "currentYear",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 52
                    }
                },
                "_displayDate": {
                    "name": "_displayDate",
                    "getSignature": {
                        "name": "_displayDate",
                        "type": "",
                        "returnType": "Date",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"list row_auto margin-top-2\"\r\n     (wheel)=\"scrollMonthSelector($event);\">\r\n  <div *ngFor=\"let month of months\"\r\n       class=\"list-item list-item_interactive\"\r\n       [class.list-item_active]=\"month === _currentMonth\"\r\n       [class.list-item_disabled]=\"isMonthDisabled(month)\"\r\n       [class.datepicker__month__item_current]=\"month === today?.getMonth() && currentYear === today?.getFullYear()\"\r\n       (click)=\"setMonth($event, month)\"\r\n       (dblclick)=\"applyMonth($event, month)\">\r\n    <span class=\"color-text-20 margin-right-2\">\r\n      {{month + 1 | tetaPrependZero: 2}}\r\n    </span>\r\n    {{locale.monthNames[month]}}\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NumericCellComponent",
            "id": "component-NumericCellComponent-464f6019cb440c7f5b1ce6e3d6a4ce48",
            "file": "projects/components/src/component/table/default/numeric-cell/numeric-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-cell",
            "styleUrls": [
                "./numeric-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CellComponentBase } from '../../base/cell-component-base';\r\nimport { TableService } from '../../service/table.service';\r\nimport { TableColumn } from '../../contract/table-column';\r\nimport { TableRow } from '../../contract/table-row';\r\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\r\n\r\n@Component({\r\n  selector: 'teta-numeric-cell',\r\n  templateUrl: './numeric-cell.component.html',\r\n  styleUrls: ['./numeric-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NumericCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit\r\n{\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n  @ViewChild('input', { static: false }) input: ElementRef;\r\n\r\n  constructor(\r\n    protected override svc: TableService<T>,\r\n    protected override cdr: ChangeDetectorRef\r\n  ) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  setValue(): void {\r\n    this.valueChanged();\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      setTimeout(() => {\r\n        this.input?.nativeElement.focus();\r\n        this.cdr.markForCheck();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit(): void {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  justify-content: end;\r\n}\r\n",
                    "styleUrl": "./numeric-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text cell-text_numeric\">\r\n  {{row.data[column.name] | tetaNumber : 2}}\r\n</span>\r\n<input #input\r\n       *ngIf=\"edit\"\r\n       tetaOnlyNumber\r\n       type=\"text\"\r\n       class=\"input row_auto border-radius-0\"\r\n       (blur)=\"setValue()\"\r\n       [ngModel]=\"row.data[column.name]\"\r\n       (ngModelChange)=\"row.data[column.name]=$event;\"/>\r\n"
        },
        {
            "name": "NumericFilterComponent",
            "id": "component-NumericFilterComponent-ed67ebcc3ca0b6a3523714907bdd8b80",
            "file": "projects/components/src/component/filter/numeric-filter/numeric-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-filter",
            "styleUrls": [
                "./numeric-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumericFilter",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "NumericFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { NumericFilter } from '../contarct/numeric-filter';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { NumericFilterValue } from '../contarct/numeric-filter-value';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-numeric-filter',\r\n  templateUrl: './numeric-filter.component.html',\r\n  styleUrls: ['./numeric-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NumericFilterComponent\r\n  extends FilterComponentBase\r\n  implements OnInit\r\n{\r\n  @Input() column: FilterItem;\r\n  @Input() filterOptions: IIdName<any>[] = [];\r\n  @Output() filterChanged: EventEmitter<FilterBase> =\r\n    new EventEmitter<FilterBase>();\r\n\r\n  filter: NumericFilter;\r\n\r\n  private state$: FilterState;\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this.state$ = val;\r\n    this.filter = this.getFilter();\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  get state() {\r\n    return this.state$;\r\n  }\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filter = this.getFilter();\r\n  }\r\n\r\n  private getFilter(): NumericFilter {\r\n    let filter = this.state.numericFilters?.find(\r\n      (f) => f.field === this.column.filterField\r\n    );\r\n    if (filter === null || filter === undefined) {\r\n      filter = this.state.addNumericFilter(\r\n        new NumericFilter({\r\n          value: new NumericFilterValue(),\r\n          field: this.column.filterField,\r\n          name: this.column.name,\r\n          strict: true,\r\n        })\r\n      );\r\n    }\r\n    return filter;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./numeric-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"form-row padding-3\">\r\n  <teta-input [label]=\"'От'\">\r\n    <input class=\"input\" type=\"text\"\r\n           style=\"width: 110px\"\r\n           [ngModel]=\"filter.value?.greaterThan\"\r\n           (ngModelChange)=\"filter.value.greaterThan=$event\"/>\r\n  </teta-input>\r\n  <teta-input [label]=\"'До'\">\r\n    <input class=\"input\" type=\"text\"\r\n           style=\"width: 110px\"\r\n           [ngModel]=\"filter.value?.lessThan\"\r\n           (ngModelChange)=\"filter.value.lessThan=$event\"/>\r\n  </teta-input>\r\n</div>\r\n"
        },
        {
            "name": "NumericItemDefaultComponent",
            "id": "component-NumericItemDefaultComponent-5773eb524a2006538a243dbe07d4f5a5",
            "file": "projects/components/src/component/property-grid/default/numeric-item-default/numeric-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-numeric-item-default",
            "styleUrls": [
                "./numeric-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./numeric-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-numeric-item-default',\r\n  templateUrl: './numeric-item-default.component.html',\r\n  styleUrls: ['./numeric-item-default.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NumericItemDefaultComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./numeric-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>numeric-item-default works!</p>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-4b1b566384c0a3412290060813a5a257",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PagerComponent",
            "id": "component-PagerComponent-b103bfaf39b0fe8840dbc33aef794315",
            "file": "projects/components/src/component/pager/pager/pager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-pager",
            "styleUrls": [
                "./pager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-pager',\r\n  templateUrl: './pager.component.html',\r\n  styleUrls: ['./pager.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PagerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>pager works!</p>\r\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-b1a6c8a8f186e2ee37a3be9a938725f7",
            "file": "projects/components/src/component/panel/panel/panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auto",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.column_fixed'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "column",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.column'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@panel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "{ value: boolean; params: { width: number; }; }"
                },
                {
                    "name": "class.column",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "true"
                },
                {
                    "name": "class.column_fixed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'teta-panel',\r\n  templateUrl: './panel.component.html',\r\n  styleUrls: ['./panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('panel', [\r\n      transition('void => *', [\r\n        style({ opacity: '0' }),\r\n        animate(300, style({ opacity: '1' })),\r\n      ]),\r\n      transition('* => void', [animate(150, style({ opacity: '0' }))]),\r\n    ]),\r\n  ],\r\n})\r\nexport class PanelComponent implements OnInit {\r\n  @Input() width = 500;\r\n\r\n  @HostBinding('@panel')\r\n  private get panel() {\r\n    return {\r\n      value: true,\r\n      params: { width: this.width },\r\n    };\r\n  }\r\n\r\n  @HostBinding('class.column') private readonly column = true;\r\n  @HostBinding('class.column_fixed') private readonly auto = true;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "panel": {
                    "name": "panel",
                    "getSignature": {
                        "name": "panel",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "PlotbandComponent",
            "id": "component-PlotbandComponent-5c4855ed7e4375974fd7a780d85e332a",
            "file": "projects/chart/src/chart/chart-container/plotband/plotband.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "g teta-plotband",
            "styleUrls": [
                "./plotband.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plotband.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g teta-plotband',\r\n  templateUrl: './plotband.component.html',\r\n  styleUrls: ['./plotband.component.scss']\r\n})\r\nexport class PlotbandComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plotband.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:rect></svg:rect>\r\n"
        },
        {
            "name": "PlotlineComponent",
            "id": "component-PlotlineComponent-c26c9bb7e510120ecd13d9683f597e19",
            "file": "projects/chart/src/chart/chart-container/plotline/plotline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "g teta-plotline",
            "styleUrls": [
                "./plotline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plotline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g teta-plotline',\r\n  templateUrl: './plotline.component.html',\r\n  styleUrls: ['./plotline.component.scss']\r\n})\r\nexport class PlotlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plotline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg:line></svg:line>\r\n"
        },
        {
            "name": "PopupContentComponent",
            "id": "component-PopupContentComponent-0bcc12cf9b5fdcda511278acd4ac288e",
            "file": "projects/components/src/component/dynamic-component/popup-content/popup-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-popup-content",
            "styleUrls": [
                "./popup-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string | string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@dialog'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@dialog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ArrayUtil } from '../../../common/util/array-util';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'teta-popup-content',\r\n  templateUrl: './popup-content.component.html',\r\n  styleUrls: ['./popup-content.component.scss'],\r\n  animations: [\r\n    trigger('dialog', [\r\n      transition('void => *', [\r\n        style({ opacity: '0' }),\r\n        animate(200, style({ opacity: '1' })),\r\n      ]),\r\n      transition('* => void', [animate(200, style({ opacity: '0' }))]),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PopupContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('@dialog') dialog = true;\r\n\r\n  @Input() className: string | string[];\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [...ArrayUtil.asArray(this.className), 'popup-content'];\r\n    return result.join(' ');\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  addClass(className: string) {\r\n    if (this.className) {\r\n      if (typeof this.className === 'string') {\r\n        this.className = className;\r\n      }\r\n      if (this.className instanceof Array) {\r\n        this.className.push(className);\r\n      }\r\n    } else {\r\n      this.className = [className];\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-115cc4d9f560880bc5dd6fe0b611300e",
            "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SLIDER_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number"
                },
                {
                    "name": "step",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ]
                },
                {
                    "name": "getMousePositionInPercents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mousedown",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "mousemove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "moving",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "percent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "preventGlobalMouseEvents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "progressBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.progress'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "restoreGlobalMouseEvents",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'progressSlider', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getValueFromPercent",
                    "args": [
                        {
                            "name": "percent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "percent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPercentFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.progress",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73
                },
                {
                    "name": "document:mouseup",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Renderer2,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const SLIDER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ProgressBarComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n  providers: [SLIDER_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProgressBarComponent implements OnInit, ControlValueAccessor {\r\n  @Input() min = 0;\r\n  @Input() max = 100;\r\n  @Input() step = 0;\r\n\r\n  @ViewChild('progressSlider', { static: true })\r\n  private readonly slider: ElementRef;\r\n  @HostBinding('class.progress') private readonly progressBar = true;\r\n\r\n  percent: number;\r\n  moving: boolean;\r\n\r\n  set value(value: number) {\r\n    this._value = value;\r\n    this.percent = this.setPercentFromValue();\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  get containerPosition() {\r\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\r\n    return { min: rect.x, max: rect.x + rect.width };\r\n  }\r\n\r\n  private _value;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    private _cdr: ChangeDetectorRef,\r\n    @Inject(DOCUMENT) private _document: any\r\n  ) {}\r\n\r\n  @HostListener('document:mouseup', ['$event']) mouseup() {\r\n    this.moving = false;\r\n    this.restoreGlobalMouseEvents();\r\n    this.removeListener();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click = (event: MouseEvent) => {\r\n    this.getMousePositionInPercents(event);\r\n  };\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {}\r\n\r\n  writeValue(value: number): void {\r\n    this.value = value;\r\n  }\r\n\r\n  mousedown = () => {\r\n    this.moving = true;\r\n    this.preventGlobalMouseEvents();\r\n    this.addListener();\r\n  };\r\n\r\n  ngOnInit(): void {}\r\n\r\n  private mousemove = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    this.getMousePositionInPercents(event);\r\n  };\r\n\r\n  private getMousePositionInPercents = (event: MouseEvent) => {\r\n    const position = event.clientX - this.containerPosition.min;\r\n    let percent =\r\n      (100 / (this.containerPosition.max - this.containerPosition.min)) *\r\n      position;\r\n    percent = percent <= 0 ? 0 : percent > 100 ? 100 : percent;\r\n    this.setValue(this.getValueFromPercent(percent));\r\n  };\r\n\r\n  private setValue(value: number) {\r\n    this.value = value;\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  private getValueFromPercent(percent: number): number {\r\n    if (percent === 0) {\r\n      return this.min;\r\n    }\r\n    if (percent === 100) {\r\n      return this.max;\r\n    }\r\n    const exactValue = this.min + (percent * (this.max - this.min)) / 100;\r\n    if (!this.step || this.step <= 0 || isNaN(this.step)) {\r\n      return exactValue;\r\n    }\r\n    return (\r\n      Math.round((exactValue - this.min) / this.step) * this.step + this.min\r\n    );\r\n  }\r\n\r\n  private preventGlobalMouseEvents = () => {\r\n    this._document.body.style['pointer-events'] = 'none';\r\n  };\r\n\r\n  private restoreGlobalMouseEvents = () => {\r\n    this._document.body.style['pointer-events'] = 'auto';\r\n  };\r\n\r\n  private addListener() {\r\n    this._document.addEventListener('mousemove', this.mousemove);\r\n  }\r\n\r\n  private removeListener() {\r\n    this._document.removeEventListener('mousemove', this.mousemove);\r\n  }\r\n\r\n  private setPercentFromValue() {\r\n    const range = this.max - this.min;\r\n    return (100 / range) * (this.value - this.min);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                },
                "containerPosition": {
                    "name": "containerPosition",
                    "getSignature": {
                        "name": "containerPosition",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<div class=\"progress-bar\" [style.width.%]=\"percent\"></div>\r\n<div class=\"progress-slider\"\r\n     [class.progress-slider_visible]=\"moving\"\r\n     #progressSlider\r\n     (mousedown)=\"mousedown()\"\r\n     (click)=\"click($event)\"\r\n     [style.left.%]=\"percent\"></div>\r\n"
        },
        {
            "name": "PropertyGridComponent",
            "id": "component-PropertyGridComponent-d4e94da6e6cdd46eee76aff227499f7e",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid",
            "styleUrls": [
                "./property-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TableColumn[]"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup"
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-container'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDictValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onControlValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IIdName<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IIdName<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../../table/contract/table-column';\r\nimport { IDictionary } from '../../../common/contract/i-dictionary';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'teta-property-grid',\r\n  templateUrl: './property-grid.component.html',\r\n  styleUrls: ['./property-grid.component.scss'],\r\n})\r\nexport class PropertyGridComponent<T> implements OnInit, OnDestroy {\r\n  @HostBinding('class.form-container') formClass = true;\r\n\r\n  @Input() hideNonEditable: boolean;\r\n  @Input() columns: TableColumn[];\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n  @Input() formGroup: FormGroup;\r\n  @Input() horizontal: boolean;\r\n\r\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\r\n\r\n  private _alive = true;\r\n\r\n  constructor() {}\r\n\r\n  onControlValueChange(event: IIdName<any>) {\r\n    const affected = this.columns.filter((_) => _.parentName === event.name);\r\n    if (affected?.length) {\r\n      affected.forEach((item) => {\r\n        const value = this.formGroup.getRawValue()[item.name];\r\n        if (value) {\r\n          const dictValue = this.getDictValue(value, item.name);\r\n          if (dictValue && dictValue.parentId !== event.id) {\r\n            const newObj = {};\r\n            newObj[item.name] = null;\r\n            this.formGroup.patchValue(newObj);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    this.controlValueChange.emit(event);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n\r\n  private getDictValue(value: any, name: string) {\r\n    return this.dict[name]?.find((_) => _.id === value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  padding: 12px 8px;\r\n}\r\n",
                    "styleUrl": "./property-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"columns?.length\">\r\n  <ng-container *ngFor=\"let column of columns\">\r\n    <teta-property-grid-item *ngIf=\"column.columns?.length < 1 && (column.editable || !hideNonEditable)\"\r\n                             [dict]=\"dict\"\r\n                             [column]=\"column\"\r\n                             [formGroup]=\"formGroup\"\r\n                             [horizontal]=\"horizontal\"\r\n                             (controlValueChange)=\"onControlValueChange($event)\"\r\n                             [hideNonEditable]=\"hideNonEditable\"></teta-property-grid-item>\r\n    <teta-property-grid-group *ngIf=\"column.columns?.length > 0\"\r\n                              [dict]=\"dict\"\r\n                              [column]=\"column\"\r\n                              [formGroup]=\"formGroup\"\r\n                              [horizontal]=\"horizontal\"\r\n                              (controlValueChange)=\"onControlValueChange($event)\"\r\n                              [hideNonEditable]=\"hideNonEditable\"></teta-property-grid-group>\r\n  </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "PropertyGridGroupComponent",
            "id": "component-PropertyGridGroupComponent-08f3db4411934cbcb40b18593feda0ef",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid-group/property-grid-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid-group",
            "styleUrls": [
                "./property-grid-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup"
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.form-container'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.form-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../../../table/contract/table-column';\r\nimport { IDictionary } from '../../../../common/contract/i-dictionary';\r\nimport { IIdName } from '../../../../common/contract/i-id-name';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'teta-property-grid-group',\r\n  templateUrl: './property-grid-group.component.html',\r\n  styleUrls: ['./property-grid-group.component.scss'],\r\n})\r\nexport class PropertyGridGroupComponent<T> implements OnInit {\r\n  @HostBinding('class.form-container') formClass = true;\r\n  @Input() column: TableColumn;\r\n  @Input() hideNonEditable: boolean;\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n  @Input() formGroup: FormGroup;\r\n  @Input() horizontal: boolean;\r\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-grid-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"font-title-3\">{{column.caption}}</div>\r\n<ng-container *ngFor=\"let col of column.columns\">\r\n  <ng-container *ngIf=\"col.columns?.length < 1\">\r\n    <teta-property-grid-item *ngIf=\"column.editable || !hideNonEditable\"\r\n                             [dict]=\"dict\"\r\n                             [column]=\"col\"\r\n                             [hideNonEditable]=\"hideNonEditable\"\r\n                             (controlValueChange)=\"controlValueChange.emit($event)\"\r\n                             [horizontal]=\"horizontal\"\r\n                             [formGroup]=\"formGroup\"></teta-property-grid-item>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"col.columns?.length > 0\">\r\n    <teta-property-grid-group [dict]=\"dict\"\r\n                              [column]=\"col\"\r\n                              [hideNonEditable]=\"hideNonEditable\"\r\n                              [horizontal]=\"horizontal\"\r\n                              (controlValueChange)=\"controlValueChange.emit($event)\"\r\n                              [formGroup]=\"formGroup\"></teta-property-grid-group>\r\n  </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "PropertyGridItemComponent",
            "id": "component-PropertyGridItemComponent-76403db2bb233ef3ae5ad28d31eabfe8",
            "file": "projects/components/src/component/property-grid/property-grid/property-grid-item/property-grid-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-property-grid-item",
            "styleUrls": [
                "./property-grid-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-grid-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": ""
                },
                {
                    "name": "hideNonEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChange",
                    "defaultValue": "new EventEmitter<IIdName<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_formSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "align",
                    "defaultValue": "Align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "filterTypeEnum",
                    "defaultValue": "FilterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "controlIsInvalid",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDict",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../../../table/contract/table-column';\r\nimport { IDictionary } from '../../../../common/contract/i-dictionary';\r\nimport { IIdName } from '../../../../common/contract/i-id-name';\r\nimport { FilterType } from '../../../filter/enum/filter-type.enum';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormsUtil } from '../../../../util/forms-util';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { filter, takeWhile } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport {Align} from '../../../../common/enum/align.enum';\r\n\r\n@Component({\r\n  selector: 'teta-property-grid-item',\r\n  templateUrl: './property-grid-item.component.html',\r\n  styleUrls: ['./property-grid-item.component.scss'],\r\n})\r\nexport class PropertyGridItemComponent<T> implements OnInit, OnDestroy {\r\n  @Input() column: TableColumn;\r\n  @Input() hideNonEditable: boolean;\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n\r\n  @Input()\r\n  set formGroup(form: FormGroup) {\r\n    this._formGroup = form;\r\n    this._formSub?.unsubscribe();\r\n    this._formSub = this._formGroup.controls[this.column.name].valueChanges\r\n      .pipe(\r\n        takeWhile(() => this._alive),\r\n        filter(\r\n          (_) =>\r\n            this.column.filterType !== FilterType.string &&\r\n            this.column.filterType !== FilterType.number\r\n        )\r\n      )\r\n      .subscribe((_) => {\r\n        this.controlValueChange.emit({\r\n          id: _,\r\n          name: this.column.name,\r\n        });\r\n      });\r\n  }\r\n\r\n  get formGroup() {\r\n    return this._formGroup;\r\n  }\r\n\r\n  @Input() horizontal: boolean;\r\n  @Output() controlValueChange = new EventEmitter<IIdName<any>>();\r\n  align = Align;\r\n  filterTypeEnum = FilterType;\r\n\r\n  private _formGroup: FormGroup;\r\n  private _formSub: Subscription;\r\n\r\n  get caption(): string {\r\n    if (this.column.filterType === FilterType.boolean) {\r\n      return '';\r\n    }\r\n    return `${this.column.caption}${\r\n      this.column.unit ? `, ${this.column.unit}` : ''\r\n    }`;\r\n  }\r\n\r\n  private _alive = true;\r\n\r\n  constructor(private _transloco: TranslocoService) {}\r\n\r\n  getDict() {\r\n    const dict = this.dict[this.column.name];\r\n    if (this.column.parentName?.length > 0) {\r\n      return dict?.filter(\r\n        (dictItem: IIdName<any>) =>\r\n          dictItem.parentId ===\r\n          this.formGroup.getRawValue()[this.column.parentName]\r\n      );\r\n    }\r\n    return dict;\r\n  }\r\n\r\n  controlIsInvalid(controlName: string) {\r\n    return FormsUtil.controlIsInvalid(this.formGroup, controlName);\r\n  }\r\n\r\n  getError(column: TableColumn): string {\r\n    const control = this.formGroup.get(column.name);\r\n    if (control?.hasError('required')) {\r\n      return this._transloco.translate('errors.field_is_required');\r\n    }\r\n    if (control?.hasError('min')) {\r\n      return this._transloco.translate('errors.min_value', {\r\n        value: column.minValue,\r\n      });\r\n    }\r\n    if (control?.hasError('max')) {\r\n      return this._transloco.translate('errors.max_value', {\r\n        value: column.maxValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  valueChange() {\r\n    this.controlValueChange.emit({\r\n      id: this.formGroup.controls[this.column.name].value,\r\n      name: this.column.name,\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n    this._formSub?.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-grid-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "_transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "setSignature": {
                        "name": "formGroup",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "form",
                                "type": "FormGroup",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "form",
                                "type": "FormGroup",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "caption": {
                    "name": "caption",
                    "getSignature": {
                        "name": "caption",
                        "type": "string",
                        "returnType": "string",
                        "line": 63
                    }
                }
            },
            "templateData": "<teta-input [label]=\"caption\"\r\n            [tetaHint]=\"column.hint\"\r\n            [align]=\"align.left\"\r\n            [formGroup]=\"formGroup\"\r\n            [horizontal]=\"horizontal\"\r\n            *ngIf=\"column.editable || !hideNonEditable\">\r\n  <ng-container [ngSwitch]=\"column.filterType\">\r\n    <teta-select class=\"row_auto\"\r\n                 *ngSwitchCase=\"filterTypeEnum.list\"\r\n                 [searchRef]=\"getDict()?.length > 10 ? 'name' : ''\"\r\n                 [allowNull]=\"!column.required\"\r\n                 [appendToBody]=\"true\"\r\n                 [invalid]=\"controlIsInvalid(column.name)\"\r\n                 [formControlName]=\"column.name\"\r\n                 [options]=\"getDict()\"\r\n                 [valueRef]=\"'id'\"\r\n                 [textRef]=\"'name'\"\r\n                 [multiple]=\"false\"></teta-select>\r\n    <teta-date-picker *ngSwitchCase=\"filterTypeEnum.date\"\r\n                      class=\"row_auto\"\r\n                      [appendToBody]=\"true\"\r\n                      [invalid]=\"controlIsInvalid(column.name)\"\r\n                      [formControlName]=\"column.name\"></teta-date-picker>\r\n    <teta-toggle *ngSwitchCase=\"filterTypeEnum.boolean\"\r\n                 [formControlName]=\"column.name\">{{column.caption}}</teta-toggle>\r\n    <teta-text-field class=\"row_auto\"\r\n                     *ngSwitchDefault\r\n                     (focusout)=\"valueChange()\"\r\n                     [onlyNumber]=\"column.filterType === filterTypeEnum.number\"\r\n                     [placeholder]=\"column.caption\"\r\n                     [invalid]=\"controlIsInvalid(column.name)\"\r\n                     [formControlName]=\"column.name\"></teta-text-field>\r\n  </ng-container>\r\n  <div *ngIf=\"controlIsInvalid(column.name)\"\r\n       ngProjectAs=\"message\"\r\n       class=\"color-red-50\">\r\n    {{getError(column)}}\r\n  </div>\r\n</teta-input>\r\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-7519a32494f9f9d835a514e45b434c44",
            "file": "projects/components/src/component/radio/radio-button/radio-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "radio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioComponent",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "radioButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio-button'"
                        }
                    ]
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio-button-selected'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hostClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.radio-button",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "class.radio-button-selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Host,\r\n  OnDestroy,\r\n  ViewContainerRef,\r\n  Input,\r\n  HostListener,\r\n  HostBinding,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { RadioComponent } from '../radio/radio.component';\r\n\r\n@Component({\r\n  selector: 'teta-radio-button',\r\n  templateUrl: './radio-button.component.html',\r\n  styleUrls: ['./radio-button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RadioButtonComponent implements OnInit, OnDestroy {\r\n  @HostBinding('class.radio-button')\r\n  radioButton = true;\r\n\r\n  @HostBinding('class.radio-button-selected')\r\n  selected: boolean;\r\n\r\n  @Input()\r\n  @HostBinding('class.radio-button-checked')\r\n  checked: boolean;\r\n\r\n  @Input()\r\n  @HostBinding('class.radio-button_disabled')\r\n  disabled: boolean;\r\n\r\n  @Input() set value(val: any) {\r\n    this._value = val;\r\n  }\r\n\r\n  get value() {\r\n    if (this._value === undefined) {\r\n      if (this.container.element.nativeElement instanceof HTMLElement) {\r\n        return this.container.element.nativeElement.innerText;\r\n      }\r\n    }\r\n    return this._value;\r\n  }\r\n\r\n  private _value: any;\r\n\r\n  constructor(\r\n    private container: ViewContainerRef,\r\n    @Host() public radio: RadioComponent\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  hostClick() {\r\n    if (!this.disabled) {\r\n      this.radio._setChecked(this);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.radio._addButton(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.radio._removeButton(this);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "radio",
                        "type": "RadioComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "radio",
                        "type": "RadioComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"radio-button-icon\">\r\n  <div *ngIf=\"checked\" class=\"radio-button-small-icon\"></div>\r\n</div>\r\n<ng-content></ng-content>\r\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-f3e508e6f36180ad6f8738f57a266c71",
            "file": "projects/components/src/component/radio/radio/radio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-radio",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkChangeSelected",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Менять значение при изменении выбранного",
                    "description": "<p>Менять значение при изменении выбранного</p>\n",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>model callback вызовется когда модель измениться из ui</p>\n",
                    "line": 177,
                    "rawdescription": "\nmodel callback вызовется когда модель измениться из ui"
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "buttons$",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioButtonComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "checkedButton$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonOrNullOrUndefined",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disabled$",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "radioClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.radio'"
                        }
                    ]
                },
                {
                    "name": "selectedButton$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonOrNullOrUndefined",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_addButton",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_removeButton",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setChecked",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusoutHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRegisters a callback function that should be called when the control's value changes in the UI",
                    "description": "<p>Registers a callback function that should be called when the control&#39;s value changes in the UI</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRegisters a callback function that should be called when the control receives a blur event.",
                    "description": "<p>Registers a callback function that should be called when the control receives a blur event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectBtn",
                    "args": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "RadioButtonComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectFirst",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis function is called by the forms API when the control status changes to or from \"DISABLED\".",
                    "description": "<p>This function is called by the forms API when the control status changes to or from &quot;DISABLED&quot;.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWrites a new value to the element.",
                    "description": "<p>Writes a new value to the element.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.radio",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number"
                }
            ],
            "hostListeners": [
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68
                },
                {
                    "name": "focusout",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Input,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { RadioButtonComponent } from '../radio-button/radio-button.component';\r\n\r\ntype ButtonOrNullOrUndefined = RadioButtonComponent | undefined | null;\r\n\r\n@Component({\r\n  selector: 'teta-radio',\r\n  templateUrl: './radio.component.html',\r\n  styleUrls: ['./radio.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => RadioComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RadioComponent implements OnInit, ControlValueAccessor {\r\n  @HostBinding('tabindex') tabindex = 0;\r\n  @HostBinding('class.radio') radioClass = true;\r\n\r\n  /** Менять значение при изменении выбранного */\r\n  @Input()\r\n  @HostBinding('class.radio_inline')\r\n  inline: boolean;\r\n\r\n  @Input() checkChangeSelected = true;\r\n\r\n  @Input() set disabled(val: boolean) {\r\n    this.disabled$ = val;\r\n    this.buttons$.forEach((b) => (b.disabled = this.disabled));\r\n  }\r\n\r\n  get disabled() {\r\n    return this.disabled$;\r\n  }\r\n\r\n  @Input() get value(): any {\r\n    if (this.checkedButton$) {\r\n      return this.checkedButton$.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  set value(val: any) {\r\n    this.writeValue(val);\r\n  }\r\n\r\n  private buttons$: RadioButtonComponent[] = [];\r\n  private checkedButton$: ButtonOrNullOrUndefined;\r\n  private selectedButton$: ButtonOrNullOrUndefined;\r\n  private disabled$ = false;\r\n\r\n  constructor(private _cdr: ChangeDetectorRef) {}\r\n\r\n  @HostListener('focus', ['$event'])\r\n  focusHandler(event: FocusEvent) {\r\n    this.selectFirst();\r\n  }\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  focusoutHandler(event: FocusEvent) {\r\n    if (this.selectedButton$) {\r\n      this.selectedButton$.selected = false;\r\n      this.selectedButton$ = null;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  keyEvent(event: KeyboardEvent) {\r\n    const key = event.code || event.key;\r\n    switch (key) {\r\n      case 'Space':\r\n      case 'Enter':\r\n      case 'Spacebar':\r\n        this.checkSelected();\r\n        break;\r\n\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        this.selectPrevious();\r\n        break;\r\n\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        this.selectNext();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    event.cancelBubble = true;\r\n    if (event.stopPropagation) {\r\n      event.stopPropagation();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  selectFirst() {\r\n    if (!this.selectedButton$) {\r\n      if (this.checkedButton$) {\r\n        this.selectedButton$ = this.checkedButton$;\r\n        this.selectedButton$.selected = true;\r\n        return true;\r\n      }\r\n\r\n      for (const btn of this.buttons$) {\r\n        if (!btn.disabled) {\r\n          this.selectedButton$ = btn;\r\n          this.selectedButton$.selected = true;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  _setChecked(btn: RadioButtonComponent) {\r\n    if (this.checkedButton$) {\r\n      this.checkedButton$.checked = false;\r\n    }\r\n    this.checkedButton$ = btn;\r\n    this.checkedButton$.checked = true;\r\n    if (this.selectedButton$) {\r\n      this.selectedButton$.selected = false;\r\n    }\r\n    this.selectedButton$ = btn;\r\n    this.selectedButton$.selected = true;\r\n    this._onChange(this.value);\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  _addButton(btn: RadioButtonComponent) {\r\n    if (this.disabled) {\r\n      btn.disabled = this.disabled;\r\n    }\r\n    return this.buttons$.push(btn) - 1;\r\n  }\r\n\r\n  _removeButton(btn: RadioButtonComponent) {\r\n    const index = this.buttons$.indexOf(btn);\r\n    if (index > -1) {\r\n      this.buttons$.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /** Writes a new value to the element. */\r\n  writeValue(obj: any): void {\r\n    if (this.checkedButton$) {\r\n      this.checkedButton$.checked = false;\r\n    }\r\n\r\n    this.checkedButton$ = this.buttons$.find((b) => b.value === obj);\r\n    if (this.checkedButton$) {\r\n      this.checkedButton$.checked = true;\r\n    }\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  /** model callback вызовется когда модель измениться из ui */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** Registers a callback function that should be called when the control's value changes in the UI */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  _onTouched = () => {};\r\n\r\n  /** Registers a callback function that should be called when the control receives a blur event. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** This function is called by the forms API when the control status changes to or from \"DISABLED\". */\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  private selectBtn(btn: RadioButtonComponent) {\r\n    if (this.selectedButton$) {\r\n      this.selectedButton$.selected = false;\r\n    }\r\n    this.selectedButton$ = btn;\r\n    this.selectedButton$.selected = true;\r\n    if (this.checkChangeSelected) {\r\n      this.checkSelected();\r\n    }\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  private selectNext() {\r\n    if (this.selectFirst()) {\r\n      return;\r\n    }\r\n\r\n    const length = this.buttons$.length;\r\n    let newIndex = this.selectedButton$\r\n      ? this.buttons$.indexOf(this.selectedButton$)\r\n      : 0;\r\n    let firstCycle = true;\r\n    do {\r\n      newIndex++;\r\n      if (firstCycle && newIndex === length) {\r\n        newIndex = 0;\r\n        firstCycle = false;\r\n      }\r\n      const btn = this.buttons$[newIndex];\r\n      if (btn && !btn.disabled) {\r\n        this.selectBtn(btn);\r\n        return;\r\n      }\r\n    } while (newIndex < length);\r\n  }\r\n\r\n  private selectPrevious() {\r\n    if (this.selectFirst()) {\r\n      return;\r\n    }\r\n\r\n    let newIndex = this.selectedButton$\r\n      ? this.buttons$.indexOf(this.selectedButton$)\r\n      : 0;\r\n    let firstCycle = true;\r\n    do {\r\n      newIndex--;\r\n      if (firstCycle && newIndex === -1) {\r\n        newIndex = this.buttons$.length - 1;\r\n        firstCycle = false;\r\n      }\r\n      const btn = this.buttons$[newIndex];\r\n      if (btn && !btn.disabled) {\r\n        this.selectBtn(btn);\r\n        return;\r\n      }\r\n    } while (newIndex >= 0);\r\n  }\r\n\r\n  private checkSelected() {\r\n    if (this.selectFirst()) {\r\n      return;\r\n    }\r\n    if (this.selectedButton$) {\r\n      this._setChecked(this.selectedButton$);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 49
                    }
                }
            },
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "ResizePanelComponent",
            "id": "component-ResizePanelComponent-b94fc1cc828b633a2bd56b1aa80c501b",
            "file": "projects/components/src/component/resize-panel/resize-panel/resize-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-resize-panel",
            "styleUrls": [
                "./resize-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./resize-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": ""
                },
                {
                    "name": "grabPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": ""
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number"
                },
                {
                    "name": "minSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_direction",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"vertical\" | \"horizontal\"",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_grabPosition",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_positionMap",
                    "defaultValue": "new Map<string, string>()\r\n    .set('left', 'resize-grab_left')\r\n    .set('right', 'resize-grab_right')\r\n    .set('top', 'resize-grab_top')\r\n    .set('bottom', 'resize-grab_bottom')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resizePanelClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.resize-panel'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "manageHorizontal",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "manageVertical",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeProcess",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "restorePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setStartPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.resize-panel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'teta-resize-panel',\r\n  templateUrl: './resize-panel.component.html',\r\n  styleUrls: ['./resize-panel.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ResizePanelComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  set direction(val: 'vertical' | 'horizontal') {\r\n    this._direction = val;\r\n  }\r\n\r\n  get direction() {\r\n    return this._direction;\r\n  }\r\n\r\n  @Input()\r\n  set grabPosition(val: 'top' | 'left' | 'bottom' | 'right') {\r\n    this._grabPosition = val;\r\n  }\r\n\r\n  get grabPosition() {\r\n    if (this.direction === 'vertical') {\r\n      if (['left', 'right'].includes(this._grabPosition)) {\r\n        return this._grabPosition;\r\n      }\r\n      return 'left';\r\n    }\r\n    if (['top', 'bottom'].includes(this._grabPosition)) {\r\n      return this._grabPosition;\r\n    }\r\n    return 'bottom';\r\n  }\r\n\r\n  @Input() name: string;\r\n  @Input() minSize: number;\r\n  @Input() maxSize: number;\r\n  @HostBinding('class.resize-panel') private readonly resizePanelClass = true;\r\n\r\n  private _direction: 'vertical' | 'horizontal' = 'horizontal';\r\n  private _grabPosition: 'top' | 'left' | 'bottom' | 'right' = 'left';\r\n  private _startSize: number;\r\n  private _startPosition: number;\r\n\r\n  private _positionMap: Map<string, string> = new Map<string, string>()\r\n    .set('left', 'resize-grab_left')\r\n    .set('right', 'resize-grab_right')\r\n    .set('top', 'resize-grab_top')\r\n    .set('bottom', 'resize-grab_bottom');\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    @Inject(DOCUMENT) private _document: any\r\n  ) {\r\n  }\r\n\r\n  resizeStart(event: MouseEvent) {\r\n    this.setStartPosition();\r\n    if (this.direction === 'vertical') {\r\n      this._startSize = this._elementRef.nativeElement.clientWidth;\r\n      this._startPosition = event.clientX;\r\n    } else {\r\n      this._startSize = this._elementRef.nativeElement.clientHeight;\r\n      this._startPosition = event.clientY;\r\n    }\r\n  }\r\n\r\n  resizeProcess(event: MouseEvent) {\r\n    event.preventDefault();\r\n    if (this.direction === 'vertical') {\r\n      this.manageVertical(event);\r\n    } else {\r\n      this.manageHorizontal(event);\r\n    }\r\n  }\r\n\r\n  resizeEnd(event: MouseEvent) {\r\n    window.dispatchEvent(new Event('resize'));\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.restorePosition();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  getClassName() {\r\n    return this._positionMap.get(this.grabPosition) || '';\r\n  }\r\n\r\n  private setStartPosition() {\r\n    if (this.direction === 'vertical') {\r\n      this._renderer.setStyle(\r\n        this._elementRef.nativeElement,\r\n        'width',\r\n        `${this._elementRef.nativeElement.offsetWidth}px`\r\n      );\r\n    } else {\r\n      this._renderer.setStyle(\r\n        this._elementRef.nativeElement,\r\n        'height',\r\n        `${this._elementRef.nativeElement.offsetHeight}px`\r\n      );\r\n    }\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex-grow', `0`);\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex-shrink', `0`);\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'flex', `none`);\r\n  }\r\n\r\n  private manageHorizontal(event: MouseEvent) {\r\n    let newSize =\r\n      this.grabPosition === 'bottom'\r\n        ? this._startSize + (event.clientY - this._startPosition)\r\n        : this._startSize - (event.clientY - this._startPosition);\r\n    if (this.maxSize && newSize > this.maxSize) {\r\n      newSize = this.maxSize;\r\n    }\r\n    if (this.minSize && newSize < this.minSize) {\r\n      newSize = this.minSize;\r\n    }\r\n    this._renderer.setStyle(\r\n      this._elementRef.nativeElement,\r\n      'height',\r\n      `${newSize}px`\r\n    );\r\n    this.save();\r\n  }\r\n\r\n  private manageVertical(event: MouseEvent) {\r\n    let newSize =\r\n      this.grabPosition === 'right'\r\n        ? this._startSize + (event.clientX - this._startPosition)\r\n        : this._startSize - (event.clientX - this._startPosition);\r\n    if (this.maxSize && newSize > this.maxSize) {\r\n      newSize = this.maxSize;\r\n    }\r\n    if (this.minSize && newSize < this.minSize) {\r\n      newSize = this.minSize;\r\n    }\r\n    this._renderer.setStyle(\r\n      this._elementRef.nativeElement,\r\n      'width',\r\n      `${newSize}px`\r\n    );\r\n    this.save();\r\n  }\r\n\r\n  private restore() {\r\n    if (this.name?.length > 0) {\r\n      return JSON.parse(localStorage.getItem(`resize-panel${this.name}`));\r\n    }\r\n  }\r\n\r\n  private restorePosition() {\r\n    const savedSize = this.restore();\r\n    if (savedSize) {\r\n      if (this.direction === 'vertical') {\r\n        this._renderer.setStyle(\r\n          this._elementRef.nativeElement,\r\n          'width',\r\n          `${savedSize}px`\r\n        );\r\n      } else {\r\n        this._renderer.setStyle(\r\n          this._elementRef.nativeElement,\r\n          'height',\r\n          `${savedSize}px`\r\n        );\r\n      }\r\n      this._renderer.setStyle(this._elementRef.nativeElement, 'flex-grow', `0`);\r\n      this._renderer.setStyle(\r\n        this._elementRef.nativeElement,\r\n        'flex-shrink',\r\n        `0`\r\n      );\r\n      this._renderer.setStyle(this._elementRef.nativeElement, 'flex', `none`);\r\n    }\r\n  }\r\n\r\n  private save() {\r\n    if (this.name?.length > 0) {\r\n      if (this.direction === 'vertical') {\r\n        localStorage.setItem(\r\n          `resize-panel${this.name}`,\r\n          this._elementRef.nativeElement.clientWidth\r\n        );\r\n      } else {\r\n        localStorage.setItem(\r\n          `resize-panel${this.name}`,\r\n          this._elementRef.nativeElement.clientHeight\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./resize-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "direction": {
                    "name": "direction",
                    "setSignature": {
                        "name": "direction",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "\"vertical\" | \"horizontal\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "\"vertical\" | \"horizontal\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "direction",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "grabPosition": {
                    "name": "grabPosition",
                    "setSignature": {
                        "name": "grabPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "grabPosition",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n<div #grab class=\"resize-grab\"\r\n     (resizeStart)=\"resizeStart($event)\"\r\n     (resizeProcess)=\"resizeProcess($event)\"\r\n     (resizeEnd)=\"resizeEnd($event)\"\r\n     [tetaResizeDrag]=\"direction\"\r\n     [ngClass]=\"getClassName()\">\r\n  <teta-icon [name]=\"direction\"></teta-icon>\r\n</div>\r\n"
        },
        {
            "name": "SampleInputComponent",
            "id": "component-SampleInputComponent-f7ea955ff9a92858f4a3d82126572cdb",
            "file": "projects/components/src/component/input/sample-input/sample-input/sample-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-sample-input",
            "styleUrls": [
                "./sample-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sample-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'teta-sample-input',\n  templateUrl: './sample-input.component.html',\n  styleUrls: ['./sample-input.component.scss']\n})\nexport class SampleInputComponent implements OnInit {\n  form: FormGroup;\n\n  constructor() {\n    this.form = new FormGroup({\n      name: new FormControl('', {\n        updateOn: 'blur'\n      }),\n      name2: new FormControl('', {\n        updateOn: 'blur'\n      }),\n      surname: new FormControl('', {\n        updateOn: 'change'\n      })\n    });\n\n    this.form.valueChanges.subscribe((changes) => {\n      console.log('changes', changes);\n    });\n  }\n\n  log(text) {\n    console.log(text);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sample-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\">\n  <teta-input label=\"onBlur\">\n    <teta-text-field [formControlName]=\"'name'\"></teta-text-field>\n  </teta-input>\n  <teta-input label=\"onBlur\">\n    <input [formControlName]=\"'name2'\"/>\n  </teta-input>\n  <teta-input label=\"onChange\">\n    <teta-text-field [formControlName]=\"'surname'\"></teta-text-field>\n  </teta-input>\n</form>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-3717a75d3f017d532eb689213271da70",
            "file": "projects/components/src/component/select/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "defaultValue": "Align.minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Align"
                },
                {
                    "name": "allowNull",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "appendToBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean"
                },
                {
                    "name": "autoClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "autoCloseIgnore",
                    "defaultValue": "['inside']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Array<AutoCloseIgnoreCase>"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "itemSize",
                    "defaultValue": "32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any[]"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "searchRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string | "
                },
                {
                    "name": "textRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": " | string"
                },
                {
                    "name": "valueRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": " | string"
                },
                {
                    "name": "verticalAlign",
                    "defaultValue": "VerticalAlign.bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "VerticalAlign"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 210
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.select_open'"
                        }
                    ]
                },
                {
                    "name": "optionDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionDirective",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SelectOptionDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "searchText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "selectClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.select'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | any[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "valueDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectValueDirective",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SelectValueDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSearchString",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getText",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.select",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "true"
                },
                {
                    "name": "class.select_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "class.select_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "0"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Align } from '../../../common/enum/align.enum';\r\nimport { VerticalAlign } from '../../../common/enum/vertical-align.enum';\r\nimport { AutoCloseIgnoreCase } from '../../../common/contract/auto-close-ignore-case';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { SelectOptionDirective } from '../select-option.directive';\r\nimport { SelectValueDirective } from '../select-value.directive';\r\n\r\n@Component({\r\n  selector: 'teta-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectComponent implements ControlValueAccessor, OnInit {\r\n  @HostBinding('class.select_multiple')\r\n  @Input()\r\n  multiple: boolean;\r\n  @Input() options: any[];\r\n  @Input() invalid: boolean;\r\n  @Input() align: Align = Align.minWidth;\r\n  @Input() verticalAlign: VerticalAlign = VerticalAlign.bottom;\r\n  @Input() autoClose = true;\r\n  @Input() autoCloseIgnore: Array<AutoCloseIgnoreCase> = ['inside'];\r\n  @Input() disabled: boolean;\r\n  @Input() itemSize = 32;\r\n  @Input() virtual: boolean;\r\n  @Input() icon: string;\r\n  @Input() placeholder: string;\r\n  @Input() appendToBody: boolean;\r\n  @Input() allowNull = true;\r\n\r\n  @Input() valueRef: ((item: any) => any) | string;\r\n  @Input() textRef: ((item: any) => string) | string;\r\n  @Input() searchRef: string | ((item: any) => string);\r\n\r\n  @ContentChild(SelectOptionDirective, { static: true })\r\n  optionDirective: SelectOptionDirective;\r\n\r\n  @ContentChild(SelectValueDirective, { static: true })\r\n  valueDirective: SelectValueDirective;\r\n\r\n  @HostBinding('class.select_open') open = false;\r\n\r\n  @HostBinding('class.select') private readonly selectClass = true;\r\n  @HostBinding('tabindex') private readonly tabindex = 0;\r\n\r\n  @HostBinding('class.select_disabled')\r\n  get isDisabled() {\r\n    return this.disabled;\r\n  }\r\n\r\n  value: any | any[];\r\n  searchText: string;\r\n\r\n  get visibleOptions(): any[] {\r\n    if (!this.searchText) {\r\n      return this.options;\r\n    }\r\n    return this.options?.filter(\r\n      (option) =>\r\n        this.getSearchString(option)\r\n          .toLowerCase()\r\n          .indexOf(this.searchText.toLowerCase()) >= 0\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private _cdr: ChangeDetectorRef,\r\n    private _elementRef: ElementRef\r\n  ) {}\r\n\r\n  clear() {\r\n    let val: any;\r\n    if (this.multiple === true) {\r\n      val = [];\r\n    } else {\r\n      val = null;\r\n    }\r\n    this.value = val;\r\n    this.onChange(this.value);\r\n    this.open = false;\r\n    this._cdr.markForCheck();\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  clickOption(option: any, event: MouseEvent): void {\r\n    if (this.multiple === true) {\r\n      if (!this.value?.length) {\r\n        this.value = [];\r\n      }\r\n      if (this.value.indexOf(option) >= 0) {\r\n        this.removeItem(option);\r\n      } else {\r\n        this.value = [...this.value, option];\r\n      }\r\n      this.onChange(this.value.map((_) => this.getValue(_)));\r\n    } else {\r\n      this.value = option;\r\n      this.onChange(this.getValue(this.value));\r\n      this.open = false;\r\n    }\r\n    this._cdr.markForCheck();\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  itemSelected(option: any): boolean {\r\n    if (this.multiple) {\r\n      return this.value?.indexOf(option) >= 0;\r\n    } else {\r\n      return this.value === option;\r\n    }\r\n  }\r\n\r\n  removeItemClick(option: any, event: MouseEvent): void {\r\n    event.stopPropagation();\r\n    this.removeItem(option);\r\n    this.onChange(this.value.map((_) => this.getValue(_)));\r\n  }\r\n\r\n  removeItem(option: any): void {\r\n    this.value = this.value.filter((_) => _ !== option);\r\n  }\r\n\r\n  search(text: string): void {\r\n    this.searchText = text;\r\n  }\r\n\r\n  getText(option: any): string {\r\n    if (option == null) {\r\n      return '';\r\n    }\r\n    switch (typeof this.textRef) {\r\n      case 'string':\r\n        return option[this.textRef];\r\n      case 'function':\r\n        return this.textRef(option);\r\n      default:\r\n        return option;\r\n    }\r\n  }\r\n\r\n  getValue(option: any): any {\r\n    switch (typeof this.valueRef) {\r\n      case 'string':\r\n        return option[this.valueRef];\r\n      case 'function':\r\n        return this.valueRef(option);\r\n      default:\r\n        return option;\r\n    }\r\n  }\r\n\r\n  getSearchString(option: any): string {\r\n    switch (typeof this.searchRef) {\r\n      case 'string':\r\n        return option[this.searchRef];\r\n      case 'function':\r\n        return this.searchRef(option);\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  writeValue(value: any | any[]): void {\r\n    if (this.multiple) {\r\n      this.value =\r\n        value && this.options\r\n          ? this.options.filter(\r\n              (option) => value.indexOf(this.getValue(option)) > -1\r\n            )\r\n          : [];\r\n    } else {\r\n      this.value =\r\n        this.options &&\r\n        this.options.find((option) => this.getValue(option) === value);\r\n    }\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  onChange: (value: any) => void = () => {};\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  onTouched = () => {};\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  private getSelectedValue() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "visibleOptions": {
                    "name": "visibleOptions",
                    "getSignature": {
                        "name": "visibleOptions",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 73
                    }
                }
            },
            "templateData": "<teta-dropdown [align]=\"align\"\r\n               [verticalAlign]=\"verticalAlign\"\r\n               [autoClose]=\"autoClose\"\r\n               [autoCloseIgnore]=\"autoCloseIgnore\"\r\n               [(open)]=\"open\"\r\n               [appendToBody]=\"appendToBody\"\r\n               [disabled]=\"disabled\"\r\n               class=\"row row_auto\">\r\n  <div tetaDropdownHead\r\n       class=\"row row_auto select-head\"\r\n       [class.select-head_invalid]=\"invalid\">\r\n    <div class=\"row_auto flex align-center\">\r\n      <teta-icon *ngIf=\"icon\" [name]=\"icon\" class=\"margin-right-1\"></teta-icon>\r\n      <span class=\"placeholder\" *ngIf=\"(value == null || value?.length === 0) && placeholder\">\r\n          {{placeholder}}\r\n        </span>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"valueDirective ? valueDirective.template : valueDefault; context: {$implicit: value, value: value}\"></ng-container>\r\n    </div>\r\n    <teta-icon [name]=\"'arrowDownSmall'\"></teta-icon>\r\n  </div>\r\n  <div *ngIf=\"options?.length\" tetaDropdownContent class=\"select-list scrollable row_auto\" (click)=\"$event.preventDefault()\">\r\n    <ng-container *ngIf=\"searchRef\">\r\n      <div class=\"select-search\">\r\n        <teta-text-field [ngModel]=\"searchText\"\r\n                         (ngModelChange)=\"search($event)\"\r\n                         [placeholder]=\"'Поиск'\"\r\n                         [leftIconName]=\"'search'\"></teta-text-field>\r\n      </div>\r\n      <div class=\"list-divider\"></div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!multiple && allowNull\">\r\n      <div class=\"list-item list-item_interactive\"\r\n           (click)=\"clear()\"\r\n           [class.list-item_active]=\"value==null\">\r\n        Не выбрано\r\n      </div>\r\n      <div class=\"list-divider\"></div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!virtual\">\r\n      <div class=\"list-item list-item_interactive\"\r\n           *ngFor=\"let option of visibleOptions\"\r\n           [class.select-list-item_active]=\"itemSelected(option) && multiple\"\r\n           [class.list-item_active]=\"itemSelected(option)\"\r\n           [class.select-list-item]=\"multiple\"\r\n           (click)=\"clickOption(option, $event)\">\r\n        <teta-icon *ngIf=\"itemSelected(option) && multiple\" [name]=\"'tick'\" [palette]=\"'primary'\"></teta-icon>\r\n        <span [tetaHighlight]=\"searchText\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"optionDirective ? optionDirective.template : optionDefault; context: {$implicit: option, option: option}\">\r\n          </ng-container>\r\n        </span>\r\n      </div>\r\n    </ng-container>\r\n    <cdk-virtual-scroll-viewport *ngIf=\"virtual\"\r\n                                 [itemSize]=\"40\"\r\n                                 minBufferPx=\"200\"\r\n                                 maxBufferPx=\"600\">\r\n      <div class=\"select-list-item select-list-item_interactive\"\r\n           *cdkVirtualFor=\"let option of visibleOptions; templateCacheSize: 0;\"\r\n           [class.select-list-item_active]=\"itemSelected(option)\"\r\n           [tetaHighlight]=\"searchText\"\r\n           (click)=\"clickOption(option, $event)\">\r\n        <teta-icon *ngIf=\"itemSelected(option)\" [name]=\"'tick'\" [palette]=\"'primary'\" class=\"margin-left-2\"></teta-icon>\r\n        <div [tetaHighlight]=\"searchText\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"optionDirective ? optionDirective.template : optionDefault; context: {$implicit: option, option: option}\">\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </cdk-virtual-scroll-viewport>\r\n    <div class=\"row row_auto select-chip-field flex-wrap\" *ngIf=\"multiple && value?.length\">\r\n      <div *ngFor=\"let item of value\" class=\"chip\">\r\n        <teta-icon [name]=\"'closeCircle'\" (click)=\"removeItemClick(item, $event)\"></teta-icon>\r\n        {{getText(item)}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</teta-dropdown>\r\n\r\n<ng-template #optionDefault let-option>\r\n  {{getText(option)}}\r\n</ng-template>\r\n<ng-template #valueDefault let-value>\r\n  <div class=\"row_auto overflow-hidden text-overflow-ellipsis\" *ngIf=\"multiple\">\r\n    <ng-container\r\n      *ngFor=\"let item of value; let i = index\">{{getText(item) + (value.length === i + 1 ? '' : ', ') }}</ng-container>\r\n  </div>\r\n  <ng-container *ngIf=\"!multiple\">\r\n    <span class=\"row row_auto  overflow-hidden text-overflow-ellipsis\">{{getText(value)}}</span>\r\n  </ng-container>\r\n</ng-template>\r\n"
        },
        {
            "name": "SelectionCellComponent",
            "id": "component-SelectionCellComponent-4a6953d61d90220addd7a6f26d1c962c",
            "file": "projects/components/src/component/table/selection-cell/selection-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-selection-cell",
            "styleUrls": [
                "./selection-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableService } from '../service/table.service';\r\nimport { TableRow } from '../contract/table-row';\r\nimport { takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-selection-cell',\r\n  templateUrl: './selection-cell.component.html',\r\n  styleUrls: ['./selection-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectionCellComponent<T> implements OnInit, OnDestroy {\r\n  @Input() row: TableRow<T>;\r\n\r\n  @HostBinding('class.cell') private readonly tableCellClass = true;\r\n  selectedRows: TableRow<T>[] = [];\r\n\r\n  private _alive = true;\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {}\r\n\r\n  selectRow(value: boolean) {\r\n    if (value) {\r\n      this._svc.selectRow(this.row);\r\n    } else {\r\n      this._svc.deselectRow(this.row);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._svc.selectedRows\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((_) => {\r\n        this.selectedRows = _;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./selection-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-checkbox [binary]=\"true\"\r\n               [noLabel]=\"true\"\r\n               [ngModel]=\"selectedRows?.indexOf(row) >= 0\"\r\n               (ngModelChange)=\"selectRow($event)\"></teta-checkbox>\r\n"
        },
        {
            "name": "SelectionHeadCellComponent",
            "id": "component-SelectionHeadCellComponent-1dfe44dbd748e72200b8fb10c7e825a7",
            "file": "projects/components/src/component/table/selection-head-cell/selection-head-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-selection-head-cell",
            "styleUrls": [
                "./selection-head-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-head-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableCellClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head__group'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head__group",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableService } from '../service/table.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-selection-head-cell',\r\n  templateUrl: './selection-head-cell.component.html',\r\n  styleUrls: ['./selection-head-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectionHeadCellComponent<T> implements OnInit, OnDestroy {\r\n  @HostBinding('class.table-head__group') private readonly tableCellClass =\r\n    true;\r\n\r\n  private _alive = true;\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {}\r\n\r\n  selectAll(value: boolean) {\r\n    if (value) {\r\n      this._svc.selectAll();\r\n    } else {\r\n      this._svc.deselectAll();\r\n    }\r\n  }\r\n\r\n  allSelected() {\r\n    return this._svc.allRowsSelected();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._svc.selectedRows\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((_) => {\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./selection-head-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<teta-checkbox [binary]=\"true\"\r\n               [allowNull]=\"true\"\r\n               [noLabel]=\"true\"\r\n               [ngModel]=\"allSelected()\"\r\n               (ngModelChange)=\"selectAll($event)\"></teta-checkbox>\r\n"
        },
        {
            "name": "SeriesBaseComponent",
            "id": "component-SeriesBaseComponent-c8b5f94aaeb4bb13c81c37a4620c8b02",
            "file": "projects/chart/src/chart/base/series-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Series<T>"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { ChartService } from '../chart.service';\r\nimport { Series } from '../model/series';\r\nimport { BasePoint } from '../model/base-point';\r\nimport { ScaleService } from '../scale.service';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport class SeriesBaseComponent<T extends BasePoint> implements OnInit {\r\n  @Input() series: Series<T>;\r\n  @Input() size: DOMRect;\r\n\r\n  constructor(\r\n    protected svc: ChartService,\r\n    protected cdr: ChangeDetectorRef,\r\n    protected scaleService: ScaleService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SeriesHostComponent",
            "id": "component-SeriesHostComponent-87b8fff2793e391ce6fc2747d9f4f93e",
            "file": "projects/chart/src/chart/chart-container/series-host/series-host.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-series-host]",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Series<T>"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "defaultSeriesTypeMapping",
                    "defaultValue": "new Map<\r\n    SeriesType,\r\n    typeof SeriesBaseComponent\r\n  >()\r\n    .set(SeriesType.line, LineSeriesComponent)\r\n    .set(SeriesType.bar, BarSeriesComponent)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  Input,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { SeriesBaseComponent } from '../../base/series-base.component';\r\nimport { LineSeriesComponent } from '../series/line/line-series.component';\r\nimport { BarSeriesComponent } from '../series/bar/bar-series.component';\r\n\r\nimport { Series } from '../../model/series';\r\nimport { BasePoint } from '../../model/base-point';\r\nimport { ChartService } from '../../chart.service';\r\nimport { tap } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { SeriesType } from '../../model/series-type';\r\n\r\n@Component({\r\n  selector: '[teta-series-host]',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SeriesHostComponent<T extends BasePoint> implements OnInit {\r\n  @Input() series: Series<T>;\r\n  @Input() size: DOMRect;\r\n\r\n  private defaultSeriesTypeMapping = new Map<\r\n    SeriesType,\r\n    typeof SeriesBaseComponent\r\n  >()\r\n    .set(SeriesType.line, LineSeriesComponent)\r\n    .set(SeriesType.bar, BarSeriesComponent);\r\n\r\n  private _init = false;\r\n  private _componentRef: ComponentRef<any>;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private chartService: ChartService\r\n  ) {\r\n    this.chartService.size\r\n      .pipe(\r\n        throttleTime(100, null, { trailing: true }),\r\n        tap(() => {\r\n          this._componentRef?.injector.get(ChangeDetectorRef).markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!SeriesBaseComponent.isPrototypeOf(this.series.component)) {\r\n      this.series.component =\r\n        this.defaultSeriesTypeMapping.get(this.series.type) ||\r\n        LineSeriesComponent;\r\n    }\r\n\r\n    this._componentRef = this.viewContainerRef.createComponent(\r\n      this.series.component\r\n    );\r\n    this._componentRef.instance.series = this.series;\r\n    this._init = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this._init && changes.hasOwnProperty('series')) {\r\n      this._componentRef.instance.series = this.series;\r\n      this._componentRef.injector.get(ChangeDetectorRef).markForCheck();\r\n      this._componentRef.injector.get(ChangeDetectorRef).detectChanges();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-668fa91102550c109e174c24d56c1baa",
            "file": "projects/components/src/component/sidebar/sidebar/sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | string[]"
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "SidebarPosition.left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SidebarPosition"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "sidebarPosition",
                    "defaultValue": "SidebarPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "zIndex",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.z-index'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOpen",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.z-index",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { SidebarPosition } from '../sidebar-position.enum';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'teta-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('sidebar', [\r\n      transition('void => *', [\r\n        style({ opacity: '0' }),\r\n        animate(300, style({ opacity: '1' })),\r\n      ]),\r\n      transition('* => void', [animate(300, style({ opacity: '0' }))]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  @Input() position: SidebarPosition = SidebarPosition.left;\r\n  @Input() backdrop: boolean;\r\n  @Input() open: boolean;\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Input() className: string | string[];\r\n\r\n  @HostBinding('style.z-index') zIndex = 10;\r\n\r\n  sidebarPosition = SidebarPosition;\r\n\r\n  constructor() {}\r\n\r\n  setOpen(value: boolean) {\r\n    this.open = value;\r\n    this.openChange.emit(this.open);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"backdrop && open\"\r\n     [@sidebar]\r\n     (click)=\"setOpen(false)\"\r\n     class=\"sidebar-backdrop\"></div>\r\n<div class=\"sidebar\"\r\n     [@sidebar]\r\n     [ngClass]=\"className\"\r\n     [class.sidebar-top]=\"position === sidebarPosition.top\"\r\n     [class.sidebar-bottom]=\"position === sidebarPosition.bottom\"\r\n     [class.sidebar-left]=\"position === sidebarPosition.left\"\r\n     [class.sidebar-right]=\"position === sidebarPosition.right\"\r\n     *ngIf=\"open\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "StringCellComponent",
            "id": "component-StringCellComponent-317c36956ea531b3b24dc93705f84e15",
            "file": "projects/components/src/component/table/default/string-cell/string-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-cell",
            "styleUrls": [
                "./string-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TableColumn"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TableRow<T>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "svc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        157
                    ]
                },
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "_edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "dict",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "tableCellComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.cell-component'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        157
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "initiator",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"cell\" | \"row\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.cell-component",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "true",
                    "inheritance": {
                        "file": "CellComponentBase"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CellComponentBase } from '../../base/cell-component-base';\r\nimport { TableColumn } from '../../contract/table-column';\r\nimport { TableRow } from '../../contract/table-row';\r\nimport { TableService } from '../../service/table.service';\r\nimport { ICellCoordinates } from '../../contract/i-cell-coordinates';\r\n\r\n@Component({\r\n  selector: 'teta-string-cell',\r\n  templateUrl: './string-cell.component.html',\r\n  styleUrls: ['./string-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StringCellComponent<T>\r\n  extends CellComponentBase<T>\r\n  implements OnInit\r\n{\r\n  @Input() override column: TableColumn;\r\n  @Input() override row: TableRow<T>;\r\n  @ViewChild('input', { static: false }) input: ElementRef;\r\n\r\n  constructor(public override svc: TableService<T>, public override cdr: ChangeDetectorRef) {\r\n    super(svc, cdr);\r\n  }\r\n\r\n  setValue(): void {\r\n    this.valueChanged();\r\n  }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  startEdit(initiator: ICellCoordinates<T>, type: 'cell' | 'row'): void {\r\n    if (initiator?.column.name === this.column.name) {\r\n      this.cdr.markForCheck();\r\n      setTimeout(() => {\r\n        this.input.nativeElement.focus();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  stopEdit(): void {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-cell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CellComponentBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [style.display]=\"edit ? 'none' : 'block'\" class=\"cell-text\">\r\n  {{row.data[column.name]}}\r\n</span>\r\n<input #input\r\n       *ngIf=\"edit\"\r\n       type=\"text\"\r\n       class=\"input row_auto border-radius-0\"\r\n       (blur)=\"setValue()\"\r\n       [ngModel]=\"row.data[column.name]\"\r\n       (ngModelChange)=\"row.data[column.name]=$event\"/>\r\n\r\n"
        },
        {
            "name": "StringFilterComponent",
            "id": "component-StringFilterComponent-0d232416035fcc1e88f201d321b2103b",
            "file": "projects/components/src/component/filter/string-filter/string-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-filter",
            "styleUrls": [
                "./string-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FilterItem"
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IIdName<any>[]"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<FilterBase>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<FilterBase>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringFilter",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterItem",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<IFilter>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIdName<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "FilterComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "StringFilter",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { StringFilter } from '../contarct/string-filter';\r\nimport { FilterState } from '../contarct/filter-state';\r\nimport { FilterBase } from '../base/filter-base';\r\nimport { FilterComponentBase } from '../base/filter-component-base';\r\nimport { FilterItem } from '../contarct/filter-item';\r\nimport { IIdName } from '../../../common/contract/i-id-name';\r\n\r\n@Component({\r\n  selector: 'teta-string-filter',\r\n  templateUrl: './string-filter.component.html',\r\n  styleUrls: ['./string-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StringFilterComponent\r\n  extends FilterComponentBase\r\n  implements OnInit\r\n{\r\n  @Input() column: FilterItem;\r\n  @Input() filterOptions: IIdName<any>[] = [];\r\n  @Output() filterChanged: EventEmitter<FilterBase> =\r\n    new EventEmitter<FilterBase>();\r\n\r\n  filter: StringFilter;\r\n  state$: FilterState;\r\n\r\n  @Input()\r\n  set state(val: FilterState) {\r\n    this.state$ = val;\r\n    this.filter = this.getFilter();\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  get state() {\r\n    return this.state$;\r\n  }\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  setFilter() {\r\n    this.filterChanged.emit(this.filter);\r\n  }\r\n\r\n  private getFilter(): StringFilter {\r\n    let filter = this.state.stringFilters.find(\r\n      (f) => f.field === this.column.filterField\r\n    );\r\n    if (!filter) {\r\n      filter = this.state.addStringFilter(\r\n        new StringFilter({\r\n          value: '',\r\n          field: this.column.filterField,\r\n          type: this.column.stringFilterType,\r\n          name: this.column.name,\r\n        })\r\n      );\r\n    }\r\n    filter.type = this.column.stringFilterType;\r\n    return filter;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FilterComponentBase",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"padding-3\">\r\n  <teta-input [label]=\"'Поиск'\">\r\n    <input type=\"text\" class=\"input\" [(ngModel)]=\"filter.value\" (blur)=\"setFilter()\" />\r\n  </teta-input>\r\n</div>\r\n\r\n"
        },
        {
            "name": "StringItemDefaultComponent",
            "id": "component-StringItemDefaultComponent-d2806f3e8fafb12eba16a890a736d10d",
            "file": "projects/components/src/component/property-grid/default/string-item-default/string-item-default.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-string-item-default",
            "styleUrls": [
                "./string-item-default.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./string-item-default.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-string-item-default',\r\n  templateUrl: './string-item-default.component.html',\r\n  styleUrls: ['./string-item-default.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StringItemDefaultComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./string-item-default.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>string-item-default works!</p>\r\n"
        },
        {
            "name": "SwitchButtonComponent",
            "id": "component-SwitchButtonComponent-87f0f2cd5d448c3545978b487c4003d9",
            "file": "projects/components/src/component/switch/switch-button/switch-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-switch-button",
            "styleUrls": [
                "./switch-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "svcValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { SwitchService } from '../switch.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-switch-button',\r\n  templateUrl: './switch-button.component.html',\r\n  styleUrls: ['./switch-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SwitchButtonComponent implements OnInit, OnDestroy {\r\n  @Input() value: any;\r\n  @Input() class: string;\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [this.class, 'switch-button'];\r\n    if (\r\n      this.svcValue === this.value ||\r\n      (this.svcValue instanceof Array && this.svcValue.indexOf(this.value) >= 0)\r\n    ) {\r\n      result.push('switch-button_active');\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  private svcValue: any;\r\n  private _alive = true;\r\n\r\n  constructor(private svc: SwitchService, private cdr: ChangeDetectorRef) {\r\n    this.svc.value.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\r\n      this.svcValue = _;\r\n      this.cdr.markForCheck();\r\n    });\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    this.svc.setValue(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./switch-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-8761a30c1ef7b1e267f493f77eaf6961",
            "file": "projects/components/src/component/switch/switch/switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SWITCH_CONTROL_VALUE_ACCESSOR"
                },
                {
                    "name": "SwitchService"
                }
            ],
            "selector": "teta-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "switchClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.switch'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.switch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  HostBinding,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { SwitchService } from '../switch.service';\r\nimport { filter, takeWhile } from 'rxjs/operators';\r\n\r\nexport const SWITCH_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => SwitchComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-switch',\r\n  templateUrl: './switch.component.html',\r\n  styleUrls: ['./switch.component.scss'],\r\n  providers: [SWITCH_CONTROL_VALUE_ACCESSOR, SwitchService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SwitchComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor\r\n{\r\n  @HostBinding('class.switch') switchClass = true;\r\n\r\n  private _alive = true;\r\n  private _value: any;\r\n\r\n  constructor(private svc: SwitchService, private cdr: ChangeDetectorRef) {\r\n    this.svc.value\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((_) => _ !== this._value)\r\n      )\r\n      .subscribe((_) => {\r\n        this.onChange(_);\r\n        this._value = _;\r\n      });\r\n  }\r\n\r\n  writeValue(model: any) {\r\n    this._value = model;\r\n    this.svc.setValue(model);\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "SwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-f7a86d7644cf8ef2cec8a651f32ea0d6",
            "file": "projects/components/src/component/tabs/tab/tab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allows toggling disabled state of a given state. Disabled tabs can't be selected.",
                    "description": "<p>Allows toggling disabled state of a given state. Disabled tabs can&#39;t be selected.</p>\n",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "id",
                    "defaultValue": "`teta-tab-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Unique tab identifier. Must be unique for the entire document for proper accessibility support.",
                    "description": "<p>Unique tab identifier. Must be unique for the entire document for proper accessibility support.</p>\n",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Simple (string only) title. Use the \"ItskTabTitleDirective\" directive for more complex use-cases.",
                    "description": "<p>Simple (string only) title. Use the &quot;ItskTabTitleDirective&quot; directive for more complex use-cases.</p>\n",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabContentDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "titleTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabTitleDirective",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabTitleDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Input,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { TabContentDirective } from '../tab-content.directive';\r\nimport { TabTitleDirective } from '../tab-title.directive';\r\n\r\nlet nextId = 0;\r\n\r\n@Component({\r\n  selector: 'teta-tab',\r\n  template: '',\r\n  styleUrls: ['./tab.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TabComponent implements AfterContentChecked {\r\n  /**\r\n   * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\r\n   */\r\n  @Input() id = `teta-tab-${nextId++}`;\r\n  /**\r\n   * Simple (string only) title. Use the \"ItskTabTitleDirective\" directive for more complex use-cases.\r\n   */\r\n  @Input() title: string;\r\n  /**\r\n   * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  @ContentChild(TabTitleDirective, { static: false })\r\n  titleTpl: TabTitleDirective;\r\n  @ContentChild(TabContentDirective, { static: false })\r\n  contentTpl: TabContentDirective;\r\n  // titleTpl: TabTitleDirective | null;\r\n  // contentTpl: TabContentDirective | null;\r\n\r\n  ngAfterContentChecked(): void {\r\n    // this.titleTpl = this.titleTemplates.first;\r\n    // this.contentTpl = this.contentTemplates.first;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentChecked"
            ]
        },
        {
            "name": "TableBodyComponent",
            "id": "component-TableBodyComponent-5c1bcf4b4dfd67d85fec9e320b3a95ff",
            "file": "projects/components/src/component/table/table-body/table-body.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-body",
            "styleUrls": [
                "./table-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "TableRow<T>"
                },
                {
                    "name": "additionalComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Type<DetailComponentBase<T>>"
                },
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "grouping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "groupRowComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Type<GroupRowComponentBase<T>>"
                },
                {
                    "name": "openLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number"
                },
                {
                    "name": "rowClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "function"
                },
                {
                    "name": "rowHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number"
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "SelectType"
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatasource<TableRow<T>>",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "gridTemplateColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "locked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "selectTypeEnum",
                    "defaultValue": "SelectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "tableBodyClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-body'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "unlocked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "viewport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createAdapter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAggregateText",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAggregateValue",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLockedGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMax",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMin",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpan",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSum",
                    "args": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetAdapter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "setActiveRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackColumns",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackRow",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "TableRow<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-body",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Type,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {TableRow} from '../contract/table-row';\r\nimport {TableColumn} from '../contract/table-column';\r\nimport {GroupRowComponentBase} from '../base/group-row-component-base';\r\nimport {TableService} from '../service/table.service';\r\nimport {DetailComponentBase} from '../base/detail-component-base';\r\nimport {takeWhile} from 'rxjs/operators';\r\nimport {TableUtil} from '../util/table-util';\r\nimport {SelectType} from '../enum/select-type.enum';\r\nimport {combineLatest} from 'rxjs';\r\nimport {ArrayUtil} from '../../../common/util/array-util';\r\nimport {IDictionary} from '../../../common/contract/i-dictionary';\r\nimport {IIdName} from '../../../common/contract/i-id-name';\r\nimport {AggregationType} from '../enum/aggregation-type.enum';\r\nimport {Datasource, IDatasource, SizeStrategy} from 'ngx-ui-scroll';\r\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\r\n\r\n@Component({\r\n  selector: 'teta-table-body',\r\n  templateUrl: './table-body.component.html',\r\n  styleUrls: ['./table-body.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableBodyComponent<T> implements OnInit, OnDestroy {\r\n  @Input() virtual: boolean;\r\n  @Input() activeRow: TableRow<T>;\r\n  @Input() rowHeight: number;\r\n  @Input() additionalComponent: Type<DetailComponentBase<T>>;\r\n  @Input() tree: boolean;\r\n  @Input() aggregate: boolean;\r\n  @Input() grouping: boolean;\r\n  @Input() groupRowComponent: Type<GroupRowComponentBase<T>>;\r\n  @Input() openLevels: number;\r\n  @Input() selectType: SelectType;\r\n  @Input() rowClass: (row: TableRow<T>, index?: number) => string;\r\n\r\n  @ViewChild(CdkVirtualScrollViewport, {static: false}) viewport: CdkVirtualScrollViewport;\r\n\r\n  @HostBinding('class.table-body') private readonly tableBodyClass = true;\r\n\r\n  set data(data: TableRow<T>[]) {\r\n    this._data = data;\r\n    if (!this.dataSource) {\r\n      this.createAdapter();\r\n    }\r\n    this.resetAdapter();\r\n  }\r\n\r\n  get data() {\r\n    return this._data;\r\n  }\r\n\r\n  dict: IDictionary<IIdName<any>[]>;\r\n\r\n  gridTemplateColumns: string;\r\n  selectedRows: TableRow<T>[] = [];\r\n  locked: TableColumn[] = [];\r\n  unlocked: TableColumn[] = [];\r\n\r\n  selectTypeEnum = SelectType;\r\n  dataSource: IDatasource<TableRow<T>>;\r\n\r\n  private _columns: TableColumn[] = [];\r\n  private _alive = true;\r\n  private _data: TableRow<T>[];\r\n  private _hiddenColumns: string[] = [];\r\n  private _index: number;\r\n\r\n  set columns(columns: TableColumn[]) {\r\n    this._columns = columns;\r\n    this.locked = this._columns?.filter((_) => _.locked === true);\r\n    this.unlocked = this._columns?.filter((_) => _.locked === false);\r\n  }\r\n\r\n  get columns(): TableColumn[] {\r\n    return this._columns;\r\n  }\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\r\n    combineLatest([this._svc.columns, this._svc.hiddenColumns])\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((values: [TableColumn[], string[]]) => {\r\n        const [columns, hiddenColumns] = values;\r\n        this._hiddenColumns = hiddenColumns;\r\n        this.columns = ArrayUtil.flatten(columns, 'columns', true).filter(\r\n          (_) => this._hiddenColumns.indexOf(_.name) < 0\r\n        );\r\n        this.gridTemplateColumns = TableUtil.getGridTemplateColumns(\r\n          this.columns.sort((a, b) => Number(b.locked) - Number(a.locked))\r\n        );\r\n        this._cdr.markForCheck();\r\n      });\r\n\r\n    this._svc.displayData.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\r\n      this.data = _;\r\n      this._cdr.markForCheck();\r\n    });\r\n\r\n    this._svc.dict.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\r\n      this.dict = _;\r\n      this._cdr.markForCheck();\r\n    });\r\n\r\n    this._svc.scrollIndex\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe(async (_) => {\r\n        // if (this.viewport && this.dataSource && _ !== null) {\r\n        //   await this.dataSource.adapter.relax();\r\n        //   await this.dataSource.adapter.fix({\r\n        //     scrollPosition: (_ + 1) * 24,\r\n        //   });\r\n        // }\r\n        if (this.viewport) {\r\n          this.viewport.scrollToIndex(_, 'smooth');\r\n        }\r\n        this._cdr.markForCheck();\r\n      });\r\n\r\n    this._svc.activeRow\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe(async (_) => {\r\n        this.activeRow = _;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  setActiveRow(row: TableRow<T>) {\r\n    this._svc.setActiveRow(row);\r\n  }\r\n\r\n  getData = (index, count, success) => {\r\n    const data = [];\r\n    if (this.data?.length > 0) {\r\n      const start = Math.max(0, index);\r\n      const end = Math.min(index + count - 1, this.data.length - 1);\r\n      for (let i = start; i <= end; i++) {\r\n        data.push(this.data[i]);\r\n      }\r\n    }\r\n    return success(data);\r\n  };\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  getAggregateValue(column: TableColumn): number {\r\n    if (column.aggregate === AggregationType.sum) {\r\n      return this.getSum(column.name);\r\n    }\r\n    if (column.aggregate === AggregationType.avg) {\r\n      return this.getSum(column.name) / this.data.length;\r\n    }\r\n    if (column.aggregate === AggregationType.min) {\r\n      return this.getMin(column.name);\r\n    }\r\n    if (column.aggregate === AggregationType.max) {\r\n      return this.getMax(column.name);\r\n    }\r\n  }\r\n\r\n  getAggregateText(column: TableColumn): string {\r\n    if (column.aggregate === AggregationType.sum) {\r\n      return 'Сумма=';\r\n    }\r\n    if (column.aggregate === AggregationType.avg) {\r\n      return 'Среднее=';\r\n    }\r\n    if (column.aggregate === AggregationType.min) {\r\n      return 'Мин=';\r\n    }\r\n    if (column.aggregate === AggregationType.max) {\r\n      return 'Макс=';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getSpan(): string {\r\n    if (this.locked?.length > 0) {\r\n      let span = this.locked.length;\r\n      if (this.selectType !== SelectType.none) {\r\n        span += 1;\r\n      }\r\n      return `span ${span}`;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTemplateColumns() {\r\n    let template = this.gridTemplateColumns;\r\n    if (this.selectType !== SelectType.none) {\r\n      template = `48px ${template}`;\r\n    }\r\n    return template;\r\n  }\r\n\r\n  getLockedGridTemplateColumns(columns: TableColumn[]) {\r\n    let template = TableUtil.getGridTemplateColumns(columns);\r\n    if (this.selectType !== SelectType.none) {\r\n      template = `48px ${template}`;\r\n    }\r\n    return template;\r\n  }\r\n\r\n  trackRow(index: number, row: TableRow<T>): any {\r\n    return index;\r\n  }\r\n\r\n  trackColumns(index: number, column: TableColumn): any {\r\n    return column.name;\r\n  }\r\n\r\n  private getSum(columnName) {\r\n    return this.data?.reduce((accum, current) => {\r\n      const val = parseFloat(current.data[columnName]);\r\n      return accum + (isNaN(val) ? 0 : val);\r\n    }, 0);\r\n  }\r\n\r\n  private getMin(columnName) {\r\n    return this.data?.reduce(\r\n      (accum, current) =>\r\n        accum != null && accum <= current.data[columnName]\r\n          ? accum\r\n          : current.data[columnName],\r\n      null\r\n    );\r\n  }\r\n\r\n  private getMax(columnName) {\r\n    return this.data?.reduce(\r\n      (accum, current) =>\r\n        accum != null && accum >= current.data[columnName]\r\n          ? accum\r\n          : current.data[columnName],\r\n      null\r\n    );\r\n  }\r\n\r\n  private async resetAdapter() {\r\n    await this.dataSource.adapter.relax();\r\n    await this.dataSource.adapter.reset({\r\n      get: this.getData,\r\n      settings: {\r\n        minIndex: 0,\r\n        maxIndex: this._data?.length ? this._data.length - 1 : 0,\r\n        startIndex: 0,\r\n        itemSize: 24,\r\n        sizeStrategy: SizeStrategy.Constant,\r\n      },\r\n    });\r\n    await this.dataSource.adapter.check();\r\n  }\r\n\r\n  private createAdapter() {\r\n    this.dataSource = new Datasource<TableRow<T>>({\r\n      get: this.getData,\r\n      settings: {\r\n        startIndex: 0,\r\n        bufferSize: 2,\r\n        sizeStrategy: SizeStrategy.Constant,\r\n        itemSize: 24,\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-body.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "TableRow<T>[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "TableRow<T>[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "columns",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 86
                    }
                }
            },
            "templateData": "<!--<div #viewport class=\"table-body-container table-body-container-virtual\"-->\r\n<!--     *ngIf=\"virtual\"-->\r\n<!--     [style.grid-template-columns]=\"getTemplateColumns()\"-->\r\n<!--     style=\"height: 100%;\">-->\r\n<!--  <ng-container-->\r\n<!--    *uiScroll=\"let row of dataSource; let rowIndex = index; let last = last;\" style=\"display: flex;flex-grow: 1\">-->\r\n<!--    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {row: row, rowIndex: rowIndex}\"></ng-container>-->\r\n<!--  </ng-container>-->\r\n<!--  <ng-container *ngIf=\"aggregate\">-->\r\n<!--    <ng-container *ngTemplateOutlet=\"aggTemplate;\"></ng-container>-->\r\n<!--  </ng-container>-->\r\n<!--</div>-->\r\n\r\n<cdk-virtual-scroll-viewport *ngIf=\"virtual\"\r\n                             class=\"table-body-container\"\r\n                             [itemSize]=\"24\">\r\n  <ng-container *cdkVirtualFor=\"let row of data;templateCacheSize: 0; let rowIndex = index; trackBy: trackRow;\">\r\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {row: row, rowIndex: rowIndex}\"></ng-container>\r\n  </ng-container>\r\n</cdk-virtual-scroll-viewport>\r\n\r\n\r\n<div *ngIf=\"!virtual\"\r\n     class=\"table-body-container\"\r\n     [style.grid-template-rows]=\"rowHeight + 'px'\"\r\n     [style.grid-auto-rows]=\"rowHeight + 'px'\"\r\n     [style.grid-template-columns]=\"getTemplateColumns()\">\r\n  <ng-container *ngFor=\"let row of data; let rowIndex = index; trackBy: trackRow;\">\r\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {row: row, rowIndex: rowIndex}\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"aggregate\">\r\n    <ng-container *ngTemplateOutlet=\"aggTemplate;\"></ng-container>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #bodyTemplate let-row=\"row\" let-rowIndex=\"rowIndex\">\r\n  <div class=\"table-row\"\r\n       (click)=\"setActiveRow(row)\"\r\n       [attr.data-row]=\"rowIndex\"\r\n       [ngClass]=\"rowClass ? rowClass(row, rowIndex) : ''\"\r\n       [class.table-row_virtual]=\"virtual\"\r\n       [style.grid-template-columns]=\"virtual ? getTemplateColumns() : ''\"\r\n       [class.table-row_active]=\"row === activeRow || selectedRows.indexOf(row) >= 0\">\r\n    <ng-container *ngIf=\"!grouping\">\r\n      <div class=\"table-row_locked\"\r\n           *ngIf=\"locked.length > 0\"\r\n           [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\r\n           [style.zIndex]=\"row === activeRow ? 1 : 'unset'\"\r\n           [style.grid-column-end]=\"getSpan()\">\r\n        <teta-selection-cell *ngIf=\"selectType !== selectTypeEnum.none && locked.length\"\r\n                             [row]=\"row\"></teta-selection-cell>\r\n        <teta-cell\r\n          *ngFor=\"let column of locked; let colIndex = index; trackBy: trackColumns;\"\r\n          [attr.data-row]=\"rowIndex\"\r\n          [attr.data-column]=\"column.name\"\r\n          [column]=\"column\"\r\n          [filterOptions]=\"dict[column.name]\"\r\n          [dict]=\"dict\"\r\n          [row]=\"row\"\r\n          [ngClass]=\"column.cellClass\"\r\n          [attr.tabindex]=\"0\"\r\n        ></teta-cell>\r\n      </div>\r\n      <teta-selection-cell *ngIf=\"selectType !== selectTypeEnum.none && locked.length < 1\"\r\n                           [row]=\"row\"></teta-selection-cell>\r\n      <teta-cell\r\n        *ngFor=\"let column of unlocked; let colIndex = index; trackBy: trackColumns;\"\r\n        [attr.data-row]=\"rowIndex\"\r\n        [attr.data-column]=\"column.name\"\r\n        [column]=\"column\"\r\n        [filterOptions]=\"dict[column.name]\"\r\n        [dict]=\"dict\"\r\n        [row]=\"row\"\r\n        [ngClass]=\"column.cellClass\"\r\n        [attr.tabindex]=\"0\"\r\n      ></teta-cell>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"grouping\">\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #aggTemplate>\r\n  <div class=\"table-row\"\r\n       *ngIf=\"aggregate\"\r\n       [class.table-row_virtual]=\"virtual\"\r\n       [style.grid-template-columns]=\"virtual ? getTemplateColumns() : ''\">\r\n    <div class=\"table-row_locked\"\r\n         *ngIf=\"locked.length > 0\"\r\n         [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\r\n         [style.grid-column-end]=\"getSpan()\">\r\n      <div class=\"cell align-center justify-content-center\">\r\n        <teta-icon [name]=\"'sumColor'\"></teta-icon>\r\n      </div>\r\n      <div class=\"cell cell-component justify-content-end\"\r\n           *ngFor=\"let column of locked; let colIndex = index; trackBy: trackColumns;\"\r\n           [attr.data-column]=\"column.name\"\r\n           [ngClass]=\"column.cellClass\"\r\n           [attr.tabindex]=\"0\">\r\n        <span class=\"cell-text cell-text_numeric font-title-3\">\r\n          {{getAggregateText(column)}}:\r\n          {{getAggregateValue(column) | tetaNumber : 2}}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"cell align-center justify-content-center\"\r\n         *ngIf=\"selectType !== selectTypeEnum.none && locked.length < 1\">\r\n      <teta-icon [name]=\"'sumColor'\"></teta-icon>\r\n    </div>\r\n    <div class=\"cell cell-component justify-content-end\"\r\n         *ngFor=\"let column of unlocked; let colIndex = index; trackBy: trackColumns;\"\r\n         [attr.data-column]=\"column.name\"\r\n         [ngClass]=\"column.cellClass\"\r\n         [attr.tabindex]=\"0\">\r\n      <span class=\"cell-text cell-text_numeric font-title-3\">\r\n        {{getAggregateText(column)}}\r\n        {{getAggregateValue(column) | tetaNumber : 2}}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-f05ad919124f902ca7217091e69ca040",
            "file": "projects/components/src/component/table/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TableService"
                }
            ],
            "selector": "teta-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "TableRow<T>"
                },
                {
                    "name": "aggregate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "cellEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean | "
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "TableColumn[]"
                },
                {
                    "name": "contextMenuConfig",
                    "defaultValue": "new TableContextMenuConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "TableContextMenuConfig"
                },
                {
                    "name": "cookieName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string"
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "T[]"
                },
                {
                    "name": "detailComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "Type<DetailComponentBase<T>>"
                },
                {
                    "name": "dict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "IDictionary<IIdName[]>"
                },
                {
                    "name": "editEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EditEvent"
                },
                {
                    "name": "editType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EditType"
                },
                {
                    "name": "grouping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean"
                },
                {
                    "name": "groupRowComponent",
                    "defaultValue": "GroupRowComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "Type<GroupRowComponentBase<T>>"
                },
                {
                    "name": "openLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "number"
                },
                {
                    "name": "rowClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "function"
                },
                {
                    "name": "rowEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean | "
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "number"
                },
                {
                    "name": "scrollToIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "number"
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "TableRow<T>[]"
                },
                {
                    "name": "selectType",
                    "defaultValue": "SelectType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "SelectType"
                },
                {
                    "name": "showHeadCellMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": ""
                },
                {
                    "name": "trackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "function"
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "activeRowChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<TableRow<T>>"
                },
                {
                    "name": "addRow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter"
                },
                {
                    "name": "bodyLeft",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellClick",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellDoubleClick",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellEditEnd",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellEditStart",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellFocus",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellKeyUp",
                    "defaultValue": "new EventEmitter<ICellEvent<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteRows",
                    "defaultValue": "new EventEmitter<TableRow<T>[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "EventEmitter"
                },
                {
                    "name": "pasteRows",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowEditEnd",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowEditStart",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowLeft",
                    "defaultValue": "new EventEmitter<TableRow<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<TableRow[]>"
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<FilterState>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<FilterState>"
                },
                {
                    "name": "tableService",
                    "defaultValue": "new EventEmitter<TableService<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<ICellCoordinates<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_bodyElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_headElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "contextMenuTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICellCoordinates<T>",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 375,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedRowsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "showContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "tableClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "contextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'contextmenu', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copy",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dblclick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dblclick', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eventIsOnRow",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusIn",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusin', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromClipboard",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 416,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCoordinates",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICellEvent | null",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEventCell",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getVisibleColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hidden",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 441,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hidden",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClickOutsideAnyRow",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pasteData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "rowAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditRowOrCell",
                    "args": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "coordinates",
                            "type": "ICellCoordinates<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toClipboardString",
                    "args": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "TableRow<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 229
                },
                {
                    "name": "dblclick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 195
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 169
                },
                {
                    "name": "focusin",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 184
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 223
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 206
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  Type,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {TableRow} from '../contract/table-row';\r\nimport {TableService} from '../service/table.service';\r\nimport {TableColumn} from '../contract/table-column';\r\nimport {FilterState} from '../../filter/contarct/filter-state';\r\nimport {DetailComponentBase} from '../base/detail-component-base';\r\nimport {ICellEvent} from '../contract/i-cell-event';\r\nimport {ICellCoordinates} from '../contract/i-cell-coordinates';\r\nimport {GroupRowComponentBase} from '../base/group-row-component-base';\r\nimport {GroupRowComponent} from '../default/group-row/group-row.component';\r\nimport {filter, takeWhile, withLatestFrom} from 'rxjs/operators';\r\nimport {EditType} from '../enum/edit-type.enum';\r\nimport {EditEvent} from '../enum/edit-event.enum';\r\nimport {SelectType} from '../enum/select-type.enum';\r\nimport {IIdName} from '../../../common/contract/i-id-name';\r\nimport {IDictionary} from '../../../common/contract/i-dictionary';\r\nimport {of} from 'rxjs';\r\nimport {ArrayUtil} from '../../../common/util/array-util';\r\nimport {PositionUtil} from '../../../common/util/position-util';\r\nimport {Align} from '../../../common/enum/align.enum';\r\nimport {VerticalAlign} from '../../../common/enum/vertical-align.enum';\r\nimport {FilterType} from '../../filter/enum/filter-type.enum';\r\nimport {TableContextMenuConfig} from '../contract/table-context-menu-config';\r\n\r\n@Component({\r\n  selector: 'teta-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [TableService],\r\n})\r\nexport class TableComponent<T>\r\n  implements OnInit, OnDestroy, AfterViewInit, OnChanges {\r\n  @Input() data: T[] = [];\r\n  @Input() columns: TableColumn[] = [];\r\n  @Input() dict: IDictionary<IIdName<any>[]>;\r\n\r\n  @Input()\r\n  set state(state: FilterState) {\r\n    this._state = state;\r\n  }\r\n\r\n  @Input() rowHeight = 24;\r\n  @Input() cookieName: string;\r\n  @Input() virtual: boolean;\r\n  @Input() detailComponent: Type<DetailComponentBase<T>>;\r\n  @Input() activeRow: TableRow<T>;\r\n  @Input() selectedRows: TableRow<T>[];\r\n  @Input() selectType: SelectType = SelectType.none;\r\n  @Input() aggregate: boolean;\r\n  @Input() grouping: boolean;\r\n  @Input() groupRowComponent: Type<GroupRowComponentBase<T>> =\r\n    GroupRowComponent;\r\n  @Input() openLevels: number;\r\n  @Input() tree: boolean;\r\n  @Input() trackBy: (row: TableRow<T>) => any;\r\n  @Input() editType: EditType;\r\n  @Input() editEvent: EditEvent;\r\n  @Input() rowEditable: boolean | ((row: TableRow<T>) => boolean);\r\n  @Input() cellEditable: boolean | ((row: ICellCoordinates<T>) => boolean);\r\n  @Input() rowClass: (row: TableRow<T>, index?: number) => string;\r\n\r\n  @Input() set scrollToIndex(index: number) {\r\n    this._svc.scrollToIndex(index);\r\n  }\r\n\r\n  @Input() contextMenuConfig: TableContextMenuConfig =\r\n    new TableContextMenuConfig();\r\n\r\n  @Input() showHeadCellMenu = true;\r\n\r\n  @Output()\r\n  stateChange: EventEmitter<FilterState> = new EventEmitter<FilterState>();\r\n  @Output() bodyLeft = new EventEmitter<TableRow<T>>();\r\n  @Output() activeRowChange: EventEmitter<TableRow<T>> = new EventEmitter();\r\n  @Output() selectedRowsChange: EventEmitter<TableRow<T>[]> =\r\n    new EventEmitter();\r\n  @Output() rowLeft = new EventEmitter<TableRow<T>>();\r\n  @Output() rowEditStart = new EventEmitter<TableRow<T>>();\r\n  @Output() rowEditEnd = new EventEmitter<TableRow<T>>();\r\n  @Output() cellClick = new EventEmitter<ICellEvent<T>>();\r\n  @Output() cellDoubleClick = new EventEmitter<ICellEvent<T>>();\r\n  @Output() cellFocus = new EventEmitter<ICellEvent<T>>();\r\n  @Output() cellEditStart = new EventEmitter<ICellCoordinates<T>>();\r\n  @Output() cellEditEnd = new EventEmitter<ICellCoordinates<T>>();\r\n  @Output() valueChange = new EventEmitter<ICellCoordinates<T>>();\r\n  @Output() cellKeyUp = new EventEmitter<ICellEvent<T>>();\r\n\r\n  @Output() pasteRows = new EventEmitter<any[]>();\r\n  @Output() addRow = new EventEmitter<void>();\r\n  @Output() deleteRows = new EventEmitter<TableRow<T>[]>();\r\n  @Output() tableService = new EventEmitter<TableService<T>>();\r\n\r\n  @ViewChild('contextMenu', {static: true}) menu: ElementRef;\r\n  @HostBinding('class.table') private readonly tableClass = true;\r\n\r\n  showContextMenu: boolean;\r\n  selectedRowsList: TableRow<T>[];\r\n  contextMenuTarget: ICellCoordinates<T>;\r\n\r\n  private _alive = true;\r\n  private _bodyElement: HTMLElement;\r\n  private _headElement: HTMLElement;\r\n\r\n  private _state: FilterState;\r\n\r\n  constructor(private _svc: TableService<T>, private _elementRef: ElementRef) {\r\n    this._svc.state\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((state) => state !== this._state)\r\n      )\r\n      .subscribe((state: FilterState) => this.stateChange.next(state));\r\n\r\n    this._svc.editCellStart\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((item: ICellCoordinates<T>) => this.cellEditStart.emit(item));\r\n\r\n    this._svc.editCellStop\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((item: ICellCoordinates<T>) => this.cellEditEnd.emit(item));\r\n\r\n    this._svc.editRowStart\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((item: ICellCoordinates<T>) =>\r\n        this.rowEditStart.emit(item?.row)\r\n      );\r\n\r\n    this._svc.editRowStop\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((item: ICellCoordinates<T>) =>\r\n        this.rowEditEnd.emit(item?.row)\r\n      );\r\n\r\n    this._svc.selectedRows\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((items: TableRow<T>[]) => {\r\n        this.selectedRowsList = items;\r\n        this.selectedRowsChange.emit(items);\r\n      });\r\n\r\n    this._svc.activeRow\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((item: TableRow<T>) => this.activeRowChange.emit(item));\r\n\r\n    this._svc.valueChanged\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((coordinates: ICellCoordinates<T>) => {\r\n        this.valueChange.emit(coordinates);\r\n      });\r\n  }\r\n\r\n  @HostListener('document:click', ['$event']) handleClickOutsideAnyRow(\r\n    event: MouseEvent\r\n  ) {\r\n    const coordinates = this.getCoordinates(event);\r\n    if (coordinates) {\r\n      this.cellClick.emit(coordinates);\r\n      if (this.editEvent === EditEvent.click) {\r\n        this.startEditRowOrCell(coordinates);\r\n      }\r\n    }\r\n    if (!this.eventIsOnRow(event) && !event.defaultPrevented) {\r\n      this._svc.startEditRow(null);\r\n    }\r\n  }\r\n\r\n  @HostListener('focusin', ['$event']) focusIn(event: any) {\r\n    const coordinates = this.getCoordinates(event);\r\n    if (coordinates) {\r\n      this.cellFocus.emit(coordinates);\r\n      if (this.editEvent === EditEvent.focus) {\r\n        this.startEditRowOrCell(coordinates);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('dblclick', ['$event'])\r\n  dblclick(event: MouseEvent) {\r\n    const coordinates = this.getCoordinates(event);\r\n    if (coordinates) {\r\n      this.cellDoubleClick.emit(coordinates);\r\n      if (this.editEvent === EditEvent.doubleClick) {\r\n        this.startEditRowOrCell(coordinates);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:keyup', ['$event'])\r\n  keyup(event: KeyboardEvent) {\r\n    const coordinates = this.getCoordinates(event);\r\n    if (coordinates) {\r\n      this.cellKeyUp.emit(coordinates);\r\n    }\r\n    switch (event.key) {\r\n      case 'Enter':\r\n        this._svc.startEditRow(null);\r\n        break;\r\n      case 'Escape':\r\n        this._svc.startEditRow(null);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent) {\r\n    if (event.button === 2) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event']) contextMenu(event: MouseEvent) {\r\n    if (\r\n      this.getSelectedText() ||\r\n      this.contextMenuConfig?.contextMenu === false\r\n    ) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.contextMenuTarget = this.getCoordinates(event);\r\n    this.showContextMenu = true;\r\n    this.setPosition(event);\r\n  }\r\n\r\n  rowAdd() {\r\n    this.addRow.emit();\r\n    this.contextMenuTarget = null;\r\n    this.showContextMenu = false;\r\n  }\r\n\r\n  copy(rows: TableRow<T>[]) {\r\n    of(1)\r\n      .pipe(withLatestFrom(this._svc.columns, this._svc.hiddenColumns))\r\n      .subscribe((data: [number, TableColumn[], string[]]) => {\r\n        const [, columns, hidden] = data;\r\n        navigator.clipboard.writeText(\r\n          this.toClipboardString(rows, this.getVisibleColumns(columns, hidden))\r\n        );\r\n        this.contextMenuTarget = null;\r\n        this.showContextMenu = false;\r\n      });\r\n  }\r\n\r\n  delete(rows: TableRow<T>[]) {\r\n    this.deleteRows.emit(rows);\r\n    this.contextMenuTarget = null;\r\n    this.showContextMenu = false;\r\n  }\r\n\r\n  async pasteData() {\r\n    const result = await navigator.clipboard.readText();\r\n    of(1)\r\n      .pipe(withLatestFrom(this._svc.columns, this._svc.hiddenColumns))\r\n      .subscribe((data: [number, TableColumn[], string[]]) => {\r\n        const [, columns, hidden] = data;\r\n        this.pasteRows.emit(\r\n          this.fromClipboard(result, this.getVisibleColumns(columns, hidden))\r\n        );\r\n      });\r\n    this.contextMenuTarget = null;\r\n    this.showContextMenu = false;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._svc.restoreState();\r\n    this._svc.restoreHiddenColumns();\r\n    this.tableService.emit(this._svc);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._headElement =\r\n      this._elementRef.nativeElement.querySelector('.table-head');\r\n    this._bodyElement = this._elementRef.nativeElement.querySelector(\r\n      '.table-body-container'\r\n    );\r\n    this._bodyElement.addEventListener('scroll', this.onScroll);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n    this._bodyElement.removeEventListener('scroll', this.onScroll);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('editType')) {\r\n      this._svc.editType = this.editType;\r\n    }\r\n    if (changes.hasOwnProperty('selectType')) {\r\n      this._svc.selectType = this.selectType;\r\n    }\r\n    if (changes.hasOwnProperty('selectedRows')) {\r\n      this._svc.selectRows(this.selectedRows);\r\n    }\r\n    if (changes.hasOwnProperty('rowEditable')) {\r\n      this._svc.rowEditable = this.rowEditable;\r\n    }\r\n    if (changes.hasOwnProperty('cellEditable')) {\r\n      this._svc.cellEditable = this.cellEditable;\r\n    }\r\n    if (changes.hasOwnProperty('cookieName')) {\r\n      this._svc.setCookieName(this.cookieName);\r\n    }\r\n    if (changes.hasOwnProperty('columns')) {\r\n      if(this.columns !== null && this.columns !== undefined) {\r\n        this._svc.setColumns(this.columns);\r\n      }\r\n    }\r\n    if (changes.hasOwnProperty('data')) {\r\n      this._svc.setData(this.data);\r\n      this._svc.selectRows([]);\r\n    }\r\n    if (changes.hasOwnProperty('dict')) {\r\n      this._svc.setDict(this.dict);\r\n    }\r\n  }\r\n\r\n  private startEditRowOrCell(coordinates: ICellCoordinates<T>): void {\r\n    if (this.editType === EditType.row) {\r\n      this._svc.startEditRow(coordinates);\r\n    }\r\n    if (this.editType === EditType.cell) {\r\n      this._svc.startEditCell(coordinates);\r\n    }\r\n  }\r\n\r\n  private getEventCell(event: Event): HTMLElement | null {\r\n    return event.composedPath().find((target: HTMLElement) => {\r\n      return target.tagName?.toLowerCase() === 'teta-cell';\r\n    }) as HTMLElement;\r\n  }\r\n\r\n  private eventIsOnRow(event: Event): boolean {\r\n    const row = event.composedPath().find((target: HTMLElement) => {\r\n      return target?.getAttribute && target?.getAttribute('data-row');\r\n    });\r\n    return row && this._elementRef.nativeElement.contains(row);\r\n  }\r\n\r\n  private getCoordinates(event: Event): ICellEvent<T> | null {\r\n    const cell = this.getEventCell(event);\r\n    if (cell) {\r\n      const rowIndex = cell.getAttribute('data-row');\r\n      const columnName = cell.getAttribute('data-column');\r\n      if (rowIndex && columnName) {\r\n        const row = this._svc.getRowByIndex(rowIndex);\r\n        const column = this._svc.getColumnByName(columnName);\r\n        return {\r\n          row,\r\n          column: column ? column : new TableColumn(),\r\n          event,\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private onScroll = () => {\r\n    this._headElement.scrollLeft = this._bodyElement.scrollLeft;\r\n  };\r\n\r\n  private getSelectedText() {\r\n    let text = '';\r\n    if (typeof window.getSelection != 'undefined') {\r\n      text = window.getSelection().toString();\r\n    }\r\n    return text;\r\n  }\r\n\r\n  private setPosition(event: MouseEvent) {\r\n    const position = PositionUtil.getPosition(\r\n      {\r\n        top: event.y,\r\n        bottom: event.y,\r\n        left: event.x,\r\n        right: event.x,\r\n      },\r\n      this.menu.nativeElement.getBoundingClientRect(),\r\n      Align.left,\r\n      VerticalAlign.auto\r\n    );\r\n    PositionUtil.setElementPosition(this.menu.nativeElement, position);\r\n  }\r\n\r\n  private toClipboardString(rows: TableRow<T>[], columns: TableColumn[]) {\r\n    return rows.reduce(\r\n      (res: string, currentRow: TableRow<T>, i: number) =>\r\n        `${res}${i === 0 ? '' : '\\n'}${columns.reduce(\r\n          (columnResult: string, column: TableColumn, j: number) =>\r\n            `${columnResult}${j === 0 ? '' : '\\t'}${\r\n              currentRow.data[column.name] ?? ''\r\n            }`,\r\n          ''\r\n        )}`,\r\n      ''\r\n    );\r\n  }\r\n\r\n  private fromClipboard(data: string, columns: TableColumn[]) {\r\n    const rows = data.split('\\n').filter((_) => _?.length > 0);\r\n    const result = rows.map((_) =>\r\n      _.replace('\\r', '').replace('\\n', '').split('\\t')\r\n    );\r\n    return result.map((row: string[]) =>\r\n      row.reduce((res, item, index) => {\r\n        let value: any = item;\r\n        if (\r\n          columns[index]?.filterType === FilterType.number ||\r\n          columns[index]?.filterType === FilterType.list\r\n        ) {\r\n          value = parseFloat(item);\r\n        }\r\n        if (columns[index]?.filterType === FilterType.boolean) {\r\n          value = Boolean(JSON.parse(item.toLowerCase()));\r\n        }\r\n        if (columns[index]) {\r\n          res[columns[index].name] = value;\r\n        }\r\n        return res;\r\n      }, {})\r\n    );\r\n  }\r\n\r\n  private getVisibleColumns(columns: TableColumn[], hidden: string[]) {\r\n    const visible = ArrayUtil.flatten(columns, 'columns', true).filter(\r\n      (_) => hidden.indexOf(_.name) < 0\r\n    );\r\n    return visible.sort((a, b) => Number(b.locked) - Number(a.locked));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit",
                "OnChanges"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "state",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "state",
                                "type": "FilterState",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "scrollToIndex": {
                    "name": "scrollToIndex",
                    "setSignature": {
                        "name": "scrollToIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "index",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 79,
                        "jsdoctags": [
                            {
                                "name": "index",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"column column_auto\">\r\n  <teta-table-head [selectType]=\"selectType\" [showHeadCellMenu]=\"showHeadCellMenu\"></teta-table-head>\r\n  <teta-table-body\r\n    [aggregate]=\"aggregate\"\r\n    [virtual]=\"virtual\"\r\n    [activeRow]=\"activeRow\"\r\n    [additionalComponent]=\"detailComponent\"\r\n    [grouping]=\"grouping\"\r\n    [groupRowComponent]=\"groupRowComponent\"\r\n    [openLevels]=\"openLevels\"\r\n    [selectType]=\"selectType\"\r\n    [rowHeight]=\"rowHeight\"\r\n    [rowClass]=\"rowClass\"\r\n    [tree]=\"tree\"></teta-table-body>\r\n</div>\r\n\r\n<div #contextMenu\r\n     class=\"list shadow-1\"\r\n     style=\"position: fixed; z-index: 2;\"\r\n     [style.visibility]=\"showContextMenu ? 'visible ' : 'hidden'\"\r\n     [tetaClickOutside]=\"showContextMenu\"\r\n     (clickOutside)=\"showContextMenu = false\">\r\n  <ng-container *ngIf=\"contextMenuConfig?.add\">\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"rowAdd()\">\r\n      <teta-icon [name]=\"'add'\" [palette]=\"'text'\"></teta-icon>\r\n      Добавить строку\r\n    </div>\r\n    <div class=\"list-divider\"></div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"contextMenuConfig?.copy\">\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"copy(selectedRowsList)\"\r\n         *ngIf=\"selectedRowsList?.length > 0\">\r\n      <teta-icon [name]=\"'copySelected'\" [palette]=\"'text'\"></teta-icon>\r\n      Копировать выделенные строки\r\n    </div>\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"copy([contextMenuTarget.row])\"\r\n         *ngIf=\"contextMenuTarget\">\r\n      <teta-icon [name]=\"'copy'\" [palette]=\"'text'\"></teta-icon>\r\n      Копировать строку\r\n    </div>\r\n    <div class=\"list-divider\"></div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"contextMenuConfig?.paste\">\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"pasteData()\">\r\n      <teta-icon [name]=\"'paste'\" [palette]=\"'text'\"></teta-icon>\r\n      Вставить\r\n    </div>\r\n    <div class=\"list-divider\"></div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"contextMenuConfig?.delete\">\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"delete(selectedRowsList)\"\r\n         *ngIf=\"selectedRowsList?.length > 0\">\r\n      <teta-icon [name]=\"'deleteSelected'\" [palette]=\"'text'\"></teta-icon>\r\n      Удалить выделенные строки\r\n    </div>\r\n    <div class=\"list-item list-item_interactive\"\r\n         (click)=\"delete([contextMenuTarget.row])\"\r\n         *ngIf=\"contextMenuTarget\">\r\n      <teta-icon [name]=\"'delete'\" [palette]=\"'text'\"></teta-icon>\r\n      Удалить строку\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "TableDemoComponent",
            "id": "component-TableDemoComponent-136509add6c8c7b88717a7faeb4f0501",
            "file": "projects/components/src/component/table/table-demo/table-demo/table-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-demo",
            "styleUrls": [
                "./table-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EditEvent"
                },
                {
                    "name": "editType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EditType"
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "SelectType"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "virtual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dict",
                    "defaultValue": "{\r\n    ram: [\r\n      {id: 8, name: '8'},\r\n      {id: 16, name: '16'},\r\n      {id: 32, name: '32'},\r\n      {id: 64, name: '64'},\r\n      {id: 128, name: '128'},\r\n    ],\r\n    long: []\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDictionary<IIdName[]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "dropdownTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {read: TemplateRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "getLong",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "log",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, TemplateRef, ViewChild, ViewChildren} from '@angular/core';\r\nimport * as faker from 'faker';\r\nimport {TableColumn} from '../../contract/table-column';\r\nimport {FilterType} from '../../../filter/enum/filter-type.enum';\r\nimport {IDictionary} from '../../../../common/contract/i-dictionary';\r\nimport {IIdName} from '../../../../common/contract/i-id-name';\r\nimport {EditType} from '../../enum/edit-type.enum';\r\nimport {SelectType} from '../../enum/select-type.enum';\r\nimport {EditEvent} from '../../enum/edit-event.enum';\r\nimport {TableService} from '../../service/table.service';\r\n\r\n@Component({\r\n  selector: 'teta-table-demo',\r\n  templateUrl: './table-demo.component.html',\r\n  styleUrls: ['./table-demo.component.scss']\r\n})\r\nexport class TableDemoComponent implements OnInit {\r\n  @Input() size: number;\r\n  @Input() virtual: boolean;\r\n  @Input() editType: EditType;\r\n  @Input() selectType: SelectType;\r\n  @Input() editEvent: EditEvent;\r\n  @ViewChild(TemplateRef, {read: TemplateRef, static: true}) dropdownTpl: TemplateRef<any>;\r\n  tableService: TableService<any>;\r\n\r\n  dict: IDictionary<IIdName<any>[]> = {\r\n    ram: [\r\n      {id: 8, name: '8'},\r\n      {id: 16, name: '16'},\r\n      {id: 32, name: '32'},\r\n      {id: 64, name: '64'},\r\n      {id: 128, name: '128'},\r\n    ],\r\n    long: []\r\n  };\r\n  data: any[] = [];\r\n  columns = []\r\n\r\n\r\n  constructor() {\r\n    this.dict['long'] = this.getLong();\r\n  }\r\n\r\n  log = (name, value) => {\r\n    console.log(name, value);\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.data = this.getData(this.size);\r\n    console.log(this.dropdownTpl)\r\n    this.columns = [\r\n      new TableColumn({\r\n        name: 'name',\r\n        flex: 1,\r\n        locked: true,\r\n        filterType: FilterType.string,\r\n        headDropdownTemplate: this.dropdownTpl\r\n      }),\r\n      new TableColumn({\r\n        name: 'date',\r\n        locked: true,\r\n        filterType: FilterType.date,\r\n      }),\r\n      new TableColumn({\r\n        name: 'long',\r\n        locked: true,\r\n        filterType: FilterType.list,\r\n      }),\r\n      new TableColumn({\r\n        name: 'value',\r\n        locked: true,\r\n        filterType: FilterType.number,\r\n      }),\r\n      new TableColumn({\r\n        name: 'summary',\r\n        filterType: FilterType.number,\r\n      }),\r\n      new TableColumn({\r\n        name: 'ram',\r\n        caption: 'RAM',\r\n        filterType: FilterType.list,\r\n      }),\r\n      new TableColumn({\r\n        name: 'location',\r\n        columns: [\r\n          new TableColumn({\r\n            name: 'city',\r\n            filterType: FilterType.string,\r\n          }),\r\n          new TableColumn({\r\n            name: 'state',\r\n            filterType: FilterType.string,\r\n          }),\r\n          new TableColumn({\r\n            name: 'address',\r\n            flex: 2,\r\n            filterType: FilterType.string,\r\n          }),\r\n          new TableColumn({\r\n            name: 'zip',\r\n            filterType: FilterType.string,\r\n          }),\r\n        ],\r\n      }),\r\n    ];\r\n  }\r\n\r\n  getData = (size) => {\r\n    const res = [];\r\n    for (let i = 0; i < size; i++) {\r\n      res.push({\r\n        name: `${faker.name.firstName()} ${faker.name.lastName()}`,\r\n        date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\r\n        long: faker.helpers.randomize([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\r\n        value: faker.datatype.number({min: 0, max: 100}),\r\n        summary: faker.datatype.number({min: 0, max: 100000}),\r\n        ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\r\n        address: faker.address.streetAddress(),\r\n        state: faker.address.state(),\r\n        city: faker.address.city(),\r\n        zip: faker.address.zipCode(),\r\n      });\r\n    }\r\n    return res;\r\n  };\r\n\r\n  getLong = () => {\r\n    const res = [];\r\n    for (let i = 0; i <= 10; i++) {\r\n      res.push({\r\n        id: i,\r\n        name: `${faker.address.city()} ${faker.address.country()} ${faker.address.state()} ${faker.address.zipCode()}`,\r\n      });\r\n    }\r\n    return res;\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-grow: 1;\r\n  min-width: 0;\r\n  min-height: 0;\r\n}\r\n",
                    "styleUrl": "./table-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<teta-table [data]=\"data\"\r\n            [cookieName]=\"'table-stories'\"\r\n            [columns]=\"columns\"\r\n            [virtual]=\"virtual\"\r\n            [dict]=\"dict\"\r\n            [editType]=\"editType\"\r\n            [editEvent]=\"editEvent\"\r\n            [selectType]=\"selectType\"\r\n            (tableService)=\"tableService = $event\"\r\n            (bodyLeft)=\"log('bodyLeft', $event)\"\r\n            (cellClick)=\"log('cellClick', $event)\"\r\n            (cellDoubleClick)=\"log('cellDoubleClick', $event)\"\r\n            (cellEditEnd)=\"log('cellEditEnd', $event)\"\r\n            (cellEditStart)=\"log('cellEditStart', $event)\"\r\n            (cellFocus)=\"log('cellFocus', $event)\"\r\n            (cellKeyUp)=\"log('cellKeyUp', $event)\"\r\n            (rowEditEnd)=\"log('rowEditEnd', $event)\"\r\n            (rowEditStart)=\"log('rowEditStart', $event)\"\r\n            (rowLeft)=\"log('rowLeft', $event)\"\r\n            (selectedRowsChange)=\"log('selectedRowsChange', $event)\"\r\n            (stateChange)=\"log('stateChange', $event)\"\r\n            (valueChange)=\"log('valueChange', $event)\"\r\n            (activeRowChange)=\"log('activeRowChange', $event)\"></teta-table>\r\n<ng-template let-data>\r\n  <div class=\"padding-2\">\r\n    Some additional stuff here\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "TableHeadComponent",
            "id": "component-TableHeadComponent-0339b7dd3d7518f37339bb8f27ee7d72",
            "file": "projects/components/src/component/table/table-head/table-head.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-head",
            "styleUrls": [
                "./table-head.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-head.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SelectType"
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gridTemplateColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectTypeEnum",
                    "defaultValue": "SelectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tableHeadClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.table-head'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLockedGridTemplateColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "TableColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpan",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "track",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.table-head",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "true"
                },
                {
                    "name": "style.grid-template-columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { FilterState } from '../../filter/contarct/filter-state';\r\nimport { TableService } from '../service/table.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { TableUtil } from '../util/table-util';\r\nimport { SelectType } from '../enum/select-type.enum';\r\nimport { combineLatest } from 'rxjs';\r\nimport { ArrayUtil } from '../../../common/util/array-util';\r\n\r\n@Component({\r\n  selector: 'teta-table-head',\r\n  templateUrl: './table-head.component.html',\r\n  styleUrls: ['./table-head.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableHeadComponent<T> implements OnInit, OnDestroy {\r\n  @Input() selectType: SelectType;\r\n  @Input() showHeadCellMenu: boolean;\r\n  @HostBinding('class.table-head') private readonly tableHeadClass = true;\r\n  gridTemplateColumns: string;\r\n\r\n  @HostBinding('style.grid-template-columns')\r\n  get getTemplateColumns() {\r\n    let template = this.gridTemplateColumns;\r\n    if (this.selectType !== SelectType.none) {\r\n      template = `48px ${template}`;\r\n    }\r\n    return template;\r\n  }\r\n\r\n  state: FilterState;\r\n  selectTypeEnum = SelectType;\r\n\r\n  private _alive = true;\r\n  private _columns: TableColumn[] = [];\r\n  private _hiddenColumns: string[] = [];\r\n\r\n  set columns(columns: TableColumn[]) {\r\n    this._columns = columns;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  get columns(): TableColumn[] {\r\n    return this._columns;\r\n  }\r\n\r\n  get locked(): TableColumn[] {\r\n    return this._columns.filter(\r\n      (_) => _.locked === true && this._hiddenColumns.indexOf(_.name) < 0\r\n    );\r\n  }\r\n\r\n  get unlocked(): TableColumn[] {\r\n    return this._columns.filter(\r\n      (_) => _.locked === false && this._hiddenColumns.indexOf(_.name) < 0\r\n    );\r\n  }\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\r\n    combineLatest([this._svc.columns, this._svc.hiddenColumns])\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((values: [TableColumn[], string[]]) => {\r\n        const [columns, hiddenColumns] = values;\r\n        this._hiddenColumns = hiddenColumns;\r\n        this.columns = columns;\r\n\r\n        this.gridTemplateColumns = TableUtil.getGridTemplateColumns(\r\n          ArrayUtil.flatten(columns, 'columns', true)\r\n            .filter((_) => this._hiddenColumns.indexOf(_.name) < 0)\r\n            .sort((a, b) => Number(b.locked) - Number(a.locked))\r\n        );\r\n        this._cdr.markForCheck();\r\n      });\r\n\r\n    this._svc.state.pipe(takeWhile((_) => this._alive)).subscribe((_) => {\r\n      this.state = _;\r\n      this._cdr.markForCheck();\r\n    });\r\n  }\r\n\r\n  getSpan(): string {\r\n    if (this.locked?.length > 0) {\r\n      let span = this.locked.length;\r\n      if (this.selectType !== SelectType.none) {\r\n        span += 1;\r\n      }\r\n      return `span ${span}`;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getLockedGridTemplateColumns(columns: TableColumn[]) {\r\n    let template = TableUtil.getGridTemplateColumns(columns);\r\n    if (this.selectType !== SelectType.none) {\r\n      template = `48px ${template}`;\r\n    }\r\n    return template;\r\n  }\r\n\r\n  track(index: number, item: TableColumn): any {\r\n    return item.name;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-head.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getTemplateColumns": {
                    "name": "getTemplateColumns",
                    "getSignature": {
                        "name": "getTemplateColumns",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "columns",
                                "type": "TableColumn[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "columns",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 52
                    }
                },
                "locked": {
                    "name": "locked",
                    "getSignature": {
                        "name": "locked",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 56
                    }
                },
                "unlocked": {
                    "name": "unlocked",
                    "getSignature": {
                        "name": "unlocked",
                        "type": "[]",
                        "returnType": "TableColumn[]",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"table-head_locked\"\r\n     *ngIf=\"locked?.length\"\r\n     [style.grid-template-columns]=\"getLockedGridTemplateColumns(locked)\"\r\n     [style.grid-column-end]=\"getSpan()\">\r\n  <teta-selection-head-cell *ngIf=\"selectType !== selectTypeEnum.none\"></teta-selection-head-cell>\r\n  <ng-container *ngFor=\"let column of locked; trackBy: track\">\r\n    <teta-table-head-group\r\n      class=\"table-head__group\"\r\n      [showHeadCellMenu]=\"showHeadCellMenu\"\r\n      [column]=\"column\"></teta-table-head-group>\r\n  </ng-container>\r\n</div>\r\n<ng-container *ngIf=\"unlocked?.length\">\r\n  <teta-selection-head-cell *ngIf=\"selectType !== selectTypeEnum.none && locked?.length < 1\"></teta-selection-head-cell>\r\n  <ng-container *ngFor=\"let column of unlocked; trackBy: track\">\r\n    <teta-table-head-group\r\n      class=\"table-head__group\"\r\n      [showHeadCellMenu]=\"showHeadCellMenu\"\r\n      [column]=\"column\"></teta-table-head-group>\r\n  </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "TableHeadGroupComponent",
            "id": "component-TableHeadGroupComponent-0646ef95962a4d74433fe6ac73c48a80",
            "file": "projects/components/src/component/table/table-head-group/table-head-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-table-head-group",
            "styleUrls": [
                "./table-head-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-head-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": ""
                },
                {
                    "name": "showHeadCellMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableColumn",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "columnIsHidden",
                    "args": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "TableColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.grid-column-end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TableColumn } from '../contract/table-column';\r\nimport { TableUtil } from '../util/table-util';\r\nimport { TableService } from '../service/table.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-table-head-group',\r\n  templateUrl: './table-head-group.component.html',\r\n  styleUrls: ['./table-head-group.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableHeadGroupComponent<T> implements OnInit, OnDestroy {\r\n  @Input() showHeadCellMenu: boolean;\r\n\r\n  @Input()\r\n  set column(column: TableColumn) {\r\n    this._column = column;\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  private _alive = true;\r\n  private _column: TableColumn;\r\n  private _hiddenColumns: string[];\r\n\r\n  private get _leaves() {\r\n    return TableUtil.getColumnLeaves(this._column)?.filter(\r\n      (_) => this._hiddenColumns.indexOf(_.name) < 0\r\n    );\r\n  }\r\n\r\n  @HostBinding('style.grid-column-end')\r\n  get gridColumnEnd(): string {\r\n    if (this._leaves?.length > 0) {\r\n      return `span ${this._leaves.length}`;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  get gridTemplateColumns(): string {\r\n    return TableUtil.getGridTemplateColumns(this._leaves);\r\n  }\r\n\r\n  constructor(private _svc: TableService<T>, private _cdr: ChangeDetectorRef) {\r\n    this._svc.hiddenColumns\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((_) => {\r\n        this._hiddenColumns = _;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  columnIsHidden(column: TableColumn) {\r\n    return this._svc.columnIsHidden(column);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-head-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "TableService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "column": {
                    "name": "column",
                    "setSignature": {
                        "name": "column",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "column",
                                "type": "TableColumn",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "TableColumn",
                        "line": 29
                    }
                },
                "_leaves": {
                    "name": "_leaves",
                    "getSignature": {
                        "name": "_leaves",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "gridColumnEnd": {
                    "name": "gridColumnEnd",
                    "getSignature": {
                        "name": "gridColumnEnd",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "gridTemplateColumns": {
                    "name": "gridTemplateColumns",
                    "getSignature": {
                        "name": "gridTemplateColumns",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"column.columns && column.columns.length > 0\">\r\n  <div class=\"table-head__group__container\">\r\n    <div class=\"table-head__group__caption\">\r\n      {{column.caption}}\r\n    </div>\r\n    <div class=\"table-head__group__children\" [style.grid-template-columns]=\"gridTemplateColumns\">\r\n      <ng-container *ngFor=\"let col of column.columns\">\r\n        <teta-table-head-group\r\n          class=\"table-head__group\"\r\n          *ngIf=\"!columnIsHidden(col)\"\r\n          [showHeadCellMenu]=\"showHeadCellMenu\"\r\n          [column]=\"col\"></teta-table-head-group>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"!column.columns || column.columns.length === 0\">\r\n  <teta-head-cell\r\n    *ngIf=\"!columnIsHidden(column)\"\r\n    class=\"table-head__cell\"\r\n    [showHeadCellMenu]=\"showHeadCellMenu\"\r\n    [attr.data-column]=\"column.name\"\r\n    [column]=\"column\"></teta-head-cell>\r\n</ng-container>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-b28d01d9e26121df85a1510f5b5abeca",
            "file": "projects/components/src/component/tabs/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.",
                    "description": "<p>An identifier of an initially selected (active) tab. Use the &quot;select&quot; method to switch a tab programmatically.</p>\n",
                    "line": 29,
                    "type": "string | null"
                },
                {
                    "name": "destroyOnHide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the closed tabs should be hidden without destroying them",
                    "description": "<p>Whether the closed tabs should be hidden without destroying them</p>\n",
                    "line": 34,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "tabChange",
                    "defaultValue": "new EventEmitter<ITabChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n",
                    "description": "<p>A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classTabs",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.tabs'"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getTabById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TabComponent | null",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "tabId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects the tab with the given id and shows its associated pane.\nAny other tab that was previously selected becomes unselected and its associated pane is hidden.\n",
                    "description": "<p>Selects the tab with the given id and shows its associated pane.\nAny other tab that was previously selected becomes unselected and its associated pane is hidden.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tabId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.tabs",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentChecked,\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\nexport interface ITabChangeEvent {\r\n  activeId: string | null;\r\n  nextId: string;\r\n  preventDefault: () => void;\r\n}\r\n\r\n@Component({\r\n  selector: 'teta-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss'],\r\n})\r\nexport class TabsComponent implements AfterContentChecked {\r\n  @HostBinding('class.tabs') classTabs = true;\r\n  /**\r\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\r\n   */\r\n  @Input() activeId: string | null;\r\n\r\n  /**\r\n   * Whether the closed tabs should be hidden without destroying them\r\n   */\r\n  @Input() destroyOnHide = true;\r\n\r\n  /**\r\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\r\n   */\r\n  @Output() tabChange = new EventEmitter<ITabChangeEvent>();\r\n\r\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Selects the tab with the given id and shows its associated pane.\r\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n   */\r\n  select(tabId: string): void {\r\n    const selectedTab = this._getTabById(tabId);\r\n    if (\r\n      selectedTab &&\r\n      !selectedTab.disabled &&\r\n      this.activeId !== selectedTab.id\r\n    ) {\r\n      let defaultPrevented = false;\r\n\r\n      this.tabChange.emit({\r\n        activeId: this.activeId,\r\n        nextId: selectedTab.id,\r\n        preventDefault: () => {\r\n          defaultPrevented = true;\r\n        },\r\n      });\r\n\r\n      if (!defaultPrevented) {\r\n        this.activeId = selectedTab.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    const activeTab = this._getTabById(this.activeId);\r\n    this.activeId = activeTab\r\n      ? activeTab.id\r\n      : this.tabs.length\r\n      ? this.tabs.first.id\r\n      : null;\r\n  }\r\n\r\n  private _getTabById(id: string | null): TabComponent | null {\r\n    const tabsWithId: TabComponent[] = this.tabs.filter((tab) => tab.id === id);\r\n    return tabsWithId.length ? tabsWithId[0] : null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "AfterContentChecked"
            ],
            "templateData": "<div class=\"tabs-head\" role=\"tablist\">\r\n  <div class=\"tabs-head-item\"\r\n       *ngFor=\"let tab of tabs\"\r\n       (click)=\"select(tab.id);\"\r\n       [class.tabs-head-item_active]=\"tab.id === activeId\"\r\n       [class.tabs-head-item_disabled]=\"tab.disabled\">\r\n    <span [id]=\"tab.id\" class=\"tabs-title\"\r\n          role=\"tab\"\r\n          [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\r\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\r\n          [attr.aria-expanded]=\"tab.id === activeId\"\r\n          [attr.aria-disabled]=\"tab.disabled\">\r\n      {{tab.title}}\r\n      <ng-template [ngTemplateOutlet]=\"tab.titleTpl?.template\"></ng-template>\r\n    </span>\r\n  </div>\r\n</div>\r\n<div class=\"tabs-content\">\r\n  <ng-template ngFor let-tab [ngForOf]=\"tabs\">\r\n    <ng-container *ngIf=\"!destroyOnHide || tab.id === activeId\">\r\n      <ng-template [ngTemplateOutlet]=\"tab.contentTpl?.template\"></ng-template>\r\n    </ng-container>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "TextFieldComponent",
            "id": "component-TextFieldComponent-d819b89777bd36bceb74f8cc20464ab0",
            "file": "projects/components/src/component/input/text-field/text-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextFieldComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "teta-text-field",
            "styleUrls": [
                "./text-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "leftIconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "onlyNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "textField",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.text-field'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "emitBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "0"
                },
                {
                    "name": "class.text-field",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "true"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'teta-text-field',\r\n  templateUrl: './text-field.component.html',\r\n  styleUrls: ['./text-field.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextFieldComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TextFieldComponent implements ControlValueAccessor {\r\n  @Input() placeholder = '';\r\n  @Input() leftIconName?: string;\r\n  @HostBinding('class.text-field_disabled')\r\n  @Input()\r\n  disabled = false;\r\n  @Input() onlyNumber = false;\r\n  @HostBinding('class.text-field_invalid')\r\n  @Input()\r\n  invalid: boolean;\r\n  @ViewChild('input', {static: false}) input: ElementRef;\r\n  @HostBinding('attr.tabindex')\r\n  private readonly tabindex = 0;\r\n  @HostBinding('class.text-field')\r\n  private readonly textField = true;\r\n  value = '';\r\n\r\n  constructor(private _cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  @HostListener('click') onFocus() {\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  keyPress(event: KeyboardEvent) {\r\n    if (event.key === 'Enter' || event.keyCode === 13) {\r\n      this.input.nativeElement.blur();\r\n    }\r\n  }\r\n\r\n  emitBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  writeValue(input: string): void {\r\n    this.value = input;\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  onChange(input: string): void {\r\n  }\r\n\r\n  onTouched(): void {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<teta-icon *ngIf=\"leftIconName\" [name]=\"leftIconName\"></teta-icon>\r\n<input\r\n  #input\r\n  [ngModel]=\"value\"\r\n  [tetaOnlyNumber]=\"onlyNumber\"\r\n  (ngModelChange)=\"value = $event; onChange($event);\"\r\n  [placeholder]=\"placeholder\"\r\n  [disabled]=\"disabled\"\r\n  (blur)=\"emitBlur()\"\r\n  (keydown)=\"keyPress($event)\"\r\n  autocomplete=\"off\"\r\n  type=\"text\"\r\n/>\r\n<teta-icon\r\n  *ngIf=\"value && !disabled\"\r\n  class=\"close-icon\"\r\n  [name]=\"'closeCircle'\"\r\n  (click)=\"value = ''; onChange('');\"\r\n></teta-icon>\r\n"
        },
        {
            "name": "ThemeSwitchComponent",
            "id": "component-ThemeSwitchComponent-390b150206fbe86c0ab06f7e277ebd97",
            "file": "projects/components/src/component/theme-switch/theme-switch/theme-switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-theme-switch",
            "styleUrls": [
                "./theme-switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "palette",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "view",
                    "defaultValue": "'ghost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ButtonViewType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ThemeSwitchService } from '../theme-switch.service';\r\nimport { Observable } from 'rxjs';\r\nimport {ButtonViewType} from '../../button/button/button.component';\r\n\r\n@Component({\r\n  selector: 'teta-theme-switch',\r\n  templateUrl: './theme-switch.component.html',\r\n  styleUrls: ['./theme-switch.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ThemeSwitchComponent implements OnInit {\r\n  @Input() palette = 'text';\r\n  @Input() view: ButtonViewType = 'ghost';\r\n  theme: Observable<boolean>;\r\n\r\n  constructor(private _svc: ThemeSwitchService) {\r\n    this.theme = this._svc.theme;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  switchTheme() {\r\n    this._svc.switchTheme();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./theme-switch.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_svc",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_svc",
                        "type": "ThemeSwitchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button teta-button [palette]=\"palette\" [view]=\"view\" [square]=\"true\" (click)=\"switchTheme()\">\r\n  <teta-icon [name]=\"'lamp'\" [palette]=\"'text'\"></teta-icon>\r\n</button>\r\n"
        },
        {
            "name": "TimePartControlComponent",
            "id": "component-TimePartControlComponent-49df436cacf3ecf12028dbb8afbe5e3b",
            "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TIME_PART_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-time-part-control",
            "styleUrls": [
                "./time-part-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-part-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "max",
                    "defaultValue": "59",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scroll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "down",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "up",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const TIME_PART_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => TimePartControlComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-time-part-control',\r\n  templateUrl: './time-part-control.component.html',\r\n  styleUrls: ['./time-part-control.component.scss'],\r\n  providers: [TIME_PART_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TimePartControlComponent implements OnInit, ControlValueAccessor {\r\n  @Input() min = 0;\r\n  @Input() max = 59;\r\n  @Input() disabled: boolean;\r\n\r\n  private _value: number;\r\n\r\n  set value(value: number) {\r\n    this._value = value;\r\n    this.onChange(this._value);\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  constructor(private _cdr: ChangeDetectorRef) {}\r\n\r\n  up() {\r\n    this.value = this.value < this.max ? this.value + 1 : this.min;\r\n  }\r\n\r\n  down() {\r\n    this.value = this.value > this.min ? this.value - 1 : this.max;\r\n  }\r\n\r\n  scroll = (e: any) => {\r\n    const delta = e?.deltaY ?? e;\r\n\r\n    if (e instanceof WheelEvent) {\r\n      e.preventDefault();\r\n    }\r\n    if (delta > 0) {\r\n      this.down();\r\n    } else {\r\n      this.up();\r\n    }\r\n  };\r\n\r\n  ngOnInit() {}\r\n\r\n  writeValue(model: number) {\r\n    this._value = model;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
                    "styleUrl": "./time-part-control.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<button teta-button [square]=\"true\" (click)=\"up()\" [palette]=\"'text'\" [view]=\"'ghost'\">\r\n  <teta-icon [name]=\"'arrowUpKey'\"></teta-icon>\r\n</button>\r\n<div (wheel)=\"scroll($event);\" class=\"row row_auto font-body-3 height-6 width-6 align-center justify-content-center\">\r\n  {{value | tetaPrependZero: 2}}\r\n</div>\r\n<button teta-button [square]=\"true\" (click)=\"down()\" [palette]=\"'text'\" [view]=\"'ghost'\">\r\n  <teta-icon [name]=\"'arrowDownKey'\"></teta-icon>\r\n</button>\r\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-b8037e54455bce261b27a78325430c7a",
            "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TOGGLE_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "teta-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "компонент неактивен",
                    "description": "<p>компонент неактивен</p>\n",
                    "line": 44,
                    "type": "boolean"
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "palette",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Значение</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nЗначение\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabindex'"
                        }
                    ]
                },
                {
                    "name": "toggleClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.toggle'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "class.toggle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const TOGGLE_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'teta-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n  providers: [TOGGLE_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToggleComponent implements ControlValueAccessor, OnInit {\r\n  @HostBinding('attr.tabindex') tabindex = 0;\r\n  @HostBinding('class.toggle') toggleClass = true;\r\n\r\n  get paletteClass() {\r\n    if (this.palette) {\r\n      return `toggle-button-${this.palette}`;\r\n    }\r\n  }\r\n\r\n  @Input() palette = 'primary';\r\n  @Input() noLabel: boolean;\r\n\r\n  /**\r\n   * компонент неактивен\r\n   */\r\n  @HostBinding('class.toggle_disabled')\r\n  @Input()\r\n  disabled: boolean;\r\n\r\n  /**\r\n   * Значение\r\n   */\r\n  private model$: boolean;\r\n\r\n  get model(): any {\r\n    return this.model$;\r\n  }\r\n\r\n  set model(v: any) {\r\n    if (v !== this.model$) {\r\n      this.model$ = v;\r\n      this.onChange(v);\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  @HostListener('click')\r\n  changeValue() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.model = !this.model;\r\n  }\r\n\r\n  writeValue(model: boolean) {\r\n    this.model$ = model;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  onChange(_: any) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "paletteClass": {
                    "name": "paletteClass",
                    "getSignature": {
                        "name": "paletteClass",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                },
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "any",
                        "returnType": "any",
                        "line": 51
                    }
                }
            },
            "templateData": "<span class=\"font-body-3 row_auto\" *ngIf=\"!noLabel\">\r\n  <ng-content></ng-content>\r\n</span>\r\n<div class=\"toggle-button\" [class.toggle-button-on]=\"model\" [ngClass]=\"paletteClass\">\r\n  <div class=\"toggle-button-circle\"></div>\r\n</div>\r\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-df7bcc3a6f35b114a6f22d0ba59dc1c3",
            "file": "projects/components/src/component/toolbar/toolbar/toolbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'teta-toolbar',\r\n  templateUrl: './toolbar.component.html',\r\n  styleUrls: ['./toolbar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ToolbarComponent implements OnInit {\r\n  @Input() palette: string;\r\n  @Input() class;\r\n\r\n  @HostBinding('class')\r\n  private get getClass() {\r\n    const result = [this.class, 'toolbar', 'toolbar_panel'];\r\n    if (this.palette) {\r\n      result.push(`toolbar-${this.palette}`);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-e446491ba676487f792d115ed58cc2f5",
            "file": "projects/chart/src/chart/chart-container/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "tooltips",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "getPoisition",
                    "args": [
                        {
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ left: string; top: string; bottom: string; right: string; }",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "type": "IPointer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  bufferCount,\r\n  combineLatest,\r\n  concat,\r\n  concatAll,\r\n  concatMap,\r\n  debounce,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  last,\r\n  map,\r\n  merge,\r\n  mergeAll,\r\n  mergeMap,\r\n  Observable,\r\n  of,\r\n  pairwise,\r\n  reduce,\r\n  scan,\r\n  shareReplay,\r\n  switchMap,\r\n  takeLast,\r\n  takeWhile,\r\n  tap,\r\n} from 'rxjs';\r\nimport { ChartService } from '../../chart.service';\r\nimport { IPointer } from '../../model/i-pointer';\r\n\r\n@Component({\r\n  selector: 'teta-tooltip',\r\n  templateUrl: './tooltip.component.html',\r\n  styleUrls: ['./tooltip.component.scss'],\r\n})\r\nexport class TooltipComponent implements OnInit, OnDestroy {\r\n  @Input() size: DOMRect;\r\n\r\n  position: Observable<{\r\n    left: string;\r\n    top: string;\r\n    bottom: string;\r\n    right: string;\r\n  }>;\r\n\r\n  tooltips = [];\r\n\r\n  private alive = true;\r\n\r\n  constructor(private svc: ChartService, private cdr: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.position = this.svc.pointerMove.pipe(\r\n      filter(({ event }) => event),\r\n      map((_) => {\r\n        return this.getPoisition(_);\r\n      }),\r\n      tap((_) => this.cdr.detectChanges())\r\n    );\r\n\r\n    merge(\r\n      this.svc.pointerMove.pipe(tap((_) => (this.tooltips = []))),\r\n      this.svc.tooltips\r\n    )\r\n      .pipe(\r\n        takeWhile((_) => this.alive),\r\n        filter((_) => !_?.event),\r\n        map((tooltip: any) => {\r\n          if (tooltip) {\r\n            this.tooltips.push(tooltip);\r\n          }\r\n          return this.tooltips;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  private getPoisition({ event }: IPointer) {\r\n    const centerX = this.size.width / 2;\r\n    const centerY = this.size.height / 2;\r\n\r\n    const padding = { x: 10, y: 10 };\r\n\r\n    const scene = {\r\n      left: event.pageX > centerX ? 'initial' : `${event.pageX + padding.x}px`,\r\n      top: event.pageY > centerY ? 'initial' : `${event.pageY + padding.y}px`,\r\n      bottom:\r\n        event.pageY > centerY\r\n          ? `${window.innerHeight - event.pageY}px`\r\n          : 'initial',\r\n      right:\r\n        event.pageX > centerX\r\n          ? `${window.innerWidth - event.pageX + padding.x}px`\r\n          : 'initial',\r\n    };\r\n\r\n    return scene;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: absolute;\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "svc",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"position | async as p\">\r\n  <div class=\"color-text-90 bg-background-50 shadow-2\"\r\n       [style.position]=\"'fixed'\"\r\n       style=\"pointer-events: none\"\r\n       [style.left]=\"p.left\"\r\n       [style.top]=\"p.top\"\r\n       [style.bottom]=\"p.bottom\"\r\n       [style.right]=\"p.right\">{{ tooltips |  json }}\r\n  </div>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-126c1903975d51f0cbfc0345551e379b",
            "file": "projects/components/src/component/tree/tree/tree.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TreeService"
                }
            ],
            "selector": "teta-tree",
            "styleUrls": [
                "./tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childNodeName",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any"
                },
                {
                    "name": "compareItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "function"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ITreeData[]"
                },
                {
                    "name": "openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "[]"
                },
                {
                    "name": "padding",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "openItemsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                },
                {
                    "name": "service",
                    "defaultValue": "new EventEmitter<TreeService>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<TreeService>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeData[]",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TetaTemplateDirective",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TetaTemplateDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { ITreeData } from '../../../common/contract/i-tree-data';\r\nimport { TreeService } from '../tree.service';\r\nimport { TetaTemplateDirective } from '../../../directive/teta-template/teta-template.directive';\r\nimport { filter, takeWhile } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'teta-tree',\r\n  templateUrl: './tree.component.html',\r\n  styleUrls: ['./tree.component.scss'],\r\n  providers: [TreeService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TreeComponent\r\n  implements OnInit, AfterContentInit, OnChanges, OnDestroy\r\n{\r\n  @Input() data: ITreeData[];\r\n  @Output() service: EventEmitter<TreeService> =\r\n    new EventEmitter<TreeService>();\r\n  @Input() class;\r\n  @Input() padding = 8;\r\n  @Input() childNodeName = 'children';\r\n\r\n  @Input()\r\n  set openItems(items: ITreeData[]) {\r\n    this._openItems = items;\r\n    this._service.setOpenItems(items);\r\n  }\r\n\r\n  get noChildMode(): boolean {\r\n    const hasChildren = this.data.find(\r\n      (_) => _[this.childNodeName]?.length > 0\r\n    );\r\n    return !hasChildren;\r\n  }\r\n\r\n  @Output() openItemsChange = new EventEmitter();\r\n\r\n  @ContentChild(TetaTemplateDirective, { static: true })\r\n  template: TetaTemplateDirective;\r\n\r\n  private _openItems: ITreeData[];\r\n  private _alive = true;\r\n\r\n  constructor(private _service: TreeService, private _cdr: ChangeDetectorRef) {\r\n    this._service.openItems\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        filter((_) => this._openItems !== _)\r\n      )\r\n      .subscribe((_) => this.openItemsChange.emit(_));\r\n  }\r\n\r\n  @Input()\r\n  set compareItems(func: (item: ITreeData) => any) {\r\n    this._service.compareItems = func;\r\n  }\r\n\r\n  @HostBinding('class')\r\n  private get getClass(): string {\r\n    const result = [this.class, 'tree'];\r\n    return result.join(' ');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.service.emit(this._service);\r\n  }\r\n\r\n  ngAfterContentInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "openItems": {
                    "name": "openItems",
                    "setSignature": {
                        "name": "openItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "items",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "items",
                                "type": "ITreeData[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "noChildMode": {
                    "name": "noChildMode",
                    "getSignature": {
                        "name": "noChildMode",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "compareItems": {
                    "name": "compareItems",
                    "setSignature": {
                        "name": "compareItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "func",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "item",
                                        "type": "ITreeData",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ]
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "func",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "item",
                                        "type": "ITreeData",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ],
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "getClass": {
                    "name": "getClass",
                    "getSignature": {
                        "name": "getClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 74
                    }
                }
            },
            "templateData": "<ng-container *ngFor=\"let item of data\">\r\n  <teta-tree-item [item]=\"item\"\r\n                  [depth]=\"0\"\r\n                  [padding]=\"padding\"\r\n                  [childNodeName]=\"childNodeName\"\r\n                  [noChildMode]=\"noChildMode\"\r\n                  [template]=\"template?.template\"></teta-tree-item>\r\n</ng-container>\r\n"
        },
        {
            "name": "TreeItemComponent",
            "id": "component-TreeItemComponent-2236c8812060afbac3c5bb6e2e2445d8",
            "file": "projects/components/src/component/tree/tree-item/tree-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tree-item",
            "styleUrls": [
                "./tree-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childNodeName",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "depth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ITreeData"
                },
                {
                    "name": "noChildMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "padding",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number"
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "itemIsOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeService",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treeItemClass",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.tree__item-container'"
                        }
                    ],
                    "modifierKind": [
                        121,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.tree__item-container",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "true"
                }
            ],
            "hostListeners": [],
            "description": "<p>TODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand</p>\n",
            "rawdescription": "\n\nTODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ITreeData } from '../../../common/contract/i-tree-data';\r\nimport { TreeService } from '../tree.service';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n/**\r\n * TODO: Lazy загрузка дочерних элементов, Output onExpand, шаблон для иконки expand\r\n */\r\n@Component({\r\n  selector: 'teta-tree-item',\r\n  templateUrl: './tree-item.component.html',\r\n  styleUrls: ['./tree-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('children', [\r\n      transition('void => *', [\r\n        style({ opacity: '0' }),\r\n        animate(200, style({ opacity: '1' })),\r\n      ]),\r\n      transition('* => void', [animate(200, style({ opacity: '0' }))]),\r\n    ]),\r\n  ],\r\n})\r\nexport class TreeItemComponent implements OnInit, OnChanges, OnDestroy {\r\n  @Input() item: ITreeData;\r\n  @Input() depth = 0;\r\n  @Input() padding = 16;\r\n  @Input() childNodeName = 'children';\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() noChildMode: boolean;\r\n\r\n  @HostBinding('class.tree__item-container') private readonly treeItemClass =\r\n    true;\r\n\r\n  itemIsOpen = false;\r\n\r\n  private _alive = true;\r\n\r\n  get computedDepth(): number {\r\n    return (\r\n      this.depth +\r\n      (this.item[this.childNodeName]?.length > 0 ? 0 : this.noChildMode ? 1 : 2)\r\n    );\r\n  }\r\n\r\n  constructor(public service: TreeService, private _cdr: ChangeDetectorRef) {}\r\n\r\n  openItem() {\r\n    this.service.openItem(this.item);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.service.openItems\r\n      .pipe(takeWhile((_) => this._alive))\r\n      .subscribe((_) => {\r\n        const found = _?.find(\r\n          (x) =>\r\n            this.service.compareItems(x) ===\r\n            this.service.compareItems(this.item)\r\n        );\r\n        this.itemIsOpen = found != null;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "computedDepth": {
                    "name": "computedDepth",
                    "getSignature": {
                        "name": "computedDepth",
                        "type": "number",
                        "returnType": "number",
                        "line": 52
                    }
                }
            },
            "templateData": "<div class=\"tree__item_content\" [ngClass]=\"'tree__item_content-' + computedDepth\" (click)=\"openItem()\">\r\n  <ng-container\r\n    *ngTemplateOutlet=\"template; context: {$implicit: item, item: item, open: itemIsOpen, service: service, depth: depth}\"></ng-container>\r\n</div>\r\n<div [@children] class=\"tree__children\" *ngIf=\"itemIsOpen && item[childNodeName]?.length > 0\">\r\n  <teta-tree-item *ngFor=\"let child of item[childNodeName];\"\r\n                  [item]=\"child\"\r\n                  [template]=\"template\"\r\n                  [padding]=\"padding\"\r\n                  [childNodeName]=\"childNodeName\"\r\n                  [depth]=\"depth + 1\"></teta-tree-item>\r\n</div>\r\n"
        },
        {
            "name": "TreeItemToggleComponent",
            "id": "component-TreeItemToggleComponent-20ea5e167fa28cb3e5121bde03df8007",
            "file": "projects/components/src/component/tree/tree-item-toggle/tree-item-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-tree-item-toggle",
            "styleUrls": [
                "./tree-item-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-item-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ITreeData"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TreeService } from '../tree.service';\r\nimport { ITreeData } from '../../../common/contract/i-tree-data';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'teta-tree-item-toggle',\r\n  templateUrl: './tree-item-toggle.component.html',\r\n  styleUrls: ['./tree-item-toggle.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TreeItemToggleComponent implements OnInit {\r\n  @Input() item: ITreeData;\r\n  open: Observable<boolean>;\r\n\r\n  constructor(public service: TreeService, private _cdr: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.open = this.service.openItems.pipe(\r\n      map((_) => {\r\n        const found = _?.find(\r\n          (x) =>\r\n            this.service.compareItems(x) ===\r\n            this.service.compareItems(this.item)\r\n        );\r\n        return found != null;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./tree-item-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<teta-icon [name]=\"(open | async) ? 'arrowDownKey' : 'arrowRightKey'\"\r\n           class=\"tree__icon\"></teta-icon>\r\n"
        },
        {
            "name": "XAxisComponent",
            "id": "component-XAxisComponent-30b3f7350c5e7128d967914485322cdb",
            "file": "projects/chart/src/chart/chart-container/x-axis/x-axis.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-x-axis]",
            "styleUrls": [
                "./x-axis.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./x-axis.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "axis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Axis"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svg'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "draw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Axis } from '../../core/axis/axis';\r\nimport { ScaleService } from '../../scale.service';\r\nimport { ChartService } from '../../chart.service';\r\nimport { takeWhile, tap } from 'rxjs';\r\nimport * as d3 from 'd3';\r\n\r\n@Component({\r\n  selector: '[teta-x-axis]',\r\n  templateUrl: './x-axis.component.html',\r\n  styleUrls: ['./x-axis.component.scss'],\r\n})\r\nexport class XAxisComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @Input() axis: Axis;\r\n  @ViewChild('svg') node: ElementRef;\r\n\r\n  private _alive = true;\r\n\r\n  constructor(\r\n    private scaleService: ScaleService,\r\n    private chartService: ChartService,\r\n    private cdr: ChangeDetectorRef\r\n  ) {\r\n    this.chartService.size\r\n      .pipe(\r\n        takeWhile(() => this._alive),\r\n        tap(() => {\r\n          this.draw();\r\n          this.cdr.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.draw();\r\n  }\r\n\r\n  private draw() {\r\n    const scale = this.scaleService.xScales.get(this.axis.index);\r\n\r\n    const axis = this.axis.options.opposite\r\n      ? d3\r\n          .axisTop(scale)\r\n          .tickValues(this.axis.tickValues)\r\n          .tickFormat(\r\n            this.axis.options.tickFormat ?? this.axis.defaultFormatter()\r\n          )\r\n      : d3\r\n          .axisBottom(scale)\r\n          .tickValues(this.axis.tickValues)\r\n          .tickFormat(\r\n            this.axis.options.tickFormat ?? this.axis.defaultFormatter()\r\n          );\r\n\r\n    d3.select(this.node.nativeElement)\r\n      .call(axis)\r\n      .call((_) => _.select('.domain').remove());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host .tick {\r\n  stroke: var(--color-text-20);\r\n}\r\n",
                    "styleUrl": "./x-axis.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<svg:g #svg></svg:g>\r\n"
        },
        {
            "name": "YAxisComponent",
            "id": "component-YAxisComponent-471a7901ef05c7878c191c384feea023",
            "file": "projects/chart/src/chart/chart-container/y-axis/y-axis.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[teta-y-axis]",
            "styleUrls": [
                "./y-axis.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./y-axis.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "axis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Axis"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "DOMRect"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svg'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "draw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getLabelTransform",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Axis } from '../../core/axis/axis';\r\nimport * as d3 from 'd3';\r\nimport { ScaleService } from '../../scale.service';\r\nimport { ChartService } from '../../chart.service';\r\nimport { takeWhile, tap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: '[teta-y-axis]',\r\n  templateUrl: './y-axis.component.html',\r\n  styleUrls: ['./y-axis.component.scss'],\r\n})\r\nexport class YAxisComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @Input() axis: Axis;\r\n  @Input() size: DOMRect;\r\n  @ViewChild('svg') node: ElementRef;\r\n\r\n  private _alive = true;\r\n\r\n  constructor(private scaleService: ScaleService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this._alive = false;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.draw();\r\n  }\r\n\r\n  getLabelTransform() {\r\n    return `translate(${\r\n      this.axis.options.opposite\r\n        ? this.axis.selfSize - 24\r\n        : -this.axis.selfSize + 24\r\n    }, ${this.size.height / 2}) rotate(${\r\n      this.axis.options.opposite ? '90' : '-90'\r\n    })`;\r\n  }\r\n\r\n  private draw() {\r\n    const scale = this.scaleService.yScales.get(this.axis.index);\r\n\r\n    const axis = this.axis.options.opposite\r\n      ? d3\r\n          .axisRight(scale)\r\n          .tickValues(this.axis.tickValues)\r\n          .tickFormat(\r\n            this.axis.options.tickFormat ?? this.axis.defaultFormatter()\r\n          )\r\n      : d3\r\n          .axisLeft(scale)\r\n          .tickValues(this.axis.tickValues)\r\n          .tickFormat(\r\n            this.axis.options.tickFormat ?? this.axis.defaultFormatter()\r\n          );\r\n\r\n    d3.select(this.node.nativeElement)\r\n      .call(axis)\r\n      .call((_) => _.select('.domain').remove());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  shape-rendering: crispEdges;\r\n}\r\n\r\n::ng-deep .tick text {\r\n  fill: var(--color-text-70);\r\n}\r\n::ng-deep .tick line {\r\n  stroke: var(--color-text-20);\r\n}\r\n:host .label-axis {\r\n  fill: var(--color-text-70);\r\n}\r\n",
                    "styleUrl": "./y-axis.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "scaleService",
                        "type": "ScaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<svg:g #svg></svg:g>\r\n<svg:g class=\"label-axis font-caption\" [attr.transform]=\"getLabelTransform()\">\r\n  <text dy=\"-8px\" text-anchor=\"middle\" dominant-baseline=\"middle\">{{ axis.options.title }}</text>\r\n</svg:g>\r\n"
        },
        {
            "name": "YearSelectComponent",
            "id": "component-YearSelectComponent-c85880fbb7693b2bf02f87621cda50c7",
            "file": "projects/components/src/component/date-picker/year-select/year-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "teta-year-select",
            "styleUrls": [
                "./year-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./year-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowableRange",
                    "defaultValue": "[1900, 2100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number[]"
                },
                {
                    "name": "currentYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Date"
                },
                {
                    "name": "size",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "yearApplied",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "yearSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "checkRanges",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "decreaseInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "decreaseYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "increaseInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "increaseYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "initMaxYearList",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "initMinYearList",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "initYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "isMaxInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "isMaxYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201
                },
                {
                    "name": "isMinInvalid",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "isMinYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "isYearDisabled",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "maxYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "maxYearList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "minYearDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "minYearList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scrollYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "setYear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "shiftYearSelector",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "years",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { fromEvent } from 'rxjs';\r\nimport { takeWhile, tap } from 'rxjs/operators';\r\nimport { PickerTouchService } from '../service/picker-touch.service';\r\n\r\n@Component({\r\n  selector: 'teta-year-select',\r\n  templateUrl: './year-select.component.html',\r\n  styleUrls: ['./year-select.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class YearSelectComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @Input() currentYear: number;\r\n  @Input() today: Date;\r\n  @Input() size = 8;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  @Input() allowableRange: number[] = [1900, 2100];\r\n  @Output() yearSelected = new EventEmitter<number>();\r\n  @Output() yearApplied = new EventEmitter<number>();\r\n\r\n  minYearDate: Date;\r\n  maxYearDate: Date;\r\n  years: number[];\r\n  minYearList: number[];\r\n  maxYearList: number[];\r\n  decreaseInterval: number;\r\n  increaseInterval: number;\r\n  private _alive = true;\r\n\r\n  constructor(\r\n    private _cdr: ChangeDetectorRef,\r\n    private _pickerTouchService: PickerTouchService,\r\n    private _elementRef: ElementRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const [minRange, maxRange] = this.allowableRange;\r\n    this.minYearDate = new Date(minRange, 0, 1);\r\n    this.maxYearDate = new Date(maxRange, 11, 31);\r\n    this.initMinYearList();\r\n    this.initMaxYearList();\r\n    this.initYearSelector(this.currentYear);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const touchMove$ = fromEvent(\r\n      this._elementRef.nativeElement.parentElement,\r\n      'touchmove'\r\n    );\r\n\r\n    touchMove$\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        tap((e: TouchEvent) => {\r\n          this._pickerTouchService.onTouchMove(e);\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this._pickerTouchService.step\r\n      .pipe(\r\n        takeWhile((_) => this._alive),\r\n        tap((_) => {\r\n          this.shiftYearSelector(_);\r\n          this._cdr.detectChanges();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    window.clearInterval(this.decreaseInterval);\r\n    window.clearInterval(this.increaseInterval);\r\n    this._alive = false;\r\n  }\r\n\r\n  scrollYearSelector = (e: WheelEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const step = e.deltaY > 0 ? 1 : -1;\r\n    this.shiftYearSelector(step);\r\n  };\r\n\r\n  setYear = (e: any, year: number) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this.isYearDisabled(year)) {\r\n      this.yearSelected.emit(year);\r\n    }\r\n  };\r\n\r\n  applyYear = (e: any, year: number) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (!this.isYearDisabled(year)) {\r\n      this.yearApplied.emit(year);\r\n    }\r\n  };\r\n\r\n  initYearSelector = (year: number) => {\r\n    if (!year) {\r\n      year = this.today.getFullYear();\r\n    }\r\n    this.years = [year];\r\n    let direction = false;\r\n    for (let i = 1; i < this.size; i++) {\r\n      if (direction) {\r\n        this.years.unshift(this.years[0] - 1);\r\n      } else {\r\n        this.years.push(this.years[this.years.length - 1] + 1);\r\n      }\r\n      direction = !direction;\r\n    }\r\n    this.checkRanges();\r\n  };\r\n\r\n  initMinYearList = () => {\r\n    this.minYearList = [this.minYearDate.getFullYear()];\r\n    for (let i = 1; i < this.size; i++) {\r\n      this.minYearList.push(this.minYearList[this.minYearList.length - 1] + 1);\r\n    }\r\n  };\r\n\r\n  initMaxYearList = () => {\r\n    this.maxYearList = [this.maxYearDate.getFullYear()];\r\n    for (let i = 1; i < this.size; i++) {\r\n      this.maxYearList.unshift(this.maxYearList[0] - 1);\r\n    }\r\n  };\r\n\r\n  checkRanges = () => {\r\n    if (\r\n      this.years.some((year) => {\r\n        const dat = new Date(year, 0, 1);\r\n        return this.isMinYear(dat);\r\n      })\r\n    ) {\r\n      this.years = this.minYearList;\r\n    }\r\n    if (\r\n      this.years.some((year) => {\r\n        const dat = new Date(year, 0, 1);\r\n        return this.isMaxYear(dat);\r\n      })\r\n    ) {\r\n      this.years = this.maxYearList;\r\n    }\r\n  };\r\n\r\n  shiftYearSelector = (step: number = 0) => {\r\n    this.years = this.years.map((year) => year + step);\r\n    this.checkRanges();\r\n  };\r\n\r\n  decreaseYearSelector = (step: number = 3) => {\r\n    const dat = new Date(this.years[0] - step, 0, 1);\r\n    if (this.isMinYear(dat)) {\r\n      this.years = this.minYearList;\r\n      return;\r\n    }\r\n\r\n    this.years = this.years.map((year) => year - step);\r\n  };\r\n\r\n  increaseYearSelector = (step: number = 3) => {\r\n    const dat = new Date(this.years[this.years.length - 1] + step, 0, 1);\r\n    if (this.isMaxYear(dat)) {\r\n      this.years = this.maxYearList;\r\n      return;\r\n    }\r\n    this.years = this.years.map((year) => year + step);\r\n  };\r\n\r\n  // stopLongDecrease = () => {\r\n  //   window.clearInterval(this.decreaseInterval);\r\n  // };\r\n  //\r\n  // stopLongIncrease = () => {\r\n  //   window.clearInterval(this.increaseInterval);\r\n  // };\r\n\r\n  isMinYear = (dat: Date): boolean => {\r\n    if (!this.minYearDate || !(this.minYearDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    return this.minYearDate.getFullYear() > dat.getFullYear();\r\n  };\r\n\r\n  isMaxYear = (dat: Date): boolean => {\r\n    if (!this.maxYearDate || !(this.maxYearDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    return this.maxYearDate.getFullYear() < dat.getFullYear();\r\n  };\r\n\r\n  isYearDisabled = (year: number) => {\r\n    if (year) {\r\n      const dat = new Date(year, 0, 1);\r\n      return this.isMaxInvalid(dat) || this.isMinInvalid(dat);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  isMinInvalid = (dat: Date): boolean => {\r\n    if (!this.minDate || !(this.minDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    return this.minDate.getFullYear() > dat.getFullYear();\r\n  };\r\n\r\n  isMaxInvalid = (dat: Date): boolean => {\r\n    if (!this.maxDate || !(this.maxDate instanceof Date) || !dat) {\r\n      return false;\r\n    }\r\n    return this.maxDate.getFullYear() < dat.getFullYear();\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./year-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_pickerTouchService",
                        "type": "PickerTouchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"list row_auto margin-top-2\"\r\n     (wheel)=\"scrollYearSelector($event);\">\r\n  <div class=\"list-item list-item_interactive\"\r\n       [class.list-item_active]=\"year === currentYear\"\r\n       [class.list-item_disabled]=\"isYearDisabled(year)\"\r\n       (click)=\"setYear($event, year)\"\r\n       (dblclick)=\"applyYear($event, year)\"\r\n       *ngFor=\"let year of years\">\r\n    {{year}}\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AccordionModule",
            "id": "module-AccordionModule-9038820d756c63bb8d14bd87a283d899",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {AccordionComponent} from './accordion/accordion.component';\r\nimport {AccordionHeadComponent} from './accordion-head/accordion-head.component';\r\nimport {AccordionContentDirective} from './accordion-content.directive';\r\nimport {IconModule} from '../icon/icon.module';\r\nimport {AccordionItemComponent} from './accordion-item/accordion-item.component';\r\n\r\n@NgModule({\r\n  declarations: [AccordionComponent, AccordionHeadComponent, AccordionContentDirective, AccordionItemComponent],\r\n  exports: [AccordionComponent, AccordionHeadComponent, AccordionContentDirective, AccordionItemComponent],\r\n  imports: [\r\n    CommonModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class AccordionModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionContentDirective"
                        },
                        {
                            "name": "AccordionHeadComponent"
                        },
                        {
                            "name": "AccordionItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionContentDirective"
                        },
                        {
                            "name": "AccordionHeadComponent"
                        },
                        {
                            "name": "AccordionItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-0eef7bda1cbf8f3d8e0ec72572ed3e0e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/button/button.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ButtonComponent} from './button/button.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ButtonComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ButtonComponent\r\n  ]\r\n})\r\nexport class ButtonModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Chart3dModule",
            "id": "module-Chart3dModule-90574678284e16ba6e5b79996eb597ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/chart-3d/chart-3d.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Chart3dComponent } from './chart3d/chart3d.component';\r\n\r\n@NgModule({\r\n  declarations: [Chart3dComponent],\r\n  exports: [Chart3dComponent],\r\n  imports: [CommonModule],\r\n})\r\nexport class Chart3dModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Chart3dComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Chart3dComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartModule",
            "id": "module-ChartModule-f9779a0df90db45ad59f511ec3db2e70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/chart/src/chart/chart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartComponent } from './chart/chart.component';\r\nimport { SeriesHostComponent } from './chart-container/series-host/series-host.component';\r\nimport { ChartContainerComponent } from './chart-container/chart-container.component';\r\nimport { LegendComponent } from './legend/legend.component';\r\nimport { SeriesBaseComponent } from './base/series-base.component';\r\nimport { LineSeriesComponent } from './chart-container/series/line/line-series.component';\r\nimport { GridlinesComponent } from './chart-container/gridlines/gridlines.component';\r\nimport { XAxisComponent } from './chart-container/x-axis/x-axis.component';\r\nimport { YAxisComponent } from './chart-container/y-axis/y-axis.component';\r\nimport { PlotlineComponent } from './chart-container/plotline/plotline.component';\r\nimport { PlotbandComponent } from './chart-container/plotband/plotband.component';\r\nimport { BarSeriesComponent } from './chart-container/series/bar/bar-series.component';\r\nimport { TooltipDirective } from './directives/tooltip.directive';\r\nimport { TooltipComponent } from './chart-container/tooltip/tooltip.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ChartComponent,\r\n    SeriesHostComponent,\r\n    ChartContainerComponent,\r\n    LegendComponent,\r\n    SeriesBaseComponent,\r\n    LineSeriesComponent,\r\n    GridlinesComponent,\r\n    XAxisComponent,\r\n    YAxisComponent,\r\n    PlotlineComponent,\r\n    PlotbandComponent,\r\n    BarSeriesComponent,\r\n    TooltipDirective,\r\n    TooltipComponent,\r\n  ],\r\n  exports: [ChartComponent],\r\n  imports: [CommonModule],\r\n})\r\nexport class ChartModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BarSeriesComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartContainerComponent"
                        },
                        {
                            "name": "GridlinesComponent"
                        },
                        {
                            "name": "LegendComponent"
                        },
                        {
                            "name": "LineSeriesComponent"
                        },
                        {
                            "name": "PlotbandComponent"
                        },
                        {
                            "name": "PlotlineComponent"
                        },
                        {
                            "name": "SeriesBaseComponent"
                        },
                        {
                            "name": "SeriesHostComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "XAxisComponent"
                        },
                        {
                            "name": "YAxisComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChartComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartModule",
            "id": "module-ChartModule-ee9911cee4377bec3e1678ce1cee4005-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/chart/chart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartComponent } from './chart/chart.component';\r\n\r\n@NgModule({\r\n  declarations: [ChartComponent],\r\n  exports: [ChartComponent],\r\n  imports: [CommonModule],\r\n})\r\nexport class ChartModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "id": "module-CheckboxModule-4ebd68c32c54628ffafae527083e4f69",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CheckboxComponent} from './checkbox/checkbox.component';\r\nimport {IconModule} from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [CheckboxComponent],\r\n  imports: [\r\n    CommonModule,\r\n    IconModule\r\n  ],\r\n  exports: [\r\n    CheckboxComponent\r\n  ]\r\n})\r\nexport class CheckboxModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClickOutsideModule",
            "id": "module-ClickOutsideModule-4d0c68e631ca1a539cbe0e6bc928aa9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/click-outside/click-outside.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ClickOutsideDirective} from './click-outside.directive';\r\n\r\n@NgModule({\r\n  declarations: [ClickOutsideDirective],\r\n  exports: [ClickOutsideDirective],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ClickOutsideModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContextMenuModule",
            "id": "module-ContextMenuModule-6ff12c518ebf6b4a84b6dc1f8cbb534b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/context-menu/context-menu.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ContextMenuDirective} from './context-menu.directive';\r\nimport {DynamicComponentModule} from '../../component/dynamic-component/dynamic-component.module';\r\n\r\n@NgModule({\r\n  declarations: [ContextMenuDirective],\r\n  exports: [ContextMenuDirective],\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentModule\r\n  ]\r\n})\r\nexport class ContextMenuModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatePickerModule",
            "id": "module-DatePickerModule-668c5140d7b16f94e696985ee3846497",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/date-picker/date-picker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DatePickerComponent } from './date-picker/date-picker.component';\r\nimport { MonthPickerComponent } from './month-picker/month-picker.component';\r\nimport { DropdownModule } from '../dropdown/dropdown.module';\r\nimport { ClickOutsideModule } from '../../directive/click-outside/click-outside.module';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { DaySelectComponent } from './day-select/day-select.component';\r\nimport { YearSelectComponent } from './year-select/year-select.component';\r\nimport { MonthSelectComponent } from './month-select/month-select.component';\r\nimport { PrependZeroModule } from '../../pipe/prepend-zero/prepend-zero.module';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TimePartControlComponent } from './time-part-control/time-part-control.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DatePickerComponent,\r\n    MonthPickerComponent,\r\n    DaySelectComponent,\r\n    YearSelectComponent,\r\n    MonthSelectComponent,\r\n    TimePartControlComponent,\r\n  ],\r\n  exports: [DatePickerComponent, MonthPickerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DropdownModule,\r\n    ClickOutsideModule,\r\n    FormsModule,\r\n    IconModule,\r\n    PrependZeroModule,\r\n    ButtonModule,\r\n    OnlyNumberModule,\r\n  ],\r\n})\r\nexport class DatePickerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "DaySelectComponent"
                        },
                        {
                            "name": "MonthPickerComponent"
                        },
                        {
                            "name": "MonthSelectComponent"
                        },
                        {
                            "name": "TimePartControlComponent"
                        },
                        {
                            "name": "YearSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ClickOutsideModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "PrependZeroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "MonthPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DelimiterModule",
            "id": "module-DelimiterModule-5e2ac73715631ef21de239aa477899ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/delimiter/delimiter.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DelimiterComponent} from './delimiter/delimiter.component';\r\n\r\n@NgModule({\r\n  declarations: [DelimiterComponent],\r\n  exports: [DelimiterComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class DelimiterModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DelimiterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DelimiterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisableControlModule",
            "id": "module-DisableControlModule-7cb6b9d002745cdbc0f72ec0e51aa256",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/disable-control/disable-control.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DisableControlDirective} from './disable-control.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DisableControlDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    DisableControlDirective\r\n  ]\r\n})\r\nexport class DisableControlModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisableControlDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DisableControlDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DragSortModule",
            "id": "module-DragSortModule-edc87ebfe3ee3215d7008695d9c62e5a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/drag-sort/drag-sort.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragSortContainerDirective } from './drag-sort-container.directive';\r\nimport { DragSortItemDirective } from './drag-sort-item.directive';\r\n\r\n@NgModule({\r\n  declarations: [DragSortContainerDirective, DragSortItemDirective],\r\n  exports: [DragSortContainerDirective, DragSortItemDirective],\r\n  imports: [CommonModule],\r\n})\r\nexport class DragSortModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DragSortContainerDirective"
                        },
                        {
                            "name": "DragSortItemDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DragSortContainerDirective"
                        },
                        {
                            "name": "DragSortItemDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropdownModule",
            "id": "module-DropdownModule-765b738be5aab6f5b5d427070383a27c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/dropdown/dropdown.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DropdownComponent} from './dropdown/dropdown.component';\r\nimport {DropdownHeadDirective} from './dropdown-head.directive';\r\nimport {DropdownContentDirective} from './dropdown-content.directive';\r\nimport {DropdownDirective} from './dropdown.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DropdownComponent,\r\n    DropdownHeadDirective,\r\n    DropdownContentDirective,\r\n    DropdownDirective\r\n  ],\r\n  exports: [\r\n    DropdownComponent,\r\n    DropdownHeadDirective,\r\n    DropdownContentDirective,\r\n    DropdownDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class DropdownModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownContentDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "DropdownHeadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownContentDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "DropdownHeadDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicComponentModule",
            "id": "module-DynamicComponentModule-ce7c59673bb3ca6a0ceb3f400e0732cf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/dynamic-component/dynamic-component.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PopupContentComponent} from './popup-content/popup-content.component';\r\n\r\n@NgModule({\r\n  declarations: [PopupContentComponent],\r\n  exports: [PopupContentComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class DynamicComponentModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopupContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PopupContentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpandPanelModule",
            "id": "module-ExpandPanelModule-007766225a442bcfc74f9aaa14356187",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/expand-panel/expand-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ExpandPanelComponent } from './expand-panel/expand-panel.component';\r\nimport { DelimiterModule } from '../delimiter/delimiter.module';\r\nimport { ToolbarModule } from '../toolbar/toolbar.module';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { ExpandPanelHeadDirective } from './expand-panel-head.directive';\r\nimport { ExpandPanelContentDirective } from './expand-panel-content.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ExpandPanelComponent,\r\n    ExpandPanelHeadDirective,\r\n    ExpandPanelContentDirective,\r\n  ],\r\n  exports: [\r\n    ExpandPanelComponent,\r\n    ExpandPanelHeadDirective,\r\n    ExpandPanelContentDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DelimiterModule,\r\n    ToolbarModule,\r\n    ButtonModule,\r\n    IconModule,\r\n  ],\r\n})\r\nexport class ExpandPanelModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpandPanelComponent"
                        },
                        {
                            "name": "ExpandPanelContentDirective"
                        },
                        {
                            "name": "ExpandPanelHeadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DelimiterModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpandPanelComponent"
                        },
                        {
                            "name": "ExpandPanelContentDirective"
                        },
                        {
                            "name": "ExpandPanelHeadDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileUploadModule",
            "id": "module-FileUploadModule-27b83b86e2540df11c4b5efaa06fece4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/file-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileUploadAreaComponent } from './file-upload-area/file-upload-area.component';\r\nimport { FileItemComponent } from './file-item/file-item.component';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { IconModule } from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [FileUploadAreaComponent, FileItemComponent],\r\n  exports: [FileUploadAreaComponent, FileItemComponent],\r\n  imports: [CommonModule, ButtonModule, IconModule],\r\n})\r\nexport class FileUploadModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileItemComponent"
                        },
                        {
                            "name": "FileUploadAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileItemComponent"
                        },
                        {
                            "name": "FileUploadAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilterModule",
            "id": "module-FilterModule-411869861466590463561997314f100c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/filter/filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FilterPanelComponent } from './filter-panel/filter-panel.component';\r\nimport { NumericFilterComponent } from './numeric-filter/numeric-filter.component';\r\nimport { StringFilterComponent } from './string-filter/string-filter.component';\r\nimport { ListFilterComponent } from './list-filter/list-filter.component';\r\nimport { DateFilterComponent } from './date-filter/date-filter.component';\r\nimport { FilterHostComponent } from './filter-host/filter-host.component';\r\nimport { SelectModule } from '../select/select.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DatePickerModule } from '../date-picker/date-picker.module';\r\nimport { BooleanFilterComponent } from './boolean-filter/boolean-filter.component';\r\nimport { RadioModule } from '../radio/radio.module';\r\nimport { InputModule } from '../input/input.module';\r\nimport { CheckboxModule } from '../checkbox/checkbox.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FilterPanelComponent,\r\n    NumericFilterComponent,\r\n    StringFilterComponent,\r\n    ListFilterComponent,\r\n    DateFilterComponent,\r\n    FilterHostComponent,\r\n    BooleanFilterComponent,\r\n  ],\r\n  exports: [\r\n    FilterPanelComponent,\r\n    NumericFilterComponent,\r\n    StringFilterComponent,\r\n    ListFilterComponent,\r\n    DateFilterComponent,\r\n    FilterHostComponent,\r\n    BooleanFilterComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SelectModule,\r\n    FormsModule,\r\n    DatePickerModule,\r\n    RadioModule,\r\n    InputModule,\r\n    CheckboxModule,\r\n  ],\r\n})\r\nexport class FilterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BooleanFilterComponent"
                        },
                        {
                            "name": "DateFilterComponent"
                        },
                        {
                            "name": "FilterHostComponent"
                        },
                        {
                            "name": "FilterPanelComponent"
                        },
                        {
                            "name": "ListFilterComponent"
                        },
                        {
                            "name": "NumericFilterComponent"
                        },
                        {
                            "name": "StringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "RadioModule"
                        },
                        {
                            "name": "SelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooleanFilterComponent"
                        },
                        {
                            "name": "DateFilterComponent"
                        },
                        {
                            "name": "FilterHostComponent"
                        },
                        {
                            "name": "FilterPanelComponent"
                        },
                        {
                            "name": "ListFilterComponent"
                        },
                        {
                            "name": "NumericFilterComponent"
                        },
                        {
                            "name": "StringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HighlightModule",
            "id": "module-HighlightModule-f19087d0e6a02d9c846a749774dca7b7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/highlight/highlight.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {HighlightDirective} from './highlight.directive';\r\n\r\n@NgModule({\r\n  declarations: [HighlightDirective],\r\n  exports: [HighlightDirective],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class HighlightModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HintModule",
            "id": "module-HintModule-52c5b1d4f5a57d72186f434f831a3f1e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/hint/hint.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {HintDirective} from './hint.directive';\r\nimport {DynamicComponentModule} from '../../component/dynamic-component/dynamic-component.module';\r\n\r\n@NgModule({\r\n  declarations: [HintDirective],\r\n  exports: [HintDirective],\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentModule\r\n  ]\r\n})\r\nexport class HintModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HintDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HintDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-6c2afbc236db7831a658c4e8463f2827",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {IconComponent} from './icon/icon.component';\r\nimport {IconSpriteDirective} from './icon-sprite.directive';\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    IconComponent,\r\n    IconSpriteDirective\r\n  ],\r\n  exports: [\r\n    IconComponent,\r\n    IconSpriteDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ]\r\n})\r\nexport class IconModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconSpriteDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconSpriteDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-3c02d4e04575064b8ccae44807239078",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InputComponent } from './input/input.component';\r\nimport { TextFieldComponent } from './text-field/text-field.component';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\r\nimport { FormGroupTitleComponent } from './form-group-title/form-group-title.component';\r\n\r\n@NgModule({\r\n  declarations: [InputComponent, TextFieldComponent, FormGroupTitleComponent],\r\n  exports: [InputComponent, TextFieldComponent, FormGroupTitleComponent],\r\n  imports: [CommonModule, IconModule, FormsModule, OnlyNumberModule],\r\n})\r\nexport class InputModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormGroupTitleComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormGroupTitleComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListModule",
            "id": "module-ListModule-82a7f71a2922562c0ff822da21cb6194",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/list/list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ListModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoaderModule",
            "id": "module-LoaderModule-5abdc5e853e324f1c137c47d5cf95f77",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/loader/loader.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {LoaderDirective} from './loader.directive';\r\n\r\n@NgModule({\r\n  declarations: [LoaderDirective],\r\n  exports: [LoaderDirective],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class LoaderModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoaderDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoaderDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessageModule",
            "id": "module-MessageModule-75c56280655408e68c629a2db0c5ea4e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/message/message.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MessageHostComponent} from './message-host/message-host.component';\r\nimport {MessageComponent} from './message/message.component';\r\nimport {IconModule} from '../icon/icon.module';\r\nimport {ButtonModule} from '../button/button.module';\r\n\r\n@NgModule({\r\n  declarations: [MessageHostComponent, MessageComponent],\r\n  exports: [MessageHostComponent, MessageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    IconModule,\r\n    ButtonModule\r\n  ]\r\n})\r\nexport class MessageModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "MessageHostComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "MessageHostComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessageSamplesModule",
            "id": "module-MessageSamplesModule-cfec2e19c13dc7c6c17e08e936d65b2b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/message/message-samples/message-samples.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MessageSampleComponent} from './message-sample/message-sample.component';\r\nimport {ButtonModule} from '../../button/button.module';\r\nimport {MessageModule} from '../message.module';\r\nimport {IconModule} from '../../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [MessageSampleComponent],\r\n  exports: [MessageSampleComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    MessageModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class MessageSamplesModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MessageSampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "MessageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MessageSampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-c0a180da1d51541ff111fc6f30e13fe2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModalContainerComponent } from './modal-container/modal-container.component';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { ToolbarModule } from '../toolbar/toolbar.module';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { TRANSLOCO_SCOPE, TranslocoModule } from '@ngneat/transloco';\r\nimport { IconModule } from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [ModalContainerComponent, DialogComponent],\r\n  exports: [ModalContainerComponent, DialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ToolbarModule,\r\n    ButtonModule,\r\n    TranslocoModule,\r\n    IconModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: TRANSLOCO_SCOPE,\r\n      useValue: { scope: 'common', alias: 'common' },\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class ModalModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "ModalContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "ModalContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalSamplesModule",
            "id": "module-ModalSamplesModule-6050a2180484d3edfba0e628141e10e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/modal/modal-samples/modal-samples.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModalFromComponentComponent } from './modal-from-component/modal-from-component.component';\r\nimport { ModalFromTemplateComponent } from './modal-from-template/modal-from-template.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalExampleComponent } from './modal-example/modal-example.component';\r\nimport { ModalContainerComponent } from '../modal-container/modal-container.component';\r\nimport { ModalModule } from '../modal.module';\r\nimport { ToolbarModule } from '../../toolbar/toolbar.module';\r\nimport { ButtonModule } from '../../button/button.module';\r\nimport { IconModule } from '../../icon/icon.module';\r\nimport { AlertSampleComponent } from './alert-sample/alert-sample.component';\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ModalFromComponentComponent,\r\n    ModalFromTemplateComponent,\r\n    ModalExampleComponent,\r\n    AlertSampleComponent,\r\n  ],\r\n  exports: [\r\n    ModalFromComponentComponent,\r\n    ModalFromTemplateComponent,\r\n    ModalExampleComponent,\r\n    AlertSampleComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ModalModule,\r\n    ButtonModule,\r\n    ToolbarModule,\r\n    FormsModule,\r\n    IconModule,\r\n  ],\r\n  entryComponents: [\r\n    ModalContainerComponent,\r\n    DialogComponent,\r\n    ModalExampleComponent,\r\n    AlertSampleComponent,\r\n  ],\r\n})\r\nexport class ModalSamplesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertSampleComponent"
                        },
                        {
                            "name": "ModalExampleComponent"
                        },
                        {
                            "name": "ModalFromComponentComponent"
                        },
                        {
                            "name": "ModalFromTemplateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ModalModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertSampleComponent"
                        },
                        {
                            "name": "ModalExampleComponent"
                        },
                        {
                            "name": "ModalFromComponentComponent"
                        },
                        {
                            "name": "ModalFromTemplateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NoAutofillModule",
            "id": "module-NoAutofillModule-26cb1b123ebd773b6faa899749e9ec9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/no-autofill/no-autofill.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NoAutofillDirective } from './no-autofill.directive';\r\n\r\n@NgModule({\r\n  exports: [NoAutofillDirective],\r\n  declarations: [NoAutofillDirective],\r\n  imports: [CommonModule],\r\n})\r\nexport class NoAutofillModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NoAutofillDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NoAutofillDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NumberPipeModule",
            "id": "module-NumberPipeModule-e503a8aec8e689fb4a5cda6602909aea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/pipe/number-pipe/number-pipe.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NumberPipe} from './number.pipe';\r\n\r\n@NgModule({\r\n  declarations: [NumberPipe],\r\n  exports: [\r\n    NumberPipe\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class NumberPipeModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NumberPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NumberPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OnlyNumberModule",
            "id": "module-OnlyNumberModule-6957c8b1bf28dc1a4cea55f51ff3c728",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/only-number/only-number.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OnlyNumberDirective } from './only-number.directive';\r\n\r\n@NgModule({\r\n  declarations: [OnlyNumberDirective],\r\n  exports: [OnlyNumberDirective],\r\n  imports: [CommonModule],\r\n})\r\nexport class OnlyNumberModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OnlyNumberDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OnlyNumberDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagerModule",
            "id": "module-PagerModule-3a6c8bf5f9a0d5ccef212f601447e45e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/pager/pager.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PagerComponent} from './pager/pager.component';\r\nimport {IconModule} from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [PagerComponent],\r\n  exports: [PagerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class PagerModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PanelModule",
            "id": "module-PanelModule-4a19541b25c30c2852ede4f426a5dad7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/panel/panel.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PanelComponent} from './panel/panel.component';\r\n\r\n@NgModule({\r\n  declarations: [PanelComponent],\r\n  exports: [PanelComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class PanelModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrependZeroModule",
            "id": "module-PrependZeroModule-fe363fdb3f435af9a616c61e5bc46568",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/pipe/prepend-zero/prepend-zero.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PrependZeroPipe } from './prepend-zero.pipe';\r\n\r\n@NgModule({\r\n  declarations: [PrependZeroPipe],\r\n  exports: [PrependZeroPipe],\r\n  imports: [CommonModule],\r\n})\r\nexport class PrependZeroModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PrependZeroPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrependZeroPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressBarModule",
            "id": "module-ProgressBarModule-3e4e6506e343c261dd07111b221cdb67",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ProgressBarComponent} from './progress-bar/progress-bar.component';\r\n\r\n@NgModule({\r\n  declarations: [ProgressBarComponent],\r\n  exports: [ProgressBarComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ProgressBarModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PropertyGridModule",
            "id": "module-PropertyGridModule-2de4dd049f44e0ff741a1d91517f2945",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/property-grid/property-grid.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PropertyGridComponent} from './property-grid/property-grid.component';\r\nimport {NumericItemDefaultComponent} from './default/numeric-item-default/numeric-item-default.component';\r\nimport {DateItemDefaultComponent} from './default/date-item-default/date-item-default.component';\r\nimport {ListItemDefaultComponent} from './default/list-item-default/list-item-default.component';\r\nimport {StringItemDefaultComponent} from './default/string-item-default/string-item-default.component';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {NumberPipeModule} from '../../pipe/number-pipe/number-pipe.module';\r\nimport {DatePickerModule} from '../date-picker/date-picker.module';\r\nimport {SelectModule} from '../select/select.module';\r\nimport {PropertyGridGroupComponent} from './property-grid/property-grid-group/property-grid-group.component';\r\nimport {PropertyGridItemComponent} from './property-grid/property-grid-item/property-grid-item.component';\r\nimport {OnlyNumberModule} from '../../directive/only-number/only-number.module';\r\nimport {InputModule} from '../input/input.module';\r\nimport {ToggleModule} from '../toggle/toggle.module';\r\nimport {TRANSLOCO_SCOPE, TranslocoModule} from '@ngneat/transloco';\r\nimport {HintModule} from '../../directive/hint/hint.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PropertyGridComponent,\r\n    NumericItemDefaultComponent,\r\n    DateItemDefaultComponent,\r\n    ListItemDefaultComponent,\r\n    StringItemDefaultComponent,\r\n    PropertyGridGroupComponent,\r\n    PropertyGridItemComponent,\r\n  ],\r\n  exports: [PropertyGridComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    NumberPipeModule,\r\n    DatePickerModule,\r\n    SelectModule,\r\n    OnlyNumberModule,\r\n    InputModule,\r\n    ToggleModule,\r\n    ReactiveFormsModule,\r\n    TranslocoModule,\r\n    HintModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: TRANSLOCO_SCOPE,\r\n      useValue: {scope: 'errors', alias: 'errors'},\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class PropertyGridModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateItemDefaultComponent"
                        },
                        {
                            "name": "ListItemDefaultComponent"
                        },
                        {
                            "name": "NumericItemDefaultComponent"
                        },
                        {
                            "name": "PropertyGridComponent"
                        },
                        {
                            "name": "PropertyGridGroupComponent"
                        },
                        {
                            "name": "PropertyGridItemComponent"
                        },
                        {
                            "name": "StringItemDefaultComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "HintModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "ToggleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PropertyGridComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioModule",
            "id": "module-RadioModule-605278dca40648440ea5895058aef6d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/radio/radio.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RadioComponent } from './radio/radio.component';\r\nimport { RadioButtonComponent } from './radio-button/radio-button.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [RadioComponent, RadioButtonComponent],\r\n  exports: [RadioComponent, RadioButtonComponent],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class RadioModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResizeDragModule",
            "id": "module-ResizeDragModule-279ed00cab24d3515115ba753e41edc5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/resize-drag/resize-drag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResizeDragDirective } from './resize-drag.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResizeDragDirective],\r\n  exports: [ResizeDragDirective],\r\n  imports: [CommonModule],\r\n})\r\nexport class ResizeDragModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResizeDragDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResizeDragDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResizePanelModule",
            "id": "module-ResizePanelModule-b6d1db17050b5229a8bc9f2638541351",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/resize-panel/resize-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResizePanelComponent } from './resize-panel/resize-panel.component';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { ResizeDragModule } from '../../directive/resize-drag/resize-drag.module';\r\n\r\n@NgModule({\r\n  declarations: [ResizePanelComponent],\r\n  exports: [ResizePanelComponent],\r\n  imports: [CommonModule, IconModule, ResizeDragModule],\r\n})\r\nexport class ResizePanelModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResizePanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ResizeDragModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResizePanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SampleInputModule",
            "id": "module-SampleInputModule-344351b52be42b2a6df881dc88f026ca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/input/sample-input/sample-input.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SampleInputComponent} from './sample-input/sample-input.component';\nimport {InputModule} from '../input.module';\nimport {ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    SampleInputComponent\n  ],\n  exports: [\n    SampleInputComponent\n  ],\n  imports: [\n    CommonModule,\n    InputModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SampleInputModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SampleInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SampleInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-c7693fb92eb315155c3b53c91228d4f0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/select/select.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SelectComponent} from './select/select.component';\r\nimport {DropdownModule} from '../dropdown/dropdown.module';\r\nimport {SelectOptionDirective} from './select-option.directive';\r\nimport {SelectValueDirective} from './select-value.directive';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {IconModule} from '../icon/icon.module';\r\nimport {HighlightModule} from '../../directive/highlight/highlight.module';\r\nimport {InputModule} from '../input/input.module';\r\n\r\n@NgModule({\r\n  declarations: [SelectComponent, SelectOptionDirective, SelectValueDirective],\r\n  exports: [SelectComponent, SelectOptionDirective, SelectValueDirective],\r\n  imports: [\r\n    DropdownModule,\r\n    CommonModule,\r\n    ScrollingModule,\r\n    FormsModule,\r\n    IconModule,\r\n    HighlightModule,\r\n    InputModule,\r\n  ],\r\n})\r\nexport class SelectModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectOptionDirective"
                        },
                        {
                            "name": "SelectValueDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "HighlightModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectOptionDirective"
                        },
                        {
                            "name": "SelectValueDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "id": "module-SidebarModule-75bcdf61950ea1bd524cf491e0205dc0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/sidebar/sidebar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SidebarComponent } from './sidebar/sidebar.component';\r\nimport {ButtonModule} from '../button/button.module';\r\nimport {IconModule} from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [SidebarComponent],\r\n  exports: [SidebarComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class SidebarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SwitchModule",
            "id": "module-SwitchModule-b820e31acad8a9a2880e3954ef1f462e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SwitchComponent} from './switch/switch.component';\r\nimport {SwitchButtonComponent} from './switch-button/switch-button.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [SwitchComponent, SwitchButtonComponent],\r\n  exports: [SwitchComponent, SwitchButtonComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class SwitchModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SwitchButtonComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SwitchButtonComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableDemoModule",
            "id": "module-TableDemoModule-2de96c8c1e6c0c9d35e867ca6358ceaf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/table/table-demo/table-demo.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TableDemoComponent} from './table-demo/table-demo.component';\r\nimport {TableModule} from '../table.module';\r\nimport {TabsModule} from '../../tabs/tabs.module';\r\nimport {IconModule} from '../../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TableDemoComponent\r\n  ],\r\n  exports: [\r\n    TableDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TableModule,\r\n    TabsModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class TableDemoModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TabsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-f164c72ad2c2ca64863c595238781092",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from './table/table.component';\r\nimport { FilterModule } from '../filter/filter.module';\r\nimport { NumericCellComponent } from './default/numeric-cell/numeric-cell.component';\r\nimport { ListCellComponent } from './default/list-cell/list-cell.component';\r\nimport { DateCellComponent } from './default/date-cell/date-cell.component';\r\nimport { StringCellComponent } from './default/string-cell/string-cell.component';\r\nimport { HeadCellHostComponent } from './head-cell-host/head-cell-host.component';\r\nimport { TableHeadComponent } from './table-head/table-head.component';\r\nimport { TableBodyComponent } from './table-body/table-body.component';\r\nimport { CellComponent } from './cell/cell.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckboxModule } from '../checkbox/checkbox.module';\r\nimport { CellHostComponent } from './cell-host/cell-host.component';\r\nimport { GroupRowComponent } from './default/group-row/group-row.component';\r\nimport { TableHeadGroupComponent } from './table-head-group/table-head-group.component';\r\nimport { HeadCellComponent } from './head-cell/head-cell.component';\r\nimport { DefaultHeadCellComponent } from './default/default-head-cell/default-head-cell.component';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { DropdownModule } from '../dropdown/dropdown.module';\r\nimport { TabsModule } from '../tabs/tabs.module';\r\nimport { SelectModule } from '../select/select.module';\r\nimport { NumberPipeModule } from '../../pipe/number-pipe/number-pipe.module';\r\nimport { DatePickerModule } from '../date-picker/date-picker.module';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { SelectionCellComponent } from './selection-cell/selection-cell.component';\r\nimport { SelectionHeadCellComponent } from './selection-head-cell/selection-head-cell.component';\r\nimport { HintModule } from '../../directive/hint/hint.module';\r\nimport { TreeModule } from '../tree/tree.module';\r\nimport { HeadCellDropdownComponent } from './head-cell-dropdown/head-cell-dropdown.component';\r\nimport { DateTimeCellComponent } from './default/date-time-cell/date-time-cell.component';\r\nimport { OnlyNumberModule } from '../../directive/only-number/only-number.module';\r\nimport { BooleanCellComponent } from './default/boolean-cell/boolean-cell.component';\r\nimport { UiScrollModule } from 'ngx-ui-scroll';\r\nimport { ToolbarModule } from '../toolbar/toolbar.module';\r\nimport { ClickOutsideModule } from '../../directive/click-outside/click-outside.module';\r\nimport {ResizeDragModule} from '../../directive/resize-drag/resize-drag.module';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TableComponent,\r\n    NumericCellComponent,\r\n    ListCellComponent,\r\n    DateCellComponent,\r\n    StringCellComponent,\r\n    HeadCellHostComponent,\r\n    TableHeadComponent,\r\n    TableBodyComponent,\r\n    CellComponent,\r\n    CellHostComponent,\r\n    GroupRowComponent,\r\n    TableHeadGroupComponent,\r\n    HeadCellComponent,\r\n    DefaultHeadCellComponent,\r\n    SelectionCellComponent,\r\n    SelectionHeadCellComponent,\r\n    HeadCellDropdownComponent,\r\n    DateTimeCellComponent,\r\n    BooleanCellComponent,\r\n  ],\r\n  exports: [\r\n    TableComponent,\r\n    NumericCellComponent,\r\n    ListCellComponent,\r\n    DateCellComponent,\r\n    StringCellComponent,\r\n    HeadCellHostComponent,\r\n    TableHeadComponent,\r\n    TableBodyComponent,\r\n    CellComponent,\r\n    CellHostComponent,\r\n    GroupRowComponent,\r\n    DateTimeCellComponent,\r\n    BooleanCellComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FilterModule,\r\n    FormsModule,\r\n    CheckboxModule,\r\n    IconModule,\r\n    DropdownModule,\r\n    TabsModule,\r\n    SelectModule,\r\n    NumberPipeModule,\r\n    DatePickerModule,\r\n    ButtonModule,\r\n    HintModule,\r\n    TreeModule,\r\n    OnlyNumberModule,\r\n    UiScrollModule,\r\n    ToolbarModule,\r\n    ClickOutsideModule,\r\n    ResizeDragModule,\r\n    ScrollingModule,\r\n  ],\r\n})\r\nexport class TableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BooleanCellComponent"
                        },
                        {
                            "name": "CellComponent"
                        },
                        {
                            "name": "CellHostComponent"
                        },
                        {
                            "name": "DateCellComponent"
                        },
                        {
                            "name": "DateTimeCellComponent"
                        },
                        {
                            "name": "DefaultHeadCellComponent"
                        },
                        {
                            "name": "GroupRowComponent"
                        },
                        {
                            "name": "HeadCellComponent"
                        },
                        {
                            "name": "HeadCellDropdownComponent"
                        },
                        {
                            "name": "HeadCellHostComponent"
                        },
                        {
                            "name": "ListCellComponent"
                        },
                        {
                            "name": "NumericCellComponent"
                        },
                        {
                            "name": "SelectionCellComponent"
                        },
                        {
                            "name": "SelectionHeadCellComponent"
                        },
                        {
                            "name": "StringCellComponent"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeadComponent"
                        },
                        {
                            "name": "TableHeadGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "ClickOutsideModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "FilterModule"
                        },
                        {
                            "name": "HintModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "OnlyNumberModule"
                        },
                        {
                            "name": "ResizeDragModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "TabsModule"
                        },
                        {
                            "name": "ToolbarModule"
                        },
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooleanCellComponent"
                        },
                        {
                            "name": "CellComponent"
                        },
                        {
                            "name": "CellHostComponent"
                        },
                        {
                            "name": "DateCellComponent"
                        },
                        {
                            "name": "DateTimeCellComponent"
                        },
                        {
                            "name": "GroupRowComponent"
                        },
                        {
                            "name": "HeadCellHostComponent"
                        },
                        {
                            "name": "ListCellComponent"
                        },
                        {
                            "name": "NumericCellComponent"
                        },
                        {
                            "name": "StringCellComponent"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-02adac6d6b5c3a980fa554b8f2cbed14",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TabContentDirective} from './tab-content.directive';\r\nimport {TabTitleDirective} from './tab-title.directive';\r\nimport {TabComponent} from './tab/tab.component';\r\nimport {TabsComponent} from './tabs/tabs.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TabContentDirective,\r\n    TabTitleDirective,\r\n    TabComponent,\r\n    TabsComponent\r\n  ],\r\n  exports: [\r\n    TabContentDirective,\r\n    TabTitleDirective,\r\n    TabComponent,\r\n    TabsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class TabsModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabContentDirective"
                        },
                        {
                            "name": "TabTitleDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabContentDirective"
                        },
                        {
                            "name": "TabTitleDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TetaTemplateModule",
            "id": "module-TetaTemplateModule-b1fd567f0b8a8536d1bd5c84735b7d2e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/teta-template/teta-template.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TetaTemplateDirective} from './teta-template.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TetaTemplateDirective\r\n  ],\r\n  exports: [\r\n    TetaTemplateDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class TetaTemplateModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TetaTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TetaTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeSwitchModule",
            "id": "module-ThemeSwitchModule-d0bfca3b26e26b59288ce18ddf333688",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/theme-switch/theme-switch.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ThemeSwitchComponent} from './theme-switch/theme-switch.component';\r\nimport {ButtonModule} from '../button/button.module';\r\nimport {IconModule} from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [ThemeSwitchComponent],\r\n  exports: [ThemeSwitchComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    IconModule\r\n  ]\r\n})\r\nexport class ThemeSwitchModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ThemeSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ThemeSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToggleModule",
            "id": "module-ToggleModule-c97c1d1b71e3171c0ff2d9673ce11a02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/toggle/toggle.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToggleComponent } from './toggle/toggle.component';\r\nimport { IconModule } from '../icon/icon.module';\r\n\r\n@NgModule({\r\n  declarations: [ToggleComponent],\r\n  exports: [ToggleComponent],\r\n  imports: [CommonModule, IconModule],\r\n})\r\nexport class ToggleModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-5f24b2465e2c2aab42ec3ad791f6c17d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ToolbarComponent} from './toolbar/toolbar.component';\r\n\r\n@NgModule({\r\n  declarations: [ToolbarComponent],\r\n  exports: [ToolbarComponent],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ToolbarModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-96ec913f32fd8f3958fb492d8b67ccdd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/directive/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TooltipDirective } from './tooltip.directive';\r\nimport { DynamicComponentModule } from '../../component/dynamic-component/dynamic-component.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n@NgModule({\r\n  declarations: [TooltipDirective],\r\n  exports: [TooltipDirective],\r\n  imports: [CommonModule, DynamicComponentModule, BrowserAnimationsModule],\r\n})\r\nexport class TooltipModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "id": "module-TreeModule-501f3ecc0d36ea2c1135b94f3021f92b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/component/tree/tree.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeComponent } from './tree/tree.component';\r\nimport { TreeItemComponent } from './tree-item/tree-item.component';\r\nimport { TetaTemplateModule } from '../../directive/teta-template/teta-template.module';\r\nimport { IconModule } from '../icon/icon.module';\r\nimport { TreeItemToggleComponent } from './tree-item-toggle/tree-item-toggle.component';\r\n\r\n@NgModule({\r\n  declarations: [TreeComponent, TreeItemComponent, TreeItemToggleComponent],\r\n  exports: [TreeComponent, TetaTemplateModule, TreeItemToggleComponent],\r\n  imports: [CommonModule, IconModule, TetaTemplateModule],\r\n})\r\nexport class TreeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemComponent"
                        },
                        {
                            "name": "TreeItemToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "TetaTemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TetaTemplateModule"
                        },
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "alert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: AlertSampleComponent,\r\n})"
            },
            {
                "name": "alignMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<VerticalAlign, string>().set(\r\n  VerticalAlign.bottom, 'bottom'\r\n).set(\r\n  VerticalAlign.top, 'top'\r\n).set(\r\n  VerticalAlign.center, 'center'\r\n).set(\r\n  VerticalAlign.auto, 'auto'\r\n)"
            },
            {
                "name": "annotationMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/model/annotation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[\r\n  annotationBadge,\r\n  annotationLabel,\r\n  annotationCallout,\r\n  annotationCalloutCircle,\r\n  annotationCalloutCurve,\r\n  annotationCalloutElbow,\r\n  annotationCalloutRect,\r\n  annotationCustomType,\r\n  annotationXYThreshold,\r\n] as const"
            },
            {
                "name": "area",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/file-upload/File.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [FileUploadModule, IconModule]\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\r\n    <teta-file-upload-area style=\"height: 250px; width: 300px;\">\r\n      <div class=\"column column_auto font-body-3\">\r\n        <div class=\"row align-center justify-content-around\">\r\n          <svg class=\"icon__image fill-text-30\" style=\"width: 40px\">\r\n            <use [attr.xlink:href]=\"'#pdf'\"></use>\r\n          </svg>\r\n        </div>\r\n        <div class=\"text-align-center\">\r\n          Перетащите файлы в формате .xls, .las или .csv сюда или <span class=\"color-primary-30\">загрузите</span>\r\n        </div>\r\n      </div>\r\n    </teta-file-upload-area>\r\n  </div>`\r\n})"
            },
            {
                "name": "basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SidebarModule, IconModule, ButtonModule]\r\n  },\r\n  props: {\r\n    backdrop: boolean('backdrop', false),\r\n    position: SidebarPosition,\r\n    open1: false,\r\n    open2: false,\r\n    open3: false,\r\n    open4: false\r\n  },\r\n  template: `<div class=\"padding-14 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.left\" [open]=\"open1\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.right\" [open]=\"open2\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.top\" [open]=\"open3\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.bottom\" [open]=\"open4\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open1=!open1;open2=open3=open4=false;\">\r\n      <teta-icon [name]=\"'arrowLeft'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open2=!open2;open1=open3=open4=false;\">\r\n      <teta-icon [name]=\"'arrowRight'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open3=!open3;open2=open1=open4=false;\">\r\n      <teta-icon [name]=\"'arrowUp'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open4=!open4;open2=open3=open1=false;\">\r\n      <teta-icon [name]=\"'arrowDown'\"></teta-icon>\r\n    </button>\r\n  </div>`\r\n})"
            },
            {
                "name": "basicAccordion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/accordion/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [AccordionModule, IconModule]\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3 bg-panel-50\">\r\n      <teta-accordion class=\"bg-white-50\">\r\n        <teta-accordion-item>\r\n          <teta-accordion-head>\r\n            Heading 1\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 1</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n        <teta-accordion-item [disabled]=\"true\">\r\n          <teta-accordion-head>\r\n            Heading 2 (disabled)\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 2</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n        <teta-accordion-item>\r\n          <teta-accordion-head>\r\n            Heading 3\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 3</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n      </teta-accordion>\r\n    </div>`,\r\n})"
            },
            {
                "name": "basicChart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ChartModule],\r\n  },\r\n  props: {\r\n    config,\r\n  },\r\n  template: `<div class=\"font-body-3 padding-3 bg-background-0\" style=\"width: auto; height: 600px;\">\r\n      <teta-chart [config]=\"config\" class=\"bg-background-50 border border-text-50\"></teta-chart>\r\n    </div>`,\r\n})"
            },
            {
                "name": "basicContextMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ContextMenuModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.left\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n  },\r\n  template: `<button teta-button\r\n                     [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                     [palette]=\"'primary'\"\r\n                     [tetaContextMenu]=\"menu\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [className]=\"'one'\">\r\n              <teta-icon [palette]=\"'background'\" [name]=\"'settings'\"></teta-icon>\r\n              Right click on me\r\n            </button>\r\n            <ng-template #menu let-data=\"data\">\r\n              <div class=\"list shadow-1\" style=\"width: 200px\">\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'addCircle'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Add\r\n                </div>\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'closeBig'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Delete\r\n                </div>\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'copy'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Clone\r\n                </div>\r\n              </div>\r\n            </ng-template>`,\r\n})"
            },
            {
                "name": "basicInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [\r\n      IconModule,\r\n      InputModule,\r\n      FormsModule,\r\n      SelectModule,\r\n      RadioModule,\r\n      DatePickerModule,\r\n      ToggleModule,\r\n      CheckboxModule,\r\n    ],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\r\n  <div class=\"form-container\">\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'text-field'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n      </teta-input>\r\n      <teta-input [label]=\"'text-field disabled'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [disabled]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n      </teta-input>\r\n      <teta-input [label]=\"'text-field invalid'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [invalid]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\r\n          Has errors\r\n        </div>\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'input'\">\r\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n      <teta-input [label]=\"'input disabled'\">\r\n        <input class=\"input\" disabled [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n      <teta-input [label]=\"'input invalid'\">\r\n        <input class=\"input\" [class.input_invalid]=\"true\" [placeholder]=\"'placeholder'\" />\r\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\r\n          Has errors\r\n        </div>\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'input required'\" [required]=\"true\">\r\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'Select'\">\r\n        <teta-select></teta-select>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Select disabled'\">\r\n        <teta-select [disabled]=\"true\"></teta-select>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Select invalid'\">\r\n        <teta-select [invalid]=\"true\"></teta-select>\r\n      </teta-input>\r\n    </div>\r\n    <teta-input [label]=\"'Selection'\">\r\n      <teta-radio>\r\n        <teta-radio-button>Option 1</teta-radio-button>\r\n        <teta-radio-button>Option 2</teta-radio-button>\r\n        <teta-radio-button [disabled]=\"true\">Option 3</teta-radio-button>\r\n      </teta-radio>\r\n    </teta-input>\r\n    <teta-toggle>Off / On</teta-toggle>\r\n    <teta-toggle [disabled]=\"true\">Off / On</teta-toggle>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'Date'\">\r\n        <teta-date-picker></teta-date-picker>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Date disabled'\">\r\n        <teta-date-picker [disabled]=\"true\"></teta-date-picker>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Date invalid'\">\r\n        <teta-date-picker [invalid]=\"true\"></teta-date-picker>\r\n      </teta-input>\r\n    </div>\r\n    <teta-checkbox [binary]=\"true\">Check Me, babe</teta-checkbox>\r\n    <teta-checkbox [binary]=\"true\" [disabled]=\"true\">I am disabled</teta-checkbox>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'textarea'\">\r\n        <textarea class=\"textarea\" [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n      <teta-input [label]=\"'textarea disabled'\">\r\n        <textarea class=\"textarea\" disabled [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n      <teta-input [label]=\"'textarea invalid'\">\r\n        <textarea class=\"textarea textarea_invalid\" [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n    </div>\r\n  </div>\r\n</div>`,\r\n})"
            },
            {
                "name": "basicList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/list/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-10\">\r\n<div class=\"list shadow-1\" style=\"width: 200px\">\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n  </div>\r\n</div>\r\n</div>`,\r\n})"
            },
            {
                "name": "basicTab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tabs/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TabsModule, IconModule]\r\n  },\r\n  props: {},\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-3\" style=\"width 100px; height 800px;\">\r\n    <teta-tabs>\r\n      <teta-tab>\r\n        <ng-template tetaTabTitle>\r\n          <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>Результат\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_accent\">\r\n            <div class=\"container\">\r\n             1111\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n      <teta-tab>\r\n        <ng-template tetaTabTitle>\r\n          Код\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_code\">\r\n           CODE\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n      <teta-tab [disabled]=\"true\">\r\n        <ng-template tetaTabTitle>\r\n          Disabled\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_code\">\r\n           Disabled\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n    </teta-tabs>\r\n  </div>`,\r\n})"
            },
            {
                "name": "basicTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TableDemoModule, IconModule],\r\n  },\r\n  props: {\r\n    editType: select(\r\n      'editType',\r\n      {\r\n        row: EditType.row,\r\n        cell: EditType.cell,\r\n      },\r\n      EditType.cell\r\n    ),\r\n    selectType: select(\r\n      'selectType',\r\n      {\r\n        none: SelectType.none,\r\n        multiple: SelectType.multiple,\r\n        single: SelectType.single,\r\n      },\r\n      SelectType.multiple\r\n    ),\r\n    editEvent: select(\r\n      'editEvent',\r\n      {\r\n        focus: EditEvent.focus,\r\n        click: EditEvent.click,\r\n        doubleClick: EditEvent.doubleClick,\r\n      },\r\n      EditEvent.doubleClick\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"['assets/icons.svg', 'assets/color-icons.svg']\"\r\n                  class=\"bg-panel-50 padding-3\"\r\n                  style=\"display: flex; width: 1200px; height: 600px;\">\r\n                <teta-table-demo [size]=\"50\"\r\n                                  [editEvent]=\"editEvent\"\r\n                                  [editType]=\"editType\"\r\n                                  [selectType]=\"selectType\"\r\n                                  [virtual]=\"false\"></teta-table-demo>\r\n            </div>`,\r\n})"
            },
            {
                "name": "basicToolbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ToolbarModule, ButtonModule, IconModule],\r\n  },\r\n  props: {\r\n    data: treeData,\r\n  },\r\n  template: `<teta-toolbar [tetaIconSprite]=\"'assets/icons.svg'\" [palette]=\"'primary'\">\r\n  <button teta-button [palette]=\"'primary'\" [square]=\"true\">\r\n    <teta-icon [name]=\"'moreVertical'\"></teta-icon>\r\n  </button>\r\n  <span class=\"margin-left-2\">Скважины</span>\r\n</teta-toolbar>`,\r\n})"
            },
            {
                "name": "basicTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tree/Tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TreeModule, TetaTemplateModule, IconModule, BrowserAnimationsModule]\r\n  },\r\n  props: {\r\n    data: treeData\r\n  },\r\n  template: `<teta-tree [tetaIconSprite]=\"'assets/icons.svg'\" style=\"width: 400px;\" [data]=\"data\">\r\n  <ng-template tetaTemplate let-item>\r\n    <teta-icon [name]=\"item.icon\" class=\"fill-text-30 margin-right-2\"></teta-icon> {{item.name}}\r\n  </ng-template>\r\n</teta-tree>`,\r\n})"
            },
            {
                "name": "binary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [CheckboxModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    type: select('type', ['binary', 'list'], 'binary'),\r\n    allowUndefined: boolean('allowUndefined', false),\r\n    text: text('text', 'Remember me'),\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n  },\r\n  template: `<teta-checkbox [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                            [palette]=\"palette\"\r\n                            [ngModel]=\"value\"\r\n                            (ngModelChange)=\"setValue($event)\"\r\n                            [binary]=\"true\">\r\n              {{text}}\r\n            </teta-checkbox>`,\r\n})"
            },
            {
                "name": "buttons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ButtonModule, IconModule],\r\n  },\r\n  props: {\r\n    palettes: ['primary', 'text', 'red', 'yellow', 'green'],\r\n    text: text('text', 'Push me'),\r\n    leftIcon: boolean('leftIcon', true),\r\n    rightIcon: boolean('rightIcon', true),\r\n    disabled: boolean('disabled', false),\r\n  },\r\n  template: `<div class=\"row\" [tetaIconSprite]=\"'assets/icons.svg'\"  style=\"grid-gap: 12px\">\r\n  <div *ngFor=\"let palette of palettes\" class=\"column\" style=\"grid-gap: 8px\">\r\n    <div class=\"font-body-3\">\r\n      Default\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Only Icon\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [square]=\"true\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Outline\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'outline'\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Ghost\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'ghost'\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n  </div>\r\n</div>`,\r\n})"
            },
            {
                "name": "cellComponentsMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<FilterType, Type<any>>",
                "defaultValue": "new Map<\r\n  FilterType,\r\n  Type<any>\r\n>()\r\n  .set(FilterType.number, NumericCellComponent)\r\n  .set(FilterType.date, DateCellComponent)\r\n  .set(FilterType.list, ListCellComponent)\r\n  .set(FilterType.string, StringCellComponent)\r\n  .set(FilterType.boolean, BooleanCellComponent)\r\n  .set(FilterType.custom, StringCellComponent)"
            },
            {
                "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CheckboxComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "classTypeLegendMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<SeriesType, string>()\r\n  .set(SeriesType.line, 'line')\r\n  .set(SeriesType.spline, 'line')"
            },
            {
                "name": "coloredIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule]\r\n  },\r\n  props: {\r\n    palette: select('palette', ['primary', 'text', 'red', 'white', 'yellow', 'green'], 'primary'),\r\n    icons: coloredIconsList,\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/color-icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\r\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\r\n                <span class=\"padding-left-4\">{{icon}}</span>\r\n              </div>\r\n            </div>`,\r\n})"
            },
            {
                "name": "coloredIconsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/icons-list.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'gisColor',\r\n  'gisInnerColor',\r\n  'gisSimpleColor',\r\n  'grpAddColor',\r\n  'grpColor',\r\n  'handbagAddColor',\r\n  'handbagColor',\r\n  'improveColor',\r\n  'lineColor',\r\n  'lineDashedColor',\r\n  'lineGradientColor',\r\n  'liquidAddColor',\r\n  'liquidSystemColor',\r\n  'lithotypeColor',\r\n  'mapColor',\r\n  'nktColor',\r\n  'opzAddColor',\r\n  'opzColor',\r\n  'sortDownColor',\r\n  'sortUpColor',\r\n  'sumAddColor',\r\n  'sumColor',\r\n  'wellAddColor',\r\n  'wellColor',\r\n  'wellConstructionColor',\r\n  'addColor',\r\n  'areasColor',\r\n  'barChart',\r\n  'barChart',\r\n  'calcColor',\r\n  'calendarColor',\r\n  'chartLineColor',\r\n  'chartLineDashed',\r\n  'chartLineGradientColor',\r\n  'clusterColor',\r\n  'coinColor',\r\n  'deleteColor',\r\n  'documentColor',\r\n  'favorite',\r\n  'filterColor',\r\n  'filterSortDownColor',\r\n  'filterSortUpColor',\r\n  'folderAddColor',\r\n  'folderColor',\r\n  'geomechColor',\r\n]"
            },
            {
                "name": "colorList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/color-list.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'rgb(99,114,255)',\r\n  'rgb(218,241,152)',\r\n  'rgb(231,153,70,1)',\r\n  'rgb(176,51,181)',\r\n  'rgb(245,111,97,1)',\r\n  'rgb(128,194,231,1)',\r\n  'rgb(50,135,85,1)',\r\n  'rgb(156,110,107,1)',\r\n  'rgb(236,189,138,1)',\r\n  'rgb(138,146,215,1)',\r\n  'rgb(49,149,89,1)',\r\n  'rgb(212,180,93,1)',\r\n  'rgb(93,150,163,1)',\r\n  'rgb(212,104,93,1)',\r\n  'rgb(139,117,57,1)',\r\n  'rgb(127,217,162,1)',\r\n  'rgb(129,62,134,1)',\r\n  'rgb(192,157,154,1)',\r\n  'rgb(236,147,138,1)',\r\n  'rgb(79,169,115,1)',\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  new TableColumn({\r\n    name: 'name',\r\n    flex: 1,\r\n    locked: true,\r\n    filterType: FilterType.string,\r\n  }),\r\n  new TableColumn({\r\n    name: 'date',\r\n    locked: true,\r\n    filterType: FilterType.date,\r\n  }),\r\n  new TableColumn({\r\n    name: 'value',\r\n    locked: true,\r\n    filterType: FilterType.number,\r\n  }),\r\n  new TableColumn({\r\n    name: 'summary',\r\n    filterType: FilterType.number,\r\n  }),\r\n  new TableColumn({\r\n    name: 'ram',\r\n    caption: 'RAM',\r\n    filterType: FilterType.list,\r\n  }),\r\n  new TableColumn({\r\n    name: 'location',\r\n    columns: [\r\n      new TableColumn({\r\n        name: 'city',\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'state',\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'address',\r\n        flex: 2,\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'zip',\r\n        filterType: FilterType.string,\r\n      }),\r\n    ],\r\n  }),\r\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IChartConfig",
                "defaultValue": "{\r\n  name: '123',\r\n  xAxis: [\r\n    {\r\n      type: AxisType.time,\r\n      visible: true,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      opposite: true,\r\n      min: 1,\r\n      max: 1500,\r\n    },\r\n  ],\r\n  yAxis: [\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      title: 'атм',\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -500,\r\n      max: 10000,\r\n      title: 'кг/см2',\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -200,\r\n      max: 200,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: 5000,\r\n      max: 7000,\r\n      opposite: true,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -0.05,\r\n      max: 0.05,\r\n      opposite: true,\r\n      title: 'тн',\r\n    },\r\n    {\r\n      type: AxisType.log,\r\n      visible: true,\r\n      min: 1000000,\r\n      max: 2000000,\r\n    },\r\n  ],\r\n  series: [\r\n    {\r\n      type: SeriesType.line,\r\n      data: points1,\r\n      name: 'Series 1',\r\n      xAxisIndex: 0,\r\n      yAxisIndex: 0,\r\n      color: cssColorNames[randomColor()].toLowerCase(),\r\n      strokeWidth: 2,\r\n    },\r\n    {\r\n      type: SeriesType.line,\r\n      data: points2.map((point) => {\r\n        return { ...point, color: cssColorNames[randomColor()] };\r\n      }),\r\n      name: 'Series 2',\r\n      xAxisIndex: 0,\r\n      yAxisIndex: 0,\r\n      strokeWidth: 1.5,\r\n      color: cssColorNames[randomColor()].toLowerCase(),\r\n    },\r\n  ],\r\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ChartOptions",
                "defaultValue": "new ChartOptions({\r\n  name: '123',\r\n  zoom: { enable: true },\r\n  xAxis: [\r\n    new AxisOptions({\r\n      type: 'number',\r\n      plotBands,\r\n    }),\r\n  ],\r\n  yAxis: [new AxisOptions()],\r\n  series,\r\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "cssColorNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'AliceBlue',\r\n  'AntiqueWhite',\r\n  'Aqua',\r\n  'Aquamarine',\r\n  'Azure',\r\n  'Beige',\r\n  'Bisque',\r\n  'Black',\r\n  'BlanchedAlmond',\r\n  'Blue',\r\n  'BlueViolet',\r\n  'Brown',\r\n  'BurlyWood',\r\n  'CadetBlue',\r\n  'Chartreuse',\r\n  'Chocolate',\r\n  'Coral',\r\n  'CornflowerBlue',\r\n  'Cornsilk',\r\n  'Crimson',\r\n  'Cyan',\r\n  'DarkBlue',\r\n  'DarkCyan',\r\n  'DarkGoldenRod',\r\n  'DarkGray',\r\n  'DarkGrey',\r\n  'DarkGreen',\r\n  'DarkKhaki',\r\n  'DarkMagenta',\r\n  'DarkOliveGreen',\r\n  'DarkOrange',\r\n  'DarkOrchid',\r\n  'DarkRed',\r\n  'DarkSalmon',\r\n  'DarkSeaGreen',\r\n  'DarkSlateBlue',\r\n  'DarkSlateGray',\r\n  'DarkSlateGrey',\r\n  'DarkTurquoise',\r\n  'DarkViolet',\r\n  'DeepPink',\r\n  'DeepSkyBlue',\r\n  'DimGray',\r\n  'DimGrey',\r\n  'DodgerBlue',\r\n  'FireBrick',\r\n  'FloralWhite',\r\n  'ForestGreen',\r\n  'Fuchsia',\r\n  'Gainsboro',\r\n  'GhostWhite',\r\n  'Gold',\r\n  'GoldenRod',\r\n  'Gray',\r\n  'Grey',\r\n  'Green',\r\n  'GreenYellow',\r\n  'HoneyDew',\r\n  'HotPink',\r\n  'IndianRed',\r\n  'Indigo',\r\n  'Ivory',\r\n  'Khaki',\r\n  'Lavender',\r\n  'LavenderBlush',\r\n  'LawnGreen',\r\n  'LemonChiffon',\r\n  'LightBlue',\r\n  'LightCoral',\r\n  'LightCyan',\r\n  'LightGoldenRodYellow',\r\n  'LightGray',\r\n  'LightGrey',\r\n  'LightGreen',\r\n  'LightPink',\r\n  'LightSalmon',\r\n  'LightSeaGreen',\r\n  'LightSkyBlue',\r\n  'LightSlateGray',\r\n  'LightSlateGrey',\r\n  'LightSteelBlue',\r\n  'LightYellow',\r\n  'Lime',\r\n  'LimeGreen',\r\n  'Linen',\r\n  'Magenta',\r\n  'Maroon',\r\n  'MediumAquaMarine',\r\n  'MediumBlue',\r\n  'MediumOrchid',\r\n  'MediumPurple',\r\n  'MediumSeaGreen',\r\n  'MediumSlateBlue',\r\n  'MediumSpringGreen',\r\n  'MediumTurquoise',\r\n  'MediumVioletRed',\r\n  'MidnightBlue',\r\n  'MintCream',\r\n  'MistyRose',\r\n  'Moccasin',\r\n  'NavajoWhite',\r\n  'Navy',\r\n  'OldLace',\r\n  'Olive',\r\n  'OliveDrab',\r\n  'Orange',\r\n  'OrangeRed',\r\n  'Orchid',\r\n  'PaleGoldenRod',\r\n  'PaleGreen',\r\n  'PaleTurquoise',\r\n  'PaleVioletRed',\r\n  'PapayaWhip',\r\n  'PeachPuff',\r\n  'Peru',\r\n  'Pink',\r\n  'Plum',\r\n  'PowderBlue',\r\n  'Purple',\r\n  'RebeccaPurple',\r\n  'Red',\r\n  'RosyBrown',\r\n  'RoyalBlue',\r\n  'SaddleBrown',\r\n  'Salmon',\r\n  'SandyBrown',\r\n  'SeaGreen',\r\n  'SeaShell',\r\n  'Sienna',\r\n  'Silver',\r\n  'SkyBlue',\r\n  'SlateBlue',\r\n  'SlateGray',\r\n  'SlateGrey',\r\n  'Snow',\r\n  'SpringGreen',\r\n  'SteelBlue',\r\n  'Tan',\r\n  'Teal',\r\n  'Thistle',\r\n  'Tomato',\r\n  'Turquoise',\r\n  'Violet',\r\n  'Wheat',\r\n  'White',\r\n  'WhiteSmoke',\r\n  'Yellow',\r\n  'YellowGreen',\r\n]"
            },
            {
                "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DatePickerComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "datePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: new Date(),\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<div>{{date}}</div>\r\n              <teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"date = $event; log('date', $event)\"></teta-date-picker>`,\r\n})"
            },
            {
                "name": "dateTimePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: null,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<div>{{date}}</div>\r\n              <teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [showTime]=\"true\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"date = $event;log('date', $event)\"></teta-date-picker>`,\r\n})"
            },
            {
                "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DaySelectComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "defaultChartConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/default/default-chart-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IChartConfig",
                "defaultValue": "{\r\n  series: [],\r\n  xAxis: [{\r\n    visible: true\r\n  }],\r\n  yAxis: [{\r\n    visible: true\r\n  }],\r\n  gridLines: true\r\n}"
            },
            {
                "name": "defaultDrawerMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<SeriesType, IDrawer<BasePoint>>()\r\n  .set(SeriesType.area, new AreaDrawer())\r\n  .set(SeriesType.bar, new BarDrawer())\r\n  .set(SeriesType.line, new LineDrawer())\r\n  .set(SeriesType.pie, new PieDrawer())\r\n  .set(SeriesType.scatter, new ScatterDrawer())\r\n  .set(SeriesType.spline, new SplineDrawer())\r\n  .set(SeriesType.contour, new ContourDrawer())"
            },
            {
                "name": "defaultLegendDrawerMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<LegendType, ILegendDrawer>()\r\n  .set(LegendType.swatches, new SwatchDrawer())\r\n  .set(LegendType.gradient, new GradientDrawer())"
            },
            {
                "name": "dict",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  filterOptions: [\r\n    { id: 8, name: 8 },\r\n    { id: 16, name: 16 },\r\n    { id: 32, name: 32 },\r\n    { id: 64, name: 64 },\r\n    { id: 128, name: 128 },\r\n  ],\r\n}"
            },
            {
                "name": "dragSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DragSortModule],\r\n  },\r\n  props: {\r\n    items: [\r\n      {\r\n        id: 0,\r\n        name: 0,\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 2,\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 3,\r\n      },\r\n    ],\r\n    update: (event: DragSortEvent<any>, list: any[]) => {\r\n      return ArrayUtil.moveItem(list, event.previousIndex, event.newIndex);\r\n    },\r\n  },\r\n  template: `<div tetaDragSortContainer\r\n                  (dragSorted)=\"items = update($event, items)\"\r\n                  [dragSortList]=\"items\"\r\n                  class=\"padding-10 margin-10 row row_auto border border-text-5\">\r\n              <div [tetaDragSortItem]=\"item\"\r\n                    *ngFor=\"let item of items\"\r\n                    class=\"padding-4 border border-text-10\">\r\n                {{item.name}}\r\n              </div>\r\n            </div>\r\n            <div tetaDragSortContainer\r\n                  (dragSorted)=\"items = update($event, items)\"\r\n                  [dragSortList]=\"items\"\r\n                  class=\"padding-10 margin-10 column row_auto border border-text-5\">\r\n              <div [tetaDragSortItem]=\"item\"\r\n                    [dragSortDirection]=\"'vertical'\"\r\n                    *ngFor=\"let item of items\"\r\n                    class=\"padding-4 border border-text-10\">\r\n                {{item.name}}\r\n              </div>\r\n            </div>`,\r\n})"
            },
            {
                "name": "dropdownComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args) => ({\r\n  moduleMetadata: {\r\n    imports: [DropdownModule, ButtonModule, IconModule]\r\n  },\r\n  props: {\r\n    ...args,\r\n    verticalAlign: [\r\n      VerticalAlign.bottom,\r\n      VerticalAlign.top,\r\n      VerticalAlign.center,\r\n      VerticalAlign.auto],\r\n  },\r\n  template: `<div class=\"padding-10 bg-panel-50\"\r\n                  [style.transform]=\"transform ? 'translate(100px, 100px)' : ''\"\r\n                  [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-dropdown *ngFor=\"let valign of verticalAlign\"\r\n                    [align]=\"align\"\r\n                    [verticalAlign]=\"valign\"\r\n                    [appendToBody]=\"appendToBody\"\r\n                    [autoClose]=\"autoClose\"\r\n                    [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\r\n        Click to open\r\n      </button>\r\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n        </div>\r\n      </div>\r\n    </teta-dropdown>\r\n  </div>`\r\n})"
            },
            {
                "name": "dropdownDirective",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args) => ({\r\n  moduleMetadata: {\r\n    imports: [DropdownModule, ButtonModule, IconModule]\r\n  },\r\n  props: {\r\n    ...args,\r\n    verticalAlign: [\r\n      VerticalAlign.bottom,\r\n      VerticalAlign.top,\r\n      VerticalAlign.center,\r\n      VerticalAlign.auto],\r\n    alignMap\r\n  },\r\n  template: `<div class=\"padding-10 bg-panel-50 row\"\r\n                  style=\"width: 500px;\"\r\n                  [style.transform]=\"transform ? 'translate(100px, 100px)' : ''\"\r\n                  [style.margin]=\"transform ? '' : '100px 100px'\"\r\n                  [tetaIconSprite]=\"'assets/icons.svg'\">\r\n                  <div style=\"position: fixed; top: 0; left: 0;\">Fixed</div>\r\n                  <div style=\"position: fixed; top: 0; right: 0;transform: translateX(0px)\">Fixed trans</div>\r\n    <div tetaDropdown\r\n          class=\"margin-right-4\"\r\n          *ngFor=\"let valign of verticalAlign\"\r\n          [align]=\"align\"\r\n          [verticalAlign]=\"valign\"\r\n          [appendToBody]=\"appendToBody\"\r\n          [autoClose]=\"autoClose\"\r\n          [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\r\n        {{alignMap.get(valign)}}\r\n      </button>\r\n      <div tetaDropdownContent class=\"list scrollable\" style=\"width: 200px\">\r\n        <ng-container *ngFor=\"let i of [1,2,3]\">\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>`\r\n})"
            },
            {
                "name": "filterComponentsMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<FilterType, Type<any>>",
                "defaultValue": "new Map<\r\n  FilterType,\r\n  Type<any>\r\n>()\r\n  .set(FilterType.number, NumericFilterComponent)\r\n  .set(FilterType.date, DateFilterComponent)\r\n  .set(FilterType.list, ListFilterComponent)\r\n  .set(FilterType.string, StringFilterComponent)\r\n  .set(FilterType.boolean, BooleanFilterComponent)\r\n  .set(FilterType.custom, StringFilterComponent)"
            },
            {
                "name": "formatNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  value: any,\r\n  decimalLength: number,\r\n  chunkDelimiter: string,\r\n  decimalDelimiter: string,\r\n  chunkLength: number\r\n) => {\r\n  const abs = Math.abs(value);\r\n  if (0 < abs && 1 > abs) {\r\n    const firstDigitIndex = Math.floor(Math.abs(Math.log10(abs)));\r\n    decimalLength += firstDigitIndex;\r\n  }\r\n  const precision = Math.min(getPrecision(value), Math.floor(decimalLength));\r\n  const result =\r\n    '\\\\d(?=(\\\\d{' + chunkLength + '})+' + (precision > 0 ? '\\\\D' : '$') + ')';\r\n  const num = value.toFixed(precision);\r\n  return (decimalDelimiter ? num.replace('.', decimalDelimiter) : num).replace(\r\n    new RegExp(result, 'g'),\r\n    '$&' + chunkDelimiter\r\n  );\r\n}"
            },
            {
                "name": "fromComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: ModalFromComponentComponent,\r\n  props: {\r\n    name: text('name', 'Название'),\r\n    description: text('description', 'Описание объекта'),\r\n  },\r\n})"
            },
            {
                "name": "fromString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/hint/Hint.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [HintModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n    delay: number('delay', 0, {\r\n      max: 5000,\r\n      min: 0,\r\n      range: true,\r\n      step: 100,\r\n    }),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n              <button teta-button\r\n                     [palette]=\"'primary'\"\r\n                     [tetaHint]=\"'You can get it now, right?'\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [delay]=\"delay\"\r\n                     [className]=\"'one'\">\r\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                Hover me\r\n              </button>\r\n            </div>`,\r\n})"
            },
            {
                "name": "fromString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TooltipModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n                <button teta-button\r\n                         [palette]=\"'primary'\"\r\n                         [tetaTooltip]=\"'You can get it now, right?'\"\r\n                         [align]=\"align\"\r\n                         [verticalAlign]=\"verticalAlign\"\r\n                         [className]=\"'one'\">\r\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                  Click me\r\n                </button>\r\n              </div>`,\r\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/hint/Hint.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [HintModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    test: 'AAAAA',\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n    delay: number('delay', 0, {\r\n      max: 5000,\r\n      min: 0,\r\n      range: true,\r\n      step: 100,\r\n    }),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n              <ng-template #hint>\r\n                <div>{{test}}</div>\r\n              </ng-template>\r\n              <button teta-button\r\n                     [palette]=\"'primary'\"\r\n                     [tetaHint]=\"hint\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [delay]=\"delay\"\r\n                     [className]=\"'one'\">\r\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                Hover me\r\n              </button>\r\n            </div>`,\r\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TooltipModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n                <ng-template #hint>\r\n                  From template\r\n                </ng-template>\r\n                <button teta-button\r\n                         [palette]=\"'primary'\"\r\n                         [tetaTooltip]=\"hint\"\r\n                         [align]=\"align\"\r\n                         [verticalAlign]=\"verticalAlign\"\r\n                         [className]=\"'one'\">\r\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                  Click me\r\n                </button>\r\n              </div>`,\r\n})"
            },
            {
                "name": "fromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/modal/Modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: ModalFromTemplateComponent,\r\n  props: {\r\n    name: text('name', 'Название'),\r\n    description: text('description', 'Описание объекта'),\r\n  },\r\n})"
            },
            {
                "name": "getCellComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(column: TableColumn): Type<any> =>\r\n  cellComponentsMap.has(column.filterType)\r\n    ? cellComponentsMap.get(column.filterType)\r\n    : StringCellComponent"
            },
            {
                "name": "getFilterComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item: FilterItem): Type<any> =>\r\n  filterComponentsMap.has(item.filterType)\r\n    ? filterComponentsMap.get(item.filterType)\r\n    : StringFilterComponent"
            },
            {
                "name": "getOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(size) => {\r\n  const res = [];\r\n  for (let i = 0; i < size; i++) {\r\n    res.push({\r\n      id: i,\r\n      name: faker.address.city(),\r\n    });\r\n  }\r\n  return res;\r\n}"
            },
            {
                "name": "getPrecision",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: number) => {\r\n  if (!isFinite(a)) {\r\n    return 0;\r\n  }\r\n  let e = 1;\r\n  let p = 0;\r\n  while (Math.round(a * e) / e !== a) {\r\n    e *= 10;\r\n    p++;\r\n  }\r\n  return p;\r\n}"
            },
            {
                "name": "getTextWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/core/utils/get-text-width.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  inputText?: string | number | null,\r\n  backupRatio = 0.5,\r\n  fontSize = 11\r\n): number => {\r\n  let text = inputText ?? '';\r\n  text = text.toString();\r\n\r\n  return fontSize * backupRatio * text.length;\r\n}"
            },
            {
                "name": "horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DelimiterModule, ButtonModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <button teta-button [palette]=\"'primary'\">\r\n      <teta-icon [name]=\"'settings'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'add'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'delete'\"></teta-icon>\r\n    </button>\r\n  </div>`,\r\n})"
            },
            {
                "name": "horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ResizePanelModule],\r\n  },\r\n  props: {\r\n    maxSize: number('maxSize', 500, {\r\n      min: 300,\r\n      max: 450,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    minSize: number('minSize', 50, {\r\n      min: 50,\r\n      max: 150,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    grabPosition: select('grabPosition', ['left', 'right'], 'left'),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <div class=\"row bg-white-50\"\r\n                      style=\"width: 500px; height: 500px;\">\r\n                  <div class=\"column_6 bg-primary-5\">\r\n                    I will surrender\r\n                  </div>\r\n                  <teta-resize-panel\r\n                        [maxSize]=\"maxSize\"\r\n                        [minSize]=\"minSize\"\r\n                        [direction]=\"'vertical'\"\r\n                        [grabPosition]=\"grabPosition\"\r\n                        class=\"column_6 bg-red-5\">\r\n                    I will resize\r\n                  </teta-resize-panel>\r\n                </div>\r\n              </div>`,\r\n})"
            },
            {
                "name": "icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule]\r\n  },\r\n  props: {\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    icons: iconsList,\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\r\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\r\n                <span class=\"padding-left-4\">{{icon}}</span>\r\n              </div>\r\n            </div>`,\r\n})"
            },
            {
                "name": "iconsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/icon/icons-list.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'add',\r\n  'addArea',\r\n  'addCircle',\r\n  'addComment',\r\n  'arrowDown',\r\n  'arrowDownKey',\r\n  'arrowDownSmall',\r\n  'arrowLeft',\r\n  'arrowLeftKey',\r\n  'arrowLeftSmall',\r\n  'arrowRight',\r\n  'arrowRightKey',\r\n  'arrowRightSmall',\r\n  'arrowUp',\r\n  'arrowUpDownSmall',\r\n  'arrowUpKey',\r\n  'arrowUpSmall',\r\n  'autoSize',\r\n  'autoSizeAll',\r\n  'backspace',\r\n  'bullet',\r\n  'calc',\r\n  'calendar',\r\n  'camera',\r\n  'chart',\r\n  'checkCircle',\r\n  'clock',\r\n  'clockChange',\r\n  'closeBig',\r\n  'closeCircle',\r\n  'comment',\r\n  'copy',\r\n  'copySelected',\r\n  'cut',\r\n  'dash',\r\n  'delete',\r\n  'deleteSelected',\r\n  'document',\r\n  'documentAnalyze',\r\n  'dots',\r\n  'download',\r\n  'drop',\r\n  'edit',\r\n  'end',\r\n  'eye',\r\n  'fader',\r\n  'filter',\r\n  'filterSortDown',\r\n  'filterSortUp',\r\n  'flag',\r\n  'folder',\r\n  'fullScreen',\r\n  'gantt',\r\n  'gisMonochrome',\r\n  'handbag',\r\n  'info',\r\n  'isoline',\r\n  'lamp',\r\n  'layers',\r\n  'layersLines',\r\n  'link',\r\n  'list',\r\n  'lock',\r\n  'map',\r\n  'measurement',\r\n  'menu',\r\n  'minus',\r\n  'monitoringDepth',\r\n  'monitoringTime',\r\n  'moreHorizontal',\r\n  'moreVertical',\r\n  'multiCopy',\r\n  'newTemplate',\r\n  'noSignal',\r\n  'paste',\r\n  'pause',\r\n  'pc',\r\n  'pdf',\r\n  'pieChart',\r\n  'pin',\r\n  'play',\r\n  'playBackRight',\r\n  'playForwardRight',\r\n  'print',\r\n  'question',\r\n  'redo',\r\n  'rewBack',\r\n  'rewForward',\r\n  'ring',\r\n  'save',\r\n  'search',\r\n  'settings',\r\n  'signal',\r\n  'square',\r\n  'star',\r\n  'start',\r\n  'stop',\r\n  'sum',\r\n  'table',\r\n  'tabletGraph',\r\n  'templateDownload',\r\n  'templateSettings',\r\n  'templateUpload',\r\n  'tick',\r\n  'timeOut',\r\n  'tree',\r\n  'treeTurn',\r\n  'undo',\r\n  'unpin',\r\n  'update',\r\n  'upload',\r\n  'user',\r\n  'warning',\r\n  'well',\r\n  'wrench',\r\n  'xls',\r\n  'xyz',\r\n  'horizontal',\r\n  'vertical',\r\n  'srt',\r\n  'nolteAnalysis',\r\n  'miniFrac',\r\n  'hornerAnalysis',\r\n]"
            },
            {
                "name": "interactiveList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/list/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule],\r\n  },\r\n  template: `<div class=\"padding-10\">\r\n<div class=\"list shadow-1\" style=\"width: 200px\">\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n  </div>\r\n</div>\r\n</div>`,\r\n})"
            },
            {
                "name": "item",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  name: `${faker.name.firstName()} ${faker.name.lastName()}`,\r\n  date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\r\n  value: faker.datatype.number({ min: 0, max: 100 }),\r\n  summary: faker.datatype.number({ min: 0, max: 100000 }),\r\n  ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\r\n  address: faker.address.streetAddress(),\r\n  state: faker.address.state(),\r\n  city: faker.address.city(),\r\n  zip: faker.address.zipCode(),\r\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "line",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ChartModule, IconModule],\r\n  },\r\n  props: {\r\n    config,\r\n  },\r\n  template: `<div style=\"height: 100vh\" [tetaIconSprite]=\"['assets/icons.svg', 'assets/lithotype-icons.svg']\" >\r\n  <teta-chart [config]=\"config\"></teta-chart>\r\n</div>`,\r\n})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [CheckboxModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    type: select('type', ['binary', 'list'], 'binary'),\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n    values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    result: [],\r\n    selectAll: (value: boolean, result: number[], values: number[]) => {\r\n      result = [];\r\n      if (value) {\r\n        result.push(...values);\r\n      }\r\n      return result;\r\n    },\r\n    allSelected: (result: number[], values: number[]) => {\r\n      if (!result || result?.length < 1) {\r\n        return false;\r\n      }\r\n      if (values.every((_) => result.indexOf(_) >= 0)) {\r\n        return true;\r\n      }\r\n      return undefined;\r\n    },\r\n  },\r\n  template: `\r\n<div style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-4\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n  <teta-checkbox  [ngModel]=\"allSelected(result, values)\"\r\n                  [palette]=\"palette\"\r\n                  (ngModelChange)=\"result = selectAll($event, result, values)\"\r\n                  [allowNull]=\"true\"\r\n                  [binary]=\"true\">Выбрать все</teta-checkbox>\r\n</div>\r\n<div *ngFor=\"let num of values\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n  <teta-checkbox [palette]=\"palette\" [ngModel]=\"result\" (ngModelChange)=\"result = $event;setValue($event)\" [value]=\"num\">\r\n    Option {{num}}\r\n  </teta-checkbox>\r\n</div>`,\r\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "messageSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/message/Message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MessageSamplesModule]\r\n  },\r\n  template: `<teta-message-sample></teta-message-sample>`,\r\n})"
            },
            {
                "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MonthPickerComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "monthPicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: new Date(),\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<teta-month-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"log('date', $event)\"></teta-month-picker>`,\r\n})"
            },
            {
                "name": "multipleCustom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: select('icon', iconsList, null),\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 300px;\"\r\n                  [options]=\"options\"\r\n                  [multiple]=\"true\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [valueRef]=\"'id'\"\r\n                  [textRef]=\"'name'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n      <ng-template tetaSelectValue let-value>\r\n      <div class=\"row row_auto overflow-hidden\">\r\n        <div *ngFor=\"let item of value\" class=\"color-red-50\">\r\n          {{item?.name}},\r\n        </div>\r\n      </div>\r\n      </ng-template>\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
            },
            {
                "name": "multipleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: select('icon', iconsList, null),\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 300px;\"\r\n                  [options]=\"options\"\r\n                  [multiple]=\"true\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [valueRef]=\"'id'\"\r\n                  [textRef]=\"'name'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n<!--      <ng-template tetaSelectValue let-value>-->\r\n<!--        {{value?.name}}-->\r\n<!--      </ng-template>-->\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tabs/tab/tab.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "onlyNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [OnlyNumberModule, FormsModule],\r\n  },\r\n  props: {\r\n    data: 123,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <input tetaOnlyNumber\r\n                        class=\"input\"\r\n                        [ngModel]=\"data\"\r\n                        (ngModelChange)=\"data=$event;log('tetaOnlyNumber', $event)\"/>\r\n                <div>{{data}}</div>\r\n              </div>`,\r\n})"
            },
            {
                "name": "pagerSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/pager/Pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [PagerModule, IconModule]\r\n  },\r\n  template: `<teta-pager [tetaIconSprite]=\"'assets/icons.svg'\"></teta-pager>`,\r\n})"
            },
            {
                "name": "panel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ExpandPanelModule],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\r\n    <teta-expand-panel></teta-expand-panel>\r\n  </div>`,\r\n})"
            },
            {
                "name": "plotBands",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  new PlotBand({\r\n    id: 0,\r\n    from: 10,\r\n    to: 12,\r\n    color: 'green',\r\n    opacity: 0.2,\r\n  }),\r\n  new PlotBand({\r\n    id: 1,\r\n    from: 20,\r\n    to: 25,\r\n    color: 'red',\r\n    image: 'patternintersect',\r\n    opacity: 0.3,\r\n  }),\r\n]"
            },
            {
                "name": "points1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/chart-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    x: 1619169153454,\r\n    y: 0,\r\n  },\r\n  {\r\n    x: 1619268153454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619286153454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619289969454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619308689454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619319705454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619321505454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619326289854,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619328575854,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619394095854,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619419169854,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619443124693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619462996693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619465300693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619467100693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619476532693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619481338693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619486144693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619495576693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619499176693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619500976693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619510408693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619512208693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619515088693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619529488693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619543888693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619556920693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619560520693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619562320693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619570960693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619581760693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619594360693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619597960693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619633744693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619637560693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619641160693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619649296693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619706896693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619836496693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619843142293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619861142293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619862942293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619872050293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619878170293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619891130293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619896062293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619977659893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1619998179893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620016503893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620042405893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620222405893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620233043893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620245049893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620253491893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620257559893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620259359893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620277521893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620279321893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620281571893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620282291893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620296691893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620314691893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620317661893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620318381893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620320181893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620340143893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620345543893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620346083893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620510003893,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620547674861,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620577339377,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620624661377,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620743221377,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620767892345,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620783002022,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620827498022,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620832406934,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620834206934,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620870112737,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620875021649,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620876821649,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620912176488,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620924795843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620926595843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620940995843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620953775843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621117359843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621128159843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621133559843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621135359843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621170355172,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621175893185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621177693185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621213045185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621221445185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621223245185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621234045185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621235125185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621245325185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621332870640,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621334776066,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621339254466,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621353013666,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621410613666,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623114330638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623157530638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623175530638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623177330638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623253831799,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623260653799,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623266371114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623288223114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623306943114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623371023114,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623377485049,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623392414081,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623398156016,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623409205789,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623411005789,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623446425144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623460825144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623489625144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623525044499,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623547488370,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623606888370,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623611053531,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623626130950,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623629576111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623638576111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623640376111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623657746735,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623665133195,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623666933195,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623769533195,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623786840292,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623811246744,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623827833841,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623833965487,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623835765487,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623864987401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623873807401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623875607401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623921939401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623939939401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623941739401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623954963401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624010025401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624027521401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624034478401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624050191401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624062755401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624075193401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624087205401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624090805401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624142681401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624171481401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624196681401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624218641401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624229801401,\r\n    y: 3370,\r\n  },\r\n]"
            },
            {
                "name": "points2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/chart-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    x: 1618206576000,\r\n    y: 1257,\r\n  },\r\n  {\r\n    x: 1619073682000,\r\n    y: 1582,\r\n  },\r\n  {\r\n    x: 1619284687000,\r\n    y: 1751,\r\n  },\r\n]"
            },
            {
                "name": "prependZero",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/pipe/util/number-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(input: number, length: number) =>\r\n  ('0'.repeat(length) + input).slice(-length)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "radioButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/radio/Radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [RadioModule, FormsModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-radio [(ngModel)]=\"aaa\">\r\n      <teta-radio-button [value]=\"1\">1</teta-radio-button>\r\n      <teta-radio-button [value]=\"2\">2</teta-radio-button>\r\n      <teta-radio-button [value]=\"3\" [disabled]=\"true\">4</teta-radio-button>\r\n    </teta-radio>\r\n  </div>`,\r\n})"
            },
            {
                "name": "randomColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "randomInt(0, cssColorNames.length - 1)"
            },
            {
                "name": "reactiveForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [\r\n      SampleInputModule,\r\n      IconModule,\r\n      InputModule,\r\n      FormsModule,\r\n      SelectModule,\r\n      RadioModule,\r\n      DatePickerModule,\r\n      ToggleModule,\r\n      CheckboxModule,\r\n    ],\r\n  },\r\n  props: {\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\r\n              <teta-sample-input></teta-sample-input>\r\n            </div>`,\r\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/directive/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [LoaderModule]\r\n  },\r\n  props: {\r\n    show: boolean('show', true)\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\" [tetaLoader]=\"show\">\r\n                \r\n              </div>`,\r\n})"
            },
            {
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ProgressBarModule, FormsModule],\r\n    entryComponents: [],\r\n  },\r\n  props: {\r\n    min: number('min', 0),\r\n    max: number('max', 100),\r\n    value: number('value', 50),\r\n    step: number('step', 0),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\r\n              <teta-progress-bar [min]=\"min\" [max]=\"max\" [step]=\"step\" [(ngModel)]=\"value\"></teta-progress-bar>\r\n            </div>`,\r\n})"
            },
            {
                "name": "sample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toggle/Toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ToggleModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    text: text('text', 'Remember me'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n  },\r\n  template: `<teta-toggle [tetaIconSprite]=\"'assets/icons.svg'\"\r\n              [ngModel]=\"value\"\r\n              (ngModelChange)=\"setValue($event)\">\r\n              {{text}}\r\n            </teta-toggle>`,\r\n})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "series",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Series[]",
                "defaultValue": "seriesType.map(\r\n  (type: SeriesType, index: number) => {\r\n    return new Series<BasePoint>({\r\n      id: index,\r\n      type,\r\n      name: type.toString(),\r\n      color: colorList[index],\r\n\r\n      data: Array.from(Array(50).keys()).map((key, index) => {\r\n        const num = faker.datatype.number({ min: 0, max: 100 });\r\n        return {\r\n          x: key,\r\n          y: num > 50 && num < 60 ? null : num,\r\n          marker: {\r\n            draggable: true,\r\n            dragType: DragPointType.y,\r\n            style: {\r\n              radius: 5,\r\n              color: 'steelblue',\r\n            },\r\n          },\r\n        };\r\n      }),\r\n    });\r\n  }\r\n)"
            },
            {
                "name": "seriesType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/chart/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[SeriesType.line, SeriesType.line]"
            },
            {
                "name": "simplePropertyGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [PropertyGridModule, IconModule],\r\n    entryComponents: [],\r\n  },\r\n  props: {\r\n    item: item(),\r\n    columns,\r\n    dict,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                  class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\r\n              <teta-property-grid [dataItem]=\"item\"\r\n                          [dict]=\"dict\"\r\n                          [columns]=\"columns\">\r\n              </teta-property-grid>\r\n            </div>`,\r\n})"
            },
            {
                "name": "singleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: 'user',\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    virtual: boolean('virtual', false),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 200px;\"\r\n                  [options]=\"options\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [textRef]=\"'name'\"\r\n                  [virtual]=\"virtual\"\r\n                  [valueRef]=\"'id'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\"\r\n                  [disabled]=\"false\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n      <ng-template tetaSelectValue let-value>\r\n        {{value?.name}}\r\n      </ng-template>\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
            },
            {
                "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ProgressBarComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/switch/switch/switch.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => SwitchComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "switchSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SwitchModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    model: 'item 1',\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'grey'),\r\n    values: ['item 1', 'item 2', 'item 3'],\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<teta-switch [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                          [ngModel]=\"model\"\r\n                          (ngModelChange)=\"log('switch', $event)\">\r\n  <teta-switch-button *ngFor=\"let val of values\" [value]=\"val\">\r\n    <teta-icon [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon> {{val}}\r\n  </teta-switch-button>\r\n</teta-switch>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => TimePartControlComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "treeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Тетакомовское м-р (4)',\r\n    icon: 'layer',\r\n    children: [\r\n      {\r\n        name: 'Скважины для тестирования',\r\n        icon: 'folder',\r\n        children: [\r\n          {\r\n            name: 'Тестовая скважина №1',\r\n            icon: 'well',\r\n            children: [],\r\n          },\r\n          {\r\n            name: 'Стресс-тест',\r\n            icon: 'well',\r\n            children: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'Test only (1)',\r\n    icon: 'layer',\r\n    children: [\r\n      {\r\n        name: 'Group (1)',\r\n        icon: 'folder',\r\n        children: [\r\n          {\r\n            name: 'well',\r\n            icon: 'well',\r\n            children: [\r\n              {\r\n                name: 'ГИС',\r\n                icon: 'map',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'Конструкция',\r\n                icon: 'tubes',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'D1',\r\n                icon: 'angle',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'Дизайн №1 copy',\r\n                icon: 'angle',\r\n                children: [\r\n                  {\r\n                    name: 'Зоны продуктивности',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'План закачки',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'Опции',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'Результаты',\r\n                    children: [],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n]"
            },
            {
                "name": "treeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/tree/Tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{\r\n  name: 'Тетакомовское м-р (4)',\r\n  icon: 'layers',\r\n  children: [\r\n    {\r\n      name: 'Скважины для тестирования',\r\n      icon: 'folder',\r\n      children: [\r\n        {\r\n          name: 'Тестовая скважина №1',\r\n          icon: 'well',\r\n          children: []\r\n        }, {\r\n          name: 'Стресс-тест',\r\n          icon: 'well',\r\n          children: []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}, {\r\n  name: 'Test only (1)',\r\n  icon: 'layers',\r\n  children: [\r\n    {\r\n      name: 'Group (1)',\r\n      icon: 'folder',\r\n      children: [\r\n        {\r\n          name: 'well',\r\n          icon: 'well',\r\n          children: [{\r\n            name: 'ГИС',\r\n            icon: 'map',\r\n            children: []\r\n          }, {\r\n            name: 'Конструкция',\r\n            icon: 'tubes',\r\n            children: []\r\n          }, {\r\n            name: 'D1',\r\n            icon: 'angle',\r\n            children: []\r\n          }, {\r\n            name: 'Дизайн №1 copy',\r\n            icon: 'angle',\r\n            children: [{\r\n              name: 'Зоны продуктивности',\r\n              children: []\r\n            }, {\r\n              name: 'План закачки',\r\n              children: []\r\n            }, {\r\n              name: 'Опции',\r\n              children: []\r\n            }, {\r\n              name: 'Результаты',\r\n              children: []\r\n            }]\r\n          }]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}]"
            },
            {
                "name": "vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DelimiterModule, ButtonModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <button teta-button [palette]=\"'primary'\">\r\n      <teta-icon [name]=\"'settings'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'add'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'delete'\"></teta-icon>\r\n    </button>\r\n  </div>`,\r\n})"
            },
            {
                "name": "vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ResizePanelModule],\r\n  },\r\n  props: {\r\n    maxSize: number('maxSize', 500, {\r\n      min: 300,\r\n      max: 450,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    minSize: number('minSize', 50, {\r\n      min: 50,\r\n      max: 150,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    grabPosition: select('grabPosition', ['top', 'bottom'], 'top'),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <div class=\"column bg-white-50\"\r\n                      style=\"width: 500px; height: 500px;\">\r\n                  <div class=\"row_6 bg-primary-5\">\r\n                    I will surrender\r\n                  </div>\r\n                  <teta-resize-panel\r\n                        [maxSize]=\"maxSize\"\r\n                        [minSize]=\"minSize\"\r\n                        [direction]=\"'horizontal'\"\r\n                        [grabPosition]=\"grabPosition\"\r\n                        class=\"row_6 bg-red-5\">\r\n                    I will resize\r\n                  </teta-resize-panel>\r\n                </div>\r\n              </div>`,\r\n})"
            },
            {
                "name": "virtualTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/component/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TableDemoModule, IconModule],\r\n  },\r\n  props: {\r\n    editType: select(\r\n      'editType',\r\n      {\r\n        row: EditType.row,\r\n        cell: EditType.cell,\r\n      },\r\n      EditType.cell\r\n    ),\r\n    selectType: select(\r\n      'selectType',\r\n      {\r\n        none: SelectType.none,\r\n        multiple: SelectType.multiple,\r\n        single: SelectType.single,\r\n      },\r\n      SelectType.multiple\r\n    ),\r\n    editEvent: select(\r\n      'editEvent',\r\n      {\r\n        focus: EditEvent.focus,\r\n        click: EditEvent.click,\r\n        doubleClick: EditEvent.doubleClick,\r\n      },\r\n      EditEvent.doubleClick\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"['assets/icons.svg', 'assets/color-icons.svg']\"\r\n                  class=\"bg-panel-50 padding-3\"\r\n                  style=\"display: flex; width: 1200px; height: 600px;\">\r\n                <teta-table-demo [size]=\"1000\"\r\n                                  [editEvent]=\"editEvent\"\r\n                                  [editType]=\"editType\"\r\n                                  [selectType]=\"selectType\"\r\n                                  [virtual]=\"true\"></teta-table-demo>\r\n            </div>`,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AnnotationTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/components/src/component/chart/model/annotation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AutoCloseIgnoreCase",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"esc\" | \"enter\" | \"inside\" | \"outside\"",
                "file": "projects/components/src/common/contract/auto-close-ignore-case.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ButtonOrNullOrUndefined",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RadioButtonComponent | undefined | null",
                "file": "projects/components/src/component/radio/radio/radio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ButtonViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"outline\" | \"ghost\"",
                "file": "projects/components/src/component/button/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ChartSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/components/src/component/chart/core/chart.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Ctor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/components/src/common/contract/constructor-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "AggregationType",
                "childs": [
                    {
                        "name": "none",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "avg",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "min",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/aggregation-type.enum.ts"
            },
            {
                "name": "Align",
                "childs": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "center",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fitWidth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minWidth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/align.enum.ts"
            },
            {
                "name": "AxisOrientation",
                "childs": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/chart/src/chart/model/enum/axis-orientation.ts"
            },
            {
                "name": "AxisType",
                "childs": [
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "category",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "log",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pow",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/chart/src/chart/model/axis-type.ts"
            },
            {
                "name": "AxisType",
                "childs": [
                    {
                        "name": "abscissa",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ordinatus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/axis-type.ts"
            },
            {
                "name": "DatePickerMode",
                "childs": [
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "month",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "year",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts"
            },
            {
                "name": "DispatchType",
                "childs": [
                    {
                        "name": "moveLine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "moveLine"
                    },
                    {
                        "name": "movePoint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "movePoint"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/dispatch-type.ts"
            },
            {
                "name": "DragPointType",
                "childs": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "xy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/drag-point-type.ts"
            },
            {
                "name": "EditEvent",
                "childs": [
                    {
                        "name": "click",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "doubleClick",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/edit-event.enum.ts"
            },
            {
                "name": "EditType",
                "childs": [
                    {
                        "name": "cell",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "row",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/edit-type.enum.ts"
            },
            {
                "name": "FilterType",
                "childs": [
                    {
                        "name": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/filter-type.enum.ts"
            },
            {
                "name": "LegendType",
                "childs": [
                    {
                        "name": "swatches",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gradient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/legend-type.ts"
            },
            {
                "name": "ListFilterType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Excluded",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/list-filter-type.enum.ts"
            },
            {
                "name": "ModalCloseReason",
                "childs": [
                    {
                        "name": "resolve",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "exit",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "backdrop",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "esc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/modal/model/modal-close-reason.enum.ts"
            },
            {
                "name": "Scale",
                "childs": [
                    {
                        "name": "time",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "time"
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "category",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "category"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/scale.ts"
            },
            {
                "name": "ScaleType",
                "childs": [
                    {
                        "name": "linear",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "log",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pow",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sqrt",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/scale-type.ts"
            },
            {
                "name": "SelectType",
                "childs": [
                    {
                        "name": "none",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "single",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/table/enum/select-type.enum.ts"
            },
            {
                "name": "SeriesType",
                "childs": [
                    {
                        "name": "line",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/chart/src/chart/model/series-type.ts"
            },
            {
                "name": "SeriesType",
                "childs": [
                    {
                        "name": "area",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "line",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pie",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scatter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spline",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contour",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "custom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/series-type.ts"
            },
            {
                "name": "SidebarPosition",
                "childs": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/sidebar/sidebar-position.enum.ts"
            },
            {
                "name": "StringFilterType",
                "childs": [
                    {
                        "name": "Equals",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "StartsWith",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "EndsWith",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "Contains",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/filter/enum/string-filter-type.enum.ts"
            },
            {
                "name": "TetaSize",
                "childs": [
                    {
                        "name": "XS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "S",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "M",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "L",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "XL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/teta-size.enum.ts"
            },
            {
                "name": "VerticalAlign",
                "childs": [
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "center",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/common/enum/vertical-align.enum.ts"
            },
            {
                "name": "ZoomType",
                "childs": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "xy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/components/src/component/chart/model/enum/zoom-type.ts"
            }
        ],
        "groupedVariables": {
            "projects/components/src/component/modal/Modal.stories.ts": [
                {
                    "name": "alert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: AlertSampleComponent,\r\n})"
                },
                {
                    "name": "fromComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: ModalFromComponentComponent,\r\n  props: {\r\n    name: text('name', 'Название'),\r\n    description: text('description', 'Описание объекта'),\r\n  },\r\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/modal/Modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ModalSamplesModule],\r\n  },\r\n  component: ModalFromTemplateComponent,\r\n  props: {\r\n    name: text('name', 'Название'),\r\n    description: text('description', 'Описание объекта'),\r\n  },\r\n})"
                }
            ],
            "projects/components/src/component/dropdown/Dropdown.stories.ts": [
                {
                    "name": "alignMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<VerticalAlign, string>().set(\r\n  VerticalAlign.bottom, 'bottom'\r\n).set(\r\n  VerticalAlign.top, 'top'\r\n).set(\r\n  VerticalAlign.center, 'center'\r\n).set(\r\n  VerticalAlign.auto, 'auto'\r\n)"
                },
                {
                    "name": "dropdownComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args) => ({\r\n  moduleMetadata: {\r\n    imports: [DropdownModule, ButtonModule, IconModule]\r\n  },\r\n  props: {\r\n    ...args,\r\n    verticalAlign: [\r\n      VerticalAlign.bottom,\r\n      VerticalAlign.top,\r\n      VerticalAlign.center,\r\n      VerticalAlign.auto],\r\n  },\r\n  template: `<div class=\"padding-10 bg-panel-50\"\r\n                  [style.transform]=\"transform ? 'translate(100px, 100px)' : ''\"\r\n                  [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-dropdown *ngFor=\"let valign of verticalAlign\"\r\n                    [align]=\"align\"\r\n                    [verticalAlign]=\"valign\"\r\n                    [appendToBody]=\"appendToBody\"\r\n                    [autoClose]=\"autoClose\"\r\n                    [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\r\n        Click to open\r\n      </button>\r\n      <div tetaDropdownContent class=\"list overflow-auto\" style=\"width: 200px\">\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n        </div>\r\n        <div class=\"list-item\">\r\n          <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n        </div>\r\n      </div>\r\n    </teta-dropdown>\r\n  </div>`\r\n})"
                },
                {
                    "name": "dropdownDirective",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args) => ({\r\n  moduleMetadata: {\r\n    imports: [DropdownModule, ButtonModule, IconModule]\r\n  },\r\n  props: {\r\n    ...args,\r\n    verticalAlign: [\r\n      VerticalAlign.bottom,\r\n      VerticalAlign.top,\r\n      VerticalAlign.center,\r\n      VerticalAlign.auto],\r\n    alignMap\r\n  },\r\n  template: `<div class=\"padding-10 bg-panel-50 row\"\r\n                  style=\"width: 500px;\"\r\n                  [style.transform]=\"transform ? 'translate(100px, 100px)' : ''\"\r\n                  [style.margin]=\"transform ? '' : '100px 100px'\"\r\n                  [tetaIconSprite]=\"'assets/icons.svg'\">\r\n                  <div style=\"position: fixed; top: 0; left: 0;\">Fixed</div>\r\n                  <div style=\"position: fixed; top: 0; right: 0;transform: translateX(0px)\">Fixed trans</div>\r\n    <div tetaDropdown\r\n          class=\"margin-right-4\"\r\n          *ngFor=\"let valign of verticalAlign\"\r\n          [align]=\"align\"\r\n          [verticalAlign]=\"valign\"\r\n          [appendToBody]=\"appendToBody\"\r\n          [autoClose]=\"autoClose\"\r\n          [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <button teta-button tetaDropdownHead [palette]=\"'primary'\">\r\n        {{alignMap.get(valign)}}\r\n      </button>\r\n      <div tetaDropdownContent class=\"list scrollable\" style=\"width: 200px\">\r\n        <ng-container *ngFor=\"let i of [1,2,3]\">\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n          </div>\r\n          <div class=\"list-item\">\r\n            <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>`\r\n})"
                }
            ],
            "projects/components/src/component/chart/model/annotation.ts": [
                {
                    "name": "annotationMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/model/annotation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[\r\n  annotationBadge,\r\n  annotationLabel,\r\n  annotationCallout,\r\n  annotationCalloutCircle,\r\n  annotationCalloutCurve,\r\n  annotationCalloutElbow,\r\n  annotationCalloutRect,\r\n  annotationCustomType,\r\n  annotationXYThreshold,\r\n] as const"
                }
            ],
            "projects/components/src/component/file-upload/File.stories.ts": [
                {
                    "name": "area",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/file-upload/File.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [FileUploadModule, IconModule]\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\r\n    <teta-file-upload-area style=\"height: 250px; width: 300px;\">\r\n      <div class=\"column column_auto font-body-3\">\r\n        <div class=\"row align-center justify-content-around\">\r\n          <svg class=\"icon__image fill-text-30\" style=\"width: 40px\">\r\n            <use [attr.xlink:href]=\"'#pdf'\"></use>\r\n          </svg>\r\n        </div>\r\n        <div class=\"text-align-center\">\r\n          Перетащите файлы в формате .xls, .las или .csv сюда или <span class=\"color-primary-30\">загрузите</span>\r\n        </div>\r\n      </div>\r\n    </teta-file-upload-area>\r\n  </div>`\r\n})"
                }
            ],
            "projects/components/src/component/sidebar/Sidebar.stories.ts": [
                {
                    "name": "basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SidebarModule, IconModule, ButtonModule]\r\n  },\r\n  props: {\r\n    backdrop: boolean('backdrop', false),\r\n    position: SidebarPosition,\r\n    open1: false,\r\n    open2: false,\r\n    open3: false,\r\n    open4: false\r\n  },\r\n  template: `<div class=\"padding-14 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.left\" [open]=\"open1\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.right\" [open]=\"open2\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.top\" [open]=\"open3\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <teta-sidebar [backdrop]=\"backdrop\" [position]=\"position.bottom\" [open]=\"open4\" [className]=\"'bg-primary-30'\">\r\n      <div class=\"font-title-1\">Sidebar</div>\r\n      <div>Sidebar content</div>\r\n    </teta-sidebar>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open1=!open1;open2=open3=open4=false;\">\r\n      <teta-icon [name]=\"'arrowLeft'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open2=!open2;open1=open3=open4=false;\">\r\n      <teta-icon [name]=\"'arrowRight'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open3=!open3;open2=open1=open4=false;\">\r\n      <teta-icon [name]=\"'arrowUp'\"></teta-icon>\r\n    </button>\r\n    <button teta-button [palette]=\"'primary'\" (click)=\"open4=!open4;open2=open3=open1=false;\">\r\n      <teta-icon [name]=\"'arrowDown'\"></teta-icon>\r\n    </button>\r\n  </div>`\r\n})"
                }
            ],
            "projects/components/src/component/accordion/Accordion.stories.ts": [
                {
                    "name": "basicAccordion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/accordion/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [AccordionModule, IconModule]\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3 bg-panel-50\">\r\n      <teta-accordion class=\"bg-white-50\">\r\n        <teta-accordion-item>\r\n          <teta-accordion-head>\r\n            Heading 1\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 1</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n        <teta-accordion-item [disabled]=\"true\">\r\n          <teta-accordion-head>\r\n            Heading 2 (disabled)\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 2</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n        <teta-accordion-item>\r\n          <teta-accordion-head>\r\n            Heading 3\r\n          </teta-accordion-head>\r\n          <ng-template tetaAccordionContent>\r\n            <div class=\"padding-v-3 padding-h-5\">I am the content 3</div>\r\n          </ng-template>\r\n        </teta-accordion-item>\r\n      </teta-accordion>\r\n    </div>`,\r\n})"
                }
            ],
            "projects/chart/src/chart/Chart.stories.ts": [
                {
                    "name": "basicChart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ChartModule],\r\n  },\r\n  props: {\r\n    config,\r\n  },\r\n  template: `<div class=\"font-body-3 padding-3 bg-background-0\" style=\"width: auto; height: 600px;\">\r\n      <teta-chart [config]=\"config\" class=\"bg-background-50 border border-text-50\"></teta-chart>\r\n    </div>`,\r\n})"
                },
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "defaultValue": "{\r\n  name: '123',\r\n  xAxis: [\r\n    {\r\n      type: AxisType.time,\r\n      visible: true,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      opposite: true,\r\n      min: 1,\r\n      max: 1500,\r\n    },\r\n  ],\r\n  yAxis: [\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      title: 'атм',\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -500,\r\n      max: 10000,\r\n      title: 'кг/см2',\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -200,\r\n      max: 200,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: 5000,\r\n      max: 7000,\r\n      opposite: true,\r\n    },\r\n    {\r\n      type: AxisType.number,\r\n      visible: true,\r\n      min: -0.05,\r\n      max: 0.05,\r\n      opposite: true,\r\n      title: 'тн',\r\n    },\r\n    {\r\n      type: AxisType.log,\r\n      visible: true,\r\n      min: 1000000,\r\n      max: 2000000,\r\n    },\r\n  ],\r\n  series: [\r\n    {\r\n      type: SeriesType.line,\r\n      data: points1,\r\n      name: 'Series 1',\r\n      xAxisIndex: 0,\r\n      yAxisIndex: 0,\r\n      color: cssColorNames[randomColor()].toLowerCase(),\r\n      strokeWidth: 2,\r\n    },\r\n    {\r\n      type: SeriesType.line,\r\n      data: points2.map((point) => {\r\n        return { ...point, color: cssColorNames[randomColor()] };\r\n      }),\r\n      name: 'Series 2',\r\n      xAxisIndex: 0,\r\n      yAxisIndex: 0,\r\n      strokeWidth: 1.5,\r\n      color: cssColorNames[randomColor()].toLowerCase(),\r\n    },\r\n  ],\r\n}"
                },
                {
                    "name": "cssColorNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'AliceBlue',\r\n  'AntiqueWhite',\r\n  'Aqua',\r\n  'Aquamarine',\r\n  'Azure',\r\n  'Beige',\r\n  'Bisque',\r\n  'Black',\r\n  'BlanchedAlmond',\r\n  'Blue',\r\n  'BlueViolet',\r\n  'Brown',\r\n  'BurlyWood',\r\n  'CadetBlue',\r\n  'Chartreuse',\r\n  'Chocolate',\r\n  'Coral',\r\n  'CornflowerBlue',\r\n  'Cornsilk',\r\n  'Crimson',\r\n  'Cyan',\r\n  'DarkBlue',\r\n  'DarkCyan',\r\n  'DarkGoldenRod',\r\n  'DarkGray',\r\n  'DarkGrey',\r\n  'DarkGreen',\r\n  'DarkKhaki',\r\n  'DarkMagenta',\r\n  'DarkOliveGreen',\r\n  'DarkOrange',\r\n  'DarkOrchid',\r\n  'DarkRed',\r\n  'DarkSalmon',\r\n  'DarkSeaGreen',\r\n  'DarkSlateBlue',\r\n  'DarkSlateGray',\r\n  'DarkSlateGrey',\r\n  'DarkTurquoise',\r\n  'DarkViolet',\r\n  'DeepPink',\r\n  'DeepSkyBlue',\r\n  'DimGray',\r\n  'DimGrey',\r\n  'DodgerBlue',\r\n  'FireBrick',\r\n  'FloralWhite',\r\n  'ForestGreen',\r\n  'Fuchsia',\r\n  'Gainsboro',\r\n  'GhostWhite',\r\n  'Gold',\r\n  'GoldenRod',\r\n  'Gray',\r\n  'Grey',\r\n  'Green',\r\n  'GreenYellow',\r\n  'HoneyDew',\r\n  'HotPink',\r\n  'IndianRed',\r\n  'Indigo',\r\n  'Ivory',\r\n  'Khaki',\r\n  'Lavender',\r\n  'LavenderBlush',\r\n  'LawnGreen',\r\n  'LemonChiffon',\r\n  'LightBlue',\r\n  'LightCoral',\r\n  'LightCyan',\r\n  'LightGoldenRodYellow',\r\n  'LightGray',\r\n  'LightGrey',\r\n  'LightGreen',\r\n  'LightPink',\r\n  'LightSalmon',\r\n  'LightSeaGreen',\r\n  'LightSkyBlue',\r\n  'LightSlateGray',\r\n  'LightSlateGrey',\r\n  'LightSteelBlue',\r\n  'LightYellow',\r\n  'Lime',\r\n  'LimeGreen',\r\n  'Linen',\r\n  'Magenta',\r\n  'Maroon',\r\n  'MediumAquaMarine',\r\n  'MediumBlue',\r\n  'MediumOrchid',\r\n  'MediumPurple',\r\n  'MediumSeaGreen',\r\n  'MediumSlateBlue',\r\n  'MediumSpringGreen',\r\n  'MediumTurquoise',\r\n  'MediumVioletRed',\r\n  'MidnightBlue',\r\n  'MintCream',\r\n  'MistyRose',\r\n  'Moccasin',\r\n  'NavajoWhite',\r\n  'Navy',\r\n  'OldLace',\r\n  'Olive',\r\n  'OliveDrab',\r\n  'Orange',\r\n  'OrangeRed',\r\n  'Orchid',\r\n  'PaleGoldenRod',\r\n  'PaleGreen',\r\n  'PaleTurquoise',\r\n  'PaleVioletRed',\r\n  'PapayaWhip',\r\n  'PeachPuff',\r\n  'Peru',\r\n  'Pink',\r\n  'Plum',\r\n  'PowderBlue',\r\n  'Purple',\r\n  'RebeccaPurple',\r\n  'Red',\r\n  'RosyBrown',\r\n  'RoyalBlue',\r\n  'SaddleBrown',\r\n  'Salmon',\r\n  'SandyBrown',\r\n  'SeaGreen',\r\n  'SeaShell',\r\n  'Sienna',\r\n  'Silver',\r\n  'SkyBlue',\r\n  'SlateBlue',\r\n  'SlateGray',\r\n  'SlateGrey',\r\n  'Snow',\r\n  'SpringGreen',\r\n  'SteelBlue',\r\n  'Tan',\r\n  'Teal',\r\n  'Thistle',\r\n  'Tomato',\r\n  'Turquoise',\r\n  'Violet',\r\n  'Wheat',\r\n  'White',\r\n  'WhiteSmoke',\r\n  'Yellow',\r\n  'YellowGreen',\r\n]"
                },
                {
                    "name": "randomColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "randomInt(0, cssColorNames.length - 1)"
                }
            ],
            "projects/components/src/directive/context-menu/ContextMenu.stories.ts": [
                {
                    "name": "basicContextMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ContextMenuModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.left\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n  },\r\n  template: `<button teta-button\r\n                     [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                     [palette]=\"'primary'\"\r\n                     [tetaContextMenu]=\"menu\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [className]=\"'one'\">\r\n              <teta-icon [palette]=\"'background'\" [name]=\"'settings'\"></teta-icon>\r\n              Right click on me\r\n            </button>\r\n            <ng-template #menu let-data=\"data\">\r\n              <div class=\"list shadow-1\" style=\"width: 200px\">\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'addCircle'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Add\r\n                </div>\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'closeBig'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Delete\r\n                </div>\r\n                <div class=\"list-item list-item_interactive\">\r\n                  <teta-icon [name]=\"'copy'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Clone\r\n                </div>\r\n              </div>\r\n            </ng-template>`,\r\n})"
                }
            ],
            "projects/components/src/component/input/Input.stories.ts": [
                {
                    "name": "basicInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [\r\n      IconModule,\r\n      InputModule,\r\n      FormsModule,\r\n      SelectModule,\r\n      RadioModule,\r\n      DatePickerModule,\r\n      ToggleModule,\r\n      CheckboxModule,\r\n    ],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\r\n  <div class=\"form-container\">\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'text-field'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n      </teta-input>\r\n      <teta-input [label]=\"'text-field disabled'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [disabled]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n      </teta-input>\r\n      <teta-input [label]=\"'text-field invalid'\">\r\n        <teta-text-field [leftIconName]=\"'user'\" [invalid]=\"true\" [placeholder]=\"'placeholder'\"></teta-text-field>\r\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\r\n          Has errors\r\n        </div>\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'input'\">\r\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n      <teta-input [label]=\"'input disabled'\">\r\n        <input class=\"input\" disabled [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n      <teta-input [label]=\"'input invalid'\">\r\n        <input class=\"input\" [class.input_invalid]=\"true\" [placeholder]=\"'placeholder'\" />\r\n        <div ngProjectAs=\"message\" class=\"color-red-50\">\r\n          Has errors\r\n        </div>\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'input required'\" [required]=\"true\">\r\n        <input class=\"input\" [placeholder]=\"'placeholder'\" />\r\n      </teta-input>\r\n    </div>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'Select'\">\r\n        <teta-select></teta-select>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Select disabled'\">\r\n        <teta-select [disabled]=\"true\"></teta-select>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Select invalid'\">\r\n        <teta-select [invalid]=\"true\"></teta-select>\r\n      </teta-input>\r\n    </div>\r\n    <teta-input [label]=\"'Selection'\">\r\n      <teta-radio>\r\n        <teta-radio-button>Option 1</teta-radio-button>\r\n        <teta-radio-button>Option 2</teta-radio-button>\r\n        <teta-radio-button [disabled]=\"true\">Option 3</teta-radio-button>\r\n      </teta-radio>\r\n    </teta-input>\r\n    <teta-toggle>Off / On</teta-toggle>\r\n    <teta-toggle [disabled]=\"true\">Off / On</teta-toggle>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'Date'\">\r\n        <teta-date-picker></teta-date-picker>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Date disabled'\">\r\n        <teta-date-picker [disabled]=\"true\"></teta-date-picker>\r\n      </teta-input>\r\n      <teta-input [label]=\"'Date invalid'\">\r\n        <teta-date-picker [invalid]=\"true\"></teta-date-picker>\r\n      </teta-input>\r\n    </div>\r\n    <teta-checkbox [binary]=\"true\">Check Me, babe</teta-checkbox>\r\n    <teta-checkbox [binary]=\"true\" [disabled]=\"true\">I am disabled</teta-checkbox>\r\n    <div class=\"form-row\">\r\n      <teta-input [label]=\"'textarea'\">\r\n        <textarea class=\"textarea\" [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n      <teta-input [label]=\"'textarea disabled'\">\r\n        <textarea class=\"textarea\" disabled [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n      <teta-input [label]=\"'textarea invalid'\">\r\n        <textarea class=\"textarea textarea_invalid\" [placeholder]=\"'textarea'\"></textarea>\r\n      </teta-input>\r\n    </div>\r\n  </div>\r\n</div>`,\r\n})"
                },
                {
                    "name": "reactiveForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [\r\n      SampleInputModule,\r\n      IconModule,\r\n      InputModule,\r\n      FormsModule,\r\n      SelectModule,\r\n      RadioModule,\r\n      DatePickerModule,\r\n      ToggleModule,\r\n      CheckboxModule,\r\n    ],\r\n  },\r\n  props: {\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"border border-text-10 padding-3\" style=\"width: 500px;\">\r\n              <teta-sample-input></teta-sample-input>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/list/List.stories.ts": [
                {
                    "name": "basicList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/list/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-10\">\r\n<div class=\"list shadow-1\" style=\"width: 200px\">\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n  </div>\r\n  <div class=\"list-item\">\r\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n  </div>\r\n</div>\r\n</div>`,\r\n})"
                },
                {
                    "name": "interactiveList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/list/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule],\r\n  },\r\n  template: `<div class=\"padding-10\">\r\n<div class=\"list shadow-1\" style=\"width: 200px\">\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'user'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Jerome Bell\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'calendar'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Courtney Henry\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'eye'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Wade Warren\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'folder'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Ralph Edwards\r\n  </div>\r\n  <div class=\"list-item list-item_interactive\">\r\n    <teta-icon [name]=\"'map'\" [palette]=\"'text'\" class=\"margin-right-2\"></teta-icon>Marvin McKinney\r\n  </div>\r\n</div>\r\n</div>`,\r\n})"
                }
            ],
            "projects/components/src/component/tabs/Tabs.stories.ts": [
                {
                    "name": "basicTab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tabs/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TabsModule, IconModule]\r\n  },\r\n  props: {},\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"padding-3\" style=\"width 100px; height 800px;\">\r\n    <teta-tabs>\r\n      <teta-tab>\r\n        <ng-template tetaTabTitle>\r\n          <teta-icon [name]=\"'calendar'\" class=\"margin-right-2\"></teta-icon>Результат\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_accent\">\r\n            <div class=\"container\">\r\n             1111\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n      <teta-tab>\r\n        <ng-template tetaTabTitle>\r\n          Код\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_code\">\r\n           CODE\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n      <teta-tab [disabled]=\"true\">\r\n        <ng-template tetaTabTitle>\r\n          Disabled\r\n        </ng-template>\r\n        <ng-template tetaTabContent>\r\n          <div class=\"area area_code\">\r\n           Disabled\r\n          </div>\r\n        </ng-template>\r\n      </teta-tab>\r\n    </teta-tabs>\r\n  </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/table/Table.stories.ts": [
                {
                    "name": "basicTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TableDemoModule, IconModule],\r\n  },\r\n  props: {\r\n    editType: select(\r\n      'editType',\r\n      {\r\n        row: EditType.row,\r\n        cell: EditType.cell,\r\n      },\r\n      EditType.cell\r\n    ),\r\n    selectType: select(\r\n      'selectType',\r\n      {\r\n        none: SelectType.none,\r\n        multiple: SelectType.multiple,\r\n        single: SelectType.single,\r\n      },\r\n      SelectType.multiple\r\n    ),\r\n    editEvent: select(\r\n      'editEvent',\r\n      {\r\n        focus: EditEvent.focus,\r\n        click: EditEvent.click,\r\n        doubleClick: EditEvent.doubleClick,\r\n      },\r\n      EditEvent.doubleClick\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"['assets/icons.svg', 'assets/color-icons.svg']\"\r\n                  class=\"bg-panel-50 padding-3\"\r\n                  style=\"display: flex; width: 1200px; height: 600px;\">\r\n                <teta-table-demo [size]=\"50\"\r\n                                  [editEvent]=\"editEvent\"\r\n                                  [editType]=\"editType\"\r\n                                  [selectType]=\"selectType\"\r\n                                  [virtual]=\"false\"></teta-table-demo>\r\n            </div>`,\r\n})"
                },
                {
                    "name": "virtualTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TableDemoModule, IconModule],\r\n  },\r\n  props: {\r\n    editType: select(\r\n      'editType',\r\n      {\r\n        row: EditType.row,\r\n        cell: EditType.cell,\r\n      },\r\n      EditType.cell\r\n    ),\r\n    selectType: select(\r\n      'selectType',\r\n      {\r\n        none: SelectType.none,\r\n        multiple: SelectType.multiple,\r\n        single: SelectType.single,\r\n      },\r\n      SelectType.multiple\r\n    ),\r\n    editEvent: select(\r\n      'editEvent',\r\n      {\r\n        focus: EditEvent.focus,\r\n        click: EditEvent.click,\r\n        doubleClick: EditEvent.doubleClick,\r\n      },\r\n      EditEvent.doubleClick\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"['assets/icons.svg', 'assets/color-icons.svg']\"\r\n                  class=\"bg-panel-50 padding-3\"\r\n                  style=\"display: flex; width: 1200px; height: 600px;\">\r\n                <teta-table-demo [size]=\"1000\"\r\n                                  [editEvent]=\"editEvent\"\r\n                                  [editType]=\"editType\"\r\n                                  [selectType]=\"selectType\"\r\n                                  [virtual]=\"true\"></teta-table-demo>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/toolbar/Toolbar.stories.ts": [
                {
                    "name": "basicToolbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ToolbarModule, ButtonModule, IconModule],\r\n  },\r\n  props: {\r\n    data: treeData,\r\n  },\r\n  template: `<teta-toolbar [tetaIconSprite]=\"'assets/icons.svg'\" [palette]=\"'primary'\">\r\n  <button teta-button [palette]=\"'primary'\" [square]=\"true\">\r\n    <teta-icon [name]=\"'moreVertical'\"></teta-icon>\r\n  </button>\r\n  <span class=\"margin-left-2\">Скважины</span>\r\n</teta-toolbar>`,\r\n})"
                },
                {
                    "name": "treeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Тетакомовское м-р (4)',\r\n    icon: 'layer',\r\n    children: [\r\n      {\r\n        name: 'Скважины для тестирования',\r\n        icon: 'folder',\r\n        children: [\r\n          {\r\n            name: 'Тестовая скважина №1',\r\n            icon: 'well',\r\n            children: [],\r\n          },\r\n          {\r\n            name: 'Стресс-тест',\r\n            icon: 'well',\r\n            children: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'Test only (1)',\r\n    icon: 'layer',\r\n    children: [\r\n      {\r\n        name: 'Group (1)',\r\n        icon: 'folder',\r\n        children: [\r\n          {\r\n            name: 'well',\r\n            icon: 'well',\r\n            children: [\r\n              {\r\n                name: 'ГИС',\r\n                icon: 'map',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'Конструкция',\r\n                icon: 'tubes',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'D1',\r\n                icon: 'angle',\r\n                children: [],\r\n              },\r\n              {\r\n                name: 'Дизайн №1 copy',\r\n                icon: 'angle',\r\n                children: [\r\n                  {\r\n                    name: 'Зоны продуктивности',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'План закачки',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'Опции',\r\n                    children: [],\r\n                  },\r\n                  {\r\n                    name: 'Результаты',\r\n                    children: [],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n]"
                }
            ],
            "projects/components/src/component/tree/Tree.stories.ts": [
                {
                    "name": "basicTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tree/Tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TreeModule, TetaTemplateModule, IconModule, BrowserAnimationsModule]\r\n  },\r\n  props: {\r\n    data: treeData\r\n  },\r\n  template: `<teta-tree [tetaIconSprite]=\"'assets/icons.svg'\" style=\"width: 400px;\" [data]=\"data\">\r\n  <ng-template tetaTemplate let-item>\r\n    <teta-icon [name]=\"item.icon\" class=\"fill-text-30 margin-right-2\"></teta-icon> {{item.name}}\r\n  </ng-template>\r\n</teta-tree>`,\r\n})"
                },
                {
                    "name": "treeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tree/Tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{\r\n  name: 'Тетакомовское м-р (4)',\r\n  icon: 'layers',\r\n  children: [\r\n    {\r\n      name: 'Скважины для тестирования',\r\n      icon: 'folder',\r\n      children: [\r\n        {\r\n          name: 'Тестовая скважина №1',\r\n          icon: 'well',\r\n          children: []\r\n        }, {\r\n          name: 'Стресс-тест',\r\n          icon: 'well',\r\n          children: []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}, {\r\n  name: 'Test only (1)',\r\n  icon: 'layers',\r\n  children: [\r\n    {\r\n      name: 'Group (1)',\r\n      icon: 'folder',\r\n      children: [\r\n        {\r\n          name: 'well',\r\n          icon: 'well',\r\n          children: [{\r\n            name: 'ГИС',\r\n            icon: 'map',\r\n            children: []\r\n          }, {\r\n            name: 'Конструкция',\r\n            icon: 'tubes',\r\n            children: []\r\n          }, {\r\n            name: 'D1',\r\n            icon: 'angle',\r\n            children: []\r\n          }, {\r\n            name: 'Дизайн №1 copy',\r\n            icon: 'angle',\r\n            children: [{\r\n              name: 'Зоны продуктивности',\r\n              children: []\r\n            }, {\r\n              name: 'План закачки',\r\n              children: []\r\n            }, {\r\n              name: 'Опции',\r\n              children: []\r\n            }, {\r\n              name: 'Результаты',\r\n              children: []\r\n            }]\r\n          }]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}]"
                }
            ],
            "projects/components/src/component/checkbox/Checkbox.stories.ts": [
                {
                    "name": "binary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [CheckboxModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    type: select('type', ['binary', 'list'], 'binary'),\r\n    allowUndefined: boolean('allowUndefined', false),\r\n    text: text('text', 'Remember me'),\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n  },\r\n  template: `<teta-checkbox [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                            [palette]=\"palette\"\r\n                            [ngModel]=\"value\"\r\n                            (ngModelChange)=\"setValue($event)\"\r\n                            [binary]=\"true\">\r\n              {{text}}\r\n            </teta-checkbox>`,\r\n})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [CheckboxModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    type: select('type', ['binary', 'list'], 'binary'),\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n    values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    result: [],\r\n    selectAll: (value: boolean, result: number[], values: number[]) => {\r\n      result = [];\r\n      if (value) {\r\n        result.push(...values);\r\n      }\r\n      return result;\r\n    },\r\n    allSelected: (result: number[], values: number[]) => {\r\n      if (!result || result?.length < 1) {\r\n        return false;\r\n      }\r\n      if (values.every((_) => result.indexOf(_) >= 0)) {\r\n        return true;\r\n      }\r\n      return undefined;\r\n    },\r\n  },\r\n  template: `\r\n<div style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-4\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n  <teta-checkbox  [ngModel]=\"allSelected(result, values)\"\r\n                  [palette]=\"palette\"\r\n                  (ngModelChange)=\"result = selectAll($event, result, values)\"\r\n                  [allowNull]=\"true\"\r\n                  [binary]=\"true\">Выбрать все</teta-checkbox>\r\n</div>\r\n<div *ngFor=\"let num of values\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n  <teta-checkbox [palette]=\"palette\" [ngModel]=\"result\" (ngModelChange)=\"result = $event;setValue($event)\" [value]=\"num\">\r\n    Option {{num}}\r\n  </teta-checkbox>\r\n</div>`,\r\n})"
                }
            ],
            "projects/components/src/component/button/Button.stories.ts": [
                {
                    "name": "buttons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ButtonModule, IconModule],\r\n  },\r\n  props: {\r\n    palettes: ['primary', 'text', 'red', 'yellow', 'green'],\r\n    text: text('text', 'Push me'),\r\n    leftIcon: boolean('leftIcon', true),\r\n    rightIcon: boolean('rightIcon', true),\r\n    disabled: boolean('disabled', false),\r\n  },\r\n  template: `<div class=\"row\" [tetaIconSprite]=\"'assets/icons.svg'\"  style=\"grid-gap: 12px\">\r\n  <div *ngFor=\"let palette of palettes\" class=\"column\" style=\"grid-gap: 8px\">\r\n    <div class=\"font-body-3\">\r\n      Default\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Only Icon\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [square]=\"true\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Outline\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'outline'\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n    <div class=\"font-body-3\">\r\n      Ghost\r\n    </div>\r\n    <button teta-button [disabled]=\"disabled\" [palette]=\"palette\" [view]=\"'ghost'\">\r\n      <teta-icon *ngIf=\"leftIcon\" [name]=\"'addCircle'\"></teta-icon>\r\n      {{text}}\r\n      <teta-icon *ngIf=\"rightIcon\" [name]=\"'user'\"></teta-icon>\r\n    </button>\r\n  </div>\r\n</div>`,\r\n})"
                }
            ],
            "projects/components/src/component/table/contract/cell-components-map.ts": [
                {
                    "name": "cellComponentsMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<FilterType, Type<any>>",
                    "defaultValue": "new Map<\r\n  FilterType,\r\n  Type<any>\r\n>()\r\n  .set(FilterType.number, NumericCellComponent)\r\n  .set(FilterType.date, DateCellComponent)\r\n  .set(FilterType.list, ListCellComponent)\r\n  .set(FilterType.string, StringCellComponent)\r\n  .set(FilterType.boolean, BooleanCellComponent)\r\n  .set(FilterType.custom, StringCellComponent)"
                },
                {
                    "name": "getCellComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/table/contract/cell-components-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(column: TableColumn): Type<any> =>\r\n  cellComponentsMap.has(column.filterType)\r\n    ? cellComponentsMap.get(column.filterType)\r\n    : StringCellComponent"
                }
            ],
            "projects/components/src/component/checkbox/checkbox/checkbox.component.ts": [
                {
                    "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CheckboxComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts": [
                {
                    "name": "classTypeLegendMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<SeriesType, string>()\r\n  .set(SeriesType.line, 'line')\r\n  .set(SeriesType.spline, 'line')"
                }
            ],
            "projects/components/src/component/icon/Icon.stories.ts": [
                {
                    "name": "coloredIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule]\r\n  },\r\n  props: {\r\n    palette: select('palette', ['primary', 'text', 'red', 'white', 'yellow', 'green'], 'primary'),\r\n    icons: coloredIconsList,\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/color-icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\r\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\r\n                <span class=\"padding-left-4\">{{icon}}</span>\r\n              </div>\r\n            </div>`,\r\n})"
                },
                {
                    "name": "icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [IconModule]\r\n  },\r\n  props: {\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'primary'),\r\n    icons: iconsList,\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" style=\"display: grid;grid-template-columns: repeat(3, auto);\">\r\n              <div *ngFor=\"let icon of icons\" style=\"display:flex; align-items: center;\" class=\"font-body-3 margin-bottom-2\">\r\n                <teta-icon [name]=\"icon\" [palette]=\"palette\"></teta-icon>\r\n                <span class=\"padding-left-4\">{{icon}}</span>\r\n              </div>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/icon/icons-list.ts": [
                {
                    "name": "coloredIconsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/icons-list.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'gisColor',\r\n  'gisInnerColor',\r\n  'gisSimpleColor',\r\n  'grpAddColor',\r\n  'grpColor',\r\n  'handbagAddColor',\r\n  'handbagColor',\r\n  'improveColor',\r\n  'lineColor',\r\n  'lineDashedColor',\r\n  'lineGradientColor',\r\n  'liquidAddColor',\r\n  'liquidSystemColor',\r\n  'lithotypeColor',\r\n  'mapColor',\r\n  'nktColor',\r\n  'opzAddColor',\r\n  'opzColor',\r\n  'sortDownColor',\r\n  'sortUpColor',\r\n  'sumAddColor',\r\n  'sumColor',\r\n  'wellAddColor',\r\n  'wellColor',\r\n  'wellConstructionColor',\r\n  'addColor',\r\n  'areasColor',\r\n  'barChart',\r\n  'barChart',\r\n  'calcColor',\r\n  'calendarColor',\r\n  'chartLineColor',\r\n  'chartLineDashed',\r\n  'chartLineGradientColor',\r\n  'clusterColor',\r\n  'coinColor',\r\n  'deleteColor',\r\n  'documentColor',\r\n  'favorite',\r\n  'filterColor',\r\n  'filterSortDownColor',\r\n  'filterSortUpColor',\r\n  'folderAddColor',\r\n  'folderColor',\r\n  'geomechColor',\r\n]"
                },
                {
                    "name": "iconsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/icon/icons-list.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'add',\r\n  'addArea',\r\n  'addCircle',\r\n  'addComment',\r\n  'arrowDown',\r\n  'arrowDownKey',\r\n  'arrowDownSmall',\r\n  'arrowLeft',\r\n  'arrowLeftKey',\r\n  'arrowLeftSmall',\r\n  'arrowRight',\r\n  'arrowRightKey',\r\n  'arrowRightSmall',\r\n  'arrowUp',\r\n  'arrowUpDownSmall',\r\n  'arrowUpKey',\r\n  'arrowUpSmall',\r\n  'autoSize',\r\n  'autoSizeAll',\r\n  'backspace',\r\n  'bullet',\r\n  'calc',\r\n  'calendar',\r\n  'camera',\r\n  'chart',\r\n  'checkCircle',\r\n  'clock',\r\n  'clockChange',\r\n  'closeBig',\r\n  'closeCircle',\r\n  'comment',\r\n  'copy',\r\n  'copySelected',\r\n  'cut',\r\n  'dash',\r\n  'delete',\r\n  'deleteSelected',\r\n  'document',\r\n  'documentAnalyze',\r\n  'dots',\r\n  'download',\r\n  'drop',\r\n  'edit',\r\n  'end',\r\n  'eye',\r\n  'fader',\r\n  'filter',\r\n  'filterSortDown',\r\n  'filterSortUp',\r\n  'flag',\r\n  'folder',\r\n  'fullScreen',\r\n  'gantt',\r\n  'gisMonochrome',\r\n  'handbag',\r\n  'info',\r\n  'isoline',\r\n  'lamp',\r\n  'layers',\r\n  'layersLines',\r\n  'link',\r\n  'list',\r\n  'lock',\r\n  'map',\r\n  'measurement',\r\n  'menu',\r\n  'minus',\r\n  'monitoringDepth',\r\n  'monitoringTime',\r\n  'moreHorizontal',\r\n  'moreVertical',\r\n  'multiCopy',\r\n  'newTemplate',\r\n  'noSignal',\r\n  'paste',\r\n  'pause',\r\n  'pc',\r\n  'pdf',\r\n  'pieChart',\r\n  'pin',\r\n  'play',\r\n  'playBackRight',\r\n  'playForwardRight',\r\n  'print',\r\n  'question',\r\n  'redo',\r\n  'rewBack',\r\n  'rewForward',\r\n  'ring',\r\n  'save',\r\n  'search',\r\n  'settings',\r\n  'signal',\r\n  'square',\r\n  'star',\r\n  'start',\r\n  'stop',\r\n  'sum',\r\n  'table',\r\n  'tabletGraph',\r\n  'templateDownload',\r\n  'templateSettings',\r\n  'templateUpload',\r\n  'tick',\r\n  'timeOut',\r\n  'tree',\r\n  'treeTurn',\r\n  'undo',\r\n  'unpin',\r\n  'update',\r\n  'upload',\r\n  'user',\r\n  'warning',\r\n  'well',\r\n  'wrench',\r\n  'xls',\r\n  'xyz',\r\n  'horizontal',\r\n  'vertical',\r\n  'srt',\r\n  'nolteAnalysis',\r\n  'miniFrac',\r\n  'hornerAnalysis',\r\n]"
                }
            ],
            "projects/components/src/component/chart/color-list.ts": [
                {
                    "name": "colorList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/color-list.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'rgb(99,114,255)',\r\n  'rgb(218,241,152)',\r\n  'rgb(231,153,70,1)',\r\n  'rgb(176,51,181)',\r\n  'rgb(245,111,97,1)',\r\n  'rgb(128,194,231,1)',\r\n  'rgb(50,135,85,1)',\r\n  'rgb(156,110,107,1)',\r\n  'rgb(236,189,138,1)',\r\n  'rgb(138,146,215,1)',\r\n  'rgb(49,149,89,1)',\r\n  'rgb(212,180,93,1)',\r\n  'rgb(93,150,163,1)',\r\n  'rgb(212,104,93,1)',\r\n  'rgb(139,117,57,1)',\r\n  'rgb(127,217,162,1)',\r\n  'rgb(129,62,134,1)',\r\n  'rgb(192,157,154,1)',\r\n  'rgb(236,147,138,1)',\r\n  'rgb(79,169,115,1)',\r\n]"
                }
            ],
            "projects/components/src/component/property-grid/PropertyGrid.stories.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  new TableColumn({\r\n    name: 'name',\r\n    flex: 1,\r\n    locked: true,\r\n    filterType: FilterType.string,\r\n  }),\r\n  new TableColumn({\r\n    name: 'date',\r\n    locked: true,\r\n    filterType: FilterType.date,\r\n  }),\r\n  new TableColumn({\r\n    name: 'value',\r\n    locked: true,\r\n    filterType: FilterType.number,\r\n  }),\r\n  new TableColumn({\r\n    name: 'summary',\r\n    filterType: FilterType.number,\r\n  }),\r\n  new TableColumn({\r\n    name: 'ram',\r\n    caption: 'RAM',\r\n    filterType: FilterType.list,\r\n  }),\r\n  new TableColumn({\r\n    name: 'location',\r\n    columns: [\r\n      new TableColumn({\r\n        name: 'city',\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'state',\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'address',\r\n        flex: 2,\r\n        filterType: FilterType.string,\r\n      }),\r\n      new TableColumn({\r\n        name: 'zip',\r\n        filterType: FilterType.string,\r\n      }),\r\n    ],\r\n  }),\r\n]"
                },
                {
                    "name": "dict",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  filterOptions: [\r\n    { id: 8, name: 8 },\r\n    { id: 16, name: 16 },\r\n    { id: 32, name: 32 },\r\n    { id: 64, name: 64 },\r\n    { id: 128, name: 128 },\r\n  ],\r\n}"
                },
                {
                    "name": "item",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  name: `${faker.name.firstName()} ${faker.name.lastName()}`,\r\n  date: faker.date.between(new Date(2010, 0, 1), new Date(2021, 0, 1)),\r\n  value: faker.datatype.number({ min: 0, max: 100 }),\r\n  summary: faker.datatype.number({ min: 0, max: 100000 }),\r\n  ram: faker.helpers.randomize([8, 16, 32, 64, 128]),\r\n  address: faker.address.streetAddress(),\r\n  state: faker.address.state(),\r\n  city: faker.address.city(),\r\n  zip: faker.address.zipCode(),\r\n})"
                },
                {
                    "name": "simplePropertyGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [PropertyGridModule, IconModule],\r\n    entryComponents: [],\r\n  },\r\n  props: {\r\n    item: item(),\r\n    columns,\r\n    dict,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                  class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\r\n              <teta-property-grid [dataItem]=\"item\"\r\n                          [dict]=\"dict\"\r\n                          [columns]=\"columns\">\r\n              </teta-property-grid>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/chart/Chart.stories.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "defaultValue": "new ChartOptions({\r\n  name: '123',\r\n  zoom: { enable: true },\r\n  xAxis: [\r\n    new AxisOptions({\r\n      type: 'number',\r\n      plotBands,\r\n    }),\r\n  ],\r\n  yAxis: [new AxisOptions()],\r\n  series,\r\n})"
                },
                {
                    "name": "line",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ChartModule, IconModule],\r\n  },\r\n  props: {\r\n    config,\r\n  },\r\n  template: `<div style=\"height: 100vh\" [tetaIconSprite]=\"['assets/icons.svg', 'assets/lithotype-icons.svg']\" >\r\n  <teta-chart [config]=\"config\"></teta-chart>\r\n</div>`,\r\n})"
                },
                {
                    "name": "plotBands",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  new PlotBand({\r\n    id: 0,\r\n    from: 10,\r\n    to: 12,\r\n    color: 'green',\r\n    opacity: 0.2,\r\n  }),\r\n  new PlotBand({\r\n    id: 1,\r\n    from: 20,\r\n    to: 25,\r\n    color: 'red',\r\n    image: 'patternintersect',\r\n    opacity: 0.3,\r\n  }),\r\n]"
                },
                {
                    "name": "series",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series[]",
                    "defaultValue": "seriesType.map(\r\n  (type: SeriesType, index: number) => {\r\n    return new Series<BasePoint>({\r\n      id: index,\r\n      type,\r\n      name: type.toString(),\r\n      color: colorList[index],\r\n\r\n      data: Array.from(Array(50).keys()).map((key, index) => {\r\n        const num = faker.datatype.number({ min: 0, max: 100 });\r\n        return {\r\n          x: key,\r\n          y: num > 50 && num < 60 ? null : num,\r\n          marker: {\r\n            draggable: true,\r\n            dragType: DragPointType.y,\r\n            style: {\r\n              radius: 5,\r\n              color: 'steelblue',\r\n            },\r\n          },\r\n        };\r\n      }),\r\n    });\r\n  }\r\n)"
                },
                {
                    "name": "seriesType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[SeriesType.line, SeriesType.line]"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/chart/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/components/src/component/date-picker/date-picker/date-picker.component.ts": [
                {
                    "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DatePickerComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/date-picker/DatePicker.stories.ts": [
                {
                    "name": "datePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: new Date(),\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<div>{{date}}</div>\r\n              <teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"date = $event; log('date', $event)\"></teta-date-picker>`,\r\n})"
                },
                {
                    "name": "dateTimePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: null,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<div>{{date}}</div>\r\n              <teta-date-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [showTime]=\"true\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"date = $event;log('date', $event)\"></teta-date-picker>`,\r\n})"
                }
            ],
            "projects/components/src/component/date-picker/day-select/day-select.component.ts": [
                {
                    "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DaySelectComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/chart/src/chart/default/default-chart-config.ts": [
                {
                    "name": "defaultChartConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/default/default-chart-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartConfig",
                    "defaultValue": "{\r\n  series: [],\r\n  xAxis: [{\r\n    visible: true\r\n  }],\r\n  yAxis: [{\r\n    visible: true\r\n  }],\r\n  gridLines: true\r\n}"
                }
            ],
            "projects/components/src/component/chart/drawer/default-drawer-mapping.ts": [
                {
                    "name": "defaultDrawerMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<SeriesType, IDrawer<BasePoint>>()\r\n  .set(SeriesType.area, new AreaDrawer())\r\n  .set(SeriesType.bar, new BarDrawer())\r\n  .set(SeriesType.line, new LineDrawer())\r\n  .set(SeriesType.pie, new PieDrawer())\r\n  .set(SeriesType.scatter, new ScatterDrawer())\r\n  .set(SeriesType.spline, new SplineDrawer())\r\n  .set(SeriesType.contour, new ContourDrawer())"
                }
            ],
            "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts": [
                {
                    "name": "defaultLegendDrawerMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<LegendType, ILegendDrawer>()\r\n  .set(LegendType.swatches, new SwatchDrawer())\r\n  .set(LegendType.gradient, new GradientDrawer())"
                }
            ],
            "projects/components/src/directive/drag-sort/DragSort.stories.ts": [
                {
                    "name": "dragSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DragSortModule],\r\n  },\r\n  props: {\r\n    items: [\r\n      {\r\n        id: 0,\r\n        name: 0,\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 2,\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 3,\r\n      },\r\n    ],\r\n    update: (event: DragSortEvent<any>, list: any[]) => {\r\n      return ArrayUtil.moveItem(list, event.previousIndex, event.newIndex);\r\n    },\r\n  },\r\n  template: `<div tetaDragSortContainer\r\n                  (dragSorted)=\"items = update($event, items)\"\r\n                  [dragSortList]=\"items\"\r\n                  class=\"padding-10 margin-10 row row_auto border border-text-5\">\r\n              <div [tetaDragSortItem]=\"item\"\r\n                    *ngFor=\"let item of items\"\r\n                    class=\"padding-4 border border-text-10\">\r\n                {{item.name}}\r\n              </div>\r\n            </div>\r\n            <div tetaDragSortContainer\r\n                  (dragSorted)=\"items = update($event, items)\"\r\n                  [dragSortList]=\"items\"\r\n                  class=\"padding-10 margin-10 column row_auto border border-text-5\">\r\n              <div [tetaDragSortItem]=\"item\"\r\n                    [dragSortDirection]=\"'vertical'\"\r\n                    *ngFor=\"let item of items\"\r\n                    class=\"padding-4 border border-text-10\">\r\n                {{item.name}}\r\n              </div>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/filter/contarct/filter-component-map.ts": [
                {
                    "name": "filterComponentsMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<FilterType, Type<any>>",
                    "defaultValue": "new Map<\r\n  FilterType,\r\n  Type<any>\r\n>()\r\n  .set(FilterType.number, NumericFilterComponent)\r\n  .set(FilterType.date, DateFilterComponent)\r\n  .set(FilterType.list, ListFilterComponent)\r\n  .set(FilterType.string, StringFilterComponent)\r\n  .set(FilterType.boolean, BooleanFilterComponent)\r\n  .set(FilterType.custom, StringFilterComponent)"
                },
                {
                    "name": "getFilterComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item: FilterItem): Type<any> =>\r\n  filterComponentsMap.has(item.filterType)\r\n    ? filterComponentsMap.get(item.filterType)\r\n    : StringFilterComponent"
                }
            ],
            "projects/components/src/pipe/util/number-helper.ts": [
                {
                    "name": "formatNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  value: any,\r\n  decimalLength: number,\r\n  chunkDelimiter: string,\r\n  decimalDelimiter: string,\r\n  chunkLength: number\r\n) => {\r\n  const abs = Math.abs(value);\r\n  if (0 < abs && 1 > abs) {\r\n    const firstDigitIndex = Math.floor(Math.abs(Math.log10(abs)));\r\n    decimalLength += firstDigitIndex;\r\n  }\r\n  const precision = Math.min(getPrecision(value), Math.floor(decimalLength));\r\n  const result =\r\n    '\\\\d(?=(\\\\d{' + chunkLength + '})+' + (precision > 0 ? '\\\\D' : '$') + ')';\r\n  const num = value.toFixed(precision);\r\n  return (decimalDelimiter ? num.replace('.', decimalDelimiter) : num).replace(\r\n    new RegExp(result, 'g'),\r\n    '$&' + chunkDelimiter\r\n  );\r\n}"
                },
                {
                    "name": "getPrecision",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: number) => {\r\n  if (!isFinite(a)) {\r\n    return 0;\r\n  }\r\n  let e = 1;\r\n  let p = 0;\r\n  while (Math.round(a * e) / e !== a) {\r\n    e *= 10;\r\n    p++;\r\n  }\r\n  return p;\r\n}"
                },
                {
                    "name": "prependZero",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/pipe/util/number-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(input: number, length: number) =>\r\n  ('0'.repeat(length) + input).slice(-length)"
                }
            ],
            "projects/components/src/directive/hint/Hint.stories.ts": [
                {
                    "name": "fromString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/hint/Hint.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [HintModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n    delay: number('delay', 0, {\r\n      max: 5000,\r\n      min: 0,\r\n      range: true,\r\n      step: 100,\r\n    }),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n              <button teta-button\r\n                     [palette]=\"'primary'\"\r\n                     [tetaHint]=\"'You can get it now, right?'\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [delay]=\"delay\"\r\n                     [className]=\"'one'\">\r\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                Hover me\r\n              </button>\r\n            </div>`,\r\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/hint/Hint.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [HintModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    test: 'AAAAA',\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n    delay: number('delay', 0, {\r\n      max: 5000,\r\n      min: 0,\r\n      range: true,\r\n      step: 100,\r\n    }),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n              <ng-template #hint>\r\n                <div>{{test}}</div>\r\n              </ng-template>\r\n              <button teta-button\r\n                     [palette]=\"'primary'\"\r\n                     [tetaHint]=\"hint\"\r\n                     [align]=\"align\"\r\n                     [verticalAlign]=\"verticalAlign\"\r\n                     [delay]=\"delay\"\r\n                     [className]=\"'one'\">\r\n                <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                Hover me\r\n              </button>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/directive/tooltip/Tooltip.stories.ts": [
                {
                    "name": "fromString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TooltipModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n                <button teta-button\r\n                         [palette]=\"'primary'\"\r\n                         [tetaTooltip]=\"'You can get it now, right?'\"\r\n                         [align]=\"align\"\r\n                         [verticalAlign]=\"verticalAlign\"\r\n                         [className]=\"'one'\">\r\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                  Click me\r\n                </button>\r\n              </div>`,\r\n})"
                },
                {
                    "name": "fromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [TooltipModule, ButtonModule, IconModule],\r\n    entryComponents: [PopupContentComponent],\r\n  },\r\n  props: {\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n      },\r\n      Align.center\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.top\r\n    ),\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"bg-panel-50 padding-10 margin-10\">\r\n                <ng-template #hint>\r\n                  From template\r\n                </ng-template>\r\n                <button teta-button\r\n                         [palette]=\"'primary'\"\r\n                         [tetaTooltip]=\"hint\"\r\n                         [align]=\"align\"\r\n                         [verticalAlign]=\"verticalAlign\"\r\n                         [className]=\"'one'\">\r\n                  <teta-icon [palette]=\"'background'\" [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon>\r\n                  Click me\r\n                </button>\r\n              </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/select/Select.stories.ts": [
                {
                    "name": "getOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(size) => {\r\n  const res = [];\r\n  for (let i = 0; i < size; i++) {\r\n    res.push({\r\n      id: i,\r\n      name: faker.address.city(),\r\n    });\r\n  }\r\n  return res;\r\n}"
                },
                {
                    "name": "multipleCustom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: select('icon', iconsList, null),\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 300px;\"\r\n                  [options]=\"options\"\r\n                  [multiple]=\"true\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [valueRef]=\"'id'\"\r\n                  [textRef]=\"'name'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n      <ng-template tetaSelectValue let-value>\r\n      <div class=\"row row_auto overflow-hidden\">\r\n        <div *ngFor=\"let item of value\" class=\"color-red-50\">\r\n          {{item?.name}},\r\n        </div>\r\n      </div>\r\n      </ng-template>\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
                },
                {
                    "name": "multipleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: select('icon', iconsList, null),\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 300px;\"\r\n                  [options]=\"options\"\r\n                  [multiple]=\"true\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [valueRef]=\"'id'\"\r\n                  [textRef]=\"'name'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n<!--      <ng-template tetaSelectValue let-value>-->\r\n<!--        {{value?.name}}-->\r\n<!--      </ng-template>-->\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
                },
                {
                    "name": "singleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SelectModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    icon: 'user',\r\n    options: getOptions(10),\r\n    align: select(\r\n      'align',\r\n      {\r\n        left: Align.left,\r\n        right: Align.right,\r\n        center: Align.center,\r\n        auto: Align.auto,\r\n        fitWidth: Align.fitWidth,\r\n      },\r\n      Align.fitWidth\r\n    ),\r\n    verticalAlign: select(\r\n      'verticalAlign',\r\n      {\r\n        bottom: VerticalAlign.bottom,\r\n        top: VerticalAlign.top,\r\n        center: VerticalAlign.center,\r\n        auto: VerticalAlign.auto,\r\n      },\r\n      VerticalAlign.bottom\r\n    ),\r\n    autoClose: boolean('autoClose', true),\r\n    virtual: boolean('virtual', false),\r\n    autoCloseIgnore: optionsKnob(\r\n      'autoCloseIgnore',\r\n      {\r\n        esc: 'esc',\r\n        enter: 'enter',\r\n        inside: 'inside',\r\n        outside: 'outside',\r\n      },\r\n      ['inside'],\r\n      {\r\n        display: 'check',\r\n      }\r\n    ),\r\n    selected: null,\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-select  style=\"width: 200px;\"\r\n                  [options]=\"options\"\r\n                  [icon]=\"icon\"\r\n                  [align]=\"align\"\r\n                  [verticalAlign]=\"verticalAlign\"\r\n                  [ngModel]=\"selected\"\r\n                  (ngModelChange)=\"selected = $event\"\r\n                  [searchRef]=\"'name'\"\r\n                  [textRef]=\"'name'\"\r\n                  [virtual]=\"virtual\"\r\n                  [valueRef]=\"'id'\"\r\n                  [autoClose]=\"autoClose\"\r\n                  [autoCloseIgnore]=\"autoCloseIgnore\"\r\n                  [disabled]=\"false\">\r\n      <ng-template tetaSelectOption let-option>\r\n        {{option.name}}\r\n      </ng-template>\r\n      <ng-template tetaSelectValue let-value>\r\n        {{value?.name}}\r\n      </ng-template>\r\n    </teta-select>\r\n    <div class=\"margin-top-3\">\r\n      value: {{selected | json}}\r\n    </div>\r\n  </div>`,\r\n})"
                }
            ],
            "projects/chart/src/chart/core/utils/get-text-width.ts": [
                {
                    "name": "getTextWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/chart/src/chart/core/utils/get-text-width.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  inputText?: string | number | null,\r\n  backupRatio = 0.5,\r\n  fontSize = 11\r\n): number => {\r\n  let text = inputText ?? '';\r\n  text = text.toString();\r\n\r\n  return fontSize * backupRatio * text.length;\r\n}"
                }
            ],
            "projects/components/src/component/delimiter/Delimiter.stories.ts": [
                {
                    "name": "horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DelimiterModule, ButtonModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <button teta-button [palette]=\"'primary'\">\r\n      <teta-icon [name]=\"'settings'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'add'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'horizontal'\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'delete'\"></teta-icon>\r\n    </button>\r\n  </div>`,\r\n})"
                },
                {
                    "name": "vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DelimiterModule, ButtonModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50 row\" style=\"position: absolute; top: 50%;\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <button teta-button [palette]=\"'primary'\">\r\n      <teta-icon [name]=\"'settings'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'primary'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'add'\"></teta-icon>\r\n    </button>\r\n    <teta-delimiter [direction]=\"'vertical'\" class=\"height-4\"></teta-delimiter>\r\n    <button teta-button [palette]=\"'red'\" [view]=\"'ghost'\">\r\n      <teta-icon [name]=\"'delete'\"></teta-icon>\r\n    </button>\r\n  </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/resize-panel/Resize.stories.ts": [
                {
                    "name": "horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ResizePanelModule],\r\n  },\r\n  props: {\r\n    maxSize: number('maxSize', 500, {\r\n      min: 300,\r\n      max: 450,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    minSize: number('minSize', 50, {\r\n      min: 50,\r\n      max: 150,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    grabPosition: select('grabPosition', ['left', 'right'], 'left'),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <div class=\"row bg-white-50\"\r\n                      style=\"width: 500px; height: 500px;\">\r\n                  <div class=\"column_6 bg-primary-5\">\r\n                    I will surrender\r\n                  </div>\r\n                  <teta-resize-panel\r\n                        [maxSize]=\"maxSize\"\r\n                        [minSize]=\"minSize\"\r\n                        [direction]=\"'vertical'\"\r\n                        [grabPosition]=\"grabPosition\"\r\n                        class=\"column_6 bg-red-5\">\r\n                    I will resize\r\n                  </teta-resize-panel>\r\n                </div>\r\n              </div>`,\r\n})"
                },
                {
                    "name": "vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/resize-panel/Resize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ResizePanelModule],\r\n  },\r\n  props: {\r\n    maxSize: number('maxSize', 500, {\r\n      min: 300,\r\n      max: 450,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    minSize: number('minSize', 50, {\r\n      min: 50,\r\n      max: 150,\r\n      range: true,\r\n      step: 10,\r\n    }),\r\n    grabPosition: select('grabPosition', ['top', 'bottom'], 'top'),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <div class=\"column bg-white-50\"\r\n                      style=\"width: 500px; height: 500px;\">\r\n                  <div class=\"row_6 bg-primary-5\">\r\n                    I will surrender\r\n                  </div>\r\n                  <teta-resize-panel\r\n                        [maxSize]=\"maxSize\"\r\n                        [minSize]=\"minSize\"\r\n                        [direction]=\"'horizontal'\"\r\n                        [grabPosition]=\"grabPosition\"\r\n                        class=\"row_6 bg-red-5\">\r\n                    I will resize\r\n                  </teta-resize-panel>\r\n                </div>\r\n              </div>`,\r\n})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/components/src/component/message/Message.stories.ts": [
                {
                    "name": "messageSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/message/Message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MessageSamplesModule]\r\n  },\r\n  template: `<teta-message-sample></teta-message-sample>`,\r\n})"
                }
            ],
            "projects/components/src/component/date-picker/month-picker/month-picker.component.ts": [
                {
                    "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MonthPickerComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/date-picker/MonthPicker.stories.ts": [
                {
                    "name": "monthPicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [DatePickerModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    date: new Date(),\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n    getDate: (num) => new Date(num),\r\n  },\r\n  template: `<teta-month-picker [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                                [ngModel]=\"date\"\r\n                                (ngModelChange)=\"log('date', $event)\"></teta-month-picker>`,\r\n})"
                }
            ],
            "projects/components/src/component/tabs/tab/tab.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/tabs/tab/tab.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/directive/only-number/OnlyNumber.stories.ts": [
                {
                    "name": "onlyNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [OnlyNumberModule, FormsModule],\r\n  },\r\n  props: {\r\n    data: 123,\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\">\r\n                <input tetaOnlyNumber\r\n                        class=\"input\"\r\n                        [ngModel]=\"data\"\r\n                        (ngModelChange)=\"data=$event;log('tetaOnlyNumber', $event)\"/>\r\n                <div>{{data}}</div>\r\n              </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/pager/Pager.stories.ts": [
                {
                    "name": "pagerSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/pager/Pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [PagerModule, IconModule]\r\n  },\r\n  template: `<teta-pager [tetaIconSprite]=\"'assets/icons.svg'\"></teta-pager>`,\r\n})"
                }
            ],
            "projects/components/src/component/expand-panel/ExpandPanel.stories.ts": [
                {
                    "name": "panel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ExpandPanelModule],\r\n  },\r\n  template: `<div [tetaIconSprite]=\"'assets/icons.svg'\" class=\"font-body-3 padding-3\">\r\n    <teta-expand-panel></teta-expand-panel>\r\n  </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/chart/chart-data.ts": [
                {
                    "name": "points1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/chart-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    x: 1619169153454,\r\n    y: 0,\r\n  },\r\n  {\r\n    x: 1619268153454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619286153454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619289969454,\r\n    y: 40,\r\n  },\r\n  {\r\n    x: 1619308689454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619319705454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619321505454,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619326289854,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619328575854,\r\n    y: 170,\r\n  },\r\n  {\r\n    x: 1619394095854,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619419169854,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619443124693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619462996693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619465300693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619467100693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619476532693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619481338693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619486144693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619495576693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619499176693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619500976693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619510408693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619512208693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619515088693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619529488693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619543888693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619556920693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619560520693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619562320693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619570960693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619581760693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619594360693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619597960693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619633744693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619637560693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619641160693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619649296693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619706896693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619836496693,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619843142293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619861142293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619862942293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619872050293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619878170293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619891130293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619896062293,\r\n    y: 625,\r\n  },\r\n  {\r\n    x: 1619977659893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1619998179893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620016503893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620042405893,\r\n    y: 965,\r\n  },\r\n  {\r\n    x: 1620222405893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620233043893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620245049893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620253491893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620257559893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620259359893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620277521893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620279321893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620281571893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620282291893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620296691893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620314691893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620317661893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620318381893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620320181893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620340143893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620345543893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620346083893,\r\n    y: 1115,\r\n  },\r\n  {\r\n    x: 1620510003893,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620547674861,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620577339377,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620624661377,\r\n    y: 1798,\r\n  },\r\n  {\r\n    x: 1620743221377,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620767892345,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620783002022,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620827498022,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620832406934,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620834206934,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620870112737,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620875021649,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620876821649,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620912176488,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620924795843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620926595843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620940995843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1620953775843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621117359843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621128159843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621133559843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621135359843,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621170355172,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621175893185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621177693185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621213045185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621221445185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621223245185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621234045185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621235125185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621245325185,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621332870640,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621334776066,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621339254466,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621353013666,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1621410613666,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623114330638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623157530638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623175530638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623177330638,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623253831799,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623260653799,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623266371114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623288223114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623306943114,\r\n    y: 2292,\r\n  },\r\n  {\r\n    x: 1623371023114,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623377485049,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623392414081,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623398156016,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623409205789,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623411005789,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623446425144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623460825144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623489625144,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623525044499,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623547488370,\r\n    y: 2470,\r\n  },\r\n  {\r\n    x: 1623606888370,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623611053531,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623626130950,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623629576111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623638576111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623640376111,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623657746735,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623665133195,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623666933195,\r\n    y: 2800,\r\n  },\r\n  {\r\n    x: 1623769533195,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623786840292,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623811246744,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623827833841,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623833965487,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623835765487,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623864987401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623873807401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623875607401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623921939401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623939939401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623941739401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1623954963401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624010025401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624027521401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624034478401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624050191401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624062755401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624075193401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624087205401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624090805401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624142681401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624171481401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624196681401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624218641401,\r\n    y: 3370,\r\n  },\r\n  {\r\n    x: 1624229801401,\r\n    y: 3370,\r\n  },\r\n]"
                },
                {
                    "name": "points2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/chart/chart-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    x: 1618206576000,\r\n    y: 1257,\r\n  },\r\n  {\r\n    x: 1619073682000,\r\n    y: 1582,\r\n  },\r\n  {\r\n    x: 1619284687000,\r\n    y: 1751,\r\n  },\r\n]"
                }
            ],
            "projects/components/src/component/radio/Radio.stories.ts": [
                {
                    "name": "radioButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/radio/Radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [RadioModule, FormsModule, IconModule],\r\n  },\r\n  template: `<div class=\"padding-4 bg-panel-50\" [tetaIconSprite]=\"'assets/icons.svg'\">\r\n    <teta-radio [(ngModel)]=\"aaa\">\r\n      <teta-radio-button [value]=\"1\">1</teta-radio-button>\r\n      <teta-radio-button [value]=\"2\">2</teta-radio-button>\r\n      <teta-radio-button [value]=\"3\" [disabled]=\"true\">4</teta-radio-button>\r\n    </teta-radio>\r\n  </div>`,\r\n})"
                }
            ],
            "projects/components/src/directive/loader/Loader.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/directive/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [LoaderModule]\r\n  },\r\n  props: {\r\n    show: boolean('show', true)\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-10 margin-10\" [tetaLoader]=\"show\">\r\n                \r\n              </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/progress-bar/ProgressBar.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ProgressBarModule, FormsModule],\r\n    entryComponents: [],\r\n  },\r\n  props: {\r\n    min: number('min', 0),\r\n    max: number('max', 100),\r\n    value: number('value', 50),\r\n    step: number('step', 0),\r\n  },\r\n  template: `<div class=\"bg-panel-50 padding-3\" style=\"display: flex; width: 900px; height: 600px;\">\r\n              <teta-progress-bar [min]=\"min\" [max]=\"max\" [step]=\"step\" [(ngModel)]=\"value\"></teta-progress-bar>\r\n            </div>`,\r\n})"
                }
            ],
            "projects/components/src/component/toggle/Toggle.stories.ts": [
                {
                    "name": "sample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toggle/Toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [ToggleModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    text: text('text', 'Remember me'),\r\n    value: false,\r\n    setValue: (value) => {\r\n      action('log')(value);\r\n    },\r\n  },\r\n  template: `<teta-toggle [tetaIconSprite]=\"'assets/icons.svg'\"\r\n              [ngModel]=\"value\"\r\n              (ngModelChange)=\"setValue($event)\">\r\n              {{text}}\r\n            </teta-toggle>`,\r\n})"
                }
            ],
            "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts": [
                {
                    "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ProgressBarComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/switch/switch/switch.component.ts": [
                {
                    "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/switch/switch/switch.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => SwitchComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/switch/Switch.stories.ts": [
                {
                    "name": "switchSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [SwitchModule, IconModule, FormsModule],\r\n  },\r\n  props: {\r\n    model: 'item 1',\r\n    palette: select('palette', ['primary', 'grey', 'red', 'white'], 'grey'),\r\n    values: ['item 1', 'item 2', 'item 3'],\r\n    log: (name, value) => {\r\n      action(name)(value);\r\n    },\r\n  },\r\n  template: `<teta-switch [tetaIconSprite]=\"'assets/icons.svg'\"\r\n                          [ngModel]=\"model\"\r\n                          (ngModelChange)=\"log('switch', $event)\">\r\n  <teta-switch-button *ngFor=\"let val of values\" [value]=\"val\">\r\n    <teta-icon [name]=\"'settings'\" class=\"margin-right-2\"></teta-icon> {{val}}\r\n  </teta-switch-button>\r\n</teta-switch>`,\r\n})"
                }
            ],
            "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts": [
                {
                    "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => TimePartControlComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "projects/components/src/component/toggle/toggle/toggle.component.ts": [
                {
                    "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleComponent),\r\n  multi: true,\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/components/src/component/table/enum/aggregation-type.enum.ts": [
                {
                    "name": "AggregationType",
                    "childs": [
                        {
                            "name": "none",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "avg",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/aggregation-type.enum.ts"
                }
            ],
            "projects/components/src/common/enum/align.enum.ts": [
                {
                    "name": "Align",
                    "childs": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "center",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "auto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fitWidth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minWidth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/align.enum.ts"
                }
            ],
            "projects/chart/src/chart/model/enum/axis-orientation.ts": [
                {
                    "name": "AxisOrientation",
                    "childs": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/chart/src/chart/model/enum/axis-orientation.ts"
                }
            ],
            "projects/chart/src/chart/model/axis-type.ts": [
                {
                    "name": "AxisType",
                    "childs": [
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "log",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/chart/src/chart/model/axis-type.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/axis-type.ts": [
                {
                    "name": "AxisType",
                    "childs": [
                        {
                            "name": "abscissa",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ordinatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/axis-type.ts"
                }
            ],
            "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts": [
                {
                    "name": "DatePickerMode",
                    "childs": [
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/date-picker/model/date-picker-mode.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/dispatch-type.ts": [
                {
                    "name": "DispatchType",
                    "childs": [
                        {
                            "name": "moveLine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "moveLine"
                        },
                        {
                            "name": "movePoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "movePoint"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/dispatch-type.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/drag-point-type.ts": [
                {
                    "name": "DragPointType",
                    "childs": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "xy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/drag-point-type.ts"
                }
            ],
            "projects/components/src/component/table/enum/edit-event.enum.ts": [
                {
                    "name": "EditEvent",
                    "childs": [
                        {
                            "name": "click",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "focus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "doubleClick",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/edit-event.enum.ts"
                }
            ],
            "projects/components/src/component/table/enum/edit-type.enum.ts": [
                {
                    "name": "EditType",
                    "childs": [
                        {
                            "name": "cell",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/edit-type.enum.ts"
                }
            ],
            "projects/components/src/component/filter/enum/filter-type.enum.ts": [
                {
                    "name": "FilterType",
                    "childs": [
                        {
                            "name": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/filter-type.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/legend-type.ts": [
                {
                    "name": "LegendType",
                    "childs": [
                        {
                            "name": "swatches",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gradient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/legend-type.ts"
                }
            ],
            "projects/components/src/component/filter/enum/list-filter-type.enum.ts": [
                {
                    "name": "ListFilterType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Excluded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/list-filter-type.enum.ts"
                }
            ],
            "projects/components/src/component/modal/model/modal-close-reason.enum.ts": [
                {
                    "name": "ModalCloseReason",
                    "childs": [
                        {
                            "name": "resolve",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "backdrop",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "esc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/modal/model/modal-close-reason.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/scale.ts": [
                {
                    "name": "Scale",
                    "childs": [
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "time"
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "category"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/scale.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/scale-type.ts": [
                {
                    "name": "ScaleType",
                    "childs": [
                        {
                            "name": "linear",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "log",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sqrt",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/scale-type.ts"
                }
            ],
            "projects/components/src/component/table/enum/select-type.enum.ts": [
                {
                    "name": "SelectType",
                    "childs": [
                        {
                            "name": "none",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "single",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/table/enum/select-type.enum.ts"
                }
            ],
            "projects/chart/src/chart/model/series-type.ts": [
                {
                    "name": "SeriesType",
                    "childs": [
                        {
                            "name": "line",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/chart/src/chart/model/series-type.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/series-type.ts": [
                {
                    "name": "SeriesType",
                    "childs": [
                        {
                            "name": "area",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "line",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pie",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scatter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spline",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contour",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "custom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/series-type.ts"
                }
            ],
            "projects/components/src/component/sidebar/sidebar-position.enum.ts": [
                {
                    "name": "SidebarPosition",
                    "childs": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/sidebar/sidebar-position.enum.ts"
                }
            ],
            "projects/components/src/component/filter/enum/string-filter-type.enum.ts": [
                {
                    "name": "StringFilterType",
                    "childs": [
                        {
                            "name": "Equals",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "StartsWith",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "EndsWith",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "Contains",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/filter/enum/string-filter-type.enum.ts"
                }
            ],
            "projects/components/src/common/enum/teta-size.enum.ts": [
                {
                    "name": "TetaSize",
                    "childs": [
                        {
                            "name": "XS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "S",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "M",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "L",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "XL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/teta-size.enum.ts"
                }
            ],
            "projects/components/src/common/enum/vertical-align.enum.ts": [
                {
                    "name": "VerticalAlign",
                    "childs": [
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "center",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "auto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/common/enum/vertical-align.enum.ts"
                }
            ],
            "projects/components/src/component/chart/model/enum/zoom-type.ts": [
                {
                    "name": "ZoomType",
                    "childs": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "xy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/components/src/component/chart/model/enum/zoom-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/components/src/component/chart/model/annotation.ts": [
                {
                    "name": "AnnotationTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/components/src/component/chart/model/annotation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/components/src/common/contract/auto-close-ignore-case.ts": [
                {
                    "name": "AutoCloseIgnoreCase",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"esc\" | \"enter\" | \"inside\" | \"outside\"",
                    "file": "projects/components/src/common/contract/auto-close-ignore-case.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/radio/radio/radio.component.ts": [
                {
                    "name": "ButtonOrNullOrUndefined",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RadioButtonComponent | undefined | null",
                    "file": "projects/components/src/component/radio/radio/radio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/button/button/button.component.ts": [
                {
                    "name": "ButtonViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"outline\" | \"ghost\"",
                    "file": "projects/components/src/component/button/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/components/src/component/chart/core/chart.ts": [
                {
                    "name": "ChartSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/components/src/component/chart/core/chart.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/components/src/common/contract/constructor-type.ts": [
                {
                    "name": "Ctor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/components/src/common/contract/constructor-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicChart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cssColorNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "randomColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/axes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AxesService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/base/series-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/chart-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/gridlines/gridlines.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridlinesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/plotband/plotband.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlotbandComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/plotline/plotline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlotlineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/series-host/series-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/series/bar/bar-series.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarSeriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/series/line/line-series.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineSeriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/x-axis/x-axis.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "XAxisComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart-container/y-axis/y-axis.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YAxisComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/core/axis/axis.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Axis",
                "coveragePercent": 22,
                "coverageCount": "4/18",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/core/axis/builders/axis-size-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AxisSizeBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/core/axis/builders/extremes-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtremesBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/core/utils/get-text-width.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTextWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/default/default-chart-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/legend/legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/axis-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AxisOptions",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/base-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasePoint",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/i-builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/i-chart-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/i-pointer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPointer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/model/series.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/chart/scale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScaleService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/dynamic-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-dictionary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-id-name.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIdName",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-rect.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRect",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/i-tree-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITreeData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/contract/teta-content-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TetaContentRef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/click.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClickService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/dynamic-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DynamicComponentService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/service/overlay-container.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OverlayContainerService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/array-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArrayUtil",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/dom-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DomUtil",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/common/util/position-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PositionUtil",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicAccordion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AccordionContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-head/accordion-head.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionHeadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion-item/accordion-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/accordion/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/button/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/chart3d/chart3d.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Chart3dComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/base-3d-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Base3dPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/chart-3d-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Chart3dOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart-3d/model/series-3d.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series3d",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "line",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "plotBands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "series",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "seriesType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "points1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "points2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/color-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/core/axis-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Axis",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/core/chart.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TetaChart",
                "coveragePercent": 0,
                "coverageCount": "0/55",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/area-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AreaDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/bar-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BarDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/contour-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContourDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/default-drawer-mapping.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultDrawerMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/line-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LineDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/pie-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PieDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/scatter-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScatterDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/drawer/spline-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SplineDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/default-drawer-legend-mapping.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultLegendDrawerMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/gradient-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GradientDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SwatchDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/legend-drawer/swatch-drawer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "classTypeLegendMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/annotation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Annotation",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/annotation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "annotationMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/axis-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AxisOptions",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/chart-bounds.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartBounds",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drag-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDragEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer-legend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILegendDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer-legend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LegendDrawOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-drawer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/i-zoom-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IZoomEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/plot-band.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlotBand",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/plot-line.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlotLine",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/bar-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BarPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/base-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasePoint",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/contour-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContourPoint",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/marker-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MarkerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/point/scatter-point.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScatterPoint",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/series.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/chart/model/tooltip-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TooltipOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "binary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 15,
                "coverageCount": "4/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/checkbox/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "datePicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/DatePicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dateTimePicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/MonthPicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthPicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/60",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/date-picker/date-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_PICKER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DaySelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/day-select/day-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DAY_SELECT_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/date-period.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DatePeriod",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/day-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DayModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/model/picker-locale-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PickerLocaleModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-picker/month-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONTH_PICKER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/month-select/month-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/service/picker-locale.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PickerLocaleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/service/picker-touch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PickerTouchService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimePartControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/time-part-control/time-part-control.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME_PART_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/util/date-picker-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DatePickerUtil",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/date-picker/year-select/year-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YearSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/Delimiter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/delimiter/delimiter/delimiter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DelimiterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "alignMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-base.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownBase",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown-head.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownHeadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dropdown/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/dynamic-component/popup-content/popup-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/ExpandPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "panel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ExpandPanelContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel-head.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ExpandPanelHeadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/expand-panel/expand-panel/expand-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/File.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "area",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/file-item/file-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/file-upload/file-upload-area/file-upload-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/base/filter-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterBase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/base/filter-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/boolean-filter/boolean-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/boolean-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BooleanFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/date-filter-value.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateFilterValue",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/date-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterComponentsMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-component-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterItem",
                "coveragePercent": 87,
                "coverageCount": "14/16",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/filter-state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilterState",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/i-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/list-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/numeric-filter-value.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumericFilterValue",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/numeric-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumericFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/sort-param.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortParam",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/filter/contarct/string-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StringFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/date-filter/date-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/filter-host/filter-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/filter-panel/filter-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/list-filter/list-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/numeric-filter/numeric-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/filter/string-filter/string-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coloredIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon-sprite.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IconSpriteDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icons-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coloredIconsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/icon/icons-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reactiveForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/form-group-title/form-group-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormGroupTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/sample-input/sample-input/sample-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SampleInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/input/text-field/text-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/list/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/list/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interactiveList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/Message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "messageSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message-host/message-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message-samples/message-sample/message-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageSampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/message/model/message.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "alert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/Modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-container/modal-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/alert-sample/alert-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertSampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-example/modal-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-from-component/modal-from-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFromComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal-samples/modal-from-template/modal-from-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFromTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/current-modal.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CurrentModal",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/i-modal-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/modal/model/i-modal-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalResult",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/modal/model/modal-instance.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalInstance",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pagerSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/model/pager-state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagerState",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/pager/pager/pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/pager/util/pager-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagerUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/panel/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/progress-bar/progress-bar/progress-bar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SLIDER_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dict",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "item",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/PropertyGrid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simplePropertyGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/date-item-default/date-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/list-item-default/list-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/numeric-item-default/numeric-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/default/string-item-default/string-item-default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringItemDefaultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid-group/property-grid-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid-item/property-grid-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/property-grid/property-grid/property-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/Radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/radio/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 17,
                "coverageCount": "6/35",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/Resize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/resize-panel/resize-panel/resize-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResizePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleCustom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "singleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select-value.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectValueDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/select/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/sidebar/Sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/sidebar/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "switchSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch-button/switch-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SwitchService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/switch/switch/switch.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SWITCH_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "virtualTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/base/cell-component-base.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/base/detail-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DetailComponentBase",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/table/base/group-row-component-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GroupRowComponentBase",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/component/table/base/head-cell-component-base.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/cell-host/cell-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/cell/cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/cell-components-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellComponentsMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/cell-components-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/column-reorder-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnReorderEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/column-resize-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnResizeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-coordinates.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellCoordinates",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/i-cell-value.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/sort-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-column-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColumnStore",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-column.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColumn",
                "coveragePercent": 94,
                "coverageCount": "34/36",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-context-menu-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableContextMenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/contract/table-row.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/boolean-cell/boolean-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/date-cell/date-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/date-time-cell/date-time-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateTimeCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/default-head-cell/default-head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultHeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/group-row/group-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupRowComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/table/default/list-cell/list-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/numeric-cell/numeric-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumericCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/default/string-cell/string-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell-dropdown/head-cell-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell-host/head-cell-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/head-cell/head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/selection-cell/selection-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/selection-head-cell/selection-head-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionHeadCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/service/table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableService",
                "coveragePercent": 0,
                "coverageCount": "0/100",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-body/table-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-demo/table-demo/table-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-head-group/table-head-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeadGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table-head/table-head.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/85",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/util/state-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateUtil",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/table/util/table-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableUtil",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab-title.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/tabs/tab/tab.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tabs/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/component/tabs/tabs/tabs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITabChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/theme-switch/theme-switch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeSwitchService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/theme-switch/theme-switch/theme-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/Toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 10,
                "coverageCount": "2/19",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toggle/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOGGLE_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicToolbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/Toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "treeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/toolbar/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/Tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/Tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "treeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree-item-toggle/tree-item-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeItemToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree-item/tree-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeItemComponent",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/component/tree/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/click-outside/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/context-menu/ContextMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicContextMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/context-menu/context-menu.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContextMenuDirective",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/disable-control/disable-control.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DisableControlDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/DragSort.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dragSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-container.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragSortContainerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DragSortEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/drag-sort/drag-sort-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragSortItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/dynamic-content-base.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicContentBaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/highlight/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/Hint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/Hint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/hint/hint.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HintDirective",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/loader/loader.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LoaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/no-autofill/no-autofill.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NoAutofillDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/only-number/OnlyNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/only-number/only-number.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OnlyNumberDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/resize-drag/resize-drag.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResizeDragDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/teta-template/teta-template.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TetaTemplateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/directive/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/number-pipe/number.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/prepend-zero/prepend-zero.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PrependZeroPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPrecision",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/pipe/util/number-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prependZero",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/util/date-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtil",
                "coveragePercent": 31,
                "coverageCount": "6/19",
                "status": "medium"
            },
            {
                "filePath": "projects/components/src/util/forms-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormsUtil",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/util/string-util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StringUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}